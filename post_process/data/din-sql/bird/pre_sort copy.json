{
    "0": "SELECT MAX((T1.Free Meal Count (K-12) / T1.Enrollment (K-12)) * 100) AS Highest_Eligible_Free_RateFROM frpm AS T1INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCodeWHERE T1.County Name = 'Alameda'\t----- bird -----\tcalifornia_schools",
    "1": "SELECT frpm.School Name, (frpm.Free Meal Count (Ages 5-17) / frpm.Enrollment (Ages 5-17)) AS Eligible_Free_RateFROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCodeWHERE frpm.School Type = 'Continuation'ORDER BY Eligible_Free_Rate ASCLIMIT 3\t----- bird -----\tcalifornia_schools",
    "2": "SELECT S.Zip FROM frpm AS F INNER JOIN schools AS S ON F.CDSCode = S.CDSCode WHERE F.Charter School (Y/N) = 1 AND F.County Name = 'Fresno County Office of Education'\t----- bird -----\tcalifornia_schools",
    "3": "SELECT S.MailStreet FROM schools AS S INNER JOIN frpm AS F ON S.CDSCode = F.CDSCode WHERE F.FRPM Count (K-12) = (SELECT MAX(FRPM Count (K-12)) FROM frpm) This query correctly retrieves the unabbreviated mailing address of the school with the highest FRPM count for K-12 students.\t----- bird -----\tcalifornia_schools",
    "4": "SELECT schools.Phone FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.Charter School (Y/N) = 1 AND schools.OpenDate > '2000-01-01'\t----- bird -----\tcalifornia_schools",
    "5": "SELECT COUNT(*) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath < 400 AND T2.Virtual = 'F'\t----- bird -----\tcalifornia_schools",
    "6": "SELECT S.School Name, S.District Name, S.County NameFROM satscores AS T1INNER JOIN frpm AS S ON T1.cds = S.CDSCodeWHERE T1.NumTstTakr > 500 AND S.Magnet = 1 This query now correctly references the appropriate columns from the `frpm` table for the school names, district names, and county names.\t----- bird -----\tcalifornia_schools",
    "7": "SELECT s.Phone FROM satscores AS ss INNER JOIN schools AS s ON ss.cds = s.CDSCode WHERE ss.NumGE1500 > 0 ORDER BY ss.NumTstTakr DESC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "8": "SELECT SUM(NumTstTakr) FROM satscores WHERE cds IN (SELECT CDSCode FROM frpm WHERE FRPM Count (K-12) = (SELECT MAX(FRPM Count (K-12)) FROM frpm))\t----- bird -----\tcalifornia_schools",
    "9": "SELECT COUNT(*) FROM satscores AS S INNER JOIN schools AS Sch ON S.cds = Sch.CDSCode INNER JOIN frpm AS F ON Sch.CDSCode = F.CDSCode WHERE S.AvgScrMath > 560 AND F.Charter Funding Type = 'Directly funded'\t----- bird -----\tcalifornia_schools",
    "10": "SELECT FRPM Count (Ages 5-17) FROM frpm WHERE CDSCode = (SELECT cds FROM satscores WHERE AvgScrRead = (SELECT MAX(AvgScrRead) FROM satscores))\t----- bird -----\tcalifornia_schools",
    "11": "SELECT CDSCode FROM frpm WHERE (Enrollment (K-12) + Enrollment (Ages 5-17)) > 500;\t----- bird -----\tcalifornia_schools",
    "12": "SELECT MAX(frpm.Percent (%) Eligible Free (Ages 5-17))FROM satscoresJOIN frpm ON satscores.cds = frpm.CDSCodeJOIN schools ON frpm.CDSCode = schools.CDSCodeWHERE (satscores.NumGE1500 * 1.0 / satscores.NumTstTakr) > 0.3\t----- bird -----\tcalifornia_schools",
    "13": "SELECT S.Phone FROM ( SELECT cds, (NumGE1500 * 1.0 / NumTstTakr) AS ExcellenceRate FROM satscores WHERE NumTstTakr > 0  -- To avoid division by zero) AS T JOIN schools AS S ON T.cds = S.CDSCode ORDER BY T.ExcellenceRate DESC LIMIT 3\t----- bird -----\tcalifornia_schools",
    "14": "SELECT T2.NCESSchool, T1.Enrollment (Ages 5-17) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.Enrollment (Ages 5-17) DESC LIMIT 5 This query now provides the NCES school identification number along with the enrollment numbers, which can be useful for understanding the results.\t----- bird -----\tcalifornia_schools",
    "15": "SELECT T1.District AS District, AVG(T2.AvgScrRead) AS AverageReadingScoreFROM schools AS T1INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cdsWHERE T1.StatusType = 'Active'GROUP BY T1.DistrictORDER BY AverageReadingScore DESCLIMIT 1\t----- bird -----\tcalifornia_schools",
    "16": "SELECT COUNT(*) FROM satscores AS S INNER JOIN schools AS Sch ON S.cds = Sch.CDSCode WHERE Sch.StatusType = 'Merged' AND Sch.County = 'Alameda' AND S.NumTstTakr < 100\t----- bird -----\tcalifornia_schools",
    "17": "SELECT frpm.Charter School NumberFROM satscoresINNER JOIN schools ON satscores.cds = schools.CDSCodeINNER JOIN frpm ON frpm.CDSCode = schools.CDSCodeWHERE satscores.AvgScrWrite = 499\t----- bird -----\tcalifornia_schools",
    "18": "SELECT COUNT(*) FROM satscores AS S INNER JOIN frpm AS F ON S.cds = F.CDSCode INNER JOIN schools AS Sch ON F.CDSCode = Sch.CDSCode WHERE F.County_Name = 'Contra Costa' AND Sch.FundingType = 'Directly funded' AND S.NumTstTakr <= 250\t----- bird -----\tcalifornia_schools",
    "19": "SELECT S.Phone FROM satscores AS SS INNER JOIN schools AS S ON SS.cds = S.CDSCode WHERE SS.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)\t----- bird -----\tcalifornia_schools",
    "20": "SELECT COUNT(*) FROM frpm WHERE County Name = 'Amador' AND Low Grade = '9' AND High Grade = '12'\t----- bird -----\tcalifornia_schools",
    "21": "SELECT COUNT(*) FROM frpm AS F INNER JOIN schools AS S ON F.CDSCode = S.CDSCode WHERE F.County Name = 'Los Angeles' AND F.Free Meal Count (K-12) > 500 AND F.FRPM Count (K-12) < 700\t----- bird -----\tcalifornia_schools",
    "22": "SELECT T1.sname, T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Contra Costa' ORDER BY T1.NumTstTakr DESC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "23": "SELECT frpm.School Name, schools.Street, schools.City, schools.Zip, schools.StateFROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCodeWHERE ABS(frpm.Enrollment (K-12) - frpm.Enrollment (Ages 5-17)) > 30\t----- bird -----\tcalifornia_schools",
    "24": "SELECT s.School FROM frpm AS f JOIN schools AS s ON f.CDSCode = s.CDSCode JOIN satscores AS ss ON ss.cds = s.CDSCode WHERE f.Percent (%) Eligible Free (K-12) > 0.1 AND ss.NumGE1500 >= 1\t----- bird -----\tcalifornia_schools",
    "25": "SELECT S.School, S.FundingTypeFROM schools AS SJOIN satscores AS SS ON S.CDSCode = SS.cdsWHERE S.County = 'Riverside'GROUP BY S.SchoolHAVING AVG(SS.AvgScrMath) > 400\t----- bird -----\tcalifornia_schools",
    "26": "SELECT s.School AS School_Name, s.Street || ', ' || s.City || ', ' || s.Zip || ', ' || s.State AS Full_Communication_AddressFROM frpm AS fINNER JOIN schools AS s ON f.CDSCode = s.CDSCodeWHERE f.School_Type = 'High Schools (Public)' AND f.FRPM_Count_Ages_5_17 > 800 AND s.County = 'Monterey' So the final corrected SQL query is:SELECT s.School AS School_Name, s.Street || ', ' || s.City || ', ' || s.Zip || ', ' || s.State AS Full_Communication_AddressFROM frpm AS fINNER JOIN schools AS s ON f.CDSCode = s.CDSCodeWHERE f.School Type = 'High Schools (Public)' AND f.FRPM Count (Ages 5-17) > 800 AND s.County = 'Monterey'\t----- bird -----\tcalifornia_schools",
    "27": "SELECT s.School AS school_name, sa.AvgScrWrite AS avg_write_score, s.Phone AS communication_numberFROM satscores AS sa INNER JOIN schools AS s ON sa.cds = s.CDSCodeWHERE s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01'\t----- bird -----\tcalifornia_schools",
    "28": "SELECT s.School, s.DOCTypeFROM frpm AS fJOIN schools AS s ON f.CDSCode = s.CDSCodeWHERE f.FundingType = 'Locally funded' AND (f.Enrollment (K-12) - f.Enrollment (Ages 5-17)) > ( SELECT  AVG(f2.Enrollment (K-12) - f2.Enrollment (Ages 5-17)) FROM  frpm AS f2 WHERE  f2.FundingType = 'Locally funded' )\t----- bird -----\tcalifornia_schools",
    "29": "SELECT s.OpenDate FROM frpm AS f JOIN schools AS s ON f.CDSCode = s.CDSCode WHERE f.Low Grade = 'K' AND f.High Grade = '12' AND f.Enrollment (K-12) = (SELECT MAX(Enrollment (K-12)) FROM frpm WHERE Low Grade = 'K' AND High Grade = '12')\t----- bird -----\tcalifornia_schools",
    "30": "SELECT S.City, F.Enrollment (K-12)FROM frpm AS FINNER JOIN schools AS S ON F.CDSCode = S.CDSCodeORDER BY F.Enrollment (K-12) ASCLIMIT 5\t----- bird -----\tcalifornia_schools",
    "31": "SELECT Eligible_Free_RateFROM ( SELECT  Free Meal Count (K-12) / Enrollment (K-12) AS Eligible_Free_Rate FROM frpm ORDER BY Enrollment (K-12) DESC LIMIT 11) AS TopSchoolsORDER BY Eligible_Free_RateLIMIT 2 OFFSET 8;  -- OFFSET 8 to get the 10th and 11th records\t----- bird -----\tcalifornia_schools",
    "32": "SELECT T1.School Name, (T1.FRPM Count (K-12) / T1.Enrollment (K-12)) AS Eligible_Free_Reduced_Price_Meal_RateFROM frpm AS T1INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCodeWHERE T2.SOC = 66ORDER BY T1.FRPM Count (K-12) DESCLIMIT 5\t----- bird -----\tcalifornia_schools",
    "33": "SELECT T1.School Name, T2.Website FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Free Meal Count (Ages 5-17) BETWEEN 1900 AND 2000\t----- bird -----\tcalifornia_schools",
    "34": "SELECT (Free Meal Count (Ages 5-17) / Enrollment (Ages 5-17)) AS Free_RateFROM frpm WHERE CDSCode = (SELECT CDSCode FROM schools WHERE AdmFName1 = 'Kacey' AND AdmLName1 = 'Gibson')\t----- bird -----\tcalifornia_schools",
    "35": "SELECT AdmEmail1 FROM schools WHERE CDSCode = (SELECT CDSCode   FROM frpm   WHERE Charter School (Y/N) = 1   AND Enrollment (K-12) = (SELECT MIN(Enrollment (K-12)) FROM frpm WHERE Charter School (Y/N) = 1))\t----- bird -----\tcalifornia_schools",
    "36": "SELECT AdmFName1 || ' ' || AdmLName1 AS FullName FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores))\t----- bird -----\tcalifornia_schools",
    "37": "SELECT S.Street, S.City, S.Zip, S.State FROM satscores AS T JOIN schools AS S ON T.cds = S.CDSCode ORDER BY (T.NumGE1500 * 1.0 / T.NumTstTakr) ASC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "38": "SELECT T1.Website FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Los Angeles' AND T2.NumTstTakr BETWEEN 2000 AND 3000\t----- bird -----\tcalifornia_schools",
    "39": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.County = 'Fresno' AND T2.OpenDate BETWEEN '1980-01-01' AND '1980-12-31'\t----- bird -----\tcalifornia_schools",
    "40": "SELECT s.Phone FROM schools s JOIN satscores sa ON s.CDSCode = sa.cds WHERE s.District = 'Fresno Unified' ORDER BY sa.AvgScrRead ASC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "41": "SELECT T1.School Name AS SchoolName, T2.AvgScrRead AS AverageReadingScoreFROM schools AS T1INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cdsWHERE T1.Virtual = 'F'ORDER BY T2.AvgScrRead DESCLIMIT 5\t----- bird -----\tcalifornia_schools",
    "42": "SELECT schools.EdOpsName FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE satscores.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)This query correctly retrieves the type of education offered in the school that scored the highest average in Math.\t----- bird -----\tcalifornia_schools",
    "43": "SELECT T1.AvgScrMath, T2.CountyFROM satscores AS T1JOIN schools AS T2 ON T1.cds = T2.CDSCodeWHERE (T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite) = ( SELECT MIN(T3.AvgScrMath + T3.AvgScrRead + T3.AvgScrWrite) FROM satscores AS T3)\t----- bird -----\tcalifornia_schools",
    "44": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)\t----- bird -----\tcalifornia_schools",
    "45": "SELECT S.School, AVG(SA.AvgScrWrite) AS Average_Writing_ScoreFROM schools AS S INNER JOIN satscores AS SA ON S.CDSCode = SA.cds WHERE S.AdmFName1 = 'Ricci' AND S.AdmLName1 = 'Ulrich'GROUP BY S.School\t----- bird -----\tcalifornia_schools",
    "46": "SELECT T1.School, T2.Enrollment (K-12) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.DOC = '31' ORDER BY T2.Enrollment (K-12) DESC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "47": "SELECT COUNT(*) / 12.0 AS monthly_average_schools_openedFROM schoolsWHERE strftime('%Y', OpenDate) = '1980' AND County = 'Alameda' AND DOC = '52';\t----- bird -----\tcalifornia_schools",
    "48": "SELECT (SELECT COUNT(*) FROM schools WHERE DOC = 54 AND County = 'Orange') * 1.0 / (SELECT COUNT(*) FROM schools WHERE DOC = 52 AND County = 'Orange') AS ratio\t----- bird -----\tcalifornia_schools",
    "49": "SELECT School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1) AND StatusType = 'Closed';\t----- bird -----\tcalifornia_schools",
    "50": "SELECT s.School, s.Street FROM satscores AS ss JOIN schools AS s ON ss.cds = s.CDSCode WHERE ss.AvgScrMath = (SELECT AvgScrMath  FROM satscores  ORDER BY AvgScrMath DESC  LIMIT 1 OFFSET 5)\t----- bird -----\tcalifornia_schools",
    "51": "SELECT S.MailStreet, SA.sname FROM satscores AS SA INNER JOIN schools AS S ON SA.cds = S.CDSCode WHERE SA.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores)\t----- bird -----\tcalifornia_schools",
    "52": "SELECT COUNT(*) FROM satscores AS s INNER JOIN schools AS sch ON s.cds = sch.CDSCode WHERE (s.AvgScrRead + s.AvgScrMath + s.AvgScrWrite) >= 1500 AND sch.MailCity = 'Lakeport'\t----- bird -----\tcalifornia_schools",
    "53": "SELECT SUM(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'\t----- bird -----\tcalifornia_schools",
    "54": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'\t----- bird -----\tcalifornia_schools",
    "55": "SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') * 1.0 / (SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA') AS ratio\t----- bird -----\tcalifornia_schools",
    "56": "SELECT COUNT(*) FROM schools WHERE StatusType = 'Active' AND County = 'CA' AND District = 'San Joaquin';\t----- bird -----\tcalifornia_schools",
    "57": "SELECT s.Phone, s.Ext FROM schools s INNER JOIN satscores ss ON s.CDSCode = ss.cds WHERE ss.AvgScrWrite = ( SELECT AvgScrWrite FROM satscores ORDER BY AvgScrWrite DESC LIMIT 1 OFFSET 332)\t----- bird -----\tcalifornia_schools",
    "58": "SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704';\t----- bird -----\tcalifornia_schools",
    "59": "SELECT DISTINCT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez');\t----- bird -----\tcalifornia_schools",
    "60": "SELECT S.Website FROM schools AS S INNER JOIN frpm AS F ON S.CDSCode = F.CDSCode WHERE S.Virtual = 'P' AND S.Charter = 1 AND F.County Name = 'San Joaquin'\t----- bird -----\tcalifornia_schools",
    "61": "SELECT COUNT(*) FROM schools WHERE Charter = 1 AND City = 'Hickman' AND DOC = 52\t----- bird -----\tcalifornia_schools",
    "62": "SELECT COUNT(*) FROM frpm AS F INNER JOIN schools AS S ON F.CDSCode = S.CDSCode WHERE S.Charter = 0 AND S.County = 'Los Angeles' AND (F.Free Meal Count (K-12) * 100.0 / F.Enrollment (K-12)) < 0.18\t----- bird -----\tcalifornia_schools",
    "63": "SELECT s.AdmFName1 AS FirstName, s.AdmLName1 AS LastName, s.School AS SchoolName, s.City AS CityFROM schools AS sINNER JOIN frpm AS f ON s.CDSCode = f.CDSCodeWHERE s.Charter = 1 AND s.CharterNum = '00D2'\t----- bird -----\tcalifornia_schools",
    "64": "`SELECT COUNT(*) FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4';`\t----- bird -----\tcalifornia_schools",
    "65": "SELECT (COUNT(CASE WHEN s.FundingType = 'Locally funded' THEN 1 END) * 100.0 / COUNT(*)) AS ratio_percentageFROM frpm AS fJOIN schools AS s ON f.CDSCode = s.CDSCodeWHERE f.County Name = 'Santa Clara'Since the original query is already correct in terms of logic and structure, the final answer is:Final_SQL: SELECT (COUNT(CASE WHEN s.FundingType = 'Locally funded' THEN 1 END) * 100.0 / COUNT(*)) AS ratio_percentageFROM frpm AS fJOIN schools AS s ON f.CDSCode = s.CDSCodeWHERE f.County Name = 'Santa Clara' There are no issues with the original query, so it can be returned as is.\t----- bird -----\tcalifornia_schools",
    "66": "SELECT COUNT(*) FROM schools AS S INNER JOIN frpm AS F ON S.CDSCode = F.CDSCode WHERE F.FundingType = 'Directly Funded' AND F.County Name = 'Stanislaus' AND S.OpenDate BETWEEN '2000-01-01' AND '2005-12-31'\t----- bird -----\tcalifornia_schools",
    "67": "SELECT COUNT(*) AS Total_ClosureFROM frpm AS FINNER JOIN schools AS S ON F.CDSCode = S.CDSCodeWHERE F.Academic_Year = '1989' AND S.City = 'San Francisco' AND S.StatusType = 'Closed'\t----- bird -----\tcalifornia_schools",
    "68": "SELECT s.County, COUNT(*) AS ClosureCountFROM schools AS sWHERE s.StatusType = 'Closed'  AND s.SOC = 11  AND s.ClosedDate BETWEEN '1980-01-01' AND '1989-12-31'GROUP BY s.CountyORDER BY ClosureCount DESCLIMIT 1\t----- bird -----\tcalifornia_schools",
    "69": "`SELECT NCESDist FROM schools WHERE SOC = 31`\t----- bird -----\tcalifornia_schools",
    "70": "SELECT COUNT(*) FROM schools sJOIN frpm f ON s.CDSCode = f.CDSCodeWHERE s.County = 'Alpine' AND (s.StatusType = 'Active' OR s.StatusType = 'Closed') AND f.SOCType = 'District Community Day Schools'\t----- bird -----\tcalifornia_schools",
    "71": "SELECT frpm.District Code FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.Magnet = 0 AND schools.City = 'Fresno'However, since the `Magnet` column is in the `schools` table, we should reference it correctly. The final corrected SQL query is:Revised_SQL: SELECT frpm.District Code FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.Magnet = 0 AND schools.City = 'Fresno' This query now correctly references the `Magnet` column from the `schools` table and uses the correct column for filtering by city.\t----- bird -----\tcalifornia_schools",
    "72": "SELECT frpm.Enrollment (Ages 5-17)FROM frpmJOIN schools ON frpm.CDSCode = schools.CDSCodeWHERE schools.EdOpsCode = 'SSS'AND schools.City = 'Fremont'AND frpm.Academic Year = '2014-2015'\t----- bird -----\tcalifornia_schools",
    "73": "SELECT FRPM Count (Ages 5-17) FROM frpm WHERE CDSCode = (SELECT CDSCode   FROM schools   WHERE MailStreet = 'PO Box 1040' AND SOCType = 'Youth Authority Facilities (CEA)')\t----- bird -----\tcalifornia_schools",
    "74": "SELECT T1.Low Grade FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.EdOpsCode = 'SPECON' AND T1.NCESDist = '613360'\t----- bird -----\tcalifornia_schools",
    "75": "SELECT S.EILName, F.School FROM frpm AS F INNER JOIN schools AS S ON F.CDSCode = S.CDSCode WHERE F.NSLP Provision Status = '2' AND F.County Code = '37'\t----- bird -----\tcalifornia_schools",
    "76": "SELECT schools.City FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE frpm.NSLP Provision Status = 'Lunch Provision 2' AND frpm.Low Grade = '9' AND frpm.High Grade = '12' AND frpm.County Name = 'Merced' AND schools.EILCode = 'HS'\t----- bird -----\tcalifornia_schools",
    "77": "SELECT S.School AS School_Name, (F.Free Meal Count (Ages 5-17) / F.Enrollment (Ages 5-17) * 100) AS Percent_Eligible_FRPM_Ages_5_17FROM schools AS SJOIN frpm AS F ON S.CDSCode = F.CDSCodeWHERE F.Low Grade = 'K' AND F.High Grade = '9' AND F.County Name = 'Los Angeles'\t----- bird -----\tcalifornia_schools",
    "78": "SELECT GSserved, COUNT(*) as count FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY count DESC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "79": "SELECT County Name, COUNT(*) AS number_of_schools FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE Virtual = 'F' AND (County Name = 'San Diego' OR County Name = 'Santa Barbara') GROUP BY County Name ORDER BY number_of_schools DESC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "80": "SELECT School, Latitude FROM schools ORDER BY Latitude DESC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "81": "SELECT City, School, Low Grade FROM schools WHERE State = 'CA' ORDER BY Latitude ASC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "82": "`SELECT GSoffered FROM schools ORDER BY Longitude DESC LIMIT 1;`\t----- bird -----\tcalifornia_schools",
    "83": "SELECT City, COUNT(School) AS NumberOfSchoolsFROM schoolsWHERE Magnet = 1 AND GSoffered = 'K-8'GROUP BY City\t----- bird -----\tcalifornia_schools",
    "84": "SELECT AdmFName1, COUNT(*) as NameCountFROM schoolsGROUP BY AdmFName1ORDER BY NameCount DESCLIMIT 2 Note: The `District` column has been removed from the `SELECT` clause and the `GROUP BY` clause to correctly identify the two most common first names without separating them by district. If you want to include the district information, you would need to adjust the logic to handle that separately, perhaps by joining back to the `schools` table after identifying the most common names.\t----- bird -----\tcalifornia_schools",
    "85": "SELECT (T1.Free Meal Count (K-12) / T1.Enrollment (K-12)) * 100 AS Percent (%) Eligible Free (K-12), T1.District CodeFROM frpm AS T1INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCodeWHERE T2.AdmFName1 = 'Alusine'\t----- bird -----\tcalifornia_schools",
    "86": "SELECT T1.AdmLName1, T2.District, T2.County, T2.School FROM frpm AS T2 INNER JOIN schools AS T1 ON T1.CDSCode = T2.CDSCode WHERE T2.CharterNum = '40'\t----- bird -----\tcalifornia_schools",
    "87": "SELECT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = 62 OR DOC = 54)\t----- bird -----\tcalifornia_schools",
    "88": "SELECT T1.sname, T2.AdmEmail1 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)\t----- bird -----\tcalifornia_schools",
    "89": "SELECT COUNT(*) FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id WHERE A.frequency = 'POPLATEK PO OBRATU' AND D.A3 = 'East Bohemia'\t----- bird -----\tfinancial",
    "90": "SELECT COUNT(DISTINCT A.account_id) FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id INNER JOIN loan AS L ON A.account_id = L.account_id WHERE D.A3 = 'Prague'\t----- bird -----\tfinancial",
    "91": "SELECT CASE  WHEN AVG(A12) > AVG(A13) THEN '1995'  ELSE '1996' END AS higher_unemployment_yearFROM district\t----- bird -----\tfinancial",
    "92": "SELECT COUNT(*) FROM district WHERE A11 > 6000 AND A11 < 10000\t----- bird -----\tfinancial",
    "93": "SELECT COUNT(*) FROM client AS C INNER JOIN district AS D ON C.district_id = D.district_id WHERE C.gender = 'M' AND D.A3 = 'North Bohemia' AND D.A11 > 8000\t----- bird -----\tfinancial",
    "94": "SELECT account.account_id, (SELECT MAX(A11) FROM district) - (SELECT A11  FROM client  JOIN district ON client.district_id = district.district_id  WHERE client.gender = 'F'  ORDER BY client.birth_date ASC  LIMIT 1) AS salary_gapFROM account JOIN disp ON account.account_id = disp.account_id WHERE disp.client_id = (SELECT client_id  FROM client  WHERE gender = 'F'  ORDER BY birth_date ASC  LIMIT 1)\t----- bird -----\tfinancial",
    "95": "SELECT a.account_id FROM account AS aJOIN disp AS d ON a.account_id = d.account_idJOIN client AS c ON d.client_id = c.client_idJOIN district AS dist ON c.district_id = dist.district_idWHERE c.birth_date = (SELECT MIN(birth_date) FROM client)AND c.district_id = (SELECT district_id FROM district   WHERE A11 = (SELECT MAX(A11) FROM district))\t----- bird -----\tfinancial",
    "96": "SELECT COUNT(DISTINCT client.client_id) FROM client INNER JOIN disp ON disp.client_id = client.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER'\t----- bird -----\tfinancial",
    "97": "SELECT DISTINCT c.client_id FROM client AS c INNER JOIN disp AS d ON c.client_id = d.client_id INNER JOIN account AS a ON d.account_id = a.account_id INNER JOIN trans AS t ON a.account_id = t.account_id WHERE t.operation = 'POPLATEK PO OBRATU' AND d.type = 'DISPONENT'\t----- bird -----\tfinancial",
    "98": "SELECT a.account_id FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.amount = (SELECT MIN(amount) FROM loan WHERE date LIKE '1997%') AND a.frequency = 'POPLATEK TYDNE'AND l.date LIKE '1997%'\t----- bird -----\tfinancial",
    "99": "SELECT a.account_id, l.amount FROM loan AS l INNER JOIN account AS a ON l.account_id = a.account_id WHERE l.duration > 12 AND strftime('%Y', a.date) = '1993' AND l.amount = (SELECT MAX(amount)  FROM loan  WHERE duration > 12  AND account_id IN (SELECT account_id FROM account WHERE strftime('%Y', date) = '1993'))\t----- bird -----\tfinancial",
    "100": "SELECT COUNT(DISTINCT a.account_id) FROM account AS a JOIN disp AS d ON a.account_id = d.account_id JOIN client AS c ON d.client_id = c.client_id WHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND c.district_id = (SELECT district_id FROM district WHERE A2 = 'Slokolov')\t----- bird -----\tfinancial",
    "101": "SELECT A.account_id, MIN(T.date) AS earliest_dateFROM account AS AINNER JOIN trans AS T ON A.account_id = T.account_idWHERE T.date >= '1995-01-01' AND T.date < '1996-01-01'GROUP BY A.account_idORDER BY earliest_dateThis revised query selects the account IDs and their earliest transaction dates in 1995, grouping by account ID and ordering by the earliest date.\t----- bird -----\tfinancial",
    "102": "SELECT DISTINCT A.account_id FROM account AS A INNER JOIN order AS O ON A.account_id = O.account_id WHERE A.date < '1997-01-01' AND O.amount > 3000\t----- bird -----\tfinancial",
    "103": "SELECT T1.client_id FROM client AS T1 INNER JOIN card AS T2 ON T1.client_id = T2.client_id WHERE T2.issued = '1994-03-03'\t----- bird -----\tfinancial",
    "104": "SELECT A.date FROM trans AS T INNER JOIN account AS A ON T.account_id = A.account_id WHERE T.amount = 840 AND T.date = '1998-10-14'\t----- bird -----\tfinancial",
    "105": "SELECT A.district_id FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.date = '1994-08-25'\t----- bird -----\tfinancial",
    "106": "SELECT MAX(T3.amount) FROM trans AS T3 INNER JOIN account AS T2 ON T3.account_id = T2.account_id INNER JOIN disp AS T1 ON T2.account_id = T1.account_id INNER JOIN card AS T0 ON T1.client_id = T0.client_id WHERE T0.issued = '1996-10-21'\t----- bird -----\tfinancial",
    "107": "SELECT client.gender FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE account.district_id = (SELECT district_id FROM district WHERE A11 = (SELECT MAX(A11) FROM district) LIMIT 1)ORDER BY client.birth_date ASC LIMIT 1\t----- bird -----\tfinancial",
    "108": "SELECT amount FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE amount = (SELECT MAX(amount) FROM loan)) ORDER BY date ASC LIMIT 1\t----- bird -----\tfinancial",
    "109": "SELECT COUNT(*) FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN account AS A ON D.account_id = A.account_id INNER JOIN district AS D2 ON C.district_id = D2.district_id WHERE C.gender = 'F' AND D2.A2 = 'Jesenik'\t----- bird -----\tfinancial",
    "110": "SELECT disp.disp_id FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id WHERE trans.amount = 5100 AND trans.date = '1998-09-02'\t----- bird -----\tfinancial",
    "111": "SELECT COUNT(*) FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id WHERE D.A2 = 'Litomerice' AND strftime('%Y', A.date) = '1996'\t----- bird -----\tfinancial",
    "112": "SELECT D2.A2 FROM client AS C INNER JOIN disp AS D1 ON C.client_id = D1.client_id INNER JOIN account AS A ON D1.account_id = A.account_id INNER JOIN district AS D2 ON A.district_id = D2.district_id WHERE C.gender = 'F' AND C.birth_date = '1976-01-29'\t----- bird -----\tfinancial",
    "113": "SELECT c.birth_date FROM client AS c INNER JOIN account AS a ON c.district_id = a.district_id INNER JOIN loan AS l ON a.account_id = l.account_id WHERE l.amount = 98832 AND l.date = '1996-01-03'\t----- bird -----\tfinancial",
    "114": "SELECT A.account_id FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN account AS A ON D.account_id = A.account_id INNER JOIN district AS D2 ON C.district_id = D2.district_id WHERE D2.A3 = 'Prague' ORDER BY A.date LIMIT 1\t----- bird -----\tfinancial",
    "115": "SELECT (COUNT(CASE WHEN gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS male_percentageFROM client WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'south Bohemia' ORDER BY A4 DESC LIMIT 1)\t----- bird -----\tfinancial",
    "116": "SELECT ((balance_after - balance_before) / balance_before) * 100 AS increase_rateFROM ( SELECT  (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05') AND date = '1993-03-22') AS balance_before, (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05') AND date = '1998-12-27') AS balance_after) This SQL query is correct as is.\t----- bird -----\tfinancial",
    "117": "SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage FROM loan\t----- bird -----\tfinancial",
    "118": "SELECT (COUNT(DISTINCT loan.account_id) * 100.0 / COUNT(DISTINCT account.account_id)) AS percentageFROM loan JOIN account ON loan.account_id = account.account_idWHERE loan.status = 'C' AND loan.amount < 100000\t----- bird -----\tfinancial",
    "119": "SELECT A.account_id, D.A2 AS district_name, D.A3 AS district_regionFROM account AS AINNER JOIN district AS D ON A.district_id = D.district_idWHERE strftime('%Y', A.date) = '1993' AND A.frequency = 'POPLATEK PO OBRATU'\t----- bird -----\tfinancial",
    "120": "SELECT A.account_id, A.frequency FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id WHERE D.A2 = 'east Bohemia' AND A.date BETWEEN '1995-01-01' AND '2000-12-31'\t----- bird -----\tfinancial",
    "121": "SELECT A.account_id, A.date FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id WHERE D.A2 = 'Prachatice'\t----- bird -----\tfinancial",
    "122": "SELECT D.A2 AS district, D.A3 AS region FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id INNER JOIN district AS D ON A.district_id = D.district_id WHERE L.loan_id = 4990\t----- bird -----\tfinancial",
    "123": "SELECT A.account_id, D.A2 AS district, D.A3 AS region FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id INNER JOIN district AS D ON A.district_id = D.district_id WHERE L.amount > 300000\t----- bird -----\tfinancial",
    "124": "SELECT L.loan_id, D.A3 AS district, D.A11 AS average_salary FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id INNER JOIN district AS D ON A.district_id = D.district_id WHERE L.duration = 60\t----- bird -----\tfinancial",
    "125": "SELECT district.A2 AS district_name, ((district.A13 - district.A12) / district.A12) * 100 AS unemployment_increment_rateFROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'D'\t----- bird -----\tfinancial",
    "126": "SELECT CAST(COUNT(CASE WHEN D.A2 = 'Decin' THEN 1 END) AS REAL) * 100 / COUNT(*) AS percentageFROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id WHERE A.date LIKE '1993%'\t----- bird -----\tfinancial",
    "127": "`SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';`\t----- bird -----\tfinancial",
    "128": "SELECT T1.A2 AS district_name, COUNT(*) AS female_account_holdersFROM district AS T1INNER JOIN account AS T2 ON T1.district_id = T2.district_idINNER JOIN disp AS T3 ON T2.account_id = T3.account_idINNER JOIN client AS T4 ON T3.client_id = T4.client_idWHERE T4.gender = 'F'GROUP BY T1.A2ORDER BY female_account_holders DESCLIMIT 10\t----- bird -----\tfinancial",
    "129": "SELECT district.A2, SUM(trans.amount) AS total_withdrawalFROM transINNER JOIN account ON trans.account_id = account.account_idINNER JOIN district ON account.district_id = district.district_idWHERE trans.type = 'VYDAJ' AND trans.date LIKE '1996-01%'GROUP BY district.A2ORDER BY total_withdrawal DESCLIMIT 10\t----- bird -----\tfinancial",
    "130": "SELECT COUNT(*) FROM account AS A LEFT JOIN disp AS D ON A.account_id = D.account_id LEFT JOIN card AS C ON D.disp_id = C.disp_id LEFT JOIN client AS CL ON D.client_id = CL.client_id LEFT JOIN district AS DI ON CL.district_id = DI.district_id WHERE DI.A3 = 'South Bohemia' AND C.card_id IS NULL\t----- bird -----\tfinancial",
    "131": "SELECT district.A3, SUM(loan.amount) AS total_active_loanFROM loanJOIN account ON loan.account_id = account.account_idJOIN district ON account.district_id = district.district_idWHERE loan.status IN ('C', 'D')GROUP BY district.district_idORDER BY total_active_loan DESCLIMIT 1\t----- bird -----\tfinancial",
    "132": "SELECT AVG(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M'\t----- bird -----\tfinancial",
    "133": "SELECT A2, A13 FROM district WHERE A13 = (SELECT MAX(A13) FROM district WHERE A13 IS NOT NULL) AND A13 IS NOT NULL\t----- bird -----\tfinancial",
    "134": "SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district ORDER BY A16 DESC LIMIT 1)\t----- bird -----\tfinancial",
    "135": "SELECT COUNT(DISTINCT T2.account_id) FROM trans AS T1INNER JOIN account AS T2 ON T1.account_id = T2.account_idWHERE T1.operation = 'VYBER KARTOU' AND T1.balance < 0 AND T2.frequency = 'POPLATEK MESICNE'\t----- bird -----\tfinancial",
    "136": "SELECT COUNT(*) FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.date BETWEEN '1995-01-01' AND '1997-12-31' AND L.amount >= 250000 AND A.frequency = 'POPLATEK MESICNE'\t----- bird -----\tfinancial",
    "137": "SELECT COUNT(DISTINCT A.account_id) FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id INNER JOIN district AS D ON A.district_id = D.district_id WHERE D.district_id = 1 AND (L.status = 'C' OR L.status = 'D')\t----- bird -----\tfinancial",
    "138": "SELECT COUNT(client_id) FROM client WHERE gender = 'M' AND district_id = (SELECT district_id FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1)\t----- bird -----\tfinancial",
    "139": "SELECT COUNT(*) FROM card AS C INNER JOIN disp AS D ON C.disp_id = D.disp_id WHERE C.type = 'gold' AND D.type = 'DISPONENT'\t----- bird -----\tfinancial",
    "140": "SELECT COUNT(*) FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id WHERE D.A2 = 'Pisek'\t----- bird -----\tfinancial",
    "141": "SELECT DISTINCT D.A2 FROM trans AS T INNER JOIN account AS A ON T.account_id = A.account_id INNER JOIN district AS D ON A.district_id = D.district_id WHERE T.amount > 10000 AND T.date LIKE '1997%'\t----- bird -----\tfinancial",
    "142": "SELECT DISTINCT A.account_id FROM order O INNER JOIN account A ON O.account_id = A.account_id INNER JOIN district D ON A.district_id = D.district_id WHERE O.k_symbol = 'SIPO' AND D.A2 = 'Pisek'\t----- bird -----\tfinancial",
    "143": "SELECT account_id FROM card WHERE type = 'gold'INTERSECTSELECT account_id FROM card WHERE type = 'classic'This revised query checks for accounts that have both gold and classic credit cards, which are the valid types present in the schema.\t----- bird -----\tfinancial",
    "144": "SELECT AVG(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.type = 'VYBER KARTOU' AND strftime('%Y', T1.date) = '2021'\t----- bird -----\tfinancial",
    "145": "SELECT account_idFROM ( SELECT account_id, SUM(amount) AS total_spent FROM trans WHERE type = 'VYBER KARTOU' AND strftime('%Y', date) = '1998' GROUP BY account_id) AS spendingWHERE total_spent < (SELECT AVG(total_spent) FROM ( SELECT account_id, SUM(amount) AS total_spent FROM trans WHERE type = 'VYBER KARTOU' AND strftime('%Y', date) = '1998' GROUP BY account_id))\t----- bird -----\tfinancial",
    "146": "SELECT DISTINCT c.client_id FROM client AS cJOIN disp AS d ON c.client_id = d.client_idJOIN account AS a ON d.account_id = a.account_idJOIN card AS cd ON d.account_id = cd.account_idJOIN loan AS l ON a.account_id = l.account_idWHERE c.gender = 'F'\t----- bird -----\tfinancial",
    "147": "SELECT COUNT(DISTINCT A.account_id) FROM client AS C INNER JOIN district AS D ON C.district_id = D.district_id INNER JOIN disp AS DISP ON C.client_id = DISP.client_id INNER JOIN account AS A ON DISP.account_id = A.account_id WHERE C.gender = 'F' AND D.A3 = 'South Bohemia'\t----- bird -----\tfinancial",
    "148": "SELECT A.account_id FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id INNER JOIN disp AS DISP ON A.account_id = DISP.account_id WHERE D.A2 = 'Tabor' AND DISP.type = 'OWNER'\t----- bird -----\tfinancial",
    "149": "SELECT DISTINCT T1.type FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type != 'OWNER' AND T3.A11 > 8000 AND T3.A11 <= 9000\t----- bird -----\tfinancial",
    "150": "SELECT COUNT(DISTINCT A.account_id) FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id INNER JOIN trans AS T ON A.account_id = T.account_id WHERE D.A3 = 'North Bohemia' AND T.bank = 'AB'\t----- bird -----\tfinancial",
    "151": "SELECT DISTINCT D.A2 FROM district AS D INNER JOIN account AS A ON D.district_id = A.district_id INNER JOIN trans AS T ON A.account_id = T.account_id WHERE T.type = 'VYDAJ'\t----- bird -----\tfinancial",
    "152": "SELECT AVG(district.A15) FROM district JOIN client ON client.district_id = district.district_id JOIN disp ON disp.client_id = client.client_id JOIN account ON account.account_id = disp.account_id WHERE district.A15 > 4000 AND account.date >= '1997-01-01'\t----- bird -----\tfinancial",
    "153": "SELECT COUNT(DISTINCT C.card_id) FROM card AS C INNER JOIN disp AS D ON C.disp_id = D.disp_id INNER JOIN account AS A ON D.account_id = A.account_id INNER JOIN loan AS L ON A.account_id = L.account_id WHERE C.type = 'classic' AND D.type = 'OWNER'\t----- bird -----\tfinancial",
    "154": "SELECT COUNT(*) FROM client AS C INNER JOIN district AS D ON C.district_id = D.district_id WHERE C.gender = 'M' AND D.A2 = 'Hl.m. Praha'\t----- bird -----\tfinancial",
    "155": "SELECT CAST(SUM(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(card_id) AS percent_gold_cards FROM card\t----- bird -----\tfinancial",
    "156": "SELECT T1.client_id FROM disp AS T1 WHERE T1.account_id = (SELECT account_id FROM loan WHERE amount = (SELECT MAX(amount) FROM loan))\t----- bird -----\tfinancial",
    "157": "SELECT T2.A15 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.account_id = 532\t----- bird -----\tfinancial",
    "158": "SELECT A.district_id FROM order AS O INNER JOIN account AS A ON O.account_id = A.account_id WHERE O.order_id = 33333\t----- bird -----\tfinancial",
    "159": "SELECT T1.*FROM trans AS T1INNER JOIN disp AS T2 ON T1.account_id = T2.account_idWHERE T2.client_id = 3356 AND T1.operation = 'VYBER'\t----- bird -----\tfinancial",
    "160": "SELECT COUNT(*) FROM account AS A INNER JOIN loan AS L ON A.account_id = L.account_id WHERE A.frequency = 'POPLATEK MESICNE' AND L.amount < 200000\t----- bird -----\tfinancial",
    "161": "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 13539\t----- bird -----\tfinancial",
    "162": "SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541\t----- bird -----\tfinancial",
    "163": "SELECT district.A2 AS district_name, COUNT(account.account_id) AS account_countFROM loanINNER JOIN account ON loan.account_id = account.account_idINNER JOIN district ON account.district_id = district.district_idWHERE loan.status = 'A'GROUP BY district.district_idORDER BY account_count DESCLIMIT 1\t----- bird -----\tfinancial",
    "164": "SELECT T3.client_id FROM order AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T1.order_id = 32423\t----- bird -----\tfinancial",
    "165": "SELECT T1.* FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 5\t----- bird -----\tfinancial",
    "166": "SELECT COUNT(*) FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id WHERE D.A2 = 'Jesenik'\t----- bird -----\tfinancial",
    "167": "SELECT DISTINCT client.client_id FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'junior' AND card.issued >= '1997-01-01'\t----- bird -----\tfinancial",
    "168": "SELECT (SELECT COUNT(client_id) FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A11 > 10000) AND gender = 'F') * 100.0 / (SELECT COUNT(client_id) FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A11 > 10000)) AS female_percentage\t----- bird -----\tfinancial",
    "169": "SELECT CASE  WHEN SUM(CASE WHEN strftime('%Y', date) = '1996' THEN amount ELSE 0 END) = 0 THEN 0 ELSE ((SUM(CASE WHEN strftime('%Y', date) = '1997' THEN amount ELSE 0 END) -   SUM(CASE WHEN strftime('%Y', date) = '1996' THEN amount ELSE 0 END)) /   SUM(CASE WHEN strftime('%Y', date) = '1996' THEN amount ELSE 0 END)) * 100 END AS growth_rateFROM loanWHERE account_id IN ( SELECT account_id FROM account WHERE district_id IN ( SELECT district_id FROM client WHERE gender = 'M' )) AND strftime('%Y', date) IN ('1996', '1997')\t----- bird -----\tfinancial",
    "170": "SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';\t----- bird -----\tfinancial",
    "171": "SELECT (SELECT SUM(A16) FROM district WHERE A3 = 'North Bohemia') - (SELECT SUM(A16) FROM district WHERE A3 = 'East Bohemia') AS crime_difference\t----- bird -----\tfinancial",
    "172": "SELECT type, COUNT(*) AS count FROM disp WHERE account_id BETWEEN 1 AND 10 AND (type = 'OWNER' OR type = 'DISPONENT') GROUP BY type\t----- bird -----\tfinancial",
    "173": "SELECT COUNT(*) AS request_count, SUM(amount) AS total_amount, k_symbol FROM order WHERE account_id = 3 GROUP BY k_symbol\t----- bird -----\tfinancial",
    "174": "SELECT strftime('%Y', T1.birth_date) AS birth_yearFROM disp AS T1INNER JOIN client AS T2 ON T1.client_id = T2.client_idINNER JOIN account AS T3 ON T1.account_id = T3.account_idWHERE T3.account_id = 130  -- This will not return any results as account_id 130 does not exist.\t----- bird -----\tfinancial",
    "175": "SELECT COUNT(*) FROM account AS A INNER JOIN disp AS D ON A.account_id = D.account_id WHERE D.type = 'OWNER' AND A.frequency = 'POPLATEK MESICNE'This change ensures that the frequency condition matches the sample data provided in the `account` table.\t----- bird -----\tfinancial",
    "176": "SELECT amount, status FROM loan WHERE account_id = (SELECT account_id FROM disp WHERE client_id = 992) Since there are no issues, the final answer is the same as the provided SQL query.\t----- bird -----\tfinancial",
    "177": "SELECT SUM(T.amount) AS total_amount, C.gender FROM trans AS T INNER JOIN account AS A ON T.account_id = A.account_id INNER JOIN disp AS D ON A.account_id = D.account_id INNER JOIN client AS C ON D.client_id = C.client_id WHERE T.trans_id = 851 AND C.client_id = 4 GROUP BY C.gender\t----- bird -----\tfinancial",
    "178": "SELECT card.type FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE disp.client_id = 9\t----- bird -----\tfinancial",
    "179": "SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.client_id = 617 AND strftime('%Y', T3.date) = '1998'\t----- bird -----\tfinancial",
    "180": "SELECT C.client_id FROM client AS C INNER JOIN district AS D ON C.district_id = D.district_id WHERE C.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND D.A3 = 'East Bohemia'\t----- bird -----\tfinancial",
    "181": "SELECT c.client_id FROM client AS c JOIN disp AS d ON c.client_id = d.client_id JOIN account AS a ON d.account_id = a.account_id JOIN loan AS l ON a.account_id = l.account_id WHERE c.gender = 'F' ORDER BY l.amount DESC LIMIT 3\t----- bird -----\tfinancial",
    "182": "SELECT COUNT(DISTINCT c.client_id) FROM client AS cINNER JOIN disp AS d ON c.client_id = d.client_idINNER JOIN account AS a ON d.account_id = a.account_idINNER JOIN trans AS t ON a.account_id = t.account_idINNER JOIN order AS o ON a.account_id = o.account_idWHERE c.gender = 'M' AND c.birth_date BETWEEN '1974-01-01' AND '1976-12-31'AND o.k_symbol = 'SIPO'AND o.amount > 4000\t----- bird -----\tfinancial",
    "183": "SELECT COUNT(*) FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id WHERE D.A2 = 'Beroun' AND A.date > '1996-12-31'\t----- bird -----\tfinancial",
    "184": "SELECT COUNT(*) FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN card AS CA ON D.disp_id = CA.disp_id WHERE C.gender = 'F' AND CA.type = 'junior'\t----- bird -----\tfinancial",
    "185": "SELECT (COUNT(CASE WHEN client.gender = 'F' THEN 1 END) * 100.0 / COUNT(DISTINCT client.client_id)) AS female_percentageFROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id WHERE client.district_id = (SELECT district_id FROM district WHERE A3 = 'Prague')\t----- bird -----\tfinancial",
    "186": "SELECT CAST(COUNT(CASE WHEN C.gender = 'M' THEN 1 END) AS REAL) * 100 / COUNT(*) AS percentage_male_clientsFROM account AS A INNER JOIN disp AS D ON A.account_id = D.account_id INNER JOIN client AS C ON D.client_id = C.client_id WHERE A.frequency = 'POPLATEK TYDNE'\t----- bird -----\tfinancial",
    "187": "SELECT COUNT(DISTINCT disp.client_id) FROM disp INNER JOIN account ON disp.account_id = account.account_id WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'USER'\t----- bird -----\tfinancial",
    "188": "SELECT a.account_id, l.amountFROM loan AS lINNER JOIN account AS a ON l.account_id = a.account_idWHERE l.duration > 24 AND a.date < '1997-01-01'AND l.amount = (SELECT MIN(amount)  FROM loan AS l2  INNER JOIN account AS a2 ON l2.account_id = a2.account_id  WHERE l2.duration > 24 AND a2.date < '1997-01-01')\t----- bird -----\tfinancial",
    "189": "SELECT a.account_id FROM account AS a INNER JOIN disp AS d ON a.account_id = d.account_id INNER JOIN client AS c ON d.client_id = c.client_id INNER JOIN district AS dis ON c.district_id = dis.district_id WHERE c.gender = 'F' AND c.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') AND dis.A11 = (SELECT MIN(A11) FROM district WHERE district_id IN (SELECT district_id FROM client WHERE gender = 'F'))\t----- bird -----\tfinancial",
    "190": "SELECT COUNT(*) FROM client AS C INNER JOIN district AS D ON C.district_id = D.district_id WHERE C.birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND D.A3 = 'East Bohemia' This revised query is more efficient and clear in its intent.\t----- bird -----\tfinancial",
    "191": "SELECT COUNT(*) FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.duration = 24 AND A.frequency = 'POPLATEK TYDNE'\t----- bird -----\tfinancial",
    "192": "SELECT AVG(loan.amount) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN trans ON account.account_id = trans.account_id WHERE loan.status IN ('C', 'D')\t----- bird -----\tfinancial",
    "193": "SELECT C.client_id, C.district_id FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN account AS A ON D.account_id = A.account_id WHERE D.type = 'OWNER'\t----- bird -----\tfinancial",
    "194": "SELECT C.client_id, (strftime('%Y', 'now') - strftime('%Y', C.birth_date)) AS ageFROM card AS CAJOIN disp AS D ON CA.disp_id = D.disp_idJOIN account AS A ON D.account_id = A.account_idJOIN loan AS L ON A.account_id = L.account_idJOIN client AS C ON D.client_id = C.client_idWHERE CA.type = 'gold'\t----- bird -----\tfinancial",
    "195": "`SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1`\t----- bird -----\ttoxicology",
    "196": "SELECT COUNT(*) FROM atom AS A INNER JOIN molecule AS M ON A.molecule_id = M.molecule_id WHERE M.label = '-' AND A.element = 'cl'\t----- bird -----\ttoxicology",
    "197": "SELECT AVG(o_count) FROM ( SELECT COUNT(*) AS o_count FROM atom WHERE element = 'o' AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '-') GROUP BY molecule_id)\t----- bird -----\ttoxicology",
    "198": "SELECT COUNT(DISTINCT m.molecule_id) AS num_carcinogenic_molecules, COUNT(c.atom_id) AS total_single_bonds, (COUNT(c.atom_id) * 1.0 / COUNT(DISTINCT m.molecule_id)) AS average_single_bonds_per_carcinogenic_moleculeFROM molecule mJOIN bond b ON m.molecule_id = b.molecule_idJOIN connected c ON b.bond_id = c.bond_idWHERE m.label = '+' AND b.bond_type = '-'\t----- bird -----\ttoxicology",
    "199": "SELECT COUNT(*) FROM atom AS A INNER JOIN molecule AS M ON A.molecule_id = M.molecule_id WHERE A.element = 'na' AND M.label = '-'\t----- bird -----\ttoxicology",
    "200": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'\t----- bird -----\ttoxicology",
    "201": "SELECT CAST(SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) AS carbon_percentageFROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = ' = '\t----- bird -----\ttoxicology",
    "202": "SELECT COUNT(*) FROM bond WHERE bond_type = '#'\t----- bird -----\ttoxicology",
    "203": "`SELECT COUNT(*) FROM atom WHERE element != 'br';`\t----- bird -----\ttoxicology",
    "204": "SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';\t----- bird -----\ttoxicology",
    "205": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'si'\t----- bird -----\ttoxicology",
    "206": "SELECT T1.element FROM connected AS T0 INNER JOIN atom AS T1 ON T0.atom_id = T1.atom_id INNER JOIN atom AS T2 ON T0.atom_id2 = T2.atom_id WHERE T0.bond_id = 'TR004_8_9'\t----- bird -----\ttoxicology",
    "207": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T3.atom_id = T2.atom_id OR T3.atom_id = T2.atom_id2 WHERE T1.bond_type = '='\t----- bird -----\ttoxicology",
    "208": "SELECT molecule.labelFROM atomJOIN molecule ON atom.molecule_id = molecule.molecule_idWHERE atom.element = 'h'GROUP BY molecule.labelORDER BY COUNT(*) DESCLIMIT 1\t----- bird -----\ttoxicology",
    "209": "SELECT bond.bond_type FROM bond JOIN connected ON bond.bond_id = connected.bond_id WHERE connected.atom_id IN (SELECT atom_id FROM atom WHERE element = 'te') OR connected.atom_id2 IN (SELECT atom_id FROM atom WHERE element = 'te')\t----- bird -----\ttoxicology",
    "210": "SELECT A1.element AS atom1_element, A2.element AS atom2_elementFROM connected AS CINNER JOIN bond AS B ON C.bond_id = B.bond_idINNER JOIN atom AS A1 ON C.atom_id = A1.atom_idINNER JOIN atom AS A2 ON C.atom_id2 = A2.atom_idWHERE B.bond_type = '-'\t----- bird -----\ttoxicology",
    "211": "SELECT C.atom_id, C.atom_id2 FROM connected AS C INNER JOIN bond AS B ON C.bond_id = B.bond_id INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE M.label = '-'\t----- bird -----\ttoxicology",
    "212": "SELECT a.element FROM atom a INNER JOIN molecule m ON a.molecule_id = m.molecule_id WHERE m.label = '-' GROUP BY a.element ORDER BY COUNT(*) ASC LIMIT 1\t----- bird -----\ttoxicology",
    "213": "SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20'\t----- bird -----\ttoxicology",
    "214": "SELECT DISTINCT T1.label FROM molecule AS T1 WHERE T1.molecule_id NOT IN (SELECT T2.molecule_id FROM atom AS T2 WHERE T2.element = 'sn')\t----- bird -----\ttoxicology",
    "215": "SELECT COUNT(DISTINCT a.atom_id) FROM atom AS a JOIN connected AS c ON a.atom_id = c.atom_id JOIN bond AS b ON c.bond_id = b.bond_id JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE (a.element = 'i' OR a.element = 's') AND b.bond_type = '-'\t----- bird -----\ttoxicology",
    "216": "SELECT C.atom_id, C.atom_id2 FROM connected AS C INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.bond_type = '#'\t----- bird -----\ttoxicology",
    "217": "SELECT DISTINCT T2.atom_id, T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id INNER JOIN atom AS T3 ON T1.atom_id = T3.atom_id WHERE T3.molecule_id = 'TR181'\t----- bird -----\ttoxicology",
    "218": "SELECT (COUNT(DISTINCT m.molecule_id) -  (SELECT COUNT(DISTINCT m2.molecule_id)   FROM molecule m2   JOIN atom a ON m2.molecule_id = a.molecule_id   WHERE m2.label = '+' AND a.element = 'f')) * 100.0 / COUNT(DISTINCT m.molecule_id) AS percentage_not_containing_fluorineFROM molecule m WHERE m.label = '+'\t----- bird -----\ttoxicology",
    "219": "SELECT CAST(SUM(CASE WHEN M.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN B.bond_type = '#' THEN 1 END) AS percentFROM bond AS BINNER JOIN molecule AS M ON B.molecule_id = M.molecule_idWHERE B.bond_type = '#'\t----- bird -----\ttoxicology",
    "220": "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3\t----- bird -----\ttoxicology",
    "221": "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR001' AND T2.bond_id = 'TR001_2_6'\t----- bird -----\ttoxicology",
    "222": "SELECT (SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END)) AS difference FROM molecule\t----- bird -----\ttoxicology",
    "223": "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5'\t----- bird -----\ttoxicology",
    "224": "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2';\t----- bird -----\ttoxicology",
    "225": "SELECT DISTINCT T2.molecule_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' ORDER BY T2.molecule_id LIMIT 5\t----- bird -----\ttoxicology",
    "226": "SELECT (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) AS percent FROM bond WHERE molecule_id = 'TR008';\t----- bird -----\ttoxicology",
    "227": "SELECT (CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(molecule_id)) * 100 AS percentFROM molecule;\t----- bird -----\ttoxicology",
    "228": "SELECT (CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(atom_id)) * 100 AS percent FROM atom WHERE molecule_id = 'TR206';\t----- bird -----\ttoxicology",
    "229": "SELECT bond_type FROM bond WHERE molecule_id = 'TR000'\t----- bird -----\ttoxicology",
    "230": "SELECT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'\t----- bird -----\ttoxicology",
    "231": "SELECT T1.bond_type, T2.label FROM ( SELECT bond_type FROM ( SELECT bond_type, COUNT(bond_type) as bond_count  FROM bond  WHERE molecule_id = 'TR018'  GROUP BY bond_type ) AS bond_counts ORDER BY bond_count DESC LIMIT 1) AS T1JOIN molecule AS T2 ON T2.molecule_id = 'TR018' This query now correctly reflects the requirements of the question.\t----- bird -----\ttoxicology",
    "232": "SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T1.label = '-' AND T2.bond_type = '-' ORDER BY T1.molecule_id LIMIT 3\t----- bird -----\ttoxicology",
    "233": "SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2\t----- bird -----\ttoxicology",
    "234": "SELECT COUNT(*) FROM connected AS C INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE B.molecule_id = 'TR009' AND (C.atom_id = 'TR009_12' OR C.atom_id2 = 'TR009_12')\t----- bird -----\ttoxicology",
    "235": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'br'\t----- bird -----\ttoxicology",
    "236": "SELECT B.bond_type, C.atom_id, C.atom_id2 FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id WHERE B.bond_id = 'TR001_6_9'\t----- bird -----\ttoxicology",
    "237": "SELECT T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'\t----- bird -----\ttoxicology",
    "238": "SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'\t----- bird -----\ttoxicology",
    "239": "SELECT COUNT(*) AS connection_count FROM connected WHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19';\t----- bird -----\ttoxicology",
    "240": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR004'\t----- bird -----\ttoxicology",
    "241": "`SELECT COUNT(*) FROM molecule WHERE label = '-';`\t----- bird -----\ttoxicology",
    "242": "SELECT DISTINCT T2.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE CAST(SUBSTR(T1.atom_id, 7, 2) AS INTEGER) BETWEEN 21 AND 25 AND T2.label = '+'\t----- bird -----\ttoxicology",
    "243": "SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id INNER JOIN atom AS T4 ON T2.atom_id2 = T4.atom_id WHERE (T3.element = 'p' AND T4.element = 'n') OR (T3.element = 'n' AND T4.element = 'p')\t----- bird -----\ttoxicology",
    "244": "SELECT label FROM molecule WHERE molecule_id = ( SELECT molecule_id FROM bond WHERE bond_type = '=' GROUP BY molecule_id ORDER BY COUNT(bond_id) DESC LIMIT 1)\t----- bird -----\ttoxicology",
    "245": "SELECT COUNT(T2.bond_id) * 1.0 / COUNT(DISTINCT T1.atom_id) AS average_bondsFROM atom AS T1LEFT JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2WHERE T1.element = 'i'Since the original query is already correct in terms of logic and structure, the final answer remains the same as the original query. Final Answer: SELECT COUNT(T2.bond_id) * 1.0 / COUNT(DISTINCT T1.atom_id) AS average_bondsFROM atom AS T1LEFT JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2WHERE T1.element = 'i'\t----- bird -----\ttoxicology",
    "246": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T2.atom_id, 7, 2) + 0 = 45\t----- bird -----\ttoxicology",
    "247": "SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected UNION SELECT atom_id2 FROM connected)\t----- bird -----\ttoxicology",
    "248": "SELECT a1.element, a2.element FROM connected AS c JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE c.bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '#' AND molecule_id = 'TR447')\t----- bird -----\ttoxicology",
    "249": "SELECT element FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id = 'TR144_8_19' UNION SELECT atom_id2 FROM connected WHERE bond_id = 'TR144_8_19')\t----- bird -----\ttoxicology",
    "250": "SELECT T1.molecule_id, COUNT(T2.bond_id) AS double_bond_countFROM molecule AS T1INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_idWHERE T1.label = '+' AND T2.bond_type = '='GROUP BY T1.molecule_idORDER BY double_bond_count DESCLIMIT 1\t----- bird -----\ttoxicology",
    "251": "SELECT element FROM ( SELECT a.element, COUNT(*) AS element_count FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '+' GROUP BY a.element) AS counts ORDER BY element_count ASC LIMIT 1\t----- bird -----\ttoxicology",
    "252": "SELECT T2.* FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id WHERE T1.atom_id = (SELECT atom_id FROM atom WHERE element = 'pb')\t----- bird -----\ttoxicology",
    "253": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#'\t----- bird -----\ttoxicology",
    "254": "SELECT (COUNT(b.bond_id) * 100.0 / (SELECT COUNT(*) FROM bond)) AS percentageFROM bond bJOIN connected c ON b.bond_id = c.bond_idJOIN atom a1 ON c.atom_id = a1.atom_idJOIN atom a2 ON c.atom_id2 = a2.atom_idGROUP BY a1.element, a2.elementHAVING COUNT(b.bond_id) = ( SELECT MAX(counts.count) FROM ( SELECT COUNT(b.bond_id) AS count FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a1 ON c.atom_id = a1.atom_id JOIN atom a2 ON c.atom_id2 = a2.atom_id GROUP BY a1.element, a2.element ) AS counts )\t----- bird -----\ttoxicology",
    "255": "SELECT CAST(SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) AS FLOAT) / COUNT(b.bond_id) AS proportionFROM bond AS bJOIN molecule AS m ON b.molecule_id = m.molecule_idWHERE b.bond_type = '-'\t----- bird -----\ttoxicology",
    "256": "SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h');\t----- bird -----\ttoxicology",
    "257": "SELECT C.atom_id2 FROM connected AS C INNER JOIN atom AS A ON C.atom_id = A.atom_id WHERE A.element = 's'\t----- bird -----\ttoxicology",
    "258": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'sn'\t----- bird -----\ttoxicology",
    "259": "SELECT COUNT(DISTINCT a.element) FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE b.bond_type = '-'\t----- bird -----\ttoxicology",
    "260": "SELECT COUNT(a.atom_id) FROM atom AS a JOIN bond AS b ON a.molecule_id = b.molecule_id WHERE b.bond_type = '#' AND a.element IN ('p', 'br')\t----- bird -----\ttoxicology",
    "261": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'\t----- bird -----\ttoxicology",
    "262": "SELECT B.molecule_id FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '-' AND M.label = '-'\t----- bird -----\ttoxicology",
    "263": "SELECT (SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(a.atom_id)) AS percentFROM atom AS aJOIN molecule AS m ON a.molecule_id = m.molecule_idJOIN bond AS b ON b.molecule_id = m.molecule_idWHERE b.bond_type = '-'GROUP BY m.molecule_idThis query now correctly calculates the percentage of chlorine atoms among single bond molecules by grouping by `molecule_id`.\t----- bird -----\ttoxicology",
    "264": "SELECT molecule_id, label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');\t----- bird -----\ttoxicology",
    "265": "`SELECT molecule_id FROM molecule WHERE label = '-'`\t----- bird -----\ttoxicology",
    "266": "SELECT COUNT(*) AS total_carcinogenic_molecules FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030';\t----- bird -----\ttoxicology",
    "267": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'\t----- bird -----\ttoxicology",
    "268": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'\t----- bird -----\ttoxicology",
    "269": "SELECT COUNT(DISTINCT connected.bond_id) FROM connected WHERE connected.atom_id IN (SELECT atom_id FROM atom WHERE element = 'i')\t----- bird -----\ttoxicology",
    "270": "SELECT molecule.label, COUNT(molecule.label) AS count FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'ca' GROUP BY molecule.label ORDER BY count DESC LIMIT 1\t----- bird -----\ttoxicology",
    "271": "SELECT CASE  WHEN COUNT(DISTINCT a.element) = 2 THEN 'Yes'  ELSE 'No' END AS has_both_elementsFROM connected AS cJOIN atom AS a ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2WHERE c.bond_id = 'TR001_1_8' AND a.element IN ('cl', 'c')\t----- bird -----\ttoxicology",
    "272": "SELECT DISTINCT m.molecule_id FROM molecule AS mJOIN bond AS b ON m.molecule_id = b.molecule_idJOIN connected AS c ON b.bond_id = c.bond_idJOIN atom AS a1 ON c.atom_id = a1.atom_idJOIN atom AS a2 ON c.atom_id2 = a2.atom_idWHERE m.label = '-' AND b.bond_type = '#' AND (a1.element = 'c' OR a2.element = 'c')LIMIT 2\t----- bird -----\ttoxicology",
    "273": "SELECT (COUNT(CASE WHEN a.element = 'cl' THEN 1 END) * 100.0 / COUNT(a.atom_id)) AS percentageFROM atom AS aJOIN molecule AS m ON a.molecule_id = m.molecule_idWHERE m.label = '+'\t----- bird -----\ttoxicology",
    "274": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR001'\t----- bird -----\ttoxicology",
    "275": "SELECT bond.molecule_id FROM bond WHERE bond.bond_type = '='\t----- bird -----\ttoxicology",
    "276": "SELECT connected.atom_id, connected.atom_id2 FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#'\t----- bird -----\ttoxicology",
    "277": "SELECT a.element FROM connected AS c JOIN atom AS a ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE c.bond_id = 'TR005_16_26'\t----- bird -----\ttoxicology",
    "278": "SELECT COUNT(*) FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '-' AND M.label = '-'\t----- bird -----\ttoxicology",
    "279": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'\t----- bird -----\ttoxicology",
    "280": "SELECT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'\t----- bird -----\ttoxicology",
    "281": "SELECT a.element, COUNT(*) AS tallyFROM atom AS aJOIN molecule AS m ON a.molecule_id = m.molecule_idWHERE m.label = '+' AND a.atom_id = m.molecule_id || '_4'GROUP BY a.element\t----- bird -----\ttoxicology",
    "282": "SELECT (SELECT COUNT(*) FROM atom WHERE element = 'h' AND molecule_id = 'TR006') * 1.0 / (SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR006') AS hydrogen_ratio, m.labelFROM molecule mWHERE m.molecule_id = 'TR006'\t----- bird -----\ttoxicology",
    "283": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'\t----- bird -----\ttoxicology",
    "284": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'te'\t----- bird -----\ttoxicology",
    "285": "SELECT T1.element FROM bond AS T0 INNER JOIN connected AS T2 ON T0.bond_id = T2.bond_id INNER JOIN atom AS T1 ON T2.atom_id = T1.atom_id WHERE T0.bond_id = 'TR001_10_11'UNIONSELECT T1.element FROM bond AS T0 INNER JOIN connected AS T2 ON T0.bond_id = T2.bond_id INNER JOIN atom AS T1 ON T2.atom_id2 = T1.atom_id WHERE T0.bond_id = 'TR001_10_11' This query is correct as is.\t----- bird -----\ttoxicology",
    "286": "SELECT CAST(COUNT(DISTINCT b.molecule_id) AS REAL) * 100 / COUNT(DISTINCT m.molecule_id) AS percentage_triple_bondFROM bond AS b JOIN molecule AS m ON b.molecule_id = m.molecule_idWHERE b.bond_type = '#';\t----- bird -----\ttoxicology",
    "287": "SELECT CAST(SUM(CASE WHEN T1.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentFROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR047'\t----- bird -----\ttoxicology",
    "288": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR000_1'\t----- bird -----\ttoxicology",
    "289": "SELECT label FROM molecule WHERE molecule_id = 'TR151';\t----- bird -----\ttoxicology",
    "290": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR151'\t----- bird -----\ttoxicology",
    "291": "SELECT COUNT(*) FROM molecule WHERE label = '+'\t----- bird -----\ttoxicology",
    "292": "SELECT atom_id FROM atom WHERE element = 'c' AND molecule_id >= 'TR010' AND molecule_id <= 'TR050'\t----- bird -----\ttoxicology",
    "293": "SELECT COUNT(*) FROM atom AS A INNER JOIN molecule AS M ON A.molecule_id = M.molecule_id WHERE M.label = '+'\t----- bird -----\ttoxicology",
    "294": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'\t----- bird -----\ttoxicology",
    "295": "SELECT COUNT(*) FROM atom AS A INNER JOIN molecule AS M ON A.molecule_id = M.molecule_id WHERE A.element = 'h' AND M.label = '+'\t----- bird -----\ttoxicology",
    "296": "SELECT B.molecule_id FROM connected AS C INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE C.atom_id = 'TR000_1' AND B.bond_id = 'TR000_1_2'\t----- bird -----\ttoxicology",
    "297": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'\t----- bird -----\ttoxicology",
    "298": "SELECT (COUNT(DISTINCT CASE WHEN a.element = 'h' THEN m.molecule_id END) * 100.0) / COUNT(DISTINCT m.molecule_id) AS percentageFROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id WHERE m.label = '+'\t----- bird -----\ttoxicology",
    "299": "SELECT label FROM molecule WHERE molecule_id = 'TR124';\t----- bird -----\ttoxicology",
    "300": "SELECT atom_id, element FROM atom WHERE molecule_id = 'TR186'\t----- bird -----\ttoxicology",
    "301": "SELECT * FROM table\t----- bird -----\ttoxicology",
    "302": "SELECT element FROM atom WHERE atom_id IN (   SELECT atom_id FROM connected WHERE bond_id = 'TR001_2_4'   UNION   SELECT atom_id2 FROM connected WHERE bond_id = 'TR001_2_4'   )\t----- bird -----\ttoxicology",
    "303": "SELECT COUNT(T1.bond_id) AS double_bond_count, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000' AND T1.bond_type = '='This revised query will count the double bonds for the molecule with ID 'TR000' and check if it is carcinogenic.\t----- bird -----\ttoxicology",
    "304": "SELECT T1.molecule_id, T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'\t----- bird -----\ttoxicology",
    "305": "SELECT B.bond_id, B.bond_type, C.atom_id, C.atom_id2 FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id WHERE B.bond_type = '-'\t----- bird -----\ttoxicology",
    "306": "SELECT DISTINCT m.molecule_id, a.element FROM molecule AS m INNER JOIN bond AS b ON m.molecule_id = b.molecule_id INNER JOIN connected AS c ON b.bond_id = c.bond_id INNER JOIN atom AS a ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 WHERE b.bond_type = '#'\t----- bird -----\ttoxicology",
    "307": "SELECT T1.element AS atom1_element, T2.element AS atom2_elementFROM connected AS CINNER JOIN atom AS T1 ON C.atom_id = T1.atom_idINNER JOIN atom AS T2 ON C.atom_id2 = T2.atom_idWHERE C.bond_id = 'TR000_2_3'\t----- bird -----\ttoxicology",
    "308": "SELECT COUNT(DISTINCT C.bond_id) FROM connected AS C INNER JOIN atom AS A1 ON C.atom_id = A1.atom_id INNER JOIN atom AS A2 ON C.atom_id2 = A2.atom_id WHERE A1.element = 'cl' OR A2.element = 'cl'\t----- bird -----\ttoxicology",
    "309": "WITH bond_count AS ( SELECT COUNT(DISTINCT bond_type) AS bond_type_count FROM bond WHERE molecule_id = 'TR346')SELECT atom_id, (SELECT bond_type_count FROM bond_count) AS bond_type_count FROM atom WHERE molecule_id = 'TR346';\t----- bird -----\ttoxicology",
    "310": "SELECT COUNT(*) AS total_double_bond_molecules, COUNT(CASE WHEN T2.label = '+' THEN 1 END) AS carcinogenic_double_bond_moleculesFROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='\t----- bird -----\ttoxicology",
    "311": "SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m WHERE m.molecule_id NOT IN (SELECT DISTINCT molecule_id FROM atom WHERE element = 's') AND m.molecule_id NOT IN (SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '=')\t----- bird -----\ttoxicology",
    "312": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR000_2_4'Since the original query cannot be executed successfully due to the non-existent bond ID, it is necessary to correct the bond ID to one that exists in the database.\t----- bird -----\ttoxicology",
    "313": "`SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';`\t----- bird -----\ttoxicology",
    "314": "`SELECT COUNT(*) FROM bond WHERE bond_type = '-';`\t----- bird -----\ttoxicology",
    "315": "SELECT DISTINCT T2.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'\t----- bird -----\ttoxicology",
    "316": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'\t----- bird -----\ttoxicology",
    "317": "SELECT (COUNT(DISTINCT CASE WHEN a.element = 'cl' THEN m.molecule_id END) * 100.0 / COUNT(DISTINCT m.molecule_id)) AS percentageFROM molecule AS mJOIN atom AS a ON m.molecule_id = a.molecule_idWHERE m.label = '+'\t----- bird -----\ttoxicology",
    "318": "`SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';`\t----- bird -----\ttoxicology",
    "319": "SELECT COUNT(DISTINCT element) FROM atom WHERE atom_id IN ( SELECT atom_id FROM connected WHERE bond_id = 'TR001_3_4' UNION SELECT atom_id2 FROM connected WHERE bond_id = 'TR001_3_4')\t----- bird -----\ttoxicology",
    "320": "SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T1.atom_id2 = 'TR000_2'\t----- bird -----\ttoxicology",
    "321": "SELECT DISTINCT a1.molecule_id FROM atom AS a1 JOIN connected AS c ON a1.atom_id = c.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE a1.atom_id = 'TR000_2' AND a2.atom_id = 'TR000_4'\t----- bird -----\ttoxicology",
    "322": "SELECT element FROM atom WHERE atom_id = 'TR000_1';\t----- bird -----\ttoxicology",
    "323": "SELECT label FROM molecule WHERE molecule_id = 'TR000';\t----- bird -----\ttoxicology",
    "324": "SELECT CAST(SUM(CASE WHEN T1.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) AS percentageFROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id\t----- bird -----\ttoxicology",
    "325": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'n' AND T2.label = '+'\t----- bird -----\ttoxicology",
    "326": "SELECT m.molecule_id, m.label FROM molecule AS m WHERE m.molecule_id IN ( SELECT c.molecule_id FROM connected AS c INNER JOIN atom AS a1 ON c.atom_id = a1.atom_id INNER JOIN bond AS b ON c.bond_id = b.bond_id WHERE a1.element = 's' AND b.bond_type = ' = ')\t----- bird -----\ttoxicology",
    "327": "SELECT m.molecule_id FROM molecule AS m JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE m.label = '-' GROUP BY m.molecule_id HAVING COUNT(a.atom_id) > 5\t----- bird -----\ttoxicology",
    "328": "SELECT DISTINCT a.element FROM atom AS a JOIN connected AS c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond AS b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR024' AND b.bond_type = '='\t----- bird -----\ttoxicology",
    "329": "SELECT molecule_idFROM ( SELECT a.molecule_id, COUNT(a.atom_id) AS atom_count FROM atom AS a INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE m.label = '+' GROUP BY a.molecule_id) AS atom_countsORDER BY atom_count DESCLIMIT 1\t----- bird -----\ttoxicology",
    "330": "SELECT (SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT m.molecule_id) AS percentageFROM molecule mJOIN bond b ON m.molecule_id = b.molecule_idJOIN connected c ON b.bond_id = c.bond_idJOIN atom a1 ON c.atom_id = a1.atom_idJOIN atom a2 ON c.atom_id2 = a2.atom_idWHERE (a1.element = 'h' OR a2.element = 'h') AND b.bond_type = '#'\t----- bird -----\ttoxicology",
    "331": "`SELECT COUNT(*) FROM molecule WHERE label = '+';`\t----- bird -----\ttoxicology",
    "332": "SELECT COUNT(*) FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '-' AND M.molecule_id BETWEEN 'TR004' AND 'TR010'\t----- bird -----\ttoxicology",
    "333": "SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c';\t----- bird -----\ttoxicology",
    "334": "SELECT a.element FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id WHERE a.atom_id = 'TR004_7' AND m.label = '-'\t----- bird -----\ttoxicology",
    "335": "SELECT COUNT(DISTINCT m.molecule_id) FROM molecule AS m JOIN bond AS b ON m.molecule_id = b.molecule_id JOIN connected AS c ON b.bond_id = c.bond_id JOIN atom AS a1 ON c.atom_id = a1.atom_id JOIN atom AS a2 ON c.atom_id2 = a2.atom_id WHERE (a1.element = 'o' OR a2.element = 'o') AND b.bond_type = '='\t----- bird -----\ttoxicology",
    "336": "SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-'\t----- bird -----\ttoxicology",
    "337": "SELECT A.element, B.bond_type FROM molecule AS M LEFT JOIN atom AS A ON M.molecule_id = A.molecule_id LEFT JOIN bond AS B ON M.molecule_id = B.molecule_id WHERE M.molecule_id = 'TR016'\t----- bird -----\ttoxicology",
    "338": "SELECT a.atom_id FROM atom AS a JOIN molecule AS m ON a.molecule_id = m.molecule_id JOIN connected AS c ON a.atom_id = c.atom_id JOIN bond AS b ON c.bond_id = b.bond_id WHERE a.element = 'c' AND b.bond_type = '=' AND m.molecule_id = 'TR012'\t----- bird -----\ttoxicology",
    "339": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'\t----- bird -----\ttoxicology",
    "340": "SELECT id, name FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL\t----- bird -----\tcard_games",
    "341": "SELECT * FROM cards WHERE borderColor = 'borderless' AND cardKingdomFoilId IS NULL AND cardKingdomId IS NULL\t----- bird -----\tcard_games",
    "342": "SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)\t----- bird -----\tcard_games",
    "343": "SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100\t----- bird -----\tcard_games",
    "344": "SELECT T1.name, T1.rarity FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'\t----- bird -----\tcard_games",
    "345": "SELECT legalities.format, legalities.status FROM cards INNER JOIN legalities ON legalities.uuid = cards.uuid WHERE cards.type = 'Artifact' AND cards.side IS NULL AND legalities.format = 'vintage'\t----- bird -----\tcard_games",
    "346": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE (T1.power = '*' OR T1.power IS NULL) AND T2.format = 'commander' AND T2.status = 'Legal'\t----- bird -----\tcard_games",
    "347": "SELECT C.name AS card_name, R.text AS ruling_text, C.hasContentWarning FROM cards AS C LEFT JOIN rulings AS R ON C.uuid = R.uuid WHERE C.artist = 'Stephen Daniel'\t----- bird -----\tcard_games",
    "348": "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Sublime Epiphany' AND number = '74s')\t----- bird -----\tcard_games",
    "349": "SELECT C.name, C.artist, C.isPromo FROM cards AS C WHERE C.uuid = ( SELECT R.uuid FROM rulings AS R GROUP BY R.uuid ORDER BY COUNT(R.uuid) DESC LIMIT 1)\t----- bird -----\tcard_games",
    "350": "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.name = 'annul' AND cards.number = '29'\t----- bird -----\tcard_games",
    "351": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'\t----- bird -----\tcard_games",
    "352": "SELECT (CAST(SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) / COUNT(id)) * 100 AS percentageFROM foreign_data;\t----- bird -----\tcard_games",
    "353": "SELECT ST.setCode, S.totalSetSize FROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code WHERE ST.language = 'Italian'\t----- bird -----\tcard_games",
    "354": "SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd';\t----- bird -----\tcard_games",
    "355": "SELECT keywords FROM cards WHERE name = 'Angel of Mercy';\t----- bird -----\tcard_games",
    "356": "SELECT COUNT(*) FROM cards WHERE power = '*'\t----- bird -----\tcard_games",
    "357": "SELECT promoTypes FROM cards WHERE name = 'Duress' This query directly retrieves the `promoTypes` for the card named 'Duress' without the unnecessary subquery.\t----- bird -----\tcard_games",
    "358": "`SELECT borderColor FROM cards WHERE name = Ancestor's Chosen`\t----- bird -----\tcard_games",
    "359": "SELECT originalType FROM cards WHERE name = Ancestor's Chosen;\t----- bird -----\tcard_games",
    "360": "SELECT st.language FROM set_translations st JOIN sets s ON s.code = st.setCode JOIN cards c ON c.setCode = s.code WHERE c.name = 'Angel of Mercy';\t----- bird -----\tcard_games",
    "361": "SELECT COUNT(*) FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE L.status = 'restricted' AND C.isTextless = 0\t----- bird -----\tcard_games",
    "362": "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Condemn')\t----- bird -----\tcard_games",
    "363": "SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'restricted' AND cards.isStarter = 1\t----- bird -----\tcard_games",
    "364": "SELECT L.status FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.name = 'Cloudchaser Eagle'\t----- bird -----\tcard_games",
    "365": "SELECT type FROM cards WHERE name = 'Benalish Knight';\t----- bird -----\tcard_games",
    "366": "SELECT L.format FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.name = 'Benalish Knight'\t----- bird -----\tcard_games",
    "367": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'\t----- bird -----\tcard_games",
    "368": "SELECT (COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) * 100.0 / COUNT(id)) AS percentage_borderlessFROM cards;\t----- bird -----\tcard_games",
    "369": "SELECT COUNT(*) FROM cards AS C INNER JOIN foreign_data AS F ON F.uuid = C.uuid WHERE F.language = 'German' AND C.isReprint = 1\t----- bird -----\tcard_games",
    "370": "SELECT COUNT(*) FROM cards AS C INNER JOIN foreign_data AS F ON F.uuid = C.uuid WHERE C.borderColor = 'borderless' AND F.language = 'Russian'\t----- bird -----\tcard_games",
    "371": "SELECT (COUNT(CASE WHEN F.language = 'French' THEN 1 END) * 100.0 / COUNT(C.id)) AS percentageFROM cards AS CJOIN foreign_data AS F ON C.uuid = F.uuidWHERE C.isStorySpotlight = 1\t----- bird -----\tcard_games",
    "372": "SELECT COUNT(*) FROM cards WHERE toughness = 99;\t----- bird -----\tcard_games",
    "373": "SELECT name FROM cards WHERE artist = 'Aaron Boyd';\t----- bird -----\tcard_games",
    "374": "SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'\t----- bird -----\tcard_games",
    "375": "SELECT id FROM cards WHERE convertedManaCost = 0\t----- bird -----\tcard_games",
    "376": "SELECT layout FROM cards WHERE keywords LIKE '%flying%'\t----- bird -----\tcard_games",
    "377": "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel';\t----- bird -----\tcard_games",
    "378": "SELECT id FROM cards WHERE hasFoil = 1 AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL\t----- bird -----\tcard_games",
    "379": "`SELECT id FROM cards WHERE duelDeck = 'a';`\t----- bird -----\tcard_games",
    "380": "SELECT edhrecRank FROM cards WHERE frameVersion = '2015';\t----- bird -----\tcard_games",
    "381": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T3.language = 'Chinese Simplified';\t----- bird -----\tcard_games",
    "382": "SELECT C.* FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE C.availability = 'paper' AND F.language = 'Japanese'\t----- bird -----\tcard_games",
    "383": "SELECT COUNT(*) FROM legalities AS L INNER JOIN cards AS C ON C.uuid = L.uuid WHERE L.status = 'Banned' AND C.borderColor = 'white'\t----- bird -----\tcard_games",
    "384": "SELECT L.uuid, F.language FROM legalities AS L INNER JOIN cards AS C ON L.uuid = C.uuid INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE L.format = 'legacy'\t----- bird -----\tcard_games",
    "385": "SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Beacon of Immortality')\t----- bird -----\tcard_games",
    "386": "SELECT COUNT(T1.id) AS card_count, T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'legal'GROUP BY T2.status\t----- bird -----\tcard_games",
    "387": "SELECT T1.name, T1.colors FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.uuid = T2.setCode WHERE T2.setCode = 'OGW' This query correctly retrieves the names and colors of the cards for the set with code 'OGW'.\t----- bird -----\tcard_games",
    "388": "SELECT C.name, ST.translation, ST.language FROM cards AS C INNER JOIN sets AS S ON C.uuid = S.id INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.code = '10E' AND C.convertedManaCost = 5\t----- bird -----\tcard_games",
    "389": "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originalType = 'Creature - Elf'\t----- bird -----\tcard_games",
    "390": "SELECT cards.colors, legalities.format FROM cards JOIN legalities ON legalities.uuid = cards.uuid WHERE cards.id BETWEEN 1 AND 20\t----- bird -----\tcard_games",
    "391": "SELECT C.* FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE C.originalType = 'Artifact' AND C.colors LIKE '%B%'\t----- bird -----\tcard_games",
    "392": "SELECT cards.name FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'uncommon' ORDER BY rulings.date ASC LIMIT 3\t----- bird -----\tcard_games",
    "393": "SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NULL\t----- bird -----\tcard_games",
    "394": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL\t----- bird -----\tcard_games",
    "395": "SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = '-1';\t----- bird -----\tcard_games",
    "396": "SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1\t----- bird -----\tcard_games",
    "397": "SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability LIKE '%paper%' AND availability LIKE '%mtgo%'\t----- bird -----\tcard_games",
    "398": "SELECT SUM(CAST(REPLACE(REPLACE(REPLACE(manaCost, '{', ''), '}', ''), ' ', '') AS REAL)) AS total_unconverted_manaFROM cardsWHERE artist = 'Rob Alexander';\t----- bird -----\tcard_games",
    "399": "SELECT DISTINCT subtypes FROM cards WHERE availability = 'arena'UNIONSELECT DISTINCT supertypes FROM cards WHERE availability = 'arena'\t----- bird -----\tcard_games",
    "400": "SELECT setCode FROM set_translations WHERE language = 'Spanish';\t----- bird -----\tcard_games",
    "401": "SELECT (COUNT(CASE WHEN hand = '+3' THEN 1 END) * 100.0 / COUNT(*)) AS percentageFROM cards WHERE frameEffects = 'legendary';\t----- bird -----\tcard_games",
    "402": "SELECT (SUM(CASE WHEN isStorySpotlight = 1 AND isTextless = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentageFROM cardsWHERE isStorySpotlight = 1;This query calculates the percentage of Story Spotlight cards that do not have a text box by dividing the count of such cards by the total count of Story Spotlight cards and multiplying by 100.\t----- bird -----\tcard_games",
    "403": "SELECT (COUNT(FD.id) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage, FD.nameFROM foreign_data AS FDJOIN cards AS C ON FD.uuid = C.uuidWHERE FD.language = 'Spanish'GROUP BY FD.nameORDER BY FD.name; This query now correctly calculates the percentage of cards in Spanish and lists them by name.\t----- bird -----\tcard_games",
    "404": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309\t----- bird -----\tcard_games",
    "405": "SELECT COUNT(*) FROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code WHERE S.block = 'Commander' AND ST.language = 'Portuguese (Brasil)'\t----- bird -----\tcard_games",
    "406": "SELECT cards.id FROM cards INNER JOIN legalities ON legalities.uuid = cards.uuid WHERE legalities.status = 'legal' AND cards.types LIKE '%Creature%'\t----- bird -----\tcard_games",
    "407": "SELECT DISTINCT COALESCE(c.subtypes, '') || ' ' || COALESCE(c.supertypes, '') AS card_typeFROM foreign_data AS fJOIN cards AS c ON f.uuid = c.uuidWHERE f.language = 'German' AND (c.subtypes IS NOT NULL OR c.supertypes IS NOT NULL)\t----- bird -----\tcard_games",
    "408": "SELECT COUNT(*) FROM cards AS c LEFT JOIN foreign_data AS f ON c.uuid = f.uuid WHERE c.power IS NULL AND (c.text LIKE '%trigger%' OR f.text LIKE '%trigger%')\t----- bird -----\tcard_games",
    "409": "SELECT COUNT(c.id) FROM cards AS c INNER JOIN legalities AS l ON c.uuid = l.uuid INNER JOIN rulings AS r ON c.uuid = r.uuid WHERE l.format = 'pre-modern' AND r.text = 'This is a triggered mana ability' AND c.side IS NULL\t----- bird -----\tcard_games",
    "410": "SELECT C.id FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.artist = 'Erica Yang' AND C.availability LIKE '%paper%' AND L.format = 'pauper'\t----- bird -----\tcard_games",
    "411": "SELECT c.artist FROM foreign_data fd JOIN cards c ON fd.uuid = c.uuid WHERE fd.text = Das perfekte Gegenmittel zu einer dichten Formation;\t----- bird -----\tcard_games",
    "412": "SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French' AND cards.type = 'Creature' AND cards.layout = 'normal' AND cards.borderColor = 'black' AND cards.artist = 'Matthew D. Wilson'\t----- bird -----\tcard_games",
    "413": "SELECT COUNT(DISTINCT c.id) FROM cards AS c INNER JOIN rulings AS r ON c.uuid = r.uuid WHERE c.rarity = 'rare' AND r.date = '2009-01-10'\t----- bird -----\tcard_games",
    "414": "SELECT ST.language FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.baseSetSize = 180 AND S.block = 'Ravnica'\t----- bird -----\tcard_games",
    "415": "SELECT (SELECT COUNT(cards.id)  FROM cards  INNER JOIN legalities ON cards.uuid = legalities.uuid  WHERE legalities.format = 'commander' AND legalities.status = 'legal' AND cards.hasContentWarning = 0) * 100.0 / (SELECT COUNT(cards.id)  FROM cards  INNER JOIN legalities ON cards.uuid = legalities.uuid  WHERE legalities.format = 'commander' AND legalities.status = 'legal') AS percentage\t----- bird -----\tcard_games",
    "416": "SELECT (SELECT COUNT(*)  FROM cards AS c  JOIN foreign_data AS f ON c.uuid = f.uuid  WHERE (c.power IS NULL OR c.power = '*') AND f.language = 'French') * 100.0 / (SELECT COUNT(*)  FROM cards  WHERE power IS NULL OR power = '*') AS percentage\t----- bird -----\tcard_games",
    "417": "SELECT CAST(COUNT(CASE WHEN S.type = 'expansion' THEN 1 END) AS REAL) * 100 / COUNT(ST.language) AS percentageFROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code WHERE ST.language = 'Japanese'\t----- bird -----\tcard_games",
    "418": "SELECT availability FROM cards WHERE artist = 'Daren Bader';\t----- bird -----\tcard_games",
    "419": "SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000\t----- bird -----\tcard_games",
    "420": "SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1\t----- bird -----\tcard_games",
    "421": "SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes LIKE '%arenaleague%' ORDER BY name LIMIT 3 This query correctly lists the top three unknown power cards that have promotional types for arena league in alphabetical order.\t----- bird -----\tcard_games",
    "422": "`SELECT language FROM foreign_data WHERE multiverseid = 149934`\t----- bird -----\tcard_games",
    "423": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3\t----- bird -----\tcard_games",
    "424": "SELECT (COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) * 100.0) / COUNT(*) AS proportionFROM cards;\t----- bird -----\tcard_games",
    "425": "SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%'However, since the original query already has the correct structure for checking both subtypes, we can keep it as is. Final answer: SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%' This query is correct as it stands.\t----- bird -----\tcard_games",
    "426": "SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3\t----- bird -----\tcard_games",
    "427": "SELECT ST.language FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Archenemy' AND ST.setCode = 'ARC'\t----- bird -----\tcard_games",
    "428": "SELECT S.name, ST.translation FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.id = 5\t----- bird -----\tcard_games",
    "429": "SELECT ST.language, S.type FROM set_translations AS ST INNER JOIN sets AS S ON S.code = ST.setCode WHERE S.id = 206\t----- bird -----\tcard_games",
    "430": "SELECT S.id, S.name FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.language = 'Italian' AND S.block = 'Shadowmoor' ORDER BY S.name LIMIT 2\t----- bird -----\tcard_games",
    "431": "SELECT S.id FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.isForeignOnly = 1 AND S.isFoilOnly = 1 AND ST.language = 'Japanese'\t----- bird -----\tcard_games",
    "432": "SELECT T2.name, T2.baseSetSize FROM sets AS T2 INNER JOIN set_translations AS T1 ON T2.code = T1.setCode WHERE T1.language = 'Russian' AND T2.baseSetSize = (SELECT MAX(baseSetSize) FROM sets AS T3    INNER JOIN set_translations AS T4 ON T3.code = T4.setCode    WHERE T4.language = 'Russian')\t----- bird -----\tcard_games",
    "433": "SELECT (COUNT(CASE WHEN C.isOnlineOnly = 1 AND ST.language = 'Chinese Simplified' THEN 1 END) * 100.0) / COUNT(CASE WHEN C.isOnlineOnly = 1 THEN 1 END) AS percentageFROM cards AS CJOIN sets AS S ON C.setCode = S.codeJOIN set_translations AS ST ON S.code = ST.setCode\t----- bird -----\tcard_games",
    "434": "SELECT COUNT(*) FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.language = 'Japanese' AND (S.mtgoCode IS NULL OR S.mtgoCode = '')\t----- bird -----\tcard_games",
    "435": "SELECT COUNT(id) AS count_black_border FROM cards WHERE borderColor = 'black';\t----- bird -----\tcard_games",
    "436": "SELECT id FROM cards WHERE frameEffects = 'extendedart';\t----- bird -----\tcard_games",
    "437": "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1\t----- bird -----\tcard_games",
    "438": "SELECT ST.language FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.id = 174\t----- bird -----\tcard_games",
    "439": "SELECT name FROM sets WHERE code = 'ALL';\t----- bird -----\tcard_games",
    "440": "SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.name = 'A Pedra Fellwar'\t----- bird -----\tcard_games",
    "441": "SELECT code FROM sets WHERE releaseDate = '2007-07-13';\t----- bird -----\tcard_games",
    "442": "SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage'); This query correctly retrieves the required information based on the provided question.\t----- bird -----\tcard_games",
    "443": "SELECT setCode FROM sets WHERE type = 'expansion';\t----- bird -----\tcard_games",
    "444": "SELECT foreign_data.name, cards.type FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.watermark = 'boros'\t----- bird -----\tcard_games",
    "445": "SELECT foreign_data.language, foreign_data.flavorText, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'colorpie'\t----- bird -----\tcard_games",
    "446": "SELECT (COUNT(CASE WHEN c.convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(*)) AS percentageFROM cards AS cJOIN sets AS s ON c.setCode = s.codeWHERE s.name = 'Abyssal Horror'\t----- bird -----\tcard_games",
    "447": "SELECT setCode FROM sets WHERE type = 'commander';\t----- bird -----\tcard_games",
    "448": "SELECT foreign_data.name, foreign_data.type FROM foreign_data WHERE uuid IN (SELECT uuid FROM cards WHERE watermark = 'abzan')\t----- bird -----\tcard_games",
    "449": "SELECT foreign_data.language, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius'\t----- bird -----\tcard_games",
    "450": "SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL\t----- bird -----\tcard_games",
    "451": "SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%';\t----- bird -----\tcard_games",
    "452": "`SELECT name FROM cards WHERE isTextless = 0`\t----- bird -----\tcard_games",
    "453": "SELECT convertedManaCost FROM cards WHERE name = 'Ancestor\\'s Chosen';\t----- bird -----\tcard_games",
    "454": "SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);\t----- bird -----\tcard_games",
    "455": "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL\t----- bird -----\tcard_games",
    "456": "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';\t----- bird -----\tcard_games",
    "457": "SELECT purchaseUrls FROM cards WHERE promoTypes LIKE '%bundle%';\t----- bird -----\tcard_games",
    "458": "SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena%' AND availability LIKE '%mtgo%';\t----- bird -----\tcard_games",
    "459": "SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1\t----- bird -----\tcard_games",
    "460": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer';\t----- bird -----\tcard_games",
    "461": "SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3\t----- bird -----\tcard_games",
    "462": "SELECT translation FROM set_translations WHERE setCode = ( SELECT setCode FROM foreign_data WHERE uuid = ( SELECT uuid  FROM cards  WHERE name = 'Ancestor\\'s Chosen' )) AND language = 'Italian'\t----- bird -----\tcard_games",
    "463": "SELECT COUNT(*) FROM set_translations WHERE setCode IN (SELECT setCode FROM foreign_data WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'Angel of Mercy'))\t----- bird -----\tcard_games",
    "464": "SELECT cards.name FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON foreign_data.name = set_translations.translation WHERE set_translations.translation = 'Hauptset Zehnte Edition'\t----- bird -----\tcard_games",
    "465": "SELECT COUNT(*) > 0 AS has_korean_version FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE C.name = 'Ancestor''s Chosen' AND F.language = 'Korean'\t----- bird -----\tcard_games",
    "466": "SELECT COUNT(*) FROM cards AS C INNER JOIN sets AS S ON C.setCode = S.code INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Hauptset Zehnte Edition' AND C.artist = 'Adam Rex'\t----- bird -----\tcard_games",
    "467": "SELECT S.baseSetSize FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Hauptset Zehnte Edition'\t----- bird -----\tcard_games",
    "468": "SELECT ST.translation FROM sets AS S INNER JOIN set_translations AS ST ON ST.setCode = S.code WHERE S.name = 'Eighth Edition' AND ST.language = 'Simplified Chinese'\t----- bird -----\tcard_games",
    "469": "SELECT name FROM cards WHERE name = 'Angel of Mercy' AND mtgoCode IS NOT NULL\t----- bird -----\tcard_games",
    "470": "SELECT S.releaseDate FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid INNER JOIN sets AS S ON L.uuid = S.code WHERE C.name = 'Ancestor''s Chosen' However, since the `sets` table does not have a direct relationship with the `cards` table through `uuid`, the correct approach would be to find the set code from the `cards` table if it exists, or to adjust the query based on the actual schema relationships. The final corrected SQL query is:SELECT S.releaseDate FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid INNER JOIN sets AS S ON L.uuid = S.uuid WHERE C.name = 'Ancestor''s Chosen' This query assumes that the `cards` table has a `uuid` that can be used to join with the `legalities` table, and then the `uuid` from `legalities` can be used to join with the `sets` table.\t----- bird -----\tcard_games",
    "471": "SELECT S.type FROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code WHERE ST.translation = 'Hauptset Zehnte Edition'\t----- bird -----\tcard_games",
    "472": "SELECT COUNT(*) FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.block = 'Ice Age' AND ST.language = 'Italian'\t----- bird -----\tcard_games",
    "473": "SELECT S.isForeignOnly FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid INNER JOIN sets AS S ON L.uuid = S.uuid WHERE C.name = 'Adarkar Valkyrie'This query correctly joins the `cards` table with the `legalities` table using the `uuid`, and then joins the `sets` table to access the `isForeignOnly` column.\t----- bird -----\tcard_games",
    "474": "SELECT COUNT(*) FROM sets AS S INNER JOIN set_translations AS ST ON ST.setCode = S.code WHERE ST.language = 'Italian' AND S.baseSetSize < 10\t----- bird -----\tcard_games",
    "475": "SELECT COUNT(*) FROM cards AS C INNER JOIN sets AS S ON C.setCode = S.code WHERE S.name = 'Coldsnap' AND C.borderColor = 'black'\t----- bird -----\tcard_games",
    "476": "SELECT c.name FROM cards cJOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND c.convertedManaCost = (SELECT MAX(convertedManaCost)   FROM cards   WHERE setCode = s.code);\t----- bird -----\tcard_games",
    "477": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')\t----- bird -----\tcard_games",
    "478": "SELECT T1.* FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.number = '4'\t----- bird -----\tcard_games",
    "479": "SELECT COUNT(*) FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND convertedManaCost > 5 AND (power = '*' OR power IS NULL)\t----- bird -----\tcard_games",
    "480": "SELECT F.flavorText FROM foreign_data AS F INNER JOIN cards AS C ON F.uuid = C.uuid WHERE F.language = 'Italian' AND C.name = 'Ancestor''s Chosen'\t----- bird -----\tcard_games",
    "481": "SELECT DISTINCT foreign_data.language FROM cards INNER JOIN foreign_data ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.flavorText IS NOT NULL\t----- bird -----\tcard_games",
    "482": "SELECT F.type FROM foreign_data AS F INNER JOIN cards AS C ON F.uuid = C.uuid WHERE F.language = 'German' AND C.name = 'Ancestor''s Chosen'\t----- bird -----\tcard_games",
    "483": "SELECT fd.text FROM foreign_data AS fd INNER JOIN cards AS c ON fd.uuid = c.uuid WHERE c.setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND fd.language = 'Italian'\t----- bird -----\tcard_games",
    "484": "SELECT fd.name FROM foreign_data AS fd INNER JOIN cards AS c ON fd.uuid = c.uuid WHERE c.setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND c.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap')) AND fd.language = 'Italian'\t----- bird -----\tcard_games",
    "485": "SELECT date FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Reminisce')\t----- bird -----\tcard_games",
    "486": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentageFROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'\t----- bird -----\tcard_games",
    "487": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId = T1.cardKingdomId AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage_incredibly_powerfulFROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'\t----- bird -----\tcard_games",
    "488": "SELECT code FROM sets WHERE releaseDate = '2017-07-14'\t----- bird -----\tcard_games",
    "489": "SELECT keyruneCode FROM sets WHERE code = 'PKHC';\t----- bird -----\tcard_games",
    "490": "`SELECT mcmId FROM sets WHERE code = 'SS2'`\t----- bird -----\tcard_games",
    "491": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09';\t----- bird -----\tcard_games",
    "492": "`SELECT type FROM sets WHERE name = 'From the Vault: Lore'`\t----- bird -----\tcard_games",
    "493": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';\t----- bird -----\tcard_games",
    "494": "SELECT C.name AS card_name, R.text AS ruling_text, C.hasContentWarning FROM cards AS C INNER JOIN rulings AS R ON C.uuid = R.uuid WHERE C.artist = 'Jim Pavelec'\t----- bird -----\tcard_games",
    "495": "SELECT s.releaseDate FROM sets s JOIN set_transactions st ON s.code = st.setCode JOIN cards c ON st.uuid = c.uuid WHERE c.name = 'Evacuation';\t----- bird -----\tcard_games",
    "496": "SELECT S.baseSetSize FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Rinascita di Alara'\t----- bird -----\tcard_games",
    "497": "SELECT type FROM sets WHERE code = (SELECT setCode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition')\t----- bird -----\tcard_games",
    "498": "SELECT translation FROM set_translations WHERE setCode = (SELECT setCode    FROM foreign_data    WHERE uuid = (SELECT uuid    FROM cards    WHERE name = 'Tendo Ice Bridge')) AND language = 'French'\t----- bird -----\tcard_games",
    "499": "SELECT COUNT(T1.translation) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Salvat 2011' AND T1.translation IS NOT NULL\t----- bird -----\tcard_games",
    "500": "SELECT translation FROM set_translations WHERE setCode = (SELECT setCode FROM cards WHERE name = 'Fellwar Stone') AND language = 'Japanese'\t----- bird -----\tcard_games",
    "501": "SELECT c.name FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Journey into Nyx Hero''s Path' ORDER BY c.convertedManaCost DESC LIMIT 1 This query correctly retrieves the name of the card with the highest converted mana cost from the specified set.\t----- bird -----\tcard_games",
    "502": "SELECT S.releaseDate FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.translation = 'Ola de fr\u00edo'\t----- bird -----\tcard_games",
    "503": "SELECT s.type FROM sets s JOIN legalities l ON s.uuid = l.uuid JOIN cards c ON l.uuid = c.uuid WHERE c.name = 'Samite Pilgrim';\t----- bird -----\tcard_games",
    "504": "SELECT COUNT(*) FROM cards AS C INNER JOIN sets AS S ON C.setCode = S.code WHERE S.name = 'World Championship Decks 2004' AND C.convertedManaCost = 3\t----- bird -----\tcard_games",
    "505": "SELECT ST.translation FROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code WHERE ST.language = 'Chinese Simplified' AND S.name = 'Mirrodin'\t----- bird -----\tcard_games",
    "506": "SELECT (COUNT(CASE WHEN s.isNonFoilOnly = 1 THEN 1 END) * 1.0 / COUNT(*)) * 100.0 AS percentage_non_foilFROM foreign_data AS fd JOIN cards AS c ON fd.uuid = c.uuid JOIN sets AS s ON c.setCode = s.code WHERE fd.language = 'Japanese';\t----- bird -----\tcard_games",
    "507": "SELECT (SUM(CASE WHEN C.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentageFROM foreign_data AS FJOIN cards AS C ON F.uuid = C.uuidWHERE F.language = 'Portuguese (Brazil)'\t----- bird -----\tcard_games",
    "508": "SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1\t----- bird -----\tcard_games",
    "509": "SELECT id FROM sets WHERE baseSetSize = (SELECT MAX(baseSetSize) FROM sets);\t----- bird -----\tcard_games",
    "510": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1;\t----- bird -----\tcard_games",
    "511": "SELECT frameEffects, COUNT(*) as countFROM cardsWHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULLGROUP BY frameEffectsORDER BY count DESCLIMIT 1\t----- bird -----\tcard_games",
    "512": "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'A';\t----- bird -----\tcard_games",
    "513": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1\t----- bird -----\tcard_games",
    "514": "SELECT T1.name, T1.manaCost FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'duel' ORDER BY T1.manaCost DESC LIMIT 10\t----- bird -----\tcard_games",
    "515": "SELECT originalReleaseDate, format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic' AND legalities.status = 'legal' AND cards.originalReleaseDate = (SELECT MIN(originalReleaseDate)    FROM cards    WHERE rarity = 'mythic')\t----- bird -----\tcard_games",
    "516": "SELECT COUNT(*) FROM cards AS C INNER JOIN foreign_data AS F ON F.uuid = C.uuid WHERE C.artist = 'Volkan Baga' AND F.language = 'French'\t----- bird -----\tcard_games",
    "517": "SELECT COUNT(*) FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.rarity = 'rare'   AND C.type LIKE '%Enchantment%'   AND C.name = 'Abundance'   AND L.status = 'Legal'\t----- bird -----\tcard_games",
    "518": "SELECT L.format, C.nameFROM legalities AS LJOIN cards AS C ON L.uuid = C.uuidWHERE L.status = 'banned'GROUP BY L.formatHAVING COUNT(*) = ( SELECT MAX(banned_count) FROM ( SELECT COUNT(*) AS banned_count FROM legalities WHERE status = 'banned' GROUP BY format ))\t----- bird -----\tcard_games",
    "519": "SELECT ST.language FROM set_translations AS ST INNER JOIN sets AS S ON S.code = ST.setCode WHERE S.name = 'Battlebond'\t----- bird -----\tcard_games",
    "520": "SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = (SELECT artist    FROM cards    GROUP BY artist    ORDER BY COUNT(id) ASC    LIMIT 1) Since the original query is already correct after the analysis, we can return it as is. Final Answer: SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.artist = (SELECT artist    FROM cards    GROUP BY artist    ORDER BY COUNT(id) ASC    LIMIT 1)\t----- bird -----\tcard_games",
    "521": "SELECT L.status FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.frameVersion = '1997' AND C.artist = 'D. Alexander Gregory' AND C.hasContentWarning = 1 AND L.format = 'legacy'\t----- bird -----\tcard_games",
    "522": "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecRank = 1 AND legalities.status = 'banned'\t----- bird -----\tcard_games",
    "523": "WITH SetCount AS ( SELECT COUNT(*) AS total_sets FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31'),CommonLanguage AS ( SELECT language FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31') GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1)SELECT (SELECT total_sets / 4.0 FROM SetCount) AS average_sets_per_year, (SELECT language FROM CommonLanguage) AS common_language;\t----- bird -----\tcard_games",
    "524": "SELECT DISTINCT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena';\t----- bird -----\tcard_games",
    "525": "SELECT cards.uuid FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.format = 'oldschool' AND (legalities.status = 'banned' OR legalities.status = 'restricted')\t----- bird -----\tcard_games",
    "526": "SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';\t----- bird -----\tcard_games",
    "527": "SELECT text, date FROM rulings WHERE uuid IN (SELECT uuid FROM cards WHERE artist = 'Kev Walker') ORDER BY date DESC\t----- bird -----\tcard_games",
    "528": "SELECT cards.name, legalities.format FROM cards JOIN sets ON cards.setCode = sets.code JOIN legalities ON legalities.uuid = cards.uuid WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal'\t----- bird -----\tcard_games",
    "529": "SELECT DISTINCT S.name FROM sets AS S LEFT JOIN set_translations AS ST ON ST.setCode = S.code WHERE ST.language = 'Korean' AND S.code NOT IN (SELECT setCode FROM set_translations WHERE language = 'Japanese')\t----- bird -----\tcard_games",
    "530": "SELECT DISTINCT cards.frameVersion, cards.nameFROM cardsLEFT JOIN legalities ON cards.uuid = legalities.uuidWHERE cards.artist = 'Allen Williams' AND (legalities.status = 'banned' OR legalities.status IS NULL)This query will return all frame styles and cards Allen Williams worked on, including any banned cards if they exist.\t----- bird -----\tcard_games",
    "531": "SELECT DisplayName, Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1\t----- bird -----\tcodebase_community",
    "532": "SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2014';\t----- bird -----\tcodebase_community",
    "533": "`SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';`\t----- bird -----\tcodebase_community",
    "534": "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);\t----- bird -----\tcodebase_community",
    "535": "SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1\t----- bird -----\tcodebase_community",
    "536": "SELECT COUNT(*) FROM users WHERE Views > 10 AND CreationDate > '2013-12-31';\t----- bird -----\tcodebase_community",
    "537": "SELECT COUNT(*) FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'csgillespie'\t----- bird -----\tcodebase_community",
    "538": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'\t----- bird -----\tcodebase_community",
    "539": "SELECT OwnerDisplayName FROM posts WHERE Title = 'Eliciting priors from experts';This query correctly retrieves the display name of the owner of the post with the specified title.\t----- bird -----\tcodebase_community",
    "540": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE OwnerUserId = T2.Id)\t----- bird -----\tcodebase_community",
    "541": "SELECT users.DisplayName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)\t----- bird -----\tcodebase_community",
    "542": "SELECT SUM(posts.CommentCount) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'\t----- bird -----\tcodebase_community",
    "543": "SELECT AnswerCount FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') ORDER BY AnswerCount DESC LIMIT 1\t----- bird -----\tcodebase_community",
    "544": "SELECT U.DisplayName FROM posts AS P INNER JOIN users AS U ON P.LastEditorUserId = U.Id WHERE P.Title = 'Examples for teaching: Correlation does not mean causation'\t----- bird -----\tcodebase_community",
    "545": "SELECT COUNT(*) FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'csgillespie' AND P.ParentId IS NULL\t----- bird -----\tcodebase_community",
    "546": "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.ClosedDate IS NOT NULL\t----- bird -----\tcodebase_community",
    "547": "SELECT COUNT(*) FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE U.Age > 65 AND P.Score >= 20\t----- bird -----\tcodebase_community",
    "548": "SELECT U.Location FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.Title = 'Eliciting priors from experts'\t----- bird -----\tcodebase_community",
    "549": "SELECT Body FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags WHERE TagName = 'bayesian')\t----- bird -----\tcodebase_community",
    "550": "SELECT Body FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags WHERE Count = (SELECT MAX(Count) FROM tags))\t----- bird -----\tcodebase_community",
    "551": "SELECT COUNT(*) FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE U.DisplayName = 'csgillespie'\t----- bird -----\tcodebase_community",
    "552": "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'csgillespie'\t----- bird -----\tcodebase_community",
    "553": "SELECT COUNT(*) FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE U.DisplayName = 'csgillespie' AND strftime('%Y', B.Date) = '2011'\t----- bird -----\tcodebase_community",
    "554": "SELECT u.DisplayName FROM users u WHERE u.Id = ( SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Id) = ( SELECT MAX(badge_count)  FROM (SELECT UserId, COUNT(Id) AS badge_count FROM badges GROUP BY UserId) ))\t----- bird -----\tcodebase_community",
    "555": "SELECT AVG(posts.Score) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'\t----- bird -----\tcodebase_community",
    "556": "SELECT CAST(COUNT(badges.Id) AS REAL) / COUNT(DISTINCT users.DisplayName) AS average_badgesFROM badgesINNER JOIN users ON badges.UserId = users.IdWHERE users.Views > 200\t----- bird -----\tcodebase_community",
    "557": "SELECT (SELECT COUNT(posts.Id)  FROM posts  INNER JOIN users ON posts.OwnerUserId = users.Id  WHERE users.Age > 65 AND posts.Score > 20) * 100.0 / (SELECT COUNT(Id) FROM posts WHERE Score > 20) AS Percentage\t----- bird -----\tcodebase_community",
    "558": "SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';\t----- bird -----\tcodebase_community",
    "559": "SELECT CreationDate FROM votes GROUP BY CreationDate HAVING COUNT(Id) = (SELECT MAX(vote_count)  FROM (SELECT COUNT(Id) AS vote_count    FROM votes    GROUP BY CreationDate)) LIMIT 1;\t----- bird -----\tcodebase_community",
    "560": "`SELECT COUNT(*) FROM badges WHERE Name = 'Revival';`\t----- bird -----\tcodebase_community",
    "561": "SELECT Title FROM posts WHERE Id = (SELECT PostId FROM comments WHERE Score = (SELECT MAX(Score) FROM comments) LIMIT 1)\t----- bird -----\tcodebase_community",
    "562": "SELECT CommentCount FROM posts WHERE ViewCount = 1910\t----- bird -----\tcodebase_community",
    "563": "SELECT T2.FavoriteCount FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = '3025' AND T1.CreationDate = '2014-04-23 20:29:39'\t----- bird -----\tcodebase_community",
    "564": "SELECT C.Text FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE P.ParentId = 107829 AND P.CommentCount = 1 LIMIT 1\t----- bird -----\tcodebase_community",
    "565": "SELECT CASE  WHEN T2.ClosedDate IS NULL THEN 'Not well-finished'  ELSE 'Well-finished' END AS PostStatusFROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'\t----- bird -----\tcodebase_community",
    "566": "SELECT U.Reputation FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.Id = 65041\t----- bird -----\tcodebase_community",
    "567": "SELECT COUNT(*) FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Tiago Pasqualini'\t----- bird -----\tcodebase_community",
    "568": "SELECT users.DisplayName FROM votes INNER JOIN users ON votes.UserId = users.Id WHERE votes.Id = 6347\t----- bird -----\tcodebase_community",
    "569": "SELECT COUNT(T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%data visualization%'\t----- bird -----\tcodebase_community",
    "570": "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'DatEpicCoderGuyWhoPrograms'\t----- bird -----\tcodebase_community",
    "571": "SELECT (SELECT COUNT(Id) FROM posts WHERE OwnerUserId = 24) * 1.0 / (SELECT COUNT(Id) FROM votes WHERE UserId = 24) AS post_to_vote_ratio\t----- bird -----\tcodebase_community",
    "572": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';\t----- bird -----\tcodebase_community",
    "573": "SELECT Text FROM comments WHERE Score = 17\t----- bird -----\tcodebase_community",
    "574": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';\t----- bird -----\tcodebase_community",
    "575": "SELECT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'SilentGhost'\t----- bird -----\tcodebase_community",
    "576": "SELECT users.DisplayName FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Text = 'thank you user93!'\t----- bird -----\tcodebase_community",
    "577": "SELECT comments.Text FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE users.DisplayName = 'A Lion'\t----- bird -----\tcodebase_community",
    "578": "SELECT U.DisplayName, U.Reputation FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.Title = 'Understanding what Dassault iSight is doing?'\t----- bird -----\tcodebase_community",
    "579": "SELECT comments.Text FROM comments INNER JOIN posts ON posts.Id = comments.PostId WHERE posts.Title = 'How does gentle boosting differ from AdaBoost?'\t----- bird -----\tcodebase_community",
    "580": "SELECT users.DisplayName FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Necromancer' LIMIT 10\t----- bird -----\tcodebase_community",
    "581": "SELECT LastEditorDisplayName FROM posts WHERE Title = 'Open source tools for visualizing multi-dimensional data';\t----- bird -----\tcodebase_community",
    "582": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'\t----- bird -----\tcodebase_community",
    "583": "SELECT SUM(posts.Score) AS TotalScore, users.WebsiteUrlFROM postsINNER JOIN users ON posts.LastEditorUserId = users.IdWHERE users.DisplayName = 'Yevgeny'GROUP BY users.WebsiteUrl\t----- bird -----\tcodebase_community",
    "584": "SELECT Text FROM comments WHERE UserId IN ( SELECT UserId FROM postHistory WHERE PostId = ( SELECT Id FROM posts WHERE Title = 'Why square the difference instead of taking the absolute value in standard deviation?' ))\t----- bird -----\tcodebase_community",
    "585": "SELECT SUM(v.BountyAmount) FROM votes AS v INNER JOIN posts AS p ON v.PostId = p.Id WHERE p.Title LIKE '%data%'\t----- bird -----\tcodebase_community",
    "586": "SELECT u.DisplayName FROM users AS u WHERE u.Id IN ( SELECT v.UserId FROM votes AS v WHERE v.BountyAmount = 50 AND v.PostId IN ( SELECT p.Id  FROM posts AS p  WHERE p.Title LIKE '%variance%' ))\t----- bird -----\tcodebase_community",
    "587": "SELECT AVG(p.ViewCount) AS AverageViewCount, p.Title, GROUP_CONCAT(c.Text) AS Comments,  -- Aggregate comments into a single string p.ScoreFROM posts AS pJOIN tags AS t ON p.Tags LIKE '%' || t.TagName || '%'  -- Assuming Tags is a string of comma-separated tagsLEFT JOIN comments AS c ON p.Id = c.PostIdWHERE t.TagName = 'humor'GROUP BY p.Id, p.Title, p.Score\t----- bird -----\tcodebase_community",
    "588": "SELECT COUNT(*) FROM comments WHERE UserId = 13\t----- bird -----\tcodebase_community",
    "589": "`SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);`\t----- bird -----\tcodebase_community",
    "590": "`SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users);`\t----- bird -----\tcodebase_community",
    "591": "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND strftime('%Y', Date) = '2011';\t----- bird -----\tcodebase_community",
    "592": "SELECT COUNT(*) FROM (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5); This revised query counts the number of users who have more than 5 badges by first selecting the `UserId` of those users and then counting the number of distinct users in the outer query.\t----- bird -----\tcodebase_community",
    "593": "SELECT COUNT(DISTINCT U.Id) FROM users AS U JOIN badges AS B ON U.Id = B.UserId WHERE U.Location = 'New York' AND B.Name IN ('Supporter', 'Teacher') GROUP BY U.Id HAVING COUNT(DISTINCT B.Name) = 2\t----- bird -----\tcodebase_community",
    "594": "SELECT users.DisplayName, users.Reputation FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Id = 1\t----- bird -----\tcodebase_community",
    "595": "SELECT u.Id, u.DisplayName FROM users u INNER JOIN postHistory ph ON u.Id = ph.UserId INNER JOIN posts p ON ph.PostId = p.Id WHERE p.ViewCount >= 1000 GROUP BY u.Id HAVING COUNT(ph.PostId) = 1\t----- bird -----\tcodebase_community",
    "596": "SELECT b.UserId, b.Name FROM badges AS b WHERE b.UserId = ( SELECT UserId FROM comments GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1)\t----- bird -----\tcodebase_community",
    "597": "SELECT COUNT(DISTINCT U.Id) FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId WHERE U.Location = 'India' AND B.Name = 'Teacher'\t----- bird -----\tcodebase_community",
    "598": "SELECT (  (SELECT COUNT(*) FROM badges WHERE Name = 'Students' AND strftime('%Y', Date) = '2010') * 100.0 /  (SELECT COUNT(*) FROM badges WHERE Name = 'Students' AND (strftime('%Y', Date) = '2010' OR strftime('%Y', Date) = '2011')) ) - ( (SELECT COUNT(*) FROM badges WHERE Name = 'Students' AND strftime('%Y', Date) = '2011') * 100.0 /  (SELECT COUNT(*) FROM badges WHERE Name = 'Students' AND (strftime('%Y', Date) = '2010' OR strftime('%Y', Date) = '2011')) )) AS percentage_difference\t----- bird -----\tcodebase_community",
    "599": "SELECT PostHistoryTypeId FROM postHistory WHERE PostId = 3720;SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720;However, if we want to combine the results into a single output, we can use a common table expression (CTE) or a subquery. Here\u2019s an example of how to do that:WITH CommentCount AS ( SELECT COUNT(DISTINCT UserId) AS UniqueUserCount FROM comments WHERE PostId = 3720)SELECT PostHistoryTypeId, (SELECT UniqueUserCount FROM CommentCount) AS UniqueUserCount FROM postHistory WHERE PostId = 3720;This query retrieves the post history type IDs for post ID 3720 and the count of unique users who have commented on that post in a single result set.\t----- bird -----\tcodebase_community",
    "600": "SELECT T1.RelatedPostId, T2.ViewCount FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = 61217\t----- bird -----\tcodebase_community",
    "601": "SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Id = 395\t----- bird -----\tcodebase_community",
    "602": "SELECT Id, OwnerUserId FROM posts WHERE Score > 60\t----- bird -----\tcodebase_community",
    "603": "SELECT SUM(posts.FavoriteCount) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.OwnerUserId = 686 AND strftime('%Y', posts.CreationDate) = '2011'\t----- bird -----\tcodebase_community",
    "604": "SELECT AVG(u.UpVotes) AS average_up_votes, AVG(u.Age) AS average_ageFROM users AS uJOIN posts AS p ON u.Id = p.OwnerUserIdGROUP BY u.IdHAVING COUNT(p.Id) > 10This ensures that the average calculations are based on the correct grouping of users and their associated posts.\t----- bird -----\tcodebase_community",
    "605": "`SELECT COUNT(DISTINCT UserId) AS UserCount FROM badges WHERE Name = 'Announcer';`\t----- bird -----\tcodebase_community",
    "606": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08';\t----- bird -----\tcodebase_community",
    "607": "`SELECT COUNT(*) AS PositiveCommentCount FROM comments WHERE Score > 60;`\t----- bird -----\tcodebase_community",
    "608": "`SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47'`\t----- bird -----\tcodebase_community",
    "609": "SELECT COUNT(*) FROM posts WHERE Score = 10\t----- bird -----\tcodebase_community",
    "610": "SELECT badges.Name FROM badges WHERE badges.UserId IN (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users))\t----- bird -----\tcodebase_community",
    "611": "SELECT u.Reputation FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE b.Date = '2010-07-19 19:39:08'\t----- bird -----\tcodebase_community",
    "612": "SELECT B.Name FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE U.DisplayName = 'Pierre'\t----- bird -----\tcodebase_community",
    "613": "SELECT badges.Date FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Rochester, NY'\t----- bird -----\tcodebase_community",
    "614": "SELECT CAST(COUNT(DISTINCT T1.UserId) AS REAL) * 100 / (SELECT COUNT(*) FROM users) AS percentage FROM badges AS T1 WHERE T1.Name = 'Teacher'\t----- bird -----\tcodebase_community",
    "615": "SELECT (COUNT(DISTINCT CASE WHEN u.Age BETWEEN 13 AND 18 THEN b.UserId END) * 100.0) / COUNT(DISTINCT b.UserId) AS TeenagerPercentageFROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE b.Name = 'Organizer'\t----- bird -----\tcodebase_community",
    "616": "SELECT comments.Score FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.CreationDate = '2010-07-19 19:19:56.0' After correcting the typo in the column name, the final SQL query is:SELECT comments.Score FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.CreationDate = '2010-07-19 19:19:56.0' This query is now correct and does not require any further changes.\t----- bird -----\tcodebase_community",
    "617": "SELECT comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.CreationDate = '2010-07-19 19:37:33.0'\t----- bird -----\tcodebase_community",
    "618": "SELECT U.Age FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId WHERE U.Location = 'Vienna, Austria'\t----- bird -----\tcodebase_community",
    "619": "SELECT COUNT(*) FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE B.Name = 'Supporter' AND U.Age BETWEEN 19 AND 65\t----- bird -----\tcodebase_community",
    "620": "SELECT users.Views FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Date = '2010-07-19 19:39:08.0'\t----- bird -----\tcodebase_community",
    "621": "SELECT badges.Name FROM badges WHERE UserId IN (SELECT Id FROM users WHERE Reputation = (SELECT MIN(Reputation) FROM users))\t----- bird -----\tcodebase_community",
    "622": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Sharpie'\t----- bird -----\tcodebase_community",
    "623": "SELECT COUNT(*) FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE B.Name = 'Supporter' AND U.Age > 65\t----- bird -----\tcodebase_community",
    "624": "SELECT DisplayName FROM users WHERE Id = 30\t----- bird -----\tcodebase_community",
    "625": "`SELECT COUNT(*) FROM users WHERE Location = 'New York';`\t----- bird -----\tcodebase_community",
    "626": "`SELECT COUNT(*) AS VoteCount FROM votes WHERE strftime('%Y', CreationDate) = '2010';`\t----- bird -----\tcodebase_community",
    "627": "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65\t----- bird -----\tcodebase_community",
    "628": "SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);\t----- bird -----\tcodebase_community",
    "629": "SELECT CAST(COUNT(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN Id END) AS REAL) /  COUNT(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN Id END) AS ratio FROM votes\t----- bird -----\tcodebase_community",
    "630": "SELECT tags.TagName FROM tags INNER JOIN posts ON tags.ExcerptPostId = posts.Id WHERE posts.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'John Stauffer')\t----- bird -----\tcodebase_community",
    "631": "SELECT COUNT(*) FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Daniel Vassallo'\t----- bird -----\tcodebase_community",
    "632": "SELECT COUNT(*) FROM votes AS V INNER JOIN users AS U ON V.UserId = U.Id WHERE U.DisplayName = 'Harlan'\t----- bird -----\tcodebase_community",
    "633": "SELECT Id FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'slashnick') AND AnswerCount = (SELECT MAX(AnswerCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'slashnick'));\t----- bird -----\tcodebase_community",
    "634": "SELECT u.DisplayName, SUM(p.ViewCount) AS TotalViewCount FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY u.DisplayName ORDER BY TotalViewCount DESC LIMIT 1\t----- bird -----\tcodebase_community",
    "635": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN votes AS T3 ON T1.Id = T3.PostId WHERE T2.DisplayName = 'Matt Parker' GROUP BY T1.Id HAVING COUNT(T3.PostId) > 4 This query counts the number of posts by 'Matt Parker' that have more than 4 votes.\t----- bird -----\tcodebase_community",
    "636": "SELECT COUNT(*) FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE C.Score < 60 AND U.DisplayName = 'Neil McGuigan'\t----- bird -----\tcodebase_community",
    "637": "SELECT t.TagName FROM tags t JOIN posts p ON p.Tags LIKE '%' || t.TagName || '%' WHERE p.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Mark Meckes') AND p.CommentCount = 0\t----- bird -----\tcodebase_community",
    "638": "SELECT users.DisplayName FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Organizer'\t----- bird -----\tcodebase_community",
    "639": "SELECT (COUNT(T1.PostId) * 100.0 / (SELECT COUNT(*) FROM posts WHERE OwnerDisplayName = 'Community')) AS percentageFROM posts AS T1INNER JOIN tags AS T2 ON T1.Id = T2.ExcerptPostIdWHERE T1.OwnerDisplayName = 'Community' AND T2.TagName = 'r'\t----- bird -----\tcodebase_community",
    "640": "SELECT SUM(CASE WHEN U.DisplayName = 'Mornington' THEN P.ViewCount ELSE 0 END) - SUM(CASE WHEN U.DisplayName = 'Amos' THEN P.ViewCount ELSE 0 END) AS ViewCountDifferenceFROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id\t----- bird -----\tcodebase_community",
    "641": "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'commentator' AND strftime('%Y', Date) = '2014';\t----- bird -----\tcodebase_community",
    "642": "SELECT COUNT(*) FROM posts WHERE CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59';\t----- bird -----\tcodebase_community",
    "643": "SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users);\t----- bird -----\tcodebase_community",
    "644": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images';\t----- bird -----\tcodebase_community",
    "645": "SELECT COUNT(*) FROM comments WHERE Score < 60 AND UserId = 13\t----- bird -----\tcodebase_community",
    "646": "SELECT posts.Title, comments.UserDisplayName FROM posts INNER JOIN comments ON comments.PostId = posts.Id WHERE comments.Score > 60\t----- bird -----\tcodebase_community",
    "647": "SELECT B.Name FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE U.Location = 'North Pole' AND strftime('%Y', B.Date) = '2011'\t----- bird -----\tcodebase_community",
    "648": "SELECT users.DisplayName, users.WebsiteUrl FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.FavoriteCount > 150\t----- bird -----\tcodebase_community",
    "649": "SELECT COUNT(T1.Id) AS PostHistoryCount, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'\t----- bird -----\tcodebase_community",
    "650": "SELECT users.LastAccessDate, users.Location FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Outliers'\t----- bird -----\tcodebase_community",
    "651": "SELECT T2.Title FROM posts AS T1 INNER JOIN postLinks AS T3 ON T1.Id = T3.PostId INNER JOIN posts AS T2 ON T3.RelatedPostId = T2.Id WHERE T1.Title = 'How to tell if something happened in a data set which monitors a value over time'\t----- bird -----\tcodebase_community",
    "652": "SELECT P.Id AS PostId, B.Name AS BadgeName FROM posts AS P JOIN users AS U ON P.OwnerUserId = U.Id JOIN badges AS B ON U.Id = B.UserId WHERE U.DisplayName = 'Samuel' AND (strftime('%Y', P.CreationDate) = '2013' OR strftime('%Y', B.Date) = '2013')\t----- bird -----\tcodebase_community",
    "653": "SELECT OwnerDisplayName FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts);\t----- bird -----\tcodebase_community",
    "654": "SELECT DisplayName, Location FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE Id = ( SELECT ExcerptPostId  FROM tags  WHERE TagName = 'hypothesis-testing' ))\t----- bird -----\tcodebase_community",
    "655": "SELECT T2.Title, T1.LinkTypeId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?')\t----- bird -----\tcodebase_community",
    "656": "SELECT T2.OwnerDisplayName FROM posts AS T1 INNER JOIN posts AS T2 ON T1.ParentId = T2.Id WHERE T1.Id = (SELECT Id FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1) There are no issues with the original query, and it correctly addresses the question.\t----- bird -----\tcodebase_community",
    "657": "SELECT u.DisplayName, u.WebsiteUrl FROM users u INNER JOIN votes v ON u.Id = v.UserId WHERE v.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8) AND v.VoteTypeId = 8\t----- bird -----\tcodebase_community",
    "658": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5;\t----- bird -----\tcodebase_community",
    "659": "SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000\t----- bird -----\tcodebase_community",
    "660": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);\t----- bird -----\tcodebase_community",
    "661": "SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);\t----- bird -----\tcodebase_community",
    "662": "SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE strftime('%Y', T2.CreationDate) = '2011' AND T2.BountyAmount = 50\t----- bird -----\tcodebase_community",
    "663": "SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users);\t----- bird -----\tcodebase_community",
    "664": "SELECT Score FROM posts WHERE Id IN ( SELECT postLinks.PostId FROM postLinks INNER JOIN tags ON postLinks.RelatedPostId = tags.Id WHERE tags.Count = (SELECT MAX(Count) FROM tags))\t----- bird -----\tcodebase_community",
    "665": "SELECT COUNT(pl.Id) / 12.0 AS AverageMonthlyLinks FROM postLinks AS pl INNER JOIN posts AS p ON pl.PostId = p.Id WHERE strftime('%Y', pl.CreationDate) = '2010' AND p.AnswerCount <= 2\t----- bird -----\tcodebase_community",
    "666": "SELECT Id FROM posts WHERE FavoriteCount = (   SELECT MAX(FavoriteCount) FROM posts INNER JOIN votes ON posts.Id = votes.PostId WHERE votes.UserId = 1465   )\t----- bird -----\tcodebase_community",
    "667": "SELECT p.Title FROM posts AS p INNER JOIN postLinks AS pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks) The only change is correcting the typo in the `posts` table, but since the query does not reference `CreaionDate`, it remains unchanged. Therefore, the final SQL query is correct as is. Final Answer: SELECT p.Title FROM posts AS p INNER JOIN postLinks AS pl ON p.Id = pl.PostId WHERE pl.CreationDate = (SELECT MIN(CreationDate) FROM postLinks)\t----- bird -----\tcodebase_community",
    "668": "SELECT u.DisplayNameFROM users uJOIN ( SELECT UserId, COUNT(Name) AS BadgeCount FROM badges GROUP BY UserId) b ON u.Id = b.UserIdWHERE b.BadgeCount = (SELECT MAX(BadgeCount)    FROM (SELECT UserId, COUNT(Name) AS BadgeCount  FROM badges  GROUP BY UserId))\t----- bird -----\tcodebase_community",
    "669": "SELECT MIN(CreationDate) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'chl')\t----- bird -----\tcodebase_community",
    "670": "SELECT MIN(CreationDate) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users))\t----- bird -----\tcodebase_community",
    "671": "SELECT u.DisplayName FROM users AS u WHERE u.Id = (SELECT UserId FROM badges WHERE Name = 'Autobiographer' AND Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer'))\t----- bird -----\tcodebase_community",
    "672": "SELECT COUNT(DISTINCT U.Id) FROM users AS U INNER JOIN posts AS P ON U.Id = P.OwnerUserId WHERE U.Location = 'United Kingdom' AND P.FavoriteCount >= 4\t----- bird -----\tcodebase_community",
    "673": "SELECT AVG(vote_count) FROM ( SELECT COUNT(PostId) AS vote_count FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users)) GROUP BY UserId);\t----- bird -----\tcodebase_community",
    "674": "SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);\t----- bird -----\tcodebase_community",
    "675": "SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000\t----- bird -----\tcodebase_community",
    "676": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65\t----- bird -----\tcodebase_community",
    "677": "SELECT COUNT(*) FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE U.DisplayName = 'Jay Stevens' AND strftime('%Y', P.CreationDate) = '2010'\t----- bird -----\tcodebase_community",
    "678": "SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' ORDER BY T1.ViewCount DESC LIMIT 1\t----- bird -----\tcodebase_community",
    "679": "SELECT p.Id, p.Title, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Score = (SELECT MAX(Score) FROM posts);\t----- bird -----\tcodebase_community",
    "680": "SELECT AVG(posts.Score) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Stephen Turner'\t----- bird -----\tcodebase_community",
    "681": "SELECT DISTINCT users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.ViewCount > 20000 AND strftime('%Y', posts.CreationDate) = '2011'\t----- bird -----\tcodebase_community",
    "682": "SELECT P.Id, U.DisplayName FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts WHERE strftime('%Y', CreationDate) = '2010')AND strftime('%Y', P.CreationDate) = '2010'\t----- bird -----\tcodebase_community",
    "683": "SELECT (COUNT(p.Id) * 100.0 / (SELECT COUNT(p2.Id) FROM posts p2 WHERE strftime('%Y', p2.CreationDate) = '2011')) AS percentageFROM posts p INNER JOIN users u ON p.OwnerUserId = u.Id WHERE strftime('%Y', p.CreationDate) = '2011' AND u.Reputation > 1000\t----- bird -----\tcodebase_community",
    "684": "SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 END) * 100.0 / COUNT(Id)) AS percentageFROM users;\t----- bird -----\tcodebase_community",
    "685": "SELECT p.ViewCount, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Computer Game Datasets';\t----- bird -----\tcodebase_community",
    "686": "SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)\t----- bird -----\tcodebase_community",
    "687": "SELECT COUNT(*) AS CommentCount FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Score = (SELECT MAX(Score) FROM posts))\t----- bird -----\tcodebase_community",
    "688": "SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0\t----- bird -----\tcodebase_community",
    "689": "SELECT u.DisplayName, u.Location FROM users AS u WHERE u.Id = (SELECT LastEditorUserId FROM posts WHERE Id = 183)\t----- bird -----\tcodebase_community",
    "690": "SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett') AND Date = (SELECT MAX(Date) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett'));This query will correctly identify the latest badge awarded to the user with the display name 'Emmett'.\t----- bird -----\tcodebase_community",
    "691": "SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000\t----- bird -----\tcodebase_community",
    "692": "SELECT julianday(badges.Date) - julianday(users.CreationDate) AS days_to_get_badgeFROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.DisplayName = 'Zolomon'\t----- bird -----\tcodebase_community",
    "693": "SELECT (SELECT COUNT(Id) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE CreationDate = (SELECT MAX(CreationDate) FROM users))) AS PostCount, (SELECT COUNT(Id) FROM comments WHERE UserId = (SELECT Id FROM users WHERE CreationDate = (SELECT MAX(CreationDate) FROM users))) AS CommentCountThis query now correctly counts the number of posts and comments left by the user with the latest created account.\t----- bird -----\tcodebase_community",
    "694": "SELECT c.Text, c.UserDisplayName FROM comments AS c WHERE c.PostId = (SELECT Id FROM posts WHERE Title = 'Analysing wind data with R') AND c.CreationDate = (SELECT MAX(CreationDate) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Analysing wind data with R'))\t----- bird -----\tcodebase_community",
    "695": "SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol';\t----- bird -----\tcodebase_community",
    "696": "The query cannot be executed as is due to the missing `postTags` table in the schema.\t----- bird -----\tcodebase_community",
    "697": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon';\t----- bird -----\tcodebase_community",
    "698": "SELECT COUNT(c.Id) AS CommentCount, p.AnswerCountFROM posts AS pLEFT JOIN comments AS c ON p.Id = c.PostIdWHERE p.Title = 'Clustering 1D data'GROUP BY p.Id\t----- bird -----\tcodebase_community",
    "699": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';\t----- bird -----\tcodebase_community",
    "700": "SELECT COUNT(DISTINCT PostId) FROM votes WHERE BountyAmount > 30This query counts the distinct `PostId` from the `votes` table where the `BountyAmount` is greater than 30, which directly answers the question.\t----- bird -----\tcodebase_community",
    "701": "SELECT (COUNT(CASE WHEN Score >= 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentageFROM posts WHERE OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1)\t----- bird -----\tcodebase_community",
    "702": "SELECT COUNT(*) FROM posts WHERE Score < 20\t----- bird -----\tcodebase_community",
    "703": "SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20\t----- bird -----\tcodebase_community",
    "704": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';\t----- bird -----\tcodebase_community",
    "705": "SELECT users.Reputation, users.UpVotes FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Text = 'fine, you win :)'\t----- bird -----\tcodebase_community",
    "706": "SELECT comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'linear regression'\t----- bird -----\tcodebase_community",
    "707": "SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150) AND Score = (SELECT MAX(Score)   FROM comments   WHERE PostId IN (SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150));This query will correctly return the comment text with the highest score among the specified posts.\t----- bird -----\tcodebase_community",
    "708": "SELECT users.CreationDate, users.Age FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Text LIKE '%http://%'\t----- bird -----\tcodebase_community",
    "709": "SELECT COUNT(DISTINCT T1.PostId) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = 0 AND T2.ViewCount < 5\t----- bird -----\tcodebase_community",
    "710": "SELECT COUNT(comments.Id) FROM posts JOIN comments ON posts.Id = comments.PostId WHERE posts.CommentCount = 1 AND comments.Score = 0\t----- bird -----\tcodebase_community",
    "711": "SELECT COUNT(DISTINCT users.Id) FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score = 0 AND users.Age = 40\t----- bird -----\tcodebase_community",
    "712": "SELECT posts.Id AS PostId, comments.Text FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.Title = 'Group differences on a five point Likert item'\t----- bird -----\tcodebase_community",
    "713": "SELECT U.UpVotes FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Text = 'R is also lazy evaluated.'\t----- bird -----\tcodebase_community",
    "714": "SELECT C.Text FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE U.DisplayName = 'Harvey Motulsky'\t----- bird -----\tcodebase_community",
    "715": "SELECT users.DisplayName FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score BETWEEN 1 AND 5 AND users.DownVotes = 0\t----- bird -----\tcodebase_community",
    "716": "SELECT (COUNT(CASE WHEN u.UpVotes = 0 THEN 1 END) * 100.0 / COUNT(c.UserId)) AS percentageFROM comments cJOIN users u ON c.UserId = u.IdWHERE c.Score BETWEEN 5 AND 10\t----- bird -----\tcodebase_community",
    "717": "SELECT sp.power_name FROM superhero AS sh INNER JOIN hero_power AS hp ON sh.id = hp.hero_id INNER JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.superhero_name = '3-D Man'\t----- bird -----\tsuperhero",
    "718": "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength'\t----- bird -----\tsuperhero",
    "719": "SELECT COUNT(*) FROM superhero AS H INNER JOIN hero_power AS HP ON H.id = HP.hero_id INNER JOIN superpower AS SP ON HP.power_id = SP.id WHERE SP.power_name = 'Super Strength' AND H.height_cm > 200\t----- bird -----\tsuperhero",
    "720": "SELECT s.full_name FROM superhero AS s JOIN hero_power AS hp ON s.id = hp.hero_id GROUP BY s.id HAVING COUNT(hp.power_id) > 15\t----- bird -----\tsuperhero",
    "721": "SELECT COUNT(*) FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE C.colour = 'Blue'\t----- bird -----\tsuperhero",
    "722": "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.skin_colour_id = C.id WHERE S.superhero_name = 'Apocalypse'\t----- bird -----\tsuperhero",
    "723": "SELECT COUNT(*) FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id INNER JOIN hero_power AS HP ON S.id = HP.hero_id INNER JOIN superpower AS SP ON HP.power_id = SP.id WHERE C.colour = 'Blue' AND SP.power_name = 'Agility'\t----- bird -----\tsuperhero",
    "724": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'\t----- bird -----\tsuperhero",
    "725": "SELECT COUNT(*) FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name = 'Marvel Comics'\t----- bird -----\tsuperhero",
    "726": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' AND T1.height_cm = (SELECT MAX(height_cm) FROM superhero AS T3  INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id  WHERE T4.publisher_name = 'Marvel Comics') This ensures that the subquery correctly finds the maximum height of superheroes published by Marvel Comics.\t----- bird -----\tsuperhero",
    "727": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'\t----- bird -----\tsuperhero",
    "728": "SELECT COUNT(*) FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE P.publisher_name = 'Marvel Comics' AND C.colour = 'Blue'\t----- bird -----\tsuperhero",
    "729": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'\t----- bird -----\tsuperhero",
    "730": "SELECT (COUNT(CASE WHEN SP.power_name = 'Super Strength' THEN 1 END) * 100.0 / COUNT(SH.id)) AS percentageFROM superhero AS SHJOIN publisher AS P ON SH.publisher_id = P.idJOIN hero_power AS HP ON SH.id = HP.hero_idJOIN superpower AS SP ON HP.power_id = SP.idWHERE P.publisher_name = 'Marvel Comics'\t----- bird -----\tsuperhero",
    "731": "SELECT COUNT(*) FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name = 'DC Comics'\t----- bird -----\tsuperhero",
    "732": "SELECT publisher.publisher_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'Speed' AND hero_attribute.attribute_value = (SELECT MIN(attribute_value)     FROM hero_attribute     WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed'))\t----- bird -----\tsuperhero",
    "733": "SELECT COUNT(*) FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE C.colour = 'Gold' AND P.publisher_name = 'Marvel Comics'\t----- bird -----\tsuperhero",
    "734": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'\t----- bird -----\tsuperhero",
    "735": "SELECT COUNT(*) FROM superhero AS S INNER JOIN colour AS C ON S.hair_colour_id = C.id WHERE C.colour = 'Blond'\t----- bird -----\tsuperhero",
    "736": "SELECT superhero_name FROM superhero WHERE id = (SELECT hero_id   FROM hero_attribute   WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Intelligence')   AND attribute_value = (SELECT MIN(attribute_value)   FROM hero_attribute   WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Intelligence')))\t----- bird -----\tsuperhero",
    "737": "SELECT R.race FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id WHERE S.superhero_name = 'Copycat'\t----- bird -----\tsuperhero",
    "738": "SELECT COUNT(DISTINCT superhero.id) FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50\t----- bird -----\tsuperhero",
    "739": "SELECT superhero_name FROM superhero WHERE id IN ( SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Death Touch'))\t----- bird -----\tsuperhero",
    "740": "SELECT COUNT(DISTINCT S.id) FROM superhero AS S JOIN gender AS G ON S.gender_id = G.id JOIN hero_attribute AS HA ON S.id = HA.hero_id JOIN attribute AS A ON HA.attribute_id = A.id WHERE G.gender = 'Female' AND A.attribute_name = 'Strength' AND HA.attribute_value = 100\t----- bird -----\tsuperhero",
    "741": "SELECT s.superhero_name FROM superhero AS s JOIN ( SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(power_id) = ( SELECT MAX(power_count)  FROM ( SELECT COUNT(power_id) AS power_count  FROM hero_power  GROUP BY hero_id ) )) AS hp ON s.id = hp.hero_id\t----- bird -----\tsuperhero",
    "742": "SELECT COUNT(*) FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id WHERE R.race = 'Vampire'\t----- bird -----\tsuperhero",
    "743": "SELECT (COUNT(CASE WHEN a.alignment = 'Bad' THEN 1 END) * 100.0 / COUNT(s.id)) AS percentage_bad_superheroes, COUNT(CASE WHEN a.alignment = 'Bad' AND p.publisher_name = 'Marvel Comics' THEN 1 END) AS count_marvel_bad_superheroesFROM superhero s JOIN alignment a ON s.alignment_id = a.id JOIN publisher p ON s.publisher_id = p.id\t----- bird -----\tsuperhero",
    "744": "SELECT (SUM(CASE WHEN P.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) -  SUM(CASE WHEN P.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)) AS differenceFROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.idWHERE P.publisher_name IN ('DC Comics', 'Marvel Comics')\t----- bird -----\tsuperhero",
    "745": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek';\t----- bird -----\tsuperhero",
    "746": "SELECT AVG(attribute_value) FROM hero_attribute\t----- bird -----\tsuperhero",
    "747": "SELECT COUNT(*) FROM superhero WHERE full_name IS NULL\t----- bird -----\tsuperhero",
    "748": "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.id = 75\t----- bird -----\tsuperhero",
    "749": "SELECT sp.power_name FROM hero_power hp INNER JOIN superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Deathlok')\t----- bird -----\tsuperhero",
    "750": "SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2\t----- bird -----\tsuperhero",
    "751": "SELECT DISTINCT sp.power_name FROM superhero AS sh INNER JOIN gender AS g ON sh.gender_id = g.id INNER JOIN hero_power AS hp ON hp.hero_id = sh.id INNER JOIN superpower AS sp ON hp.power_id = sp.id WHERE g.gender = 'Male' LIMIT 5\t----- bird -----\tsuperhero",
    "752": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'\t----- bird -----\tsuperhero",
    "753": "SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1\t----- bird -----\tsuperhero",
    "754": "SELECT SP.power_name FROM hero_power AS HP INNER JOIN superpower AS SP ON HP.power_id = SP.id WHERE HP.hero_id = 56\t----- bird -----\tsuperhero",
    "755": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God' LIMIT 5\t----- bird -----\tsuperhero",
    "756": "SELECT COUNT(*) FROM superhero AS S INNER JOIN alignment AS A ON S.alignment_id = A.id WHERE A.alignment = 'Bad'\t----- bird -----\tsuperhero",
    "757": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169\t----- bird -----\tsuperhero",
    "758": "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.hair_colour_id = C.id INNER JOIN race AS R ON S.race_id = R.id WHERE S.height_cm = 185 AND R.race = 'human'\t----- bird -----\tsuperhero",
    "759": "SELECT c.colour FROM superhero AS s JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero)\t----- bird -----\tsuperhero",
    "760": "SELECT CAST(SUM(CASE WHEN P.id = 13 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage_marvel_heroesFROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE S.height_cm BETWEEN 150 AND 180\t----- bird -----\tsuperhero",
    "761": "SELECT full_name FROM superhero AS s INNER JOIN gender AS g ON s.gender_id = g.id WHERE g.gender = 'Male' AND s.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)\t----- bird -----\tsuperhero",
    "762": "SELECT sp.power_nameFROM superpower spJOIN hero_power hp ON sp.id = hp.power_idGROUP BY sp.power_nameORDER BY COUNT(hp.hero_id) DESCLIMIT 1;\t----- bird -----\tsuperhero",
    "763": "SELECT ha.attribute_value FROM hero_attribute AS ha INNER JOIN superhero AS s ON ha.hero_id = s.id WHERE s.superhero_name = 'Abomination'\t----- bird -----\tsuperhero",
    "764": "SELECT SP.power_name FROM hero_power AS HP INNER JOIN superpower AS SP ON HP.power_id = SP.id WHERE HP.hero_id = 1\t----- bird -----\tsuperhero",
    "765": "SELECT COUNT(DISTINCT hero_power.hero_id) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'stealth'\t----- bird -----\tsuperhero",
    "766": "SELECT s.full_name FROM superhero AS s INNER JOIN hero_attribute AS ha ON s.id = ha.hero_id WHERE ha.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'))\t----- bird -----\tsuperhero",
    "767": "SELECT COUNT(id) * 1.0 / (SELECT COUNT(id) FROM superhero) AS average_no_skin_colourFROM superhero WHERE skin_colour_id = 1; This query counts the number of superheroes with no skin color and divides it by the total number of superheroes to get the average.\t----- bird -----\tsuperhero",
    "768": "SELECT COUNT(*) FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name = 'Dark Horse Comics'\t----- bird -----\tsuperhero",
    "769": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE hero_attribute.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'durability') AND hero_attribute.attribute_value = (SELECT MAX(attribute_value)  FROM hero_attribute  WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'durability')) AND publisher.publisher_name = 'Dark Horse Comics';\t----- bird -----\tsuperhero",
    "770": "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.full_name = 'Abraham Sapien'\t----- bird -----\tsuperhero",
    "771": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'\t----- bird -----\tsuperhero",
    "772": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Dark Horse Comics'\t----- bird -----\tsuperhero",
    "773": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id\t----- bird -----\tsuperhero",
    "774": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'\t----- bird -----\tsuperhero",
    "775": "SELECT (SELECT COUNT(*)  FROM superhero  WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female')  AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue')) * 100.0 / (SELECT COUNT(*)  FROM superhero  WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Female')) AS percentage\t----- bird -----\tsuperhero",
    "776": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'\t----- bird -----\tsuperhero",
    "777": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'\t----- bird -----\tsuperhero",
    "778": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'\t----- bird -----\tsuperhero",
    "779": "SELECT COUNT(T2.power_id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Amazo'\t----- bird -----\tsuperhero",
    "780": "SELECT sp.power_name FROM superhero AS sh INNER JOIN hero_power AS hp ON sh.id = hp.hero_id INNER JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.full_name = 'Hunter Zolomon'\t----- bird -----\tsuperhero",
    "781": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'\t----- bird -----\tsuperhero",
    "782": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Black' AND T3.colour = 'Black'\t----- bird -----\tsuperhero",
    "783": "SELECT C1.colour AS eye_colourFROM superhero AS SINNER JOIN colour AS C1 ON S.eye_colour_id = C1.idINNER JOIN colour AS C2 ON S.skin_colour_id = C2.idWHERE C2.colour = 'Gold'\t----- bird -----\tsuperhero",
    "784": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'\t----- bird -----\tsuperhero",
    "785": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'\t----- bird -----\tsuperhero",
    "786": "SELECT COUNT(hero_id) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND attribute_value = (SELECT MAX(attribute_value)  FROM hero_attribute  WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'))\t----- bird -----\tsuperhero",
    "787": "SELECT R.race, A.alignment FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id INNER JOIN alignment AS A ON S.alignment_id = A.id WHERE S.superhero_name = 'Cameron Hicks'\t----- bird -----\tsuperhero",
    "788": "SELECT (COUNT(CASE WHEN g.gender = 'Female' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentageFROM superhero AS sJOIN publisher AS p ON s.publisher_id = p.idJOIN gender AS g ON s.gender_id = g.idWHERE p.publisher_name = 'Marvel Comics'\t----- bird -----\tsuperhero",
    "789": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'\t----- bird -----\tsuperhero",
    "790": "SELECT COALESCE((SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky'), 0) - COALESCE((SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler'), 0) AS weight_difference\t----- bird -----\tsuperhero",
    "791": "SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero GROUP BY superhero_name; This query will return the average height for each superhero, grouped by their names.\t----- bird -----\tsuperhero",
    "792": "SELECT sp.power_name FROM superhero AS sh JOIN hero_power AS hp ON sh.id = hp.hero_id JOIN superpower AS sp ON hp.power_id = sp.id WHERE sh.superhero_name = 'Abomination'\t----- bird -----\tsuperhero",
    "793": "SELECT COUNT(*) FROM superhero AS s INNER JOIN race AS r ON s.race_id = r.id INNER JOIN gender AS g ON s.gender_id = g.id WHERE r.id = 21 AND g.id = 1\t----- bird -----\tsuperhero",
    "794": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed'))\t----- bird -----\tsuperhero",
    "795": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.id = 3\t----- bird -----\tsuperhero",
    "796": "SELECT A.attribute_name, HA.attribute_value FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE S.superhero_name = '3-D Man'\t----- bird -----\tsuperhero",
    "797": "SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9\t----- bird -----\tsuperhero",
    "798": "SELECT P.publisher_name FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE S.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')\t----- bird -----\tsuperhero",
    "799": "`SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL`\t----- bird -----\tsuperhero",
    "800": "SELECT CAST(SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(superhero_name) AS percentage FROM superhero\t----- bird -----\tsuperhero",
    "801": "SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END), 0) AS male_female_ratioFROM superhero\t----- bird -----\tsuperhero",
    "802": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)\t----- bird -----\tsuperhero",
    "803": "SELECT id FROM superpower WHERE power_name = 'cryokinesis';\t----- bird -----\tsuperhero",
    "804": "SELECT superhero_name FROM superhero WHERE id = 294\t----- bird -----\tsuperhero",
    "805": "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL\t----- bird -----\tsuperhero",
    "806": "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.full_name = 'Karen Beecher-Duncan'\t----- bird -----\tsuperhero",
    "807": "SELECT sp.power_name FROM hero_power hp INNER JOIN superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = (SELECT id FROM superhero WHERE full_name = 'Helen Parr')\t----- bird -----\tsuperhero",
    "808": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188\t----- bird -----\tsuperhero",
    "809": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38\t----- bird -----\tsuperhero",
    "810": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = (SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute))\t----- bird -----\tsuperhero",
    "811": "SELECT alignment.alignment, superpower.power_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Atom IV'\t----- bird -----\tsuperhero",
    "812": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5\t----- bird -----\tsuperhero",
    "813": "SELECT AVG(ha.attribute_value) FROM hero_attribute AS ha INNER JOIN superhero AS s ON ha.hero_id = s.id WHERE s.alignment_id = 3\t----- bird -----\tsuperhero",
    "814": "SELECT c.colour FROM colour AS c INNER JOIN superhero AS s ON s.skin_colour_id = c.id INNER JOIN hero_attribute AS ha ON s.id = ha.hero_id WHERE ha.attribute_value = 100\t----- bird -----\tsuperhero",
    "815": "SELECT COUNT(*) FROM superhero AS S INNER JOIN alignment AS A ON S.alignment_id = A.id INNER JOIN gender AS G ON S.gender_id = G.id WHERE A.id = 1 AND G.id = 2\t----- bird -----\tsuperhero",
    "816": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80\t----- bird -----\tsuperhero",
    "817": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.hair_colour_id = (SELECT id FROM colour WHERE colour = 'blue') AND superhero.gender_id = (SELECT id FROM gender WHERE gender = 'male')\t----- bird -----\tsuperhero",
    "818": "SELECT (COUNT(CASE WHEN gender_id = 2 THEN 1 END) * 100.0) / COUNT(*) AS female_percentageFROM superhero WHERE alignment_id = 2 Since there are no issues found, the original SQL query is correct as is.\t----- bird -----\tsuperhero",
    "819": "SELECT (SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) -  SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END)) AS differenceFROM superhero AS T1WHERE T1.weight_kg IS NULL OR T1.weight_kg = 0\t----- bird -----\tsuperhero",
    "820": "SELECT ha.attribute_value FROM hero_attribute AS ha INNER JOIN superhero AS s ON ha.hero_id = s.id INNER JOIN attribute AS a ON ha.attribute_id = a.id WHERE s.superhero_name = 'Hulk' AND a.attribute_name = 'Strength'\t----- bird -----\tsuperhero",
    "821": "SELECT sp.power_name FROM hero_power hp INNER JOIN superpower sp ON hp.power_id = sp.id WHERE hp.hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Ajax')\t----- bird -----\tsuperhero",
    "822": "SELECT COUNT(*) FROM superhero AS S INNER JOIN colour AS C ON S.skin_colour_id = C.id INNER JOIN alignment AS A ON S.alignment_id = A.id WHERE C.colour = 'Green' AND A.alignment = 'Bad'\t----- bird -----\tsuperhero",
    "823": "SELECT COUNT(*) FROM superhero AS S INNER JOIN gender AS G ON S.gender_id = G.id INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE G.gender = 'Female' AND P.publisher_name = 'Marvel Comics'\t----- bird -----\tsuperhero",
    "824": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name ASC\t----- bird -----\tsuperhero",
    "825": "SELECT g.gender FROM gender AS g JOIN superhero AS s ON g.id = s.gender_id WHERE s.id = (SELECT hp.hero_id FROM hero_power AS hp WHERE hp.power_id = (SELECT sp.id   FROM superpower AS sp   WHERE sp.power_name = 'Phoenix Force'))\t----- bird -----\tsuperhero",
    "826": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' AND T1.weight_kg = (SELECT MAX(weight_kg) FROM superhero WHERE publisher_id = T2.id)LIMIT 1 This query selects the superhero name from the superhero table where the weight is equal to the maximum weight of superheroes published by 'DC Comics'.\t----- bird -----\tsuperhero",
    "827": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.race <> 'Human' AND T3.publisher_name = 'Dark Horse Comics'\t----- bird -----\tsuperhero",
    "828": "SELECT COUNT(*) FROM hero_attribute AS HA INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE A.attribute_name = 'Speed' AND HA.attribute_value = 100\t----- bird -----\tsuperhero",
    "829": "SELECT (COUNT(CASE WHEN P.publisher_name = 'DC Comics' THEN 1 END) -  COUNT(CASE WHEN P.publisher_name = 'Marvel Comics' THEN 1 END)) AS differenceFROM superhero AS SINNER JOIN publisher AS P ON S.publisher_id = P.idWHERE P.publisher_name IN ('DC Comics', 'Marvel Comics')\t----- bird -----\tsuperhero",
    "830": "SELECT a.attribute_name FROM hero_attribute ha INNER JOIN superhero s ON ha.hero_id = s.id INNER JOIN attribute a ON ha.attribute_id = a.id WHERE s.superhero_name = 'Black Panther' ORDER BY ha.attribute_value ASC LIMIT 1\t----- bird -----\tsuperhero",
    "831": "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.superhero_name = 'Abomination'\t----- bird -----\tsuperhero",
    "832": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)\t----- bird -----\tsuperhero",
    "833": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';\t----- bird -----\tsuperhero",
    "834": "SELECT (SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) * 100.0) / COUNT(s.id) AS female_percentage   FROM superhero AS s   INNER JOIN publisher AS p ON s.publisher_id = p.id   INNER JOIN gender AS g ON s.gender_id = g.id   WHERE p.publisher_name = 'George Lucas'\t----- bird -----\tsuperhero",
    "835": "SELECT (SELECT COUNT(*) FROM superhero  WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')  AND alignment_id = (SELECT id FROM alignment WHERE alignment = 'Good')) * 100.0 / (SELECT COUNT(*) FROM superhero  WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS percentage_good_superheroes\t----- bird -----\tsuperhero",
    "836": "SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%';\t----- bird -----\tsuperhero",
    "837": "SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)\t----- bird -----\tsuperhero",
    "838": "SELECT s.full_name FROM superhero s JOIN race r ON s.race_id = r.id WHERE r.race = 'Alien';\t----- bird -----\tsuperhero",
    "839": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Amber'This query now correctly selects the full names of superheroes with a weight less than 100 kg and with the eye color 'Amber', which exists in the `colour` table.\t----- bird -----\tsuperhero",
    "840": "SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Aquababy'\t----- bird -----\tsuperhero",
    "841": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40\t----- bird -----\tsuperhero",
    "842": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'\t----- bird -----\tsuperhero",
    "843": "SELECT superhero.id FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id WHERE hero_power.power_id = (SELECT id FROM superpower WHERE power_name = 'Intelligence')\t----- bird -----\tsuperhero",
    "844": "SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.superhero_name = 'Blackwulf'\t----- bird -----\tsuperhero",
    "845": "SELECT sp.power_name FROM superhero shJOIN hero_power hp ON sh.id = hp.hero_idJOIN superpower sp ON hp.power_id = sp.idWHERE sh.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero)\t----- bird -----\tsuperhero",
    "846": "SELECT d.driverRef FROM drivers AS d WHERE d.driverId IN ( SELECT q.driverId FROM qualifying AS q WHERE q.raceId = 18 AND q.q1 NOT IN ( SELECT q1  FROM qualifying  WHERE raceId = 18  ORDER BY q1  LIMIT 15 ))\t----- bird -----\tformula_1",
    "847": "SELECT d.surname FROM drivers d WHERE d.driverId = (SELECT driverId FROM qualifying WHERE raceId = 19 AND q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19))\t----- bird -----\tformula_1",
    "848": "SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai'\t----- bird -----\tformula_1",
    "849": "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'\t----- bird -----\tformula_1",
    "850": "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany'\t----- bird -----\tformula_1",
    "851": "SELECT DISTINCT C.location FROM constructors AS CN JOIN constructorResults AS CR ON CN.constructorId = CR.constructorId JOIN constructorStandings AS CS ON CN.constructorId = CS.constructorId JOIN results AS R ON CN.constructorId = R.constructorId JOIN races AS RA ON R.raceId = RA.raceId JOIN circuits AS C ON RA.circuitId = C.circuitId WHERE CN.name = 'Renault'\t----- bird -----\tformula_1",
    "852": "SELECT COUNT(*) FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2010 AND C.country NOT IN ('Malaysia', 'Japan', 'China', 'India', 'Singapore', 'Bahrain', 'Germany', 'France', 'Italy', 'Spain', 'United Kingdom', 'Netherlands', 'Belgium', 'Austria', 'Switzerland', 'Portugal', 'Russia', 'Monaco', 'Czech Republic', 'Hungary', 'Finland', 'Sweden', 'Norway', 'Denmark', 'Ireland', 'Luxembourg', 'Poland', 'Romania', 'Slovakia', 'Slovenia', 'Croatia', 'Serbia', 'Greece', 'Turkey', 'Ukraine', 'Estonia', 'Latvia', 'Lithuania', 'Iceland', 'Malta', 'Cyprus');\t----- bird -----\tformula_1",
    "853": "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain'\t----- bird -----\tformula_1",
    "854": "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Australian Grand Prix'\t----- bird -----\tformula_1",
    "855": "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'\t----- bird -----\tformula_1",
    "856": "SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'\t----- bird -----\tformula_1",
    "857": "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'\t----- bird -----\tformula_1",
    "858": "SELECT C.nationality FROM constructorResults AS CR INNER JOIN constructors AS C ON CR.constructorId = C.constructorId WHERE CR.points = 1 AND CR.raceId = 24\t----- bird -----\tformula_1",
    "859": "SELECT q1 FROM qualifying WHERE raceId = 354 AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna')\t----- bird -----\tformula_1",
    "860": "SELECT D.nationality FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId WHERE Q.raceId = 355 AND Q.q2 = '0:01:40'\t----- bird -----\tformula_1",
    "861": "SELECT number FROM drivers WHERE driverId = (SELECT driverId FROM qualifying WHERE raceId = 903 AND q3 = '0:01:54')\t----- bird -----\tformula_1",
    "862": "SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) AND statusId != 1\t----- bird -----\tformula_1",
    "863": "SELECT S.year, S.url FROM races AS R INNER JOIN seasons AS S ON R.year = S.year WHERE R.raceId = 901\t----- bird -----\tformula_1",
    "864": "SELECT COUNT(*) FROM results AS R INNER JOIN races AS RACE ON R.raceId = RACE.raceId WHERE RACE.date = '2015-11-29' AND R.time IS NOT NULL\t----- bird -----\tformula_1",
    "865": "SELECT T1.driverId, T2.dob FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 592 AND T1.time IS NOT NULL ORDER BY T2.dob ASC LIMIT 1\t----- bird -----\tformula_1",
    "866": "SELECT D.forename, D.surname, D.url FROM lapTimes AS L INNER JOIN drivers AS D ON L.driverId = D.driverId WHERE L.time = '0:01:27' AND L.raceId = 161\t----- bird -----\tformula_1",
    "867": "SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE raceId = 933 AND fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933))\t----- bird -----\tformula_1",
    "868": "SELECT C.lat, C.lng FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.name = 'Malaysian Grand Prix'\t----- bird -----\tformula_1",
    "869": "SELECT url FROM constructors WHERE constructorId = (SELECT constructorId FROM constructorResults WHERE raceId = 9 AND points = (SELECT MAX(points) FROM constructorResults WHERE raceId = 9))\t----- bird -----\tformula_1",
    "870": "SELECT Q.q1 FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId WHERE Q.raceId = 345 AND D.forename = 'Lucas' AND D.surname = 'di Grassi'\t----- bird -----\tformula_1",
    "871": "SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 347 AND T1.q2 = '0:01:15'\t----- bird -----\tformula_1",
    "872": "SELECT d.code FROM drivers AS d INNER JOIN qualifying AS q ON d.driverId = q.driverId WHERE q.raceId = 45 AND q.q3 = '0:01:33'\t----- bird -----\tformula_1",
    "873": "SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 743 AND T2.forename = 'Bruce' AND T2.surname = 'McLaren'\t----- bird -----\tformula_1",
    "874": "SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'San Marino Grand Prix' AND T2.year = 2006 AND T1.position = 2\t----- bird -----\tformula_1",
    "875": "SELECT S.year, S.url FROM races AS R INNER JOIN seasons AS S ON R.year = S.year WHERE R.raceId = 901\t----- bird -----\tformula_1",
    "876": "SELECT COUNT(*) FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.date = '2015-11-29' AND R.statusId = 1\t----- bird -----\tformula_1",
    "877": "SELECT d.driverId, d.dob FROM results AS r INNER JOIN drivers AS d ON r.driverId = d.driverId WHERE r.raceId = 872 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1\t----- bird -----\tformula_1",
    "878": "SELECT d.forename, d.surname FROM drivers d WHERE d.driverId = (SELECT driverId FROM results WHERE raceId = 348 AND fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE raceId = 348))\t----- bird -----\tformula_1",
    "879": "SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)) Since the original SQL query is already correct after removing the unnecessary raceId condition, we can return it as is:Final SQL: SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results))\t----- bird -----\tformula_1",
    "880": "SELECT (SELECT fastestLapSpeed FROM results WHERE raceId = 853) - (SELECT fastestLapSpeed FROM results WHERE raceId = 854) AS speed_difference, CASE  WHEN (SELECT fastestLapSpeed FROM results WHERE raceId = 853) IS NOT NULL AND   (SELECT fastestLapSpeed FROM results WHERE raceId = 854) IS NOT NULL  THEN  ((SELECT fastestLapSpeed FROM results WHERE raceId = 853) -  (SELECT fastestLapSpeed FROM results WHERE raceId = 854)) * 100.0 /  (SELECT fastestLapSpeed FROM results WHERE raceId = 853)  ELSE  NULL END AS percentage_fasterThis revised query includes a CASE statement to handle potential NULL values in the fastest lap speeds, ensuring that the percentage calculation is only performed when both values are available.\t----- bird -----\tformula_1",
    "881": "SELECT (COUNT(CASE WHEN time IS NOT NULL THEN 1 END) * 100.0 / COUNT(driverId)) AS completion_rateFROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '1983-07-16')\t----- bird -----\tformula_1",
    "882": "SELECT MIN(year) AS first_singapore_grand_prix_year FROM races WHERE name LIKE '%Singapore Grand Prix%';\t----- bird -----\tformula_1",
    "883": "SELECT COUNT(*) AS number_of_races FROM races WHERE year = 2005; If the intention was to list all the races in descending order, the query should be:Revised_SQL: SELECT raceId, name FROM races WHERE year = 2005 ORDER BY name DESC; Since the question specifically asks for the number of races, the first revised SQL is the correct answer.\t----- bird -----\tformula_1",
    "884": "SELECT * FROM races WHERE date = (SELECT MIN(date) FROM races)   OR strftime('%Y-%m', date) = strftime('%Y-%m', (SELECT MIN(date) FROM races)); This query selects all races that either match the first race's date or occur in the same month and year as the first race.\t----- bird -----\tformula_1",
    "885": "SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999)\t----- bird -----\tformula_1",
    "886": "SELECT year FROM races GROUP BY year ORDER BY COUNT(raceId) DESC LIMIT 1\t----- bird -----\tformula_1",
    "887": "SELECT name FROM races WHERE year = 2017\t----- bird -----\tformula_1",
    "888": "SELECT circuits.country, circuits.name AS circuit_name, circuits.location FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.raceId = (SELECT raceId FROM races WHERE name = 'European Grand Prix' ORDER BY year ASC LIMIT 1)\t----- bird -----\tformula_1",
    "889": "SELECT MAX(year) FROM races WHERE raceId IN ( SELECT raceId FROM races WHERE name = 'British Grand Prix' AND circuitId = ( SELECT circuitId  FROM circuits  WHERE name = 'Brands Hatch' ))This ensures that we are correctly filtering the races based on the race name and circuit name, and then finding the maximum year from those results.\t----- bird -----\tformula_1",
    "890": "SELECT COUNT(DISTINCT T3.year) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN seasons AS T3 ON T1.year = T3.year WHERE T1.name = 'British Grand Prix' AND T2.name = 'Silverstone Circuit'\t----- bird -----\tformula_1",
    "891": "SELECT D.forename, D.surname, R.position FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE RA.year = 2010 AND RA.name = 'Singapore Grand Prix' ORDER BY R.position\t----- bird -----\tformula_1",
    "892": "SELECT d.forename, d.surname FROM drivers AS d WHERE d.driverId IN (SELECT driverId FROM driverStandings WHERE points = (SELECT MAX(points) FROM driverStandings))\t----- bird -----\tformula_1",
    "893": "SELECT d.forename, d.surname, ds.points FROM driverStandings AS ds JOIN drivers AS d ON ds.driverId = d.driverId WHERE ds.raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2017)ORDER BY ds.points DESCLIMIT 3\t----- bird -----\tformula_1",
    "894": "SELECT D.forename, D.surname, R.name AS race_name, LT.time AS best_lap_timeFROM lapTimes AS LTINNER JOIN drivers AS D ON LT.driverId = D.driverIdINNER JOIN races AS R ON LT.raceId = R.raceIdWHERE LT.time = (SELECT MIN(time) FROM lapTimes)\t----- bird -----\tformula_1",
    "895": "SELECT AVG(CAST(SUBSTR(L.time, 1, INSTR(L.time, ':') - 1) AS INTEGER) * 60 * 1000 +  CAST(SUBSTR(L.time, INSTR(L.time, ':') + 1) AS INTEGER) * 1000) AS average_lap_timeFROM lapTimes AS L INNER JOIN drivers AS D ON L.driverId = D.driverId INNER JOIN races AS R ON L.raceId = R.raceId WHERE D.forename = 'Sebastian' AND D.surname = 'Vettel' AND R.name = 'Chinese Grand Prix' AND R.year = 2009;\t----- bird -----\tformula_1",
    "896": "SELECT (COUNT(CASE WHEN ds.position > 1 THEN 1 END) * 100.0 / NULLIF(COUNT(ds.raceId), 0)) AS percentageFROM driverStandings AS dsJOIN drivers AS d ON ds.driverId = d.driverIdJOIN races AS r ON ds.raceId = r.raceIdWHERE d.surname = 'Hamilton' AND r.year >= 2010\t----- bird -----\tformula_1",
    "897": "SELECT d.forename, d.surname, d.nationality, AVG(ds.points) AS average_pointsFROM driverStandings dsJOIN drivers d ON ds.driverId = d.driverIdJOIN (SELECT driverId, COUNT(*) AS wins FROM driverStandings GROUP BY driverId ORDER BY wins DESC LIMIT 1) AS max_winner ON ds.driverId = max_winner.driverIdGROUP BY d.driverId, d.forename, d.surname, d.nationality\t----- bird -----\tformula_1",
    "898": "SELECT forename, surname, (2022 - strftime('%Y', dob) + 1) AS age FROM drivers WHERE dob = (SELECT MAX(dob) FROM drivers WHERE nationality = 'Japanese')\t----- bird -----\tformula_1",
    "899": "SELECT C.circuitId, C.name, C.location, C.countryFROM circuits AS CJOIN races AS R ON C.circuitId = R.circuitIdWHERE R.year BETWEEN 1990 AND 2000GROUP BY C.circuitIdHAVING COUNT(R.raceId) = 4\t----- bird -----\tformula_1",
    "900": "SELECT C.name AS circuit_name, C.location AS circuit_location, R.name AS race_name FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId WHERE R.year = 2006 AND C.country = 'USA'\t----- bird -----\tformula_1",
    "901": "SELECT R.name AS race_name, C.name AS circuit_name, C.location FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE strftime('%Y', R.date) = '2005' AND strftime('%m', R.date) = '09'\t----- bird -----\tformula_1",
    "902": "SELECT R.* FROM races AS R INNER JOIN results AS Res ON R.raceId = Res.raceId WHERE Res.driverId = (SELECT driverId FROM drivers WHERE forename = 'Alex' AND surname = 'Yoong') AND Res.position < 10\t----- bird -----\tformula_1",
    "903": "SELECT COUNT(*) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit')) AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher') AND points = (SELECT MAX(points) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit')) AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher'))\t----- bird -----\tformula_1",
    "904": "SELECT R2.name, R2.year FROM results AS R INNER JOIN races AS R2 ON R.raceId = R2.raceId WHERE R.driverId = (SELECT driverId FROM drivers WHERE surname = 'Schumacher' AND forename = 'Michael') AND R.milliseconds = (SELECT MIN(milliseconds) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Schumacher' AND forename = 'Michael'))\t----- bird -----\tformula_1",
    "905": "SELECT AVG(ds.points) FROM driverStandings AS ds INNER JOIN races AS r ON ds.raceId = r.raceId INNER JOIN drivers AS d ON ds.driverId = d.driverId WHERE r.year = 2000 AND d.forename = 'Eddie' AND d.surname = 'Irvine'\t----- bird -----\tformula_1",
    "906": "SELECT races.year, results.points FROM results INNER JOIN races ON results.raceId = races.raceId WHERE results.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND races.year = (SELECT MIN(races.year)    FROM results    INNER JOIN races ON results.raceId = races.raceId    WHERE results.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'))\t----- bird -----\tformula_1",
    "907": "SELECT T1.name AS race_name, T1.date AS race_date, T2.country AS hosting_country FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE strftime('%Y', T1.date) = '2017' ORDER BY T1.date\t----- bird -----\tformula_1",
    "908": "SELECT R.name AS race_name, R.year AS race_year, C.location AS circuit_locationFROM results AS ResJOIN races AS R ON Res.raceId = R.raceIdJOIN circuits AS C ON R.circuitId = C.circuitIdWHERE Res.laps = (SELECT MAX(laps) FROM results)LIMIT 1\t----- bird -----\tformula_1",
    "909": "SELECT (COUNT(CASE WHEN country = 'Germany' AND name = 'European Grand Prix' THEN 1 END) * 100.0) / COUNT(CASE WHEN name = 'European Grand Prix' THEN 1 END) AS percentageFROM races;\t----- bird -----\tformula_1",
    "910": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';\t----- bird -----\tformula_1",
    "911": "SELECT name, lat FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1\t----- bird -----\tformula_1",
    "912": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';\t----- bird -----\tformula_1",
    "913": "SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits);\t----- bird -----\tformula_1",
    "914": "SELECT COUNT(*) FROM drivers WHERE code IS NULL\t----- bird -----\tformula_1",
    "915": "SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);\t----- bird -----\tformula_1",
    "916": "`SELECT surname FROM drivers WHERE nationality = 'Italian'`\t----- bird -----\tformula_1",
    "917": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';\t----- bird -----\tformula_1",
    "918": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'; This query correctly retrieves Lewis Hamilton's reference name from the drivers table.\t----- bird -----\tformula_1",
    "919": "SELECT C.name FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2009 AND R.name = 'Spanish Grand Prix'\t----- bird -----\tformula_1",
    "920": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'\t----- bird -----\tformula_1",
    "921": "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'\t----- bird -----\tformula_1",
    "922": "SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2010 AND T2.name = 'Abu Dhabi Circuit'\t----- bird -----\tformula_1",
    "923": "SELECT COUNT(*) FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.country = 'Italy'\t----- bird -----\tformula_1",
    "924": "SELECT T1.date FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'\t----- bird -----\tformula_1",
    "925": "SELECT C.url FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2009 AND R.name = 'Spanish Grand Prix'\t----- bird -----\tformula_1",
    "926": "SELECT MIN(fastestLapTime) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')\t----- bird -----\tformula_1",
    "927": "SELECT d.forename, d.surname FROM results AS r INNER JOIN drivers AS d ON r.driverId = d.driverId WHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)\t----- bird -----\tformula_1",
    "928": "SELECT driverRef FROM drivers WHERE driverId = ( SELECT driverId FROM results WHERE raceId = ( SELECT raceId  FROM races  WHERE name = 'Australian Grand Prix' AND year = 2008 ) AND position = 1)\t----- bird -----\tformula_1",
    "929": "SELECT R.name FROM races AS R INNER JOIN results AS Res ON R.raceId = Res.raceId INNER JOIN drivers AS D ON Res.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'\t----- bird -----\tformula_1",
    "930": "SELECT races.name FROM results INNER JOIN races ON results.raceId = races.raceId WHERE results.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND results.rank = (SELECT MIN(rank) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'))\t----- bird -----\tformula_1",
    "931": "SELECT MAX(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'\t----- bird -----\tformula_1",
    "932": "SELECT DISTINCT R.year FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS RACE ON R.raceId = RACE.raceId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'\t----- bird -----\tformula_1",
    "933": "SELECT R.positionOrder FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton' AND RA.year = 2008 AND RA.name = 'Australian Grand Prix'\t----- bird -----\tformula_1",
    "934": "SELECT d.forename, d.surname FROM drivers AS d WHERE d.driverId = ( SELECT r.driverId FROM results AS r WHERE r.raceId = ( SELECT raceId  FROM races  WHERE year = 2008 AND name = 'Australian Grand Prix' ) AND r.grid = 4)\t----- bird -----\tformula_1",
    "935": "SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL\t----- bird -----\tformula_1",
    "936": "SELECT fastestLapTime FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')\t----- bird -----\tformula_1",
    "937": "SELECT results.time FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND results.position = 2\t----- bird -----\tformula_1",
    "938": "SELECT T1.driverId, T2.url FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND T1.positionOrder = 1\t----- bird -----\tformula_1",
    "939": "SELECT COUNT(DISTINCT D.driverId) FROM drivers AS D INNER JOIN results AS R ON R.driverId = D.driverId INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE D.nationality = 'American' AND RA.year = 2008 AND RA.name = 'Australian Grand Prix'\t----- bird -----\tformula_1",
    "940": "SELECT COUNT(DISTINCT driverId) FROM results WHERE driverId IN ( SELECT driverId FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL)\t----- bird -----\tformula_1",
    "941": "SELECT SUM(T1.points) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'\t----- bird -----\tformula_1",
    "942": "SELECT AVG((CAST(SUBSTR(fastestLapTime, 1, INSTR(fastestLapTime, ':') - 1) AS INTEGER) * 60) +  CAST(SUBSTR(fastestLapTime, INSTR(fastestLapTime, ':') + 1) AS REAL)) AS average_fastest_lap_timeFROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')\t----- bird -----\tformula_1",
    "943": "SELECT (SELECT COUNT(raceId) FROM lapTimes WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL) * 1.0 / (SELECT COUNT(raceId) FROM lapTimes WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')) AS completion_rate\t----- bird -----\tformula_1",
    "944": "WITH RaceInfo AS ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix'),ChampionTime AS ( SELECT time FROM results WHERE raceId = (SELECT raceId FROM RaceInfo) AND positionOrder = 1),LastDriverTime AS ( SELECT time FROM results WHERE raceId = (SELECT raceId FROM RaceInfo) ORDER BY positionOrder DESC LIMIT 1)SELECT (CAST((CAST(substr(LastDriverTime.time, 1, 2) AS INTEGER) * 3600000 +  CAST(substr(LastDriverTime.time, 4, 2) AS INTEGER) * 60000 +  CAST(substr(LastDriverTime.time, 7, 2) AS INTEGER) * 1000 +  CAST(substr(LastDriverTime.time, 10, 3) AS INTEGER)) - (CAST(substr(ChampionTime.time, 1, 2) AS INTEGER) * 3600000 +  CAST(substr(ChampionTime.time, 4, 2) AS INTEGER) * 60000 +  CAST(substr(ChampionTime.time, 7, 2) AS INTEGER) * 1000 +  CAST(substr(ChampionTime.time, 10, 3) AS INTEGER)) AS REAL) / (CAST(substr(LastDriverTime.time, 1, 2) AS INTEGER) * 3600000 +  CAST(substr(LastDriverTime.time, 4, 2) AS INTEGER) * 60000 +  CAST(substr(LastDriverTime.time, 7, 2) AS INTEGER) * 1000 +  CAST(substr(LastDriverTime.time, 10, 3) AS INTEGER)) * 100) AS percentageFROM ChampionTime, LastDriverTime\t----- bird -----\tformula_1",
    "945": "SELECT COUNT(*) AS circuit_count FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';\t----- bird -----\tformula_1",
    "946": "SELECT lat, lng FROM circuits WHERE country = 'USA';\t----- bird -----\tformula_1",
    "947": "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01';\t----- bird -----\tformula_1",
    "948": "SELECT AVG(CR.points) FROM constructors AS C INNER JOIN constructorResults AS CR ON C.constructorId = CR.constructorId WHERE C.nationality = 'British'\t----- bird -----\tformula_1",
    "949": "SELECT name, MAX(total_points) AS highest_pointsFROM ( SELECT c.name, SUM(cr.points) AS total_points FROM constructors AS c JOIN constructorResults AS cr ON c.constructorId = cr.constructorId GROUP BY c.constructorId UNION ALL SELECT c.name, SUM(cs.points) AS total_points FROM constructors AS c JOIN constructorStandings AS cs ON c.constructorId = cs.constructorId GROUP BY c.constructorId) AS combined_pointsORDER BY highest_points DESCLIMIT 1\t----- bird -----\tformula_1",
    "950": "SELECT C.name FROM constructors AS C INNER JOIN constructorResults AS CR ON C.constructorId = CR.constructorId WHERE CR.raceId = 18 AND CR.points = 0\t----- bird -----\tformula_1",
    "951": "SELECT COUNT(DISTINCT C.constructorId) FROM constructors AS C JOIN constructorResults AS CR ON C.constructorId = CR.constructorId WHERE C.nationality = 'Japanese' AND CR.points = 0 GROUP BY C.constructorId HAVING COUNT(DISTINCT CR.raceId) = 2\t----- bird -----\tformula_1",
    "952": "SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 1\t----- bird -----\tformula_1",
    "953": "SELECT COUNT(DISTINCT T1.constructorId) FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'French' AND T2.laps > 50\t----- bird -----\tformula_1",
    "954": "SELECT (COUNT(CASE WHEN R.time IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS completion_percentageFROM results AS RJOIN drivers AS D ON R.driverId = D.driverIdJOIN races AS RACE ON R.raceId = RACE.raceIdWHERE D.nationality = 'Japanese' AND RACE.year BETWEEN 2007 AND 2009\t----- bird -----\tformula_1",
    "955": "SELECT R.year, AVG( CAST(SUBSTR(RES.time, 1, 2) AS INTEGER) * 3600 +  CAST(SUBSTR(RES.time, 4, 2) AS INTEGER) * 60 +  CAST(SUBSTR(RES.time, 7, 2) AS INTEGER) +  CAST(SUBSTR(RES.time, 10) AS INTEGER) / 1000 ) AS average_time_secondsFROM results AS RESJOIN races AS R ON RES.raceId = R.raceIdWHERE RES.position = 1 AND RES.time IS NOT NULLGROUP BY R.year\t----- bird -----\tformula_1",
    "956": "SELECT D.forename, D.surname FROM drivers AS D INNER JOIN driverStandings AS DS ON D.driverId = DS.driverId WHERE DS.position = 2 AND D.dob > '1975-01-01'\t----- bird -----\tformula_1",
    "957": "SELECT COUNT(*) FROM drivers AS D INNER JOIN results AS R ON D.driverId = R.driverId WHERE D.nationality = 'Italian' AND R.time IS NULL\t----- bird -----\tformula_1",
    "958": "SELECT D.forename, D.surname FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId ORDER BY CAST(SUBSTR(R.fastestLapTime, 1, INSTR(R.fastestLapTime, ':') - 1) AS INTEGER) * 60 +  CAST(SUBSTR(R.fastestLapTime, INSTR(R.fastestLapTime, ':') + 1) AS INTEGER)  ASC LIMIT 1\t----- bird -----\tformula_1",
    "959": "SELECT fastestLap FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009) AND position = 1\t----- bird -----\tformula_1",
    "960": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009\t----- bird -----\tformula_1",
    "961": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL AND T2.milliseconds = (SELECT MIN(milliseconds) FROM results WHERE milliseconds IS NOT NULL)\t----- bird -----\tformula_1",
    "962": "SELECT (COUNT(DISTINCT lapTimes.driverId) * 100.0 /  (SELECT COUNT(DISTINCT lapTimes.driverId)   FROM lapTimes   INNER JOIN races ON lapTimes.raceId = races.raceId   WHERE races.year BETWEEN 2000 AND 2005)) AS percentageFROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId INNER JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.dob < '1985-01-01' AND lapTimes.lap > 50 AND races.year BETWEEN 2000 AND 2005\t----- bird -----\tformula_1",
    "963": "SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND T2.milliseconds < 120000\t----- bird -----\tformula_1",
    "964": "SELECT code FROM drivers WHERE nationality = 'America';\t----- bird -----\tformula_1",
    "965": "SELECT raceId FROM races WHERE year = 2009\t----- bird -----\tformula_1",
    "966": "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18\t----- bird -----\tformula_1",
    "967": "SELECT code, (SELECT COUNT(*) FROM drivers WHERE nationality = 'Dutch' AND driverId IN  (SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 3)) AS netherlandic_count FROM drivers WHERE driverId IN (SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 3);\t----- bird -----\tformula_1",
    "968": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';\t----- bird -----\tformula_1",
    "969": "SELECT COUNT(*) FROM drivers WHERE dob LIKE '1980%' AND nationality = 'Australian';\t----- bird -----\tformula_1",
    "970": "SELECT D.driverId, D.forename, D.surname, L.timeFROM drivers AS DINNER JOIN lapTimes AS L ON D.driverId = L.driverIdWHERE D.nationality = 'German' AND D.dob BETWEEN '1980-01-01' AND '1990-12-31'ORDER BY L.time ASCLIMIT 3\t----- bird -----\tformula_1",
    "971": "SELECT driverRef FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers WHERE nationality = 'German');\t----- bird -----\tformula_1",
    "972": "SELECT d.driverId, d.code FROM drivers AS d INNER JOIN results AS r ON d.driverId = r.driverId WHERE strftime('%Y', d.dob) = '1971' AND r.fastestLapTime IS NOT NULL\t----- bird -----\tformula_1",
    "973": "SELECT T1.driverId, MAX(T2.time) AS latest_lap_timeFROM drivers AS T1INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverIdWHERE T1.nationality = 'Spanish' AND T1.dob < '1982-01-01'GROUP BY T1.driverIdORDER BY latest_lap_time DESCLIMIT 10\t----- bird -----\tformula_1",
    "974": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE fastestLapTime IS NOT NULL)\t----- bird -----\tformula_1",
    "975": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE (CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) * 60 * 1000 +  CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1) AS INTEGER) * 1000) =   (SELECT MAX(CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS INTEGER) * 60 * 1000 + CAST(SUBSTR(time, INSTR(time, ':') + 1) AS INTEGER) * 1000) FROM lapTimes)\t----- bird -----\tformula_1",
    "976": "SELECT T1.driverId FROM lapTimes AS T1 WHERE T1.lap = 1 ORDER BY T1.milliseconds ASC LIMIT 5\t----- bird -----\tformula_1",
    "977": "SELECT COUNT(*) FROM results AS R INNER JOIN status AS S ON R.statusId = S.statusId WHERE R.raceId > 50 AND R.raceId < 100 AND R.time IS NULL AND S.statusId = 2\t----- bird -----\tformula_1",
    "978": "SELECT COUNT(T1.raceId) AS number_of_races, T2.location, T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Austria' GROUP BY T2.location, T2.lat, T2.lng\t----- bird -----\tformula_1",
    "979": "SELECT roundFROM racesWHERE raceId = ( SELECT raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(*) DESC LIMIT 1)\t----- bird -----\tformula_1",
    "980": "SELECT D.driverRef, D.nationality, D.dob FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId WHERE Q.raceId = 23 AND Q.q2 IS NOT NULL\t----- bird -----\tformula_1",
    "981": "SELECT R.year, R.name, R.date, R.time FROM races AS R WHERE R.raceId = (SELECT Q.raceId    FROM qualifying AS Q    WHERE Q.driverId = (SELECT driverId     FROM drivers     ORDER BY dob ASC     LIMIT 1)    LIMIT 1)\t----- bird -----\tformula_1",
    "982": "SELECT COUNT(*) FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN status AS S ON R.statusId = S.statusId WHERE D.nationality = 'American' AND S.statusId = 2\t----- bird -----\tformula_1",
    "983": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1\t----- bird -----\tformula_1",
    "984": "SELECT url FROM constructors WHERE constructorId IN (SELECT constructorId FROM constructorStandings WHERE wins = (SELECT MAX(wins) FROM constructorStandings))\t----- bird -----\tformula_1",
    "985": "SELECT driverId, milliseconds FROM lapTimes WHERE raceId = (SELECT raceId FROM races WHERE name = 'French Grand Prix') AND lap = 3 ORDER BY milliseconds DESC LIMIT 1\t----- bird -----\tformula_1",
    "986": "SELECT T1.raceId, T1.milliseconds FROM lapTimes AS T1 WHERE T1.lap = 1 AND T1.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes WHERE lap = 1)\t----- bird -----\tformula_1",
    "987": "SELECT AVG(CAST(fastestLapTime AS REAL)) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2006 AND name = 'United States Grand Prix') AND rank < 11\t----- bird -----\tformula_1",
    "988": "SELECT d.driverId, d.forename, d.surname, AVG(p.duration) AS average_duration FROM drivers AS d JOIN pitStops AS p ON d.driverId = p.driverId WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY d.driverId ORDER BY average_duration ASC LIMIT 5\t----- bird -----\tformula_1",
    "989": "SELECT D.forename || ' ' || D.surname AS champion_name, R.time AS finish_timeFROM results AS RINNER JOIN races AS RA ON R.raceId = RA.raceIdINNER JOIN drivers AS D ON R.driverId = D.driverIdWHERE RA.name = 'Canadian Grand Prix' AND RA.year = 2008 AND R.positionText = '1'\t----- bird -----\tformula_1",
    "990": "SELECT C.constructorRef, C.url FROM constructors AS C INNER JOIN results AS R ON C.constructorId = R.constructorId WHERE R.raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Singapore Grand Prix') AND R.position = 1\t----- bird -----\tformula_1",
    "991": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND strftime('%Y', dob) BETWEEN '1981' AND '1991'\t----- bird -----\tformula_1",
    "992": "SELECT forename || ' ' || surname AS full_name, url, dob FROM drivers WHERE nationality = 'German' AND strftime('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC\t----- bird -----\tformula_1",
    "993": "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring';\t----- bird -----\tformula_1",
    "994": "SELECT SUM(CR.points) AS total_points, C.name, C.nationalityFROM constructorResults AS CRINNER JOIN races AS R ON CR.raceId = R.raceIdINNER JOIN constructors AS C ON CR.constructorId = C.constructorIdWHERE R.name = 'Monaco Grand Prix' AND R.year BETWEEN 1980 AND 2010GROUP BY C.constructorIdORDER BY total_points DESCLIMIT 1\t----- bird -----\tformula_1",
    "995": "SELECT AVG(T1.points) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Turkish Grand Prix'\t----- bird -----\tformula_1",
    "996": "SELECT AVG(race_count) AS average_racesFROM ( SELECT COUNT(*) AS race_count FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY year) AS yearly_races;\t----- bird -----\tformula_1",
    "997": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1\t----- bird -----\tformula_1",
    "998": "SELECT CASE  WHEN EXISTS (SELECT 1 FROM driverStandings WHERE position = 91)  THEN (SELECT wins FROM driverStandings WHERE position = 91)  ELSE 0 END AS victories; This query will return the number of victories for the driver in the 91st position if they exist, or 0 if they do not.\t----- bird -----\tformula_1",
    "999": "SELECT r.name FROM results AS res INNER JOIN races AS r ON res.raceId = r.raceId WHERE res.fastestLapSpeed = (SELECT MIN(fastestLapSpeed) FROM results)\t----- bird -----\tformula_1",
    "1000": "SELECT T1.name, T2.location || ', ' || T2.country AS full_locationFROM races AS T1INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitIdWHERE T1.date = (SELECT MAX(date) FROM races)\t----- bird -----\tformula_1",
    "1001": "SELECT d.forename, d.surname FROM drivers AS d WHERE d.driverId = ( SELECT q.driverId FROM qualifying AS q WHERE q.raceId = ( SELECT r.raceId  FROM races AS r  WHERE r.year = 2008 AND r.circuitId = ( SELECT c.circuitId  FROM circuits AS c  WHERE c.name = 'Marina Bay Street Circuit' ) ) AND q.position = 1 AND q.q3 = ( SELECT MIN(q2.q3)  FROM qualifying AS q2  WHERE q2.raceId = q.raceId ) LIMIT 1)\t----- bird -----\tformula_1",
    "1002": "SELECT d.forename || ' ' || d.surname AS full_name, d.nationality, r.name AS race_name FROM drivers d JOIN results res ON d.driverId = res.driverId JOIN races r ON res.raceId = r.raceId WHERE d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY res.resultId ASC LIMIT 1\t----- bird -----\tformula_1",
    "1003": "SELECT accident_count FROM ( SELECT driverId, COUNT(*) AS accident_count FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix') AND statusId = 3 GROUP BY driverId ) AS accident_counts ORDER BY accident_count DESC LIMIT 1\t----- bird -----\tformula_1",
    "1004": "SELECT T1.wins, T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.dob = (SELECT MIN(dob) FROM drivers)\t----- bird -----\tformula_1",
    "1005": "SELECT MAX(duration) FROM pitStops\t----- bird -----\tformula_1",
    "1006": "SELECT time FROM lapTimes WHERE milliseconds = (SELECT MIN(milliseconds) FROM lapTimes)\t----- bird -----\tformula_1",
    "1007": "SELECT MAX(T1.duration) FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'\t----- bird -----\tformula_1",
    "1008": "SELECT lap FROM pitStops WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011) AND driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')\t----- bird -----\tformula_1",
    "1009": "SELECT T1.driverId, T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'\t----- bird -----\tformula_1",
    "1010": "SELECT T1.time, T2.name FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') ORDER BY T1.milliseconds ASC LIMIT 1\t----- bird -----\tformula_1",
    "1011": "SELECT d.forename, d.surname FROM lapTimes AS lt JOIN drivers AS d ON lt.driverId = d.driverId WHERE lt.time = (SELECT MIN(time) FROM lapTimes)\t----- bird -----\tformula_1",
    "1012": "SELECT circuits.name, results.position FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE results.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND results.fastestLap = (SELECT MIN(fastestLap) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'))\t----- bird -----\tformula_1",
    "1013": "SELECT MIN(CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INTEGER) * 60000 +   CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1) AS INTEGER)) AS lap_recordFROM lapTimes AS T1INNER JOIN races AS T2 ON T1.raceId = T2.raceIdWHERE T2.name = 'Austrian Grand Prix'\t----- bird -----\tformula_1",
    "1014": "SELECT T1.lap, T1.time, T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'ORDER BY T1.time ASC\t----- bird -----\tformula_1",
    "1015": "SELECT r.name FROM races r JOIN (SELECT raceId, MIN(milliseconds) AS fastest_lap_time   FROM lapTimes   WHERE raceId IN (SELECT raceId FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix Circuit'))   GROUP BY raceId) AS fastest_lap ON r.raceId = fastest_lap.raceId\t----- bird -----\tformula_1",
    "1016": "SELECT T2.duration FROM pitStops AS T2 WHERE T2.raceId = (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix') AND T2.driverId = (SELECT driverId FROM lapTimes WHERE raceId = (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix') ORDER BY milliseconds ASC LIMIT 1)\t----- bird -----\tformula_1",
    "1017": "SELECT C.lat, C.lng FROM lapTimes AS L INNER JOIN races AS R ON L.raceId = R.raceId INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE L.time = '1:29.488'\t----- bird -----\tformula_1",
    "1018": "SELECT AVG(P.milliseconds) FROM pitStops AS P INNER JOIN drivers AS D ON P.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'\t----- bird -----\tformula_1",
    "1019": "SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'\t----- bird -----\tformula_1",
    "1020": "SELECT T1.player_api_id FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)\t----- bird -----\teuropean_football_2",
    "1021": "SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);\t----- bird -----\teuropean_football_2",
    "1022": "SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes)\t----- bird -----\teuropean_football_2",
    "1023": "SELECT COUNT(*) FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE PA.overall_rating >= 60 AND PA.overall_rating < 65 AND PA.defensive_work_rate = 'low';\t----- bird -----\teuropean_football_2",
    "1024": "SELECT P.id, PA.crossing FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id ORDER BY PA.crossing DESC LIMIT 5\t----- bird -----\teuropean_football_2",
    "1025": "SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) AS total_goalsFROM Match AS MJOIN League AS L ON M.league_id = L.idWHERE M.season = '2015/2016'GROUP BY L.idORDER BY total_goals DESCLIMIT 1\t----- bird -----\teuropean_football_2",
    "1026": "SELECT T.team_long_name, COUNT(*) AS lossesFROM Match AS MINNER JOIN Team AS T ON M.home_team_api_id = T.team_api_idWHERE M.home_team_goal < M.away_team_goal AND M.season = '2015/2016'GROUP BY T.team_long_nameORDER BY losses ASCLIMIT 1\t----- bird -----\teuropean_football_2",
    "1027": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id ORDER BY PA.penalties DESC LIMIT 10\t----- bird -----\teuropean_football_2",
    "1028": "SELECT away_team_api_id FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League') AND season = '2009/2010' AND away_team_goal > home_team_goal GROUP BY away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1\t----- bird -----\teuropean_football_2",
    "1029": "SELECT team_api_id, buildUpPlaySpeed FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4 This revised query will return the `team_api_id` along with the `buildUpPlaySpeed` for the top 4 teams with the highest build-up play speed.\t----- bird -----\teuropean_football_2",
    "1030": "SELECT L.name, COUNT(*) AS draw_countFROM Match AS MJOIN League AS L ON M.league_id = L.idWHERE M.season = '2015/2016' AND M.home_team_goal = M.away_team_goalGROUP BY L.nameORDER BY draw_count DESCLIMIT 1\t----- bird -----\teuropean_football_2",
    "1031": "SELECT (strftime('%Y', 'now') - strftime('%Y', P.birthday)) - CASE  WHEN strftime('%m', 'now') < strftime('%m', P.birthday) OR   (strftime('%m', 'now') = strftime('%m', P.birthday) AND strftime('%d', 'now') < strftime('%d', P.birthday))  THEN 1  ELSE 0 END AS ageFROM Player_Attributes AS PAJOIN Player AS P ON PA.player_api_id = P.player_api_idWHERE PA.sprint_speed >= 97 AND PA.date >= '2013-01-01 00:00:00' AND PA.date <= '2015-12-31 00:00:00';\t----- bird -----\teuropean_football_2",
    "1032": "SELECT L.name, COUNT(M.id) AS match_countFROM Match AS MJOIN League AS L ON M.league_id = L.idGROUP BY M.league_idORDER BY match_count DESCLIMIT 1\t----- bird -----\teuropean_football_2",
    "1033": "SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';\t----- bird -----\teuropean_football_2",
    "1034": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010' AND overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010')) AND substr(date, 1, 4) = '2010'\t----- bird -----\teuropean_football_2",
    "1035": "SELECT T.team_fifa_api_id FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlaySpeed BETWEEN 51 AND 59\t----- bird -----\teuropean_football_2",
    "1036": "SELECT T.team_long_name FROM Team AS T JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing)    FROM Team_Attributes    WHERE strftime('%Y', date) = '2012' AND buildUpPlayPassing IS NOT NULL)AND strftime('%Y', TA.date) = '2012';\t----- bird -----\teuropean_football_2",
    "1037": "SELECT (SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) * 1.0 / COUNT(player_fifa_api_id)) * 100 AS percentage_left_footFROM PlayerWHERE birthday BETWEEN '1987-01-01' AND '1992-12-31';\t----- bird -----\teuropean_football_2",
    "1038": "SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) AS total_goalsFROM Match AS MINNER JOIN League AS L ON M.league_id = L.idGROUP BY L.nameORDER BY total_goals ASCLIMIT 5\t----- bird -----\teuropean_football_2",
    "1039": "SELECT AVG(PA.long_shots) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Ahmed Samir Farag'\t----- bird -----\teuropean_football_2",
    "1040": "SELECT P.player_name, AVG(PA.heading_accuracy) AS average_heading_accuracyFROM Player AS PINNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_idWHERE P.height > 180GROUP BY P.player_api_idORDER BY average_heading_accuracy DESCLIMIT 10\t----- bird -----\teuropean_football_2",
    "1041": "SELECT T.team_long_nameFROM Team_Attributes AS TAINNER JOIN Team AS T ON TA.team_api_id = T.team_api_idWHERE TA.buildUpPlayDribblingClass = 'Normal' AND TA.date >= '2014-01-01 00:00:00' AND TA.date <= '2014-12-31 23:59:59'AND TA.chanceCreationPassing < (SELECT AVG(chanceCreationPassing)    FROM Team_Attributes    WHERE date >= '2014-01-01 00:00:00'    AND date <= '2014-12-31 23:59:59')ORDER BY TA.chanceCreationPassing DESC\t----- bird -----\teuropean_football_2",
    "1042": "SELECT L.name FROM League AS L JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.id HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)\t----- bird -----\teuropean_football_2",
    "1043": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';\t----- bird -----\teuropean_football_2",
    "1044": "SELECT player_name, birthday FROM Player WHERE substr(birthday, 1, 4) = '1970' AND substr(birthday, 6, 2) = '10'\t----- bird -----\teuropean_football_2",
    "1045": "SELECT PA.attacking_work_rate FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Franco Zennaro'\t----- bird -----\teuropean_football_2",
    "1046": "SELECT T2.buildUpPlayPositioningClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'ADO Den Haag'\t----- bird -----\teuropean_football_2",
    "1047": "SELECT PA.heading_accuracy FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Francois Affolter' AND PA.date = '2014-09-18 00:00:00'\t----- bird -----\teuropean_football_2",
    "1048": "SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011'\t----- bird -----\teuropean_football_2",
    "1049": "SELECT COUNT(*) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Scotland Premier League' AND M.season = '2015/2016'\t----- bird -----\teuropean_football_2",
    "1050": "SELECT pa.preferred_foot FROM Player_Attributes pa JOIN Player p ON pa.player_api_id = p.player_api_id WHERE p.birthday = (SELECT MAX(birthday) FROM Player); This query correctly joins the `Player_Attributes` and `Player` tables and retrieves the `preferred_foot` of the youngest player based on the latest birthday.\t----- bird -----\teuropean_football_2",
    "1051": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes)\t----- bird -----\teuropean_football_2",
    "1052": "SELECT COUNT(*) FROM Player WHERE weight < 130 AND preferred_foot = 'left';\t----- bird -----\teuropean_football_2",
    "1053": "SELECT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.id = TA.team_api_id WHERE TA.chanceCreationPassingClass = 'Risky'\t----- bird -----\teuropean_football_2",
    "1054": "SELECT PA.defensive_work_rate FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'David Wilson'\t----- bird -----\teuropean_football_2",
    "1055": "SELECT P.birthday FROM Player AS P WHERE P.player_api_id = (SELECT player_api_id    FROM Player_Attributes    WHERE overall_rating = (SELECT MAX(overall_rating)     FROM Player_Attributes)    LIMIT 1)This ensures that we only get one player in case of ties for the highest overall rating.\t----- bird -----\teuropean_football_2",
    "1056": "SELECT L.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Netherlands'\t----- bird -----\teuropean_football_2",
    "1057": "SELECT AVG(M.home_team_goal) FROM Match AS M INNER JOIN Country AS C ON M.country_id = C.id WHERE C.name = 'Poland' AND M.season = '2010/2011'\t----- bird -----\teuropean_football_2",
    "1058": "SELECT p.player_name, AVG(pa.finishing) AS average_finishingFROM Player AS pJOIN Player_Attributes AS pa ON p.player_api_id = pa.player_api_idWHERE p.player_api_id IN ( SELECT player_api_id FROM Player WHERE height = (SELECT MAX(height) FROM Player) UNION SELECT player_api_id FROM Player WHERE height = (SELECT MIN(height) FROM Player))GROUP BY p.player_api_idORDER BY average_finishing DESCLIMIT 1\t----- bird -----\teuropean_football_2",
    "1059": "SELECT player_name FROM Player WHERE height > 180\t----- bird -----\teuropean_football_2",
    "1060": "SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990';\t----- bird -----\teuropean_football_2",
    "1061": "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170\t----- bird -----\teuropean_football_2",
    "1062": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating > 80 AND strftime('%Y', PA.date) BETWEEN '2008' AND '2010'\t----- bird -----\teuropean_football_2",
    "1063": "SELECT PA.potential FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Doran'\t----- bird -----\teuropean_football_2",
    "1064": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.id = PA.player_api_id WHERE PA.preferred_foot = 'left'\t----- bird -----\teuropean_football_2",
    "1065": "SELECT T.team_long_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Fast'\t----- bird -----\teuropean_football_2",
    "1066": "SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'CLB'\t----- bird -----\teuropean_football_2",
    "1067": "SELECT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlayPassing > 70\t----- bird -----\teuropean_football_2",
    "1068": "SELECT AVG(PA.overall_rating) FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE strftime('%Y', PA.date) BETWEEN '2010' AND '2015' AND P.height > 170\t----- bird -----\teuropean_football_2",
    "1069": "SELECT player_name, height FROM Player WHERE height = (SELECT MIN(height) FROM Player);\t----- bird -----\teuropean_football_2",
    "1070": "SELECT C.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE L.name = 'Italy Serie A'\t----- bird -----\teuropean_football_2",
    "1071": "SELECT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlaySpeed = 31   AND TA.buildUpPlayDribbling = 53   AND TA.buildUpPlayPassing = 32\t----- bird -----\teuropean_football_2",
    "1072": "SELECT AVG(PA.overall_rating) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Aaron Doran'\t----- bird -----\teuropean_football_2",
    "1073": "SELECT COUNT(*) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', M.date) BETWEEN '2008-08' AND '2008-10'\t----- bird -----\teuropean_football_2",
    "1074": "SELECT T.team_short_name FROM Match AS M INNER JOIN Team AS T ON M.home_team_api_id = T.team_api_id WHERE M.home_team_goal = 10\t----- bird -----\teuropean_football_2",
    "1075": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61) AND PA.potential = 61\t----- bird -----\teuropean_football_2",
    "1076": "SELECT (SELECT AVG(ball_control) FROM Player_Attributes  WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo')) - (SELECT AVG(ball_control) FROM Player_Attributes  WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Appindangoye')) AS ball_control_difference\t----- bird -----\teuropean_football_2",
    "1077": "`SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';`\t----- bird -----\teuropean_football_2",
    "1078": "SELECT player_name, birthday FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1\t----- bird -----\teuropean_football_2",
    "1079": "SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);\t----- bird -----\teuropean_football_2",
    "1080": "SELECT COUNT(*) FROM Player pJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_idWHERE pa.preferred_foot = 'left' AND pa.attacking_work_rate = 'low';\t----- bird -----\teuropean_football_2",
    "1081": "SELECT C.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE L.name = 'Belgium Jupiler League'\t----- bird -----\teuropean_football_2",
    "1082": "SELECT L.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Germany'\t----- bird -----\teuropean_football_2",
    "1083": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)\t----- bird -----\teuropean_football_2",
    "1084": "SELECT COUNT(*) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE strftime('%Y', P.birthday) < '1986' AND PA.defensive_work_rate = 'high'\t----- bird -----\teuropean_football_2",
    "1085": "SELECT P.player_name, PA.crossing FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY PA.crossing DESC LIMIT 1\t----- bird -----\teuropean_football_2",
    "1086": "SELECT PA.heading_accuracy FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Ariel Borysiuk'\t----- bird -----\teuropean_football_2",
    "1087": "SELECT COUNT(*) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 AND PA.volleys > 70\t----- bird -----\teuropean_football_2",
    "1088": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.volleys > 70 AND PA.dribbling > 70\t----- bird -----\teuropean_football_2",
    "1089": "SELECT COUNT(*) FROM Match AS M INNER JOIN Country AS C ON M.country_id = C.id WHERE M.season = '2008/2009' AND C.name = 'Belgium'\t----- bird -----\teuropean_football_2",
    "1090": "SELECT PA.long_passing FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_api_id = (SELECT player_api_id FROM Player ORDER BY birthday DESC LIMIT 1)\t----- bird -----\teuropean_football_2",
    "1091": "SELECT COUNT(*) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Belgium Jupiler League' AND strftime('%Y', M.date) = '2009' AND strftime('%m', M.date) = '04'\t----- bird -----\teuropean_football_2",
    "1092": "SELECT L.name, COUNT(M.id) AS match_countFROM Match AS MJOIN League AS L ON M.league_id = L.idWHERE M.season = '2008/2009'GROUP BY M.league_idORDER BY match_count DESCLIMIT 1\t----- bird -----\teuropean_football_2",
    "1093": "SELECT AVG(PA.overall_rating) AS average_rating FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE strftime('%Y', P.birthday) < '1986'\t----- bird -----\teuropean_football_2",
    "1094": "SELECT (ariel_rating - paul_rating) AS rating_difference, ariel_rating, paul_rating, ((ariel_rating - paul_rating) * 100.0 / paul_rating) AS percentage_differenceFROM ( SELECT  (SELECT overall_rating FROM Player_Attributes  WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')) AS ariel_rating, (SELECT overall_rating FROM Player_Attributes  WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel')) AS paul_rating);This revised query retrieves the overall ratings for both players once and calculates the required differences and percentages in a more efficient manner.\t----- bird -----\teuropean_football_2",
    "1095": "SELECT AVG(TA.buildUpPlaySpeed) FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.id = TA.team_api_id WHERE T.team_long_name = 'Heart of Midlothian'\t----- bird -----\teuropean_football_2",
    "1096": "SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Pietro Marino'\t----- bird -----\teuropean_football_2",
    "1097": "SELECT SUM(pa.crossing) AS total_crossing_scoreFROM Player pJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_idWHERE p.player_name = 'Aaron Lennox';\t----- bird -----\teuropean_football_2",
    "1098": "SELECT MAX(TA.chanceCreationPassing) AS highest_chance_creation_passing_score, TA.chanceCreationPassingClass FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Ajax'AND TA.chanceCreationPassing = (SELECT MAX(chanceCreationPassing)    FROM Team_Attributes    WHERE team_api_id = T.team_api_id)This query ensures that we get the classification corresponding to the maximum chance creation passing score for Ajax.\t----- bird -----\teuropean_football_2",
    "1099": "SELECT PA.preferred_foot FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Abdou Diallo'\t----- bird -----\teuropean_football_2",
    "1100": "SELECT MAX(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Dorlan Pabon')\t----- bird -----\teuropean_football_2",
    "1101": "SELECT AVG(M.away_team_goal) FROM Match AS M INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id INNER JOIN Country AS C ON M.country_id = C.id WHERE T.team_long_name = 'Parma' AND C.name = 'Italy'\t----- bird -----\teuropean_football_2",
    "1102": "SELECT P.player_name FROM Player AS P WHERE P.player_api_id IN ( SELECT player_api_id FROM Player_Attributes WHERE overall_rating = 77 AND date = '2016-06-23') ORDER BY P.birthday ASC LIMIT 1\t----- bird -----\teuropean_football_2",
    "1103": "SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Mooy') AND date = '2016-02-04 00:00:00'\t----- bird -----\teuropean_football_2",
    "1104": "SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francesco Parravicini') AND date = '2010-08-30 00:00:00'\t----- bird -----\teuropean_football_2",
    "1105": "SELECT attacking_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francesco Migliore') AND date = '2015-05-01 00:00:00'\t----- bird -----\teuropean_football_2",
    "1106": "SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Berigaud') AND date = '2013-02-22 00:00:00'\t----- bird -----\teuropean_football_2",
    "1107": "SELECT date FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Kevin Constant' AND PA.crossing = (SELECT MAX(crossing) FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Kevin Constant')ORDER BY date ASC LIMIT 1\t----- bird -----\teuropean_football_2",
    "1108": "SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Willem II' AND T2.date = '2012-02-22 00:00:00'\t----- bird -----\teuropean_football_2",
    "1109": "SELECT T2.buildUpPlayDribblingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'LEI' AND T2.date = '2015-09-10 00:00:00'\t----- bird -----\teuropean_football_2",
    "1110": "SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'FC Lorient' AND T2.date = '2010-02-22'\t----- bird -----\teuropean_football_2",
    "1111": "SELECT T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'PEC Zwolle' AND T2.date = '2013-09-20 00:00:00'\t----- bird -----\teuropean_football_2",
    "1112": "SELECT chanceCreationCrossingClass FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Hull City') AND date = '2010-02-22 00:00:00'\t----- bird -----\teuropean_football_2",
    "1113": "SELECT TA.defenceAggressionClass FROM Team_Attributes AS TA INNER JOIN Team AS T ON TA.team_api_id = T.id WHERE T.team_long_name = 'Hannover 96' AND TA.date = '2015-09-10 00:00:00'\t----- bird -----\teuropean_football_2",
    "1114": "SELECT AVG(PA.overall_rating) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Marko Arnautovic' AND PA.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'\t----- bird -----\teuropean_football_2",
    "1115": "SELECT ((SELECT overall_rating   FROM Player_Attributes AS PA   JOIN Player AS P ON PA.player_api_id = P.player_api_id   WHERE P.player_name = 'Landon Donovan' AND PA.date = '2013-07-12') -  (SELECT overall_rating   FROM Player_Attributes AS PA   JOIN Player AS P ON PA.player_api_id = P.player_api_id   WHERE P.player_name = 'Jordan Bowery' AND PA.date = '2013-07-12')) * 100.0 / (SELECT overall_rating   FROM Player_Attributes AS PA   JOIN Player AS P ON PA.player_api_id = P.player_api_id   WHERE P.player_name = 'Landon Donovan' AND PA.date = '2013-07-12') AS percentage_difference\t----- bird -----\teuropean_football_2",
    "1116": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 5\t----- bird -----\teuropean_football_2",
    "1117": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10\t----- bird -----\teuropean_football_2",
    "1118": "SELECT player_name FROM Player WHERE (julianday('now') - julianday(birthday)) / 365.25 >= 35;\t----- bird -----\teuropean_football_2",
    "1119": "SELECT SUM(home_team_goal) FROM Match WHERE home_team_api_id IN ( SELECT team_api_id FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id  FROM Player  WHERE player_name = 'Aaron Lennon' ))\t----- bird -----\teuropean_football_2",
    "1120": "SELECT SUM(away_team_goal) FROM Match WHERE away_team_api_id IN ( SELECT team_api_id FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id  FROM Player  WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') ))\t----- bird -----\teuropean_football_2",
    "1121": "SELECT SUM(M.home_team_goal) FROM Match AS M INNER JOIN Team AS T ON M.home_team_api_id = T.team_api_id INNER JOIN Player AS P ON T.team_api_id = P.team_api_id WHERE (strftime('%Y', 'now') - strftime('%Y', P.birthday)) <= 30\t----- bird -----\teuropean_football_2",
    "1122": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating IN ( SELECT DISTINCT PA2.overall_rating FROM Player_Attributes AS PA2 ORDER BY PA2.overall_rating DESC LIMIT 10)ORDER BY PA.overall_rating DESC;\t----- bird -----\teuropean_football_2",
    "1123": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes)\t----- bird -----\teuropean_football_2",
    "1124": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.attacking_work_rate = 'high'\t----- bird -----\teuropean_football_2",
    "1125": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.finishing = 1 ORDER BY P.birthday DESC LIMIT 1\t----- bird -----\teuropean_football_2",
    "1126": "SELECT DISTINCT P.player_name FROM Player AS P JOIN Team AS T ON P.player_api_id = T.team_api_id JOIN League AS L ON T.team_api_id = L.id JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Belgium' However, since the `League` table has a `country_id` that references the `Country` table, we should actually join `Team` to `League` using the `team_api_id` instead of `team_api_id` to `league_id`. The correct join should be:Revised_SQL: SELECT DISTINCT P.player_name FROM Player AS P JOIN Team AS T ON P.player_api_id = T.team_api_id JOIN League AS L ON T.team_api_id = L.id JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Belgium'This query is now correct and retrieves the names of players who came from Belgium.\t----- bird -----\teuropean_football_2",
    "1127": "SELECT P.player_name, C.name AS country_nameFROM Player AS PINNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_idINNER JOIN Team_Attributes AS TA ON P.id = TA.team_api_idINNER JOIN Team AS T ON TA.team_api_id = T.team_api_idINNER JOIN League AS L ON T.id = L.country_idINNER JOIN Country AS C ON L.country_id = C.idWHERE PA.vision >= 90\t----- bird -----\teuropean_football_2",
    "1128": "SELECT C.nameFROM Country AS CJOIN League AS L ON C.id = L.country_idJOIN Match AS M ON L.id = M.league_idJOIN Team AS T ON M.home_team_api_id = T.team_api_id OR M.away_team_api_id = T.team_api_idJOIN Player AS P ON T.team_api_id = P.player_api_idGROUP BY C.nameORDER BY AVG(P.weight) DESCLIMIT 1\t----- bird -----\teuropean_football_2",
    "1129": "SELECT T.team_long_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.id = TA.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Slow'\t----- bird -----\teuropean_football_2",
    "1130": "SELECT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.id = TA.team_api_id WHERE TA.chanceCreationPassingClass = 'Safe'\t----- bird -----\teuropean_football_2",
    "1131": "SELECT AVG(P.height) FROM Player AS P JOIN Team AS T ON P.team_api_id = T.team_api_id JOIN League AS L ON T.id = L.country_id JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Italy'\t----- bird -----\teuropean_football_2",
    "1132": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3\t----- bird -----\teuropean_football_2",
    "1133": "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31';\t----- bird -----\teuropean_football_2",
    "1134": "SELECT (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) - (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS jumping_difference\t----- bird -----\teuropean_football_2",
    "1135": "SELECT P.id FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = (SELECT MIN(potential) FROM Player_Attributes) AND PA.preferred_foot = 'right' ORDER BY P.id  -- This ensures we have a consistent order in case of tiesLIMIT 3\t----- bird -----\teuropean_football_2",
    "1136": "SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left';\t----- bird -----\teuropean_football_2",
    "1137": "SELECT (SELECT COUNT(*) FROM Player_Attributes WHERE strength > 80 AND stamina > 80) * 100.0 / (SELECT COUNT(*) FROM Player) AS percentage\t----- bird -----\teuropean_football_2",
    "1138": "SELECT C.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE L.name = 'Poland Ekstraklasa'\t----- bird -----\teuropean_football_2",
    "1139": "SELECT T1.home_team_goal, T1.away_team_goal FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.date LIKE '2008-09-24%' AND T2.name = 'Belgian Jupiler League'\t----- bird -----\teuropean_football_2",
    "1140": "SELECT PA.sprint_speed, PA.agility, PA.acceleration FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Alexis Blin'\t----- bird -----\teuropean_football_2",
    "1141": "SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge'\t----- bird -----\teuropean_football_2",
    "1142": "SELECT COUNT(*) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2015/2016' AND L.name = 'Italian Serie A'\t----- bird -----\teuropean_football_2",
    "1143": "SELECT MAX(M.home_team_goal) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Eredivisie' AND L.country_id = (SELECT id FROM Country WHERE name = 'Netherlands')\t----- bird -----\teuropean_football_2",
    "1144": "SELECT Player_Attributes.finishing, Player_Attributes.curve FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE weight = (SELECT MAX(weight) FROM Player))\t----- bird -----\teuropean_football_2",
    "1145": "SELECT L.name, COUNT(M.id) AS match_countFROM Match AS MJOIN League AS L ON M.league_id = L.idWHERE M.season = '2015/2016'GROUP BY L.idORDER BY match_count DESCLIMIT 1\t----- bird -----\teuropean_football_2",
    "1146": "SELECT T.team_long_name FROM Team AS T INNER JOIN Match AS M ON M.away_team_api_id = T.team_api_id WHERE M.away_team_goal = (SELECT MAX(away_team_goal) FROM Match)\t----- bird -----\teuropean_football_2",
    "1147": "SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)LIMIT 1\t----- bird -----\teuropean_football_2",
    "1148": "SELECT (COUNT(CASE WHEN P.height < 180 AND PA.overall_rating > 70 THEN 1 END) * 100.0) / COUNT(P.id) AS percentageFROM Player AS PJOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id\t----- bird -----\teuropean_football_2",
    "1149": "SELECT (COUNT(CASE WHEN SEX = 'M' AND Admission = '+' THEN 1 END) -  COUNT(CASE WHEN SEX = 'M' AND Admission = '-' THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN SEX = 'M' THEN 1 END), 0) AS deviation_percentageFROM Patient\t----- bird -----\tthrombosis_prediction",
    "1150": "SELECT (CAST(COUNT(CASE WHEN Birthday > '1930-01-01' AND SEX = 'F' THEN ID END) AS REAL) / COUNT(CASE WHEN SEX = 'F' THEN ID END)) * 100 AS percentage_female_born_after_1930FROM Patient;\t----- bird -----\tthrombosis_prediction",
    "1151": "SELECT (COUNT(CASE WHEN Admission = '+' THEN 1 END) * 100.0 / COUNT(*)) AS inpatient_percentageFROM PatientWHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31';\t----- bird -----\tthrombosis_prediction",
    "1152": "SELECT CAST(COUNT(CASE WHEN Admission = '+' THEN ID END) AS REAL) / NULLIF(COUNT(CASE WHEN Admission = '-' THEN ID END), 0) AS ratioFROM PatientWHERE Diagnosis = 'SLE';\t----- bird -----\tthrombosis_prediction",
    "1153": "SELECT P.Diagnosis, L.Date FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.ID = 30609\t----- bird -----\tthrombosis_prediction",
    "1154": "SELECT P.SEX, P.Birthday, E.Examination Date, E.Symptoms FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.ID = 163109\t----- bird -----\tthrombosis_prediction",
    "1155": "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH > 500\t----- bird -----\tthrombosis_prediction",
    "1156": "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.RVVT = '+'\t----- bird -----\tthrombosis_prediction",
    "1157": "SELECT P.ID, P.SEX, E.Diagnosis FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Thrombosis = 2\t----- bird -----\tthrombosis_prediction",
    "1158": "SELECT P.ID, P.SEX, P.Birthday, P.Description, P.First_Date, P.Admission, P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1937' AND L.T-CHO >= 250\t----- bird -----\tthrombosis_prediction",
    "1159": "SELECT P.ID, P.SEX, P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.ALB < 3.5\t----- bird -----\tthrombosis_prediction",
    "1160": "SELECT CAST(SUM(CASE WHEN L.TP < 6.0 OR L.TP > 8.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentageFROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F'\t----- bird -----\tthrombosis_prediction",
    "1161": "SELECT AVG(E.aCL IgG) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Admission = '+' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) >= 50\t----- bird -----\tthrombosis_prediction",
    "1162": "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND strftime('%Y', First Date) = '1997' AND Admission = '-';\t----- bird -----\tthrombosis_prediction",
    "1163": "SELECT MIN(strftime('%Y', First Date) - strftime('%Y', Birthday)) AS age FROM Patient WHERE First Date IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "1164": "SELECT COUNT(*) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Thrombosis = 1 AND P.SEX = 'F' AND E.Examination_Date LIKE '1997%'\t----- bird -----\tthrombosis_prediction",
    "1165": "SELECT (MAX(strftime('%Y', Birthday)) - MIN(strftime('%Y', Birthday))) AS age_gapFROM Patient AS PINNER JOIN Laboratory AS L ON P.ID = L.IDWHERE L.TG >= 200\t----- bird -----\tthrombosis_prediction",
    "1166": "SELECT E.Symptoms, E.Diagnosis FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Birthday = (SELECT MIN(Birthday) FROM Patient)\t----- bird -----\tthrombosis_prediction",
    "1167": "SELECT COUNT(L.ID) / 12.0 AS average_male_patients_per_monthFROM Laboratory AS LINNER JOIN Patient AS P ON L.ID = P.IDWHERE L.Date BETWEEN '1998-01-01' AND '1998-12-31' AND P.SEX = 'M'\t----- bird -----\tthrombosis_prediction",
    "1168": "SELECT (strftime('%Y', First_Date) - strftime('%Y', Birthday)) AS Age, (SELECT Date FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE Diagnosis = 'SJS' ORDER BY Birthday ASC LIMIT 1)) AS Lab_DateFROM Patient WHERE ID = (SELECT ID FROM Patient WHERE Diagnosis = 'SJS' ORDER BY Birthday ASC LIMIT 1)\t----- bird -----\tthrombosis_prediction",
    "1169": "SELECT (SELECT COUNT(*) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'M' AND L.UA <= 8.0) * 1.0 / (SELECT COUNT(*) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.UA <= 6.5) AS male_to_female_ratio\t----- bird -----\tthrombosis_prediction",
    "1170": "SELECT COUNT(P.ID) FROM Patient AS P LEFT JOIN Examination AS E ON P.ID = E.ID WHERE E.ID IS NULL OR (strftime('%Y', E.Examination Date) - strftime('%Y', P.First Date)) >= 1\t----- bird -----\tthrombosis_prediction",
    "1171": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE E.Examination_Date BETWEEN '1990-01-01' AND '1993-12-31' AND (strftime('%Y', E.Examination_Date) - strftime('%Y', P.Birthday)) < 18\t----- bird -----\tthrombosis_prediction",
    "1172": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.T-BIL > 2.0\t----- bird -----\tthrombosis_prediction",
    "1173": "SELECT Diagnosis, COUNT(Diagnosis) AS DiagnosisCountFROM Examination AS EJOIN Patient AS P ON E.ID = P.IDJOIN Laboratory AS L ON P.ID = L.IDWHERE E.Examination Date BETWEEN '1985-01-01' AND '1995-12-31'GROUP BY DiagnosisORDER BY DiagnosisCount DESCLIMIT 1\t----- bird -----\tthrombosis_prediction",
    "1174": "SELECT AVG(STRFTIME('%Y', '1991-10-31') - STRFTIME('%Y', P.Birthday)) AS average_ageFROM Laboratory AS LINNER JOIN Patient AS P ON L.ID = P.IDWHERE L.Date BETWEEN '1991-10-01' AND '1991-10-31'\t----- bird -----\tthrombosis_prediction",
    "1175": "SELECT strftime('%Y', E.Examination_Date) - strftime('%Y', P.Birthday) AS Age, P.Diagnosis FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID JOIN Examination AS E ON P.ID = E.ID WHERE L.HGB = (SELECT MAX(HGB) FROM Laboratory)\t----- bird -----\tthrombosis_prediction",
    "1176": "SELECT ANA FROM Examination WHERE ID = 3605340 AND Examination Date = '1996-12-02';\t----- bird -----\tthrombosis_prediction",
    "1177": "SELECT CASE  WHEN T1.T-CHO < 250 THEN 'Normal'  ELSE 'Abnormal' END AS Cholesterol_StatusFROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = 2927464 AND T1.Date = '1995-09-04'\t----- bird -----\tthrombosis_prediction",
    "1178": "SELECT P.SEX FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Diagnosis = 'AORTITIS' ORDER BY E.Examination Date LIMIT 1\t----- bird -----\tthrombosis_prediction",
    "1179": "SELECT aCL IgM FROM Examination WHERE ID = (SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19') AND Examination Date = '1993-11-12'\t----- bird -----\tthrombosis_prediction",
    "1180": "SELECT P.SEX FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.Date = '1992-06-12' AND L.GPT = 9\t----- bird -----\tthrombosis_prediction",
    "1181": "SELECT (1991 - strftime('%Y', Birthday)) AS Age FROM Patient WHERE ID = (SELECT ID FROM Laboratory WHERE UA = 8.4 AND Date = '1991-10-21') Since the only issue was the year used for the age calculation, the final query remains the same as the original provided query. Thus, the final answer is:Final_SQL: SELECT (1991 - strftime('%Y', Birthday)) AS Age FROM Patient WHERE ID = (SELECT ID FROM Laboratory WHERE UA = 8.4 AND Date = '1991-10-21')\t----- bird -----\tthrombosis_prediction",
    "1182": "SELECT COUNT(ID) FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE First Date = '1991-06-13' AND Diagnosis = 'SJS') AND Date >= '1995-01-01' AND Date < '1996-01-01';\t----- bird -----\tthrombosis_prediction",
    "1183": "SELECT Diagnosis FROM Patient WHERE ID = (SELECT ID FROM Examination WHERE Diagnosis = 'SLE' AND [Examination Date] = '1997-01-27')\t----- bird -----\tthrombosis_prediction",
    "1184": "SELECT Symptoms FROM Examination WHERE ID = (SELECT ID FROM Patient WHERE Birthday = '1959-03-01') AND Examination Date = '1993-09-27'\t----- bird -----\tthrombosis_prediction",
    "1185": "SELECT (SUM(CASE WHEN Date LIKE '1981-11-%' THEN T-CHO ELSE 0 END) -  SUM(CASE WHEN Date LIKE '1981-12-%' THEN T-CHO ELSE 0 END)) AS Decrease_RateFROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE Birthday = '1959-02-18')\t----- bird -----\tthrombosis_prediction",
    "1186": "SELECT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Diagnosis = 'Behcet' AND E.Examination Date >= '1997-01-01' AND E.Examination Date < '1998-01-01'\t----- bird -----\tthrombosis_prediction",
    "1187": "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Examination Date BETWEEN '1987-07-06' AND '1996-01-31' AND L.GPT > 30 AND L.ALB < 4\t----- bird -----\tthrombosis_prediction",
    "1188": "SELECT ID FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+' ORDER BY ID;\t----- bird -----\tthrombosis_prediction",
    "1189": "SELECT COUNT(DISTINCT P.ID) FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.Thrombosis = 2 AND E.ANA Pattern = 'S' AND E.aCL IgM > (SELECT AVG(aCL IgM) * 1.2 FROM Examination)\t----- bird -----\tthrombosis_prediction",
    "1190": "WITH NormalProteinuria AS ( SELECT COUNT(*) AS total_patients FROM Laboratory WHERE U-PRO > 0 AND U-PRO < 30),UricAcidBelowNormal AS ( SELECT COUNT(*) AS patients_with_low_UA FROM Laboratory WHERE U-PRO > 0 AND U-PRO < 30 AND UA <= 6.5)SELECT (SELECT patients_with_low_UA FROM UricAcidBelowNormal) * 100.0 / (SELECT total_patients FROM NormalProteinuria) AS percentage\t----- bird -----\tthrombosis_prediction",
    "1191": "SELECT (SELECT COUNT(*)  FROM Patient p JOIN Examination e ON p.ID = e.ID WHERE p.SEX = 'M'  AND strftime('%Y', p.First Date) = '1981'  AND e.Diagnosis = 'BEHCET') * 100.0 / (SELECT COUNT(*)  FROM Patient p WHERE p.SEX = 'M'  AND strftime('%Y', p.First Date) = '1981') AS Percentage\t----- bird -----\tthrombosis_prediction",
    "1192": "SELECT P.*FROM Patient AS PINNER JOIN Laboratory AS L ON P.ID = L.IDWHERE P.Admission = '-'   AND L.Date LIKE '1991-10%'   AND L.T-BIL < 2.0\t----- bird -----\tthrombosis_prediction",
    "1193": "SELECT COUNT(*) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.ANA Pattern != 'P' AND P.SEX = 'F' AND P.Birthday BETWEEN '1980-01-01' AND '1989-12-31'\t----- bird -----\tthrombosis_prediction",
    "1194": "SELECT P.SEX FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Diagnosis = 'PSS' AND L.CRP > 2 AND L.CRE = 1 AND L.LDH = 123\t----- bird -----\tthrombosis_prediction",
    "1195": "SELECT AVG(Laboratory.ALB) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND Patient.Diagnosis = 'SLE' AND Laboratory.PLT > 400\t----- bird -----\tthrombosis_prediction",
    "1196": "SELECT Symptoms FROM ( SELECT Symptoms, COUNT(*) as symptom_count FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms) ORDER BY symptom_count DESC LIMIT 1\t----- bird -----\tthrombosis_prediction",
    "1197": "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473;\t----- bird -----\tthrombosis_prediction",
    "1198": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.SEX = 'F' AND E.Diagnosis = 'APS'\t----- bird -----\tthrombosis_prediction",
    "1199": "SELECT COUNT(DISTINCT P.ID) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE strftime('%Y', L.Date) = '1997' AND (L.TP <= 6 OR L.TP >= 8.5)\t----- bird -----\tthrombosis_prediction",
    "1200": "SELECT (SUM(CASE WHEN E.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) * 100.0) / SUM(CASE WHEN E.Symptoms LIKE '%thrombocytopenia%' THEN 1 ELSE 0 END) AS proportionFROM Examination AS EJOIN Patient AS P ON E.ID = P.IDWHERE E.Symptoms LIKE '%thrombocytopenia%'\t----- bird -----\tthrombosis_prediction",
    "1201": "SELECT (COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_of_womenFROM PatientWHERE strftime('%Y', Birthday) = '1980' AND Diagnosis = 'RA';\t----- bird -----\tthrombosis_prediction",
    "1202": "SELECT COUNT(*) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.SEX = 'M' AND E.Examination Date BETWEEN '1995-01-01' AND '1997-12-31' AND E.Diagnosis = 'BEHCET' AND P.Admission = '-'\t----- bird -----\tthrombosis_prediction",
    "1203": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.WBC < 3.5\t----- bird -----\tthrombosis_prediction",
    "1204": "SELECT julianday(E.Examination Date) - julianday(P.First Date) AS Days_BetweenFROM Patient AS PINNER JOIN Examination AS E ON P.ID = E.IDWHERE P.ID = 821298\t----- bird -----\tthrombosis_prediction",
    "1205": "SELECT CASE  WHEN P.SEX = 'M' AND L.UA > 8.0 THEN 'Normal' WHEN P.SEX = 'F' AND L.UA > 6.5 THEN 'Normal' ELSE 'Not Normal' END AS Uric_Acid_StatusFROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.ID = 57266\t----- bird -----\tthrombosis_prediction",
    "1206": "SELECT L.Date FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.ID = 48473 AND L.GOT >= 60\t----- bird -----\tthrombosis_prediction",
    "1207": "SELECT P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT < 60 AND strftime('%Y', L.Date) = '1994'\t----- bird -----\tthrombosis_prediction",
    "1208": "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT >= 60\t----- bird -----\tthrombosis_prediction",
    "1209": "SELECT P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GPT > 60 ORDER BY P.Birthday ASC\t----- bird -----\tthrombosis_prediction",
    "1210": "SELECT AVG(LDH) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.LDH < 500\t----- bird -----\tthrombosis_prediction",
    "1211": "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS AgeFROM Patient AS PINNER JOIN Laboratory AS L ON P.ID = L.IDWHERE L.LDH BETWEEN 600 AND 800\t----- bird -----\tthrombosis_prediction",
    "1212": "SELECT P.Admission, COUNT(*) AS PatientCountFROM Laboratory AS LINNER JOIN Patient AS P ON L.ID = P.IDWHERE L.ALP < 300GROUP BY P.Admission\t----- bird -----\tthrombosis_prediction",
    "1213": "SELECT P.ID, L.ALP FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday = '1982-04-01' AND L.ALP < 300\t----- bird -----\tthrombosis_prediction",
    "1214": "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TP < 6.0\t----- bird -----\tthrombosis_prediction",
    "1215": "SELECT (Laboratory.TP - 8.5) AS TP_DeviationFROM PatientINNER JOIN Laboratory ON Laboratory.ID = Patient.IDWHERE Patient.SEX = 'F' AND Laboratory.TP > 8.5\t----- bird -----\tthrombosis_prediction",
    "1216": "SELECT P.ID, P.Birthday, P.SEX, L.ALB FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND (L.ALB <= 3.5 OR L.ALB >= 5.5) ORDER BY P.Birthday DESC\t----- bird -----\tthrombosis_prediction",
    "1217": "SELECT P.ID, CASE  WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range'  ELSE 'Out of Normal Range' END AS Albumin_StatusFROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) = '1982'\t----- bird -----\tthrombosis_prediction",
    "1218": "SELECT (SELECT COUNT(*)  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE P.SEX = 'F' AND L.UA > 6.5) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') AS percentage_female_with_high_UA Since the original query is already correct in terms of logic and structure, we can return it as is. Final SQL: SELECT (SELECT COUNT(*)  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE P.SEX = 'F' AND L.UA > 6.5) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') AS percentage_female_with_high_UA\t----- bird -----\tthrombosis_prediction",
    "1219": "SELECT AVG(L.UA) AS Average_UAFROM Laboratory LINNER JOIN ( SELECT ID, MAX(Date) AS LatestDate FROM Laboratory GROUP BY ID) AS LatestLab ON L.ID = LatestLab.ID AND L.Date = LatestLab.LatestDateINNER JOIN Patient P ON L.ID = P.IDWHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5)\t----- bird -----\tthrombosis_prediction",
    "1220": "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.UN = 29\t----- bird -----\tthrombosis_prediction",
    "1221": "SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'RA' AND L.UN < 30\t----- bird -----\tthrombosis_prediction",
    "1222": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5\t----- bird -----\tthrombosis_prediction",
    "1223": "SELECT (SELECT COUNT(*) FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.CRE >= 1.5 AND P.SEX = 'M') > (SELECT COUNT(*) FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.CRE >= 1.5 AND P.SEX = 'F') AS More_Male_Than_Female\t----- bird -----\tthrombosis_prediction",
    "1224": "SELECT P.ID, P.SEX, P.Birthday FROM Laboratory L JOIN Patient P ON L.ID = P.ID WHERE L.T-BIL = (SELECT MAX(T-BIL) FROM Laboratory)\t----- bird -----\tthrombosis_prediction",
    "1225": "SELECT P.SEX, COUNT(*) AS Total_PatientsFROM Patient AS PINNER JOIN Laboratory AS L ON P.ID = L.IDWHERE L.T-BIL >= 2.0GROUP BY P.SEX\t----- bird -----\tthrombosis_prediction",
    "1226": "SELECT P.ID, L.T-CHO FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.T-CHO = (SELECT MAX(T-CHO) FROM Laboratory) AND P.Birthday = (SELECT MIN(Birthday) FROM Patient)\t----- bird -----\tthrombosis_prediction",
    "1227": "SELECT AVG(STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS average_ageFROM Patient AS PINNER JOIN Laboratory AS L ON P.ID = L.IDWHERE P.SEX = 'M' AND L.T-CHO >= 250\t----- bird -----\tthrombosis_prediction",
    "1228": "SELECT P.ID, P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG > 300\t----- bird -----\tthrombosis_prediction",
    "1229": "SELECT COUNT(*) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.TG >= 200 AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 50\t----- bird -----\tthrombosis_prediction",
    "1230": "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.CPK < 250\t----- bird -----\tthrombosis_prediction",
    "1231": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND P.SEX = 'M' AND L.CPK > 250\t----- bird -----\tthrombosis_prediction",
    "1232": "SELECT P.ID, P.SEX, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.T-CHO < 250\t----- bird -----\tthrombosis_prediction",
    "1233": "SELECT P.ID, L.GLU FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE CAST(SUBSTR(P.Description, 1, 4) AS INTEGER) >= 1991 AND L.GLU < 180\t----- bird -----\tthrombosis_prediction",
    "1234": "SELECT P.ID, P.SEX, P.BirthdayFROM Patient AS PINNER JOIN Laboratory AS L ON P.ID = L.IDWHERE L.WBC <= 3.5 OR L.WBC >= 9.0GROUP BY P.SEXORDER BY strftime('%Y', 'now') - strftime('%Y', P.Birthday) ASC\t----- bird -----\tthrombosis_prediction",
    "1235": "SELECT P.ID, P.Diagnosis, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS Age FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.RBC < 3.5\t----- bird -----\tthrombosis_prediction",
    "1236": "SELECT Patient.Admission FROM Patient INNER JOIN Laboratory ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'F' AND (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) >= 50 AND (Laboratory.RBC <= 3.5 OR Laboratory.RBC >= 6.0)\t----- bird -----\tthrombosis_prediction",
    "1237": "SELECT P.ID, P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.HGB < 10\t----- bird -----\tthrombosis_prediction",
    "1238": "SELECT ID, SEXFROM PatientWHERE ID IN ( SELECT E.ID FROM Examination AS E JOIN Laboratory AS L ON E.ID = L.ID WHERE E.Diagnosis = 'SLE' AND L.HGB > 10 AND L.HGB < 17)ORDER BY Birthday ASCLIMIT 1This query selects the ID and SEX of the oldest patient diagnosed with SLE who has a normal hemoglobin level. It uses a subquery to filter the IDs of patients diagnosed with SLE and then orders the results by Birthday to find the oldest patient.\t----- bird -----\tthrombosis_prediction",
    "1239": "SELECT P.ID, (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) AS ageFROM Laboratory LJOIN Patient P ON L.ID = P.IDWHERE L.HCT >= 52GROUP BY P.IDHAVING COUNT(L.ID) > 2\t----- bird -----\tthrombosis_prediction",
    "1240": "SELECT AVG(L.HCT) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.Date LIKE '1991%' AND L.HCT < 29\t----- bird -----\tthrombosis_prediction",
    "1241": "SELECT (SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT < 100) AS Low_Platelet_Count, (SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT > 400) AS High_Platelet_Count, (SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT < 100) - (SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT > 400) AS Difference\t----- bird -----\tthrombosis_prediction",
    "1242": "SELECT P.IDFROM Laboratory AS LINNER JOIN Patient AS P ON L.ID = P.IDWHERE L.Date LIKE '1984%'AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) < 50AND L.PLT BETWEEN 100 AND 400\t----- bird -----\tthrombosis_prediction",
    "1243": "SELECT (SUM(CASE WHEN L.PT >= 14 AND P.SEX = 'F' THEN 1 ELSE 0 END) * 1.0 /  NULLIF(COUNT(CASE WHEN P.SEX = 'F' THEN 1 END), 0)) * 100 AS percentage_female_abnormal_PTFROM Patient PJOIN Laboratory L ON P.ID = L.IDWHERE (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 55 AND P.SEX = 'F'\t----- bird -----\tthrombosis_prediction",
    "1244": "SELECT P.*FROM Patient AS PINNER JOIN Laboratory AS L ON P.ID = L.IDWHERE P.First Date > '1992-01-01' AND L.PT < 14\t----- bird -----\tthrombosis_prediction",
    "1245": "SELECT COUNT(*) FROM Examination AS E JOIN Laboratory AS L ON E.ID = L.ID WHERE E.Examination Date > '1997-01-01' AND L.APTT < 45 Since the original SQL query is already correct in terms of structure and logic (except for the APTT column issue), the final answer is:Revised_SQL: SELECT COUNT(*) FROM Examination AS E JOIN Laboratory AS L ON E.ID = L.ID WHERE E.Examination Date > '1997-01-01' AND L.APTT < 45\t----- bird -----\tthrombosis_prediction",
    "1246": "SELECT COUNT(DISTINCT P.ID) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID INNER JOIN Examination AS E ON E.ID = P.ID WHERE E.Thrombosis = 3This query counts the distinct patients with mild thrombosis without checking for the abnormal activated partial prothrombin time, as the relevant column is not available.\t----- bird -----\tthrombosis_prediction",
    "1247": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'M' AND Laboratory.WBC >= 3.5 AND Laboratory.WBC <= 9.0 AND (Laboratory.FG <= 150 OR Laboratory.FG >= 450)\t----- bird -----\tthrombosis_prediction",
    "1248": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND (L.FG < 150 OR L.FG > 450)\t----- bird -----\tthrombosis_prediction",
    "1249": "SELECT DISTINCT P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.U-PRO >= 30\t----- bird -----\tthrombosis_prediction",
    "1250": "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.U_PRO > 0 AND L.U_PRO < 30 AND P.Diagnosis = 'SLE'\t----- bird -----\tthrombosis_prediction",
    "1251": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.IGG < 900 AND E.Symptoms = 'abortion'\t----- bird -----\tthrombosis_prediction",
    "1252": "SELECT COUNT(DISTINCT E.ID) FROM Examination EINNER JOIN Laboratory L ON E.ID = L.IDWHERE L.IGG BETWEEN 900 AND 2000 AND E.Symptoms IS NOT NULL\t----- bird -----\tthrombosis_prediction",
    "1253": "SELECT P.Diagnosis FROM Patient P JOIN Examination E ON P.ID = E.ID WHERE E.aCL IgA = (SELECT MAX(aCL IgA) FROM Examination WHERE aCL IgA BETWEEN 80 AND 500);\t----- bird -----\tthrombosis_prediction",
    "1254": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGA BETWEEN 80 AND 500 AND P.First_Date >= '1990-01-01'\t----- bird -----\tthrombosis_prediction",
    "1255": "SELECT Diagnosis FROM ( SELECT E.Diagnosis, COUNT(*) AS DiagnosisCount FROM Examination AS E WHERE E.aCL IgM NOT BETWEEN 40 AND 400 GROUP BY E.Diagnosis) AS DiagnosisCounts ORDER BY DiagnosisCount DESC LIMIT 1\t----- bird -----\tthrombosis_prediction",
    "1256": "SELECT COUNT(P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.CRP LIKE '+' OR L.CRP LIKE '-' OR L.CRP < 1.0) AND P.Description IS NULL\t----- bird -----\tthrombosis_prediction",
    "1257": "SELECT COUNT(DISTINCT P.ID) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.CRP NOT IN ('+-', '-') AND L.CRP >= 1.0 AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) < 18\t----- bird -----\tthrombosis_prediction",
    "1258": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.RA = '-' OR L.RA = '+-') AND E.KCT = '+'\t----- bird -----\tthrombosis_prediction",
    "1259": "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday >= '1995-01-01' AND L.RA IN ('-', '+-')\t----- bird -----\tthrombosis_prediction",
    "1260": "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RF < 20 AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 60\t----- bird -----\tthrombosis_prediction",
    "1261": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.RF < 20 AND E.Thrombosis = 0\t----- bird -----\tthrombosis_prediction",
    "1262": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID JOIN Examination AS E ON P.ID = E.ID WHERE L.C3 > 35 AND E.ANA Pattern = 'P'\t----- bird -----\tthrombosis_prediction",
    "1263": "SELECT T1.IDFROM Patient AS T1INNER JOIN Examination AS T2 ON T1.ID = T2.IDINNER JOIN Laboratory AS T3 ON T1.ID = T3.IDWHERE T3.HCT <= 29 OR T3.HCT >= 52ORDER BY T2.aCL IgA DESCLIMIT 1\t----- bird -----\tthrombosis_prediction",
    "1264": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Thrombosis >= 1 AND L.C4 > 10\t----- bird -----\tthrombosis_prediction",
    "1265": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.RNP = '-' OR L.RNP = '+-') AND P.Admission = '+'\t----- bird -----\tthrombosis_prediction",
    "1266": "SELECT P.Birthday FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RNP NOT IN ('-', '+-') ORDER BY P.Birthday DESC LIMIT 1\t----- bird -----\tthrombosis_prediction",
    "1267": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID JOIN Examination AS E ON P.ID = E.ID WHERE E.SM IN ('-', '+-') AND E.Thrombosis = 1\t----- bird -----\tthrombosis_prediction",
    "1268": "SELECT P.ID FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.SM NOT IN ('-', '+-') ORDER BY P.Birthday DESC LIMIT 3\t----- bird -----\tthrombosis_prediction",
    "1269": "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Examination Date >= '1997-01-01' AND L.SC170 IN ('-', '+-')\t----- bird -----\tthrombosis_prediction",
    "1270": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID JOIN Examination AS E ON P.ID = E.ID WHERE P.SEX = 'M' AND (L.SC170 = '-' OR L.SC170 = '+-') AND E.Symptoms LIKE '%vertigo%'\t----- bird -----\tthrombosis_prediction",
    "1271": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA IN ('-', '+-') AND CAST(SUBSTR(P.First Date, 1, 4) AS INTEGER) < 1990 AND P.Admission = '+'\t----- bird -----\tthrombosis_prediction",
    "1272": "SELECT P.ID FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.SSA NOT IN ('-', '+-') ORDER BY P.First Date LIMIT 1\t----- bird -----\tthrombosis_prediction",
    "1273": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Examination.Diagnosis = 'SLE';\t----- bird -----\tthrombosis_prediction",
    "1274": "SELECT COUNT(DISTINCT P.ID) FROM Laboratory L JOIN Patient P ON L.ID = P.ID JOIN Examination E ON P.ID = E.ID WHERE L.SSB IN ('-', '+-') AND E.Symptoms IS NOT NULL\t----- bird -----\tthrombosis_prediction",
    "1275": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CENTROMEA IN ('-', '+-') AND P.SEX = 'M'\t----- bird -----\tthrombosis_prediction",
    "1276": "SELECT E.Diagnosis FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.DNA >= 8\t----- bird -----\tthrombosis_prediction",
    "1277": "SELECT COUNT(DISTINCT P.ID) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.DNA < 8 AND P.Description IS NULL\t----- bird -----\tthrombosis_prediction",
    "1278": "SELECT COUNT(*) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.DNA-II >= 8 AND P.Admission = '+'\t----- bird -----\tthrombosis_prediction",
    "1279": "SELECT (SELECT COUNT(L.ID)  FROM Laboratory AS L  JOIN Patient AS P ON L.ID = P.ID  WHERE L.GOT >= 60 AND P.Diagnosis = 'SLE') * 1.0 / (SELECT COUNT(L.ID)  FROM Laboratory AS L  WHERE L.GOT >= 60) * 100 AS percentage\t----- bird -----\tthrombosis_prediction",
    "1280": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GOT < 60\t----- bird -----\tthrombosis_prediction",
    "1281": "SELECT MAX(P.Birthday) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GOT >= 60\t----- bird -----\tthrombosis_prediction",
    "1282": "SELECT P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT < 60 ORDER BY L.GPT DESC LIMIT 3\t----- bird -----\tthrombosis_prediction",
    "1283": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT < 60 AND P.SEX = 'M'\t----- bird -----\tthrombosis_prediction",
    "1284": "SELECT MIN(First Date) FROM Patient WHERE ID = (SELECT ID FROM Laboratory WHERE LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500))\t----- bird -----\tthrombosis_prediction",
    "1285": "SELECT MAX(P.First Date) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH >= 500\t----- bird -----\tthrombosis_prediction",
    "1286": "SELECT COUNT(*) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.ALP >= 300 AND P.Admission = '+'\t----- bird -----\tthrombosis_prediction",
    "1287": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.ALP < 300\t----- bird -----\tthrombosis_prediction",
    "1288": "SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TP < 6.0\t----- bird -----\tthrombosis_prediction",
    "1289": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5\t----- bird -----\tthrombosis_prediction",
    "1290": "SELECT Examination Date FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5)\t----- bird -----\tthrombosis_prediction",
    "1291": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP BETWEEN 6.0 AND 8.5\t----- bird -----\tthrombosis_prediction",
    "1292": "SELECT E.aCL_IgG, E.aCL_IgM, E.aCL_IgA FROM Examination E WHERE E.ID IN (SELECT ID  FROM Laboratory  WHERE UA = (SELECT MAX(UA)   FROM Laboratory   WHERE ID IN (SELECT ID FROM Patient WHERE SEX = 'F') AND UA > 6.5))The final SQL query is correct as is, except for the missing closing parenthesis. The corrected version is provided above.\t----- bird -----\tthrombosis_prediction",
    "1293": "SELECT MAX(E.ANA) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.CRE < 1.5\t----- bird -----\tthrombosis_prediction",
    "1294": "SELECT P.ID FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID JOIN Examination AS E ON P.ID = E.ID WHERE L.CRE < 1.5 AND E.aCL IgA = (SELECT MAX(aCL IgA) FROM Examination)\t----- bird -----\tthrombosis_prediction",
    "1295": "SELECT COUNT(DISTINCT P.ID) FROM Laboratory L JOIN Patient P ON L.ID = P.ID JOIN Examination E ON P.ID = E.ID WHERE L.T-BIL >= 2.0 AND E.ANA Pattern LIKE '%P%'\t----- bird -----\tthrombosis_prediction",
    "1296": "SELECT E.ANA FROM Examination AS E WHERE E.ID IN (SELECT ID FROM Laboratory WHERE T-BIL = (SELECT MAX(T-BIL) FROM Laboratory WHERE T-BIL < 2.0))\t----- bird -----\tthrombosis_prediction",
    "1297": "SELECT COUNT(*) FROM Laboratory AS L INNER JOIN Examination AS E ON L.ID = E.ID INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.T-CHO >= 250 AND E.KCT = '-'\t----- bird -----\tthrombosis_prediction",
    "1298": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.T-CHO < 250 AND E.ANA Pattern = 'P'\t----- bird -----\tthrombosis_prediction",
    "1299": "SELECT COUNT(DISTINCT P.ID) FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID JOIN Examination AS E ON P.ID = E.ID WHERE L.TG < 200 AND E.Symptoms IS NOT NULL\t----- bird -----\tthrombosis_prediction",
    "1300": "SELECT P.Diagnosis FROM Patient AS P JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG = (SELECT MAX(TG) FROM Laboratory WHERE TG < 200)\t----- bird -----\tthrombosis_prediction",
    "1301": "SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Thrombosis = 0 AND L.CPK < 250\t----- bird -----\tthrombosis_prediction",
    "1302": "SELECT COUNT(DISTINCT P.ID) FROM Laboratory AS L JOIN Examination AS E ON L.ID = E.ID JOIN Patient AS P ON L.ID = P.ID WHERE L.CPK < 250 AND (E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+')\t----- bird -----\tthrombosis_prediction",
    "1303": "SELECT MIN(P.Birthday) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU > 180\t----- bird -----\tthrombosis_prediction",
    "1304": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.GLU < 180 AND E.Thrombosis = 0\t----- bird -----\tthrombosis_prediction",
    "1305": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '+' AND L.WBC BETWEEN 3.5 AND 9.0\t----- bird -----\tthrombosis_prediction",
    "1306": "SELECT COUNT(DISTINCT P.ID) FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0\t----- bird -----\tthrombosis_prediction",
    "1307": "SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.RBC <= 3.5 OR L.RBC >= 6.0) AND P.Admission = '-'\t----- bird -----\tthrombosis_prediction",
    "1308": "SELECT COUNT(P.ID) FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID INNER JOIN Examination E ON P.ID = E.ID WHERE L.PLT > 100 AND L.PLT < 400 AND E.Symptoms IS NOT NULL\t----- bird -----\tthrombosis_prediction",
    "1309": "SELECT L.PLT FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID INNER JOIN Examination AS E ON E.ID = P.ID WHERE L.PLT > 100 AND L.PLT < 400 AND E.Diagnosis = 'MCTD'\t----- bird -----\tthrombosis_prediction",
    "1310": "SELECT AVG(Laboratory.PT) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.PT < 14\t----- bird -----\tthrombosis_prediction",
    "1311": "SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Thrombosis IN (1, 2) AND L.PT < 14\t----- bird -----\tthrombosis_prediction",
    "1312": "SELECT M2.major_name FROM member AS M1 INNER JOIN major AS M2 ON M1.link_to_major = M2.major_id WHERE M1.first_name = 'Angela' AND M1.last_name = 'Sanders'\t----- bird -----\tstudent_club",
    "1313": "SELECT COUNT(*) FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.college = 'College of Engineering'\t----- bird -----\tstudent_club",
    "1314": "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'\t----- bird -----\tstudent_club",
    "1315": "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer'\t----- bird -----\tstudent_club",
    "1316": "SELECT M.phone FROM attendance AS A INNER JOIN event AS E ON A.link_to_event = E.event_id INNER JOIN member AS M ON A.link_to_member = M.member_id WHERE E.event_name = 'Women''s Soccer'\t----- bird -----\tstudent_club",
    "1317": "SELECT COUNT(*) FROM attendance AS A INNER JOIN event AS E ON A.link_to_event = E.event_id INNER JOIN member AS M ON A.link_to_member = M.member_id WHERE E.event_name = 'Women''s Soccer' AND M.t_shirt_size = 'Medium'\t----- bird -----\tstudent_club",
    "1318": "SELECT E.event_id, E.event_name, COUNT(A.link_to_member) AS attendance_countFROM attendance AS AINNER JOIN event AS E ON A.link_to_event = E.event_idGROUP BY A.link_to_eventORDER BY attendance_count DESCLIMIT 1\t----- bird -----\tstudent_club",
    "1319": "SELECT M.link_to_major, MA.college FROM member AS M INNER JOIN major AS MA ON M.link_to_major = MA.major_id WHERE M.position = 'Vice President'\t----- bird -----\tstudent_club",
    "1320": "SELECT event.event_name FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE member.first_name = 'Maya' AND member.last_name = 'Mclean'\t----- bird -----\tstudent_club",
    "1321": "SELECT COUNT(*) FROM attendance AS a INNER JOIN event AS e ON a.link_to_event = e.event_id WHERE a.link_to_member = (SELECT member_id FROM member WHERE first_name = 'Sacha' AND last_name = 'Harrison') AND strftime('%Y', e.event_date) = '2019'\t----- bird -----\tstudent_club",
    "1322": "SELECT COUNT(*) FROM ( SELECT T1.link_to_event FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id GROUP BY T1.link_to_event HAVING COUNT(T1.link_to_member) > 10 AND T2.type = 'Meeting') AS Subquery\t----- bird -----\tstudent_club",
    "1323": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20\t----- bird -----\tstudent_club",
    "1324": "SELECT CAST(COUNT(T1.link_to_event) AS REAL) / COUNT(DISTINCT T2.event_name) AS average_attendanceFROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' AND strftime('%Y', T2.event_date) = '2020'\t----- bird -----\tstudent_club",
    "1325": "SELECT expense_description, cost FROM expense WHERE cost = (SELECT MAX(cost) FROM expense) LIMIT 1\t----- bird -----\tstudent_club",
    "1326": "SELECT COUNT(*) FROM member AS m INNER JOIN major AS j ON m.link_to_major = j.major_id WHERE j.major_name = 'Environmental Engineering'\t----- bird -----\tstudent_club",
    "1327": "SELECT T1.first_name || ' ' || T1.last_name AS full_nameFROM attendance AS T2 INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id INNER JOIN member AS T1 ON T2.link_to_member = T1.member_id WHERE T3.event_name = 'Laugh Out Loud'\t----- bird -----\tstudent_club",
    "1328": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'\t----- bird -----\tstudent_club",
    "1329": "SELECT Z.county FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'Sherri' AND M.last_name = 'Ramsey'\t----- bird -----\tstudent_club",
    "1330": "SELECT M2.college FROM member AS M1 INNER JOIN major AS M2 ON M1.link_to_major = M2.major_id WHERE M1.first_name = 'Tyler' AND M1.last_name = 'Hewitt'\t----- bird -----\tstudent_club",
    "1331": "SELECT SUM(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President'\t----- bird -----\tstudent_club",
    "1332": "SELECT T1.spent FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food' AND T2.event_name = 'September Meeting'\t----- bird -----\tstudent_club",
    "1333": "SELECT Z.city, Z.state FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.position = 'President'\t----- bird -----\tstudent_club",
    "1334": "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'\t----- bird -----\tstudent_club",
    "1335": "SELECT T1.spent FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.event_name = 'September Meeting'\t----- bird -----\tstudent_club",
    "1336": "SELECT DISTINCT MA.department FROM member AS M JOIN major AS MA ON M.link_to_major = MA.major_id WHERE M.first_name = 'Luisa' AND M.last_name = 'Guidi'\t----- bird -----\tstudent_club",
    "1337": "SELECT SUM(b.amount) FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'October Speaker'\t----- bird -----\tstudent_club",
    "1338": "SELECT approved FROM expense WHERE link_to_budget IN ( SELECT budget_id FROM budget WHERE link_to_event = ( SELECT event_id  FROM event  WHERE event_name = 'October Meeting' AND event_date = '2019-10-08' )) AND approved = 'true';This ensures that we are only retrieving expenses that were approved for the specified event.\t----- bird -----\tstudent_club",
    "1339": "SELECT AVG(cost) FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Elijah' AND last_name = 'Allen') AND (strftime('%m', expense_date) = '09' OR strftime('%m', expense_date) = '10')\t----- bird -----\tstudent_club",
    "1340": "SELECT (SELECT SUM(b.spent)  FROM budget AS b  INNER JOIN event AS e ON b.link_to_event = e.event_id  WHERE strftime('%Y', e.event_date) = '2019') - (SELECT SUM(b.spent)  FROM budget AS b  INNER JOIN event AS e ON b.link_to_event = e.event_id  WHERE strftime('%Y', e.event_date) = '2020') AS difference\t----- bird -----\tstudent_club",
    "1341": "SELECT location FROM event WHERE event_name = 'Spring Budget Review';\t----- bird -----\tstudent_club",
    "1342": "SELECT cost FROM expense WHERE expense_description = 'Post Cards, Posters' AND expense_date = '2019-09-04'\t----- bird -----\tstudent_club",
    "1343": "SELECT remaining FROM budget WHERE amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food');\t----- bird -----\tstudent_club",
    "1344": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'; This query correctly retrieves the notes associated with the fundraising event on the specified date.\t----- bird -----\tstudent_club",
    "1345": "SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences';\t----- bird -----\tstudent_club",
    "1346": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs';\t----- bird -----\tstudent_club",
    "1347": "SELECT Z.county FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'Adela' AND M.last_name = 'O''Gallagher'\t----- bird -----\tstudent_club",
    "1348": "SELECT COUNT(*) FROM budget AS B INNER JOIN event AS E ON B.link_to_event = E.event_id WHERE E.event_name = 'November Meeting' AND B.remaining < 0\t----- bird -----\tstudent_club",
    "1349": "SELECT SUM(b.amount) FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'September Speaker'\t----- bird -----\tstudent_club",
    "1350": "SELECT event_status FROM event WHERE event_id = (SELECT link_to_event FROM budget WHERE budget_id = (SELECT link_to_budget FROM expense WHERE expense_description = 'Post Cards, Posters' AND expense_date = '2019-08-20'))\t----- bird -----\tstudent_club",
    "1351": "SELECT M2.major_name FROM member AS M1 INNER JOIN major AS M2 ON M1.link_to_major = M2.major_id WHERE M1.first_name = 'Brent' AND M1.last_name = 'Thomason'\t----- bird -----\tstudent_club",
    "1352": "SELECT COUNT(*) FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.major_name = 'Human Development and Family Studies' AND M.t_shirt_size = 'Large'\t----- bird -----\tstudent_club",
    "1353": "SELECT Z.type FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'Christof' AND M.last_name = 'Nielson'\t----- bird -----\tstudent_club",
    "1354": "SELECT M2.major_name FROM member AS M1 INNER JOIN major AS M2 ON M1.link_to_major = M2.major_id WHERE M1.position = 'Vice President'\t----- bird -----\tstudent_club",
    "1355": "SELECT Z.state FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'Sacha' AND M.last_name = 'Harrison'\t----- bird -----\tstudent_club",
    "1356": "SELECT M2.department FROM member AS M1 INNER JOIN major AS M2 ON M1.link_to_major = M2.major_id WHERE M1.position = 'President'\t----- bird -----\tstudent_club",
    "1357": "SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Connor' AND T2.last_name = 'Hilton' AND T1.source = 'Dues'\t----- bird -----\tstudent_club",
    "1358": "SELECT m.first_name, m.last_name FROM member AS m WHERE m.member_id = (SELECT link_to_member FROM income WHERE date_received = (SELECT MIN(date_received) FROM income WHERE source = 'Dues'))\t----- bird -----\tstudent_club",
    "1359": "SELECT SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) / NULLIF(SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END), 0) AS budget_ratioFROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement'\t----- bird -----\tstudent_club",
    "1360": "SELECT (SUM(CASE WHEN category = 'Parking' THEN amount ELSE 0 END) /  SUM(amount)) * 100 AS parking_percentageFROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'November Speaker')\t----- bird -----\tstudent_club",
    "1361": "`SELECT SUM(cost) AS total_cost FROM expense WHERE expense_description = 'Pizza';`\t----- bird -----\tstudent_club",
    "1362": "SELECT COUNT(DISTINCT city) AS number_of_cities FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';\t----- bird -----\tstudent_club",
    "1363": "SELECT * FROM table\t----- bird -----\tstudent_club",
    "1364": "SELECT Z.city, Z.county, Z.state FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'Amy' AND M.last_name = 'Firth'\t----- bird -----\tstudent_club",
    "1365": "SELECT expense_description FROM expense WHERE link_to_budget = ( SELECT budget_id FROM budget WHERE remaining = (SELECT MIN(remaining) FROM budget))\t----- bird -----\tstudent_club",
    "1366": "SELECT M.first_name, M.last_name FROM attendance AS A INNER JOIN event AS E ON A.link_to_event = E.event_id INNER JOIN member AS M ON A.link_to_member = M.member_id WHERE E.event_name = 'October Meeting'\t----- bird -----\tstudent_club",
    "1367": "SELECT major.college, COUNT(member.member_id) AS member_count FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY member_count DESC LIMIT 1\t----- bird -----\tstudent_club",
    "1368": "SELECT M2.major_name FROM member AS M1 INNER JOIN major AS M2 ON M1.link_to_major = M2.major_id WHERE M1.phone = '809-555-3360'\t----- bird -----\tstudent_club",
    "1369": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.amount = (SELECT MAX(amount) FROM budget)\t----- bird -----\tstudent_club",
    "1370": "SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President'\t----- bird -----\tstudent_club",
    "1371": "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer'\t----- bird -----\tstudent_club",
    "1372": "SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Casey' AND T2.last_name = 'Mason'\t----- bird -----\tstudent_club",
    "1373": "SELECT COUNT(*) FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE Z.state = 'Maryland'\t----- bird -----\tstudent_club",
    "1374": "SELECT COUNT(T1.link_to_event) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.phone = '954-555-6240'\t----- bird -----\tstudent_club",
    "1375": "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'\t----- bird -----\tstudent_club",
    "1376": "SELECT e.event_name, (b.spent / b.amount) AS spend_to_budget_ratioFROM event AS eJOIN budget AS b ON b.link_to_event = e.event_idWHERE e.status = 'Closed'ORDER BY spend_to_budget_ratio DESCLIMIT 1\t----- bird -----\tstudent_club",
    "1377": "SELECT COUNT(*) FROM member WHERE position = 'President';\t----- bird -----\tstudent_club",
    "1378": "`SELECT MAX(spent) AS highest_amount_spent FROM budget;`\t----- bird -----\tstudent_club",
    "1379": "SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020';\t----- bird -----\tstudent_club",
    "1380": "SELECT SUM(spent) AS total_spent FROM budget WHERE category = 'Food';\t----- bird -----\tstudent_club",
    "1381": "SELECT T1.first_name || ' ' || T1.last_name AS full_nameFROM member AS T1INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_memberGROUP BY T1.member_idHAVING COUNT(T2.link_to_event) > 7\t----- bird -----\tstudent_club",
    "1382": "SELECT m.first_name, m.last_name FROM attendance AS a JOIN member AS m ON a.link_to_member = m.member_id WHERE m.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Interior Design') AND a.link_to_event = (SELECT event_id FROM event WHERE event_name = 'Community Theater')\t----- bird -----\tstudent_club",
    "1383": "SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'\t----- bird -----\tstudent_club",
    "1384": "SELECT SUM(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Grant' AND T2.last_name = 'Gilmour'\t----- bird -----\tstudent_club",
    "1385": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40\t----- bird -----\tstudent_club",
    "1386": "SELECT SUM(e.cost) FROM expense AS e INNER JOIN budget AS b ON e.link_to_budget = b.budget_id INNER JOIN event AS ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'Yearly Kickoff' If 'Yearly Kickoff' is incorrect and should be 'Baseball game', then the query should be:SELECT SUM(e.cost) FROM expense AS e INNER JOIN budget AS b ON e.link_to_budget = b.budget_id INNER JOIN event AS ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'Baseball game' Please confirm the correct event name to finalize the query.\t----- bird -----\tstudent_club",
    "1387": "SELECT M.first_name, M.last_name FROM budget AS B INNER JOIN event AS E ON B.link_to_event = E.event_id INNER JOIN expense AS Ex ON B.budget_id = Ex.link_to_budget INNER JOIN member AS M ON Ex.link_to_member = M.member_id WHERE E.event_name = 'Yearly Kickoff'\t----- bird -----\tstudent_club",
    "1388": "SELECT m.first_name || ' ' || m.last_name AS full_name, i.source FROM income AS i INNER JOIN member AS m ON i.link_to_member = m.member_id WHERE i.amount = (SELECT MAX(amount) FROM income)\t----- bird -----\tstudent_club",
    "1389": "SELECT e.event_nameFROM event AS eJOIN budget AS b ON e.event_id = b.link_to_eventJOIN expense AS ex ON b.budget_id = ex.link_to_budgetGROUP BY e.event_idORDER BY SUM(ex.cost) ASCLIMIT 1\t----- bird -----\tstudent_club",
    "1390": "SELECT (SUM(exp.cost) / (SELECT SUM(exp2.cost) FROM expense AS exp2)) * 100 AS percentageFROM expense AS expJOIN budget AS bud ON exp.link_to_budget = bud.budget_idJOIN event AS ev ON bud.link_to_event = ev.event_idWHERE ev.event_name = 'Yearly Kickoff'\t----- bird -----\tstudent_club",
    "1391": "SELECT (SELECT COUNT(*) FROM member AS m  INNER JOIN major AS j ON m.link_to_major = j.major_id  WHERE j.major_name = 'Finance') * 1.0 / (SELECT COUNT(*) FROM member AS m  INNER JOIN major AS j ON m.link_to_major = j.major_id  WHERE j.major_name = 'Physics') AS ratio\t----- bird -----\tstudent_club",
    "1392": "SELECT source, SUM(amount) as total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ORDER BY total_amount DESC LIMIT 1\t----- bird -----\tstudent_club",
    "1393": "SELECT first_name || ' ' || last_name AS full_name, email FROM member WHERE position = 'Secretary';\t----- bird -----\tstudent_club",
    "1394": "SELECT COUNT(*) FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.major_name = 'Physics Teaching'\t----- bird -----\tstudent_club",
    "1395": "SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Community Theater' AND strftime('%Y', T2.event_date) = '2019'\t----- bird -----\tstudent_club",
    "1396": "WITH luisa AS ( SELECT member_id, link_to_major FROM member WHERE first_name = 'Luisa' AND last_name = 'Guidi')SELECT (SELECT COUNT(link_to_event) FROM attendance WHERE link_to_member = (SELECT member_id FROM luisa)) AS events_attended, (SELECT major.major_name FROM major WHERE major.major_id = (SELECT link_to_major FROM luisa)) AS major_name\t----- bird -----\tstudent_club",
    "1397": "SELECT SUM(T1.spent) / COUNT(T1.spent) AS average_spentFROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food' AND T2.event_status = 'Closed'This revised query calculates the average spent on food for closed events by dividing the total spent by the count of entries, which aligns with the hint provided.\t----- bird -----\tstudent_club",
    "1398": "SELECT e.event_name FROM budget b JOIN event e ON b.link_to_event = e.event_id WHERE b.spent = (SELECT MAX(spent) FROM budget WHERE category = 'Advertisement') AND b.category = 'Advertisement'\t----- bird -----\tstudent_club",
    "1399": "SELECT CASE  WHEN COUNT(T1.link_to_member) > 0 THEN 'Yes'  ELSE 'No' END AS attendedFROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean' AND T2.event_name = 'Women''s Soccer'\t----- bird -----\tstudent_club",
    "1400": "SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100.0 / COUNT(event_id)) AS percentage_shareFROM eventWHERE event_date BETWEEN '2019-01-01' AND '2019-12-31';\t----- bird -----\tstudent_club",
    "1401": "SELECT T1.cost FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.expense_description LIKE '%Posters%' AND T3.event_name = 'September Speaker' This change uses a LIKE clause to ensure that any expense description containing 'Posters' will be matched, accommodating the actual data.\t----- bird -----\tstudent_club",
    "1402": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1\t----- bird -----\tstudent_club",
    "1403": "SELECT e.event_name FROM event AS e JOIN budget AS b ON b.link_to_event = e.event_id WHERE e.status = 'Closed' AND b.remaining < 0 ORDER BY b.remaining ASC LIMIT 1\t----- bird -----\tstudent_club",
    "1404": "SELECT expense.expense_description, SUM(expense.cost) AS total_valueFROM expenseJOIN budget ON expense.link_to_budget = budget.budget_idJOIN event ON budget.link_to_event = event.event_idWHERE event.event_name = 'October Meeting' AND expense.approved = 'true'GROUP BY expense.expense_description\t----- bird -----\tstudent_club",
    "1405": "SELECT T1.category, T1.amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'April Speaker' ORDER BY T1.amount ASC\t----- bird -----\tstudent_club",
    "1406": "SELECT budget_id, category, amount FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1;\t----- bird -----\tstudent_club",
    "1407": "SELECT budget_id, category, amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3\t----- bird -----\tstudent_club",
    "1408": "SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T2.category = 'Parking'\t----- bird -----\tstudent_club",
    "1409": "`SELECT SUM(cost) AS total_expense FROM expense WHERE expense_date = '2019-08-20';`\t----- bird -----\tstudent_club",
    "1410": "SELECT T1.first_name || ' ' || T1.last_name AS full_name, SUM(T2.cost) AS total_cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY T1.first_name, T1.last_name\t----- bird -----\tstudent_club",
    "1411": "SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison'\t----- bird -----\tstudent_club",
    "1412": "SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'X-Large'\t----- bird -----\tstudent_club",
    "1413": "SELECT M.zip FROM expense AS E INNER JOIN member AS M ON E.link_to_member = M.member_id WHERE E.cost < 50\t----- bird -----\tstudent_club",
    "1414": "SELECT M2.major_name FROM member AS M1 INNER JOIN major AS M2 ON M1.link_to_major = M2.major_id WHERE M1.first_name = 'Phillip' AND M1.last_name = 'Cullen'\t----- bird -----\tstudent_club",
    "1415": "SELECT T1.position FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business'\t----- bird -----\tstudent_club",
    "1416": "SELECT COUNT(*) FROM member AS m INNER JOIN major AS j ON m.link_to_major = j.major_id WHERE j.major_name = 'Business' AND m.t_shirt_size = 'Medium'\t----- bird -----\tstudent_club",
    "1417": "SELECT DISTINCT type FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.remaining > 30\t----- bird -----\tstudent_club",
    "1418": "SELECT DISTINCT B.category FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event WHERE E.location = 'MU 215'\t----- bird -----\tstudent_club",
    "1419": "SELECT B.category FROM event AS E INNER JOIN budget AS B ON B.link_to_event = E.event_id WHERE E.event_date = '2020-03-24T12:00:00'\t----- bird -----\tstudent_club",
    "1420": "SELECT M2.major_name FROM member AS M1 INNER JOIN major AS M2 ON M1.link_to_major = M2.major_id WHERE M1.position = 'Vice President'\t----- bird -----\tstudent_club",
    "1421": "SELECT (SELECT COUNT(m.member_id)  FROM member AS m  INNER JOIN major AS j ON m.link_to_major = j.major_id  WHERE j.major_name = 'Mathematics' AND m.position = 'Member') * 100.0 / (SELECT COUNT(member_id) FROM member) AS percentage_of_math_members\t----- bird -----\tstudent_club",
    "1422": "SELECT DISTINCT B.category FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event WHERE E.location = 'MU 215'\t----- bird -----\tstudent_club",
    "1423": "`SELECT COUNT(*) FROM income WHERE amount = 50;`\t----- bird -----\tstudent_club",
    "1424": "`SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';`\t----- bird -----\tstudent_club",
    "1425": "SELECT COUNT(*) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences';\t----- bird -----\tstudent_club",
    "1426": "SELECT M.last_name, J.department, J.college FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.major_name = 'Environmental Engineering'\t----- bird -----\tstudent_club",
    "1427": "SELECT B.category FROM budget AS B INNER JOIN event AS E ON B.link_to_event = E.event_id WHERE E.location = 'MU 215' AND E.type = 'Guest Speaker' AND B.spent = 0\t----- bird -----\tstudent_club",
    "1428": "SELECT zip_code.city, zip_code.state FROM member INNER JOIN major ON member.link_to_major = major.major_id INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE major.department = 'Electrical and Computer Engineering' AND member.position = 'Member' Since the only issue was the department name, the final query remains unchanged as it is already correct.\t----- bird -----\tstudent_club",
    "1429": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.type = 'Social' AND T3.position = 'Vice President' AND T1.location = '900 E. Washington St.'\t----- bird -----\tstudent_club",
    "1430": "SELECT M.last_name, M.position FROM expense AS E INNER JOIN member AS M ON E.link_to_member = M.member_id WHERE E.expense_description = 'Pizza' AND E.expense_date = '2019-09-10'\t----- bird -----\tstudent_club",
    "1431": "SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Member' AND T2.event_name = 'Women\\'s Soccer'\t----- bird -----\tstudent_club",
    "1432": "SELECT (COUNT(CASE WHEN i.amount = 50 THEN 1 END) * 100.0 / COUNT(m.member_id)) AS percentageFROM member m LEFT JOIN income i ON m.member_id = i.link_to_member WHERE m.t_shirt_size = 'Medium' AND m.position = 'Member'This revised query correctly calculates the percentage of members with a t-shirt size of medium who received an amount of 50.\t----- bird -----\tstudent_club",
    "1433": "SELECT DISTINCT state FROM zip_code WHERE type = 'PO Box';\t----- bird -----\tstudent_club",
    "1434": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico';\t----- bird -----\tstudent_club",
    "1435": "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20';\t----- bird -----\tstudent_club",
    "1436": "SELECT DISTINCT link_to_event FROM attendance WHERE link_to_member IN (SELECT DISTINCT link_to_member FROM expense WHERE cost > 50)\t----- bird -----\tstudent_club",
    "1437": "SELECT M.member_id, M.first_name, M.last_name, A.link_to_event FROM expense AS E JOIN attendance AS A ON E.link_to_member = A.link_to_member JOIN member AS M ON A.link_to_member = M.member_id WHERE E.approved = 'true' AND E.expense_date BETWEEN '2019-01-10' AND '2019-11-19'\t----- bird -----\tstudent_club",
    "1438": "SELECT M2.college FROM member AS M1 INNER JOIN major AS M2 ON M1.link_to_major = M2.major_id WHERE M1.first_name = 'Katy' AND M1.link_to_major = 'rec1N0upiVLy5esTO'\t----- bird -----\tstudent_club",
    "1439": "SELECT M.phone FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.major_name = 'Business' AND J.college = 'College of Agriculture and Applied Sciences'\t----- bird -----\tstudent_club",
    "1440": "SELECT M.email FROM expense AS E INNER JOIN member AS M ON E.link_to_member = M.member_id WHERE E.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND E.cost > 20\t----- bird -----\tstudent_club",
    "1441": "SELECT COUNT(*) FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.major_name = 'education' AND J.college = 'College of Education & Human Services' AND M.position = 'Member'\t----- bird -----\tstudent_club",
    "1442": "SELECT (CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(DISTINCT link_to_event)) * 100 AS percentage_over_budget FROM budget\t----- bird -----\tstudent_club",
    "1443": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31';\t----- bird -----\tstudent_club",
    "1444": "SELECT expense_description FROM expense GROUP BY expense_description HAVING SUM(cost) / COUNT(expense_id) > 50\t----- bird -----\tstudent_club",
    "1445": "SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large'\t----- bird -----\tstudent_club",
    "1446": "SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code)) AS percentage_po_boxesFROM zip_code;\t----- bird -----\tstudent_club",
    "1447": "SELECT E.event_name, E.location FROM event AS E INNER JOIN budget AS B ON B.link_to_event = E.event_id WHERE B.remaining > 0\t----- bird -----\tstudent_club",
    "1448": "SELECT E.event_name, E.event_date FROM expense AS Ex INNER JOIN budget AS B ON Ex.link_to_budget = B.budget_id INNER JOIN event AS E ON B.link_to_event = E.event_id WHERE Ex.expense_description = 'Pizza' AND Ex.cost > 50 AND Ex.cost < 100\t----- bird -----\tstudent_club",
    "1449": "SELECT m.first_name || ' ' || m.last_name AS full_name, maj.major_name FROM expense AS e JOIN member AS m ON e.link_to_member = m.member_id JOIN major AS maj ON m.link_to_major = maj.major_id WHERE e.cost > 100\t----- bird -----\tstudent_club",
    "1450": "SELECT Z.city, Z.countyFROM income AS IJOIN member AS M ON I.link_to_member = M.member_idJOIN zip_code AS Z ON M.zip = Z.zip_codeJOIN expense AS E ON I.link_to_member = E.link_to_memberJOIN budget AS B ON E.link_to_budget = B.budget_idWHERE B.link_to_event IN (SELECT event_id FROM event)GROUP BY B.link_to_eventHAVING COUNT(I.income_id) > 40\t----- bird -----\tstudent_club",
    "1451": "SELECT T1.link_to_member, SUM(T2.cost) AS total_paidFROM ( SELECT link_to_member FROM expense GROUP BY link_to_member HAVING COUNT(DISTINCT link_to_budget) > 1) AS T1JOIN expense AS T2 ON T1.link_to_member = T2.link_to_memberGROUP BY T1.link_to_memberORDER BY total_paid DESCLIMIT 1However, since the original query is already using `link_to_budget` in the subquery, it should be corrected to use `link_to_event` instead. So the final corrected SQL query is:SELECT T1.link_to_member, SUM(T2.cost) AS total_paidFROM ( SELECT link_to_member FROM expense GROUP BY link_to_member HAVING COUNT(DISTINCT link_to_budget) > 1) AS T1JOIN expense AS T2 ON T1.link_to_member = T2.link_to_memberGROUP BY T1.link_to_memberORDER BY total_paid DESCLIMIT 1This query will now correctly find the member who incurred expenses in more than one event and paid the most amount.\t----- bird -----\tstudent_club",
    "1452": "SELECT AVG(cost) AS average_amount_paidFROM expense AS eINNER JOIN member AS m ON e.link_to_member = m.member_idWHERE m.position != 'Member'\t----- bird -----\tstudent_club",
    "1453": "SELECT e.event_name FROM event AS e JOIN budget AS b ON b.link_to_event = e.event_id JOIN expense AS ex ON ex.link_to_budget = b.budget_id WHERE ex.cost < (SELECT AVG(ex2.cost)    FROM expense AS ex2    JOIN budget AS b2 ON ex2.link_to_budget = b2.budget_id    WHERE b2.category = 'Parking')\t----- bird -----\tstudent_club",
    "1454": "SELECT (SUM(e.cost) / COUNT(DISTINCT ev.event_id)) * 100 AS percentage_cost FROM event ev JOIN budget b ON ev.event_id = b.link_to_event JOIN expense e ON b.budget_id = e.link_to_budget WHERE ev.type = 'Game'\t----- bird -----\tstudent_club",
    "1455": "SELECT B.* FROM budget AS B INNER JOIN expense AS E ON E.link_to_budget = B.budget_id WHERE E.expense_description = 'Water, chips, cookies' AND E.cost = (SELECT MAX(cost) FROM expense WHERE expense_description = 'Water, chips, cookies')\t----- bird -----\tstudent_club",
    "1456": "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_spentFROM member AS mJOIN expense AS e ON m.member_id = e.link_to_memberGROUP BY m.member_idORDER BY total_spent DESCLIMIT 5\t----- bird -----\tstudent_club",
    "1457": "SELECT m.first_name || ' ' || m.last_name AS full_name, m.phone FROM member AS m JOIN expense AS e ON e.link_to_member = m.member_id WHERE e.cost > (SELECT AVG(cost) FROM expense)\t----- bird -----\tstudent_club",
    "1458": "SELECT (  (SELECT COUNT(*) FROM member WHERE position = 'Member' AND zip IN (SELECT zip_code FROM zip_code WHERE state = 'Maine')) * 1.0 /  (SELECT COUNT(*) FROM member WHERE position = 'Member') ) - (  (SELECT COUNT(*) FROM member WHERE position = 'Member' AND zip IN (SELECT zip_code FROM zip_code WHERE state = 'Vermont')) * 1.0 /  (SELECT COUNT(*) FROM member WHERE position = 'Member') ) AS percentage_difference\t----- bird -----\tstudent_club",
    "1459": "SELECT M.major_name, M.department FROM member AS mem INNER JOIN major AS M ON mem.link_to_major = M.major_id WHERE mem.first_name = 'Garrett' AND mem.last_name = 'Gerke'\t----- bird -----\tstudent_club",
    "1460": "SELECT M.first_name || ' ' || M.last_name AS full_name, E.costFROM expense AS EINNER JOIN member AS M ON E.link_to_member = M.member_idWHERE E.expense_description = 'Water, veggie tray and supplies'\t----- bird -----\tstudent_club",
    "1461": "SELECT M.last_name, M.phone FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.major_name = 'Elementary Education'\t----- bird -----\tstudent_club",
    "1462": "SELECT B.category, B.amount FROM budget AS B INNER JOIN event AS E ON B.link_to_event = E.event_id WHERE E.event_name = 'January Speaker'\t----- bird -----\tstudent_club",
    "1463": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'\t----- bird -----\tstudent_club",
    "1464": "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09'Since the date format in the SQL is already correct, the final query remains unchanged. Final SQL Query: SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09' Thus, the original SQL query is correct as is.\t----- bird -----\tstudent_club",
    "1465": "SELECT B.category FROM budget AS B INNER JOIN expense AS E ON E.link_to_budget = B.budget_id WHERE E.expense_description = 'Post Cards, Posters'\t----- bird -----\tstudent_club",
    "1466": "SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Secretary'\t----- bird -----\tstudent_club",
    "1467": "SELECT T1.event_name, SUM(T2.spent) AS total_spentFROM budget AS T2INNER JOIN event AS T1 ON T2.link_to_event = T1.event_idWHERE T2.category = 'Speaker Gifts'GROUP BY T1.event_name\t----- bird -----\tstudent_club",
    "1468": "SELECT Z.city FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.first_name = 'Garrett' AND M.last_name = 'Girke'\t----- bird -----\tstudent_club",
    "1469": "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092\t----- bird -----\tstudent_club",
    "1470": "SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';\t----- bird -----\tdebit_card_specializing",
    "1471": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END), 0) AS ratio FROM customers\t----- bird -----\tdebit_card_specializing",
    "1472": "SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date BETWEEN '201201' AND '201212' GROUP BY T1.CustomerID ORDER BY TotalConsumption ASC LIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1473": "SELECT AVG(T1.Consumption) / 12 FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND T1.Date BETWEEN '201301' AND '201312'\t----- bird -----\tdebit_card_specializing",
    "1474": "SELECT C.CustomerID, SUM(Y.Consumption) AS TotalConsumptionFROM customers AS CINNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerIDWHERE C.Currency = 'CZK' AND Y.Date BETWEEN '201101' AND '201112'GROUP BY C.CustomerIDORDER BY TotalConsumption DESC\t----- bird -----\tdebit_card_specializing",
    "1475": "SELECT COUNT(DISTINCT C.CustomerID) FROM customers AS C INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE C.Segment = 'KAM' AND Y.Consumption < 30000 AND Y.Date BETWEEN '201201' AND '201212'\t----- bird -----\tdebit_card_specializing",
    "1476": "SELECT (SELECT SUM(y.Consumption)  FROM yearmonth AS y  JOIN customers AS c ON y.CustomerID = c.CustomerID  WHERE c.Currency = 'CZK' AND y.Date BETWEEN '201201' AND '201212') - (SELECT SUM(y.Consumption)  FROM yearmonth AS y  JOIN customers AS c ON y.CustomerID = c.CustomerID  WHERE c.Currency = 'EUR' AND y.Date BETWEEN '201201' AND '201212') AS ConsumptionDifference\t----- bird -----\tdebit_card_specializing",
    "1477": "SELECT SUBSTR(T1.Date, 1, 4) AS Year, SUM(T1.Consumption) AS TotalConsumptionFROM yearmonth AS T1INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerIDWHERE T2.Currency = 'EUR'GROUP BY YearORDER BY TotalConsumption DESCLIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1478": "SELECT c.Segment, SUM(ym.Consumption) AS TotalConsumptionFROM yearmonth AS ymINNER JOIN customers AS c ON ym.CustomerID = c.CustomerIDGROUP BY c.SegmentORDER BY TotalConsumption ASCLIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1479": "SELECT YearFROM ( SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK') GROUP BY Year) AS YearlyConsumptionORDER BY TotalConsumption DESCLIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1480": "SELECT SUBSTR(y.Date, 5, 2) AS Month, SUM(y.Consumption) AS TotalConsumptionFROM yearmonth AS yJOIN customers AS c ON y.CustomerID = c.CustomerIDWHERE c.Segment = 'SME' AND y.Date LIKE '2013%'GROUP BY MonthORDER BY TotalConsumption DESCLIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1481": "WITH LeastConsumption AS ( SELECT  c.Segment, y.CustomerID, MIN(y.Consumption) AS MinConsumption FROM  yearmonth y JOIN  customers c ON y.CustomerID = c.CustomerID WHERE  y.Date BETWEEN '201301' AND '201312'  AND c.Currency = 'CZK' GROUP BY  c.Segment),AnnualAverage AS ( SELECT  c.Segment, SUM(y.Consumption) / COUNT(y.CustomerID) AS AnnualAverageConsumption FROM  yearmonth y JOIN  customers c ON y.CustomerID = c.CustomerID WHERE  y.Date BETWEEN '201301' AND '201312'  AND c.Currency = 'CZK' AND y.CustomerID IN (SELECT CustomerID FROM LeastConsumption) GROUP BY  c.Segment)SELECT COALESCE((SELECT AnnualAverageConsumption FROM AnnualAverage WHERE Segment = 'SME'), 0) - COALESCE((SELECT AnnualAverageConsumption FROM AnnualAverage WHERE Segment = 'LAM'), 0) AS SME_LAM_Difference, COALESCE((SELECT AnnualAverageConsumption FROM AnnualAverage WHERE Segment = 'LAM'), 0) - COALESCE((SELECT AnnualAverageConsumption FROM AnnualAverage WHERE Segment = 'KAM'), 0) AS LAM_KAM_Difference, COALESCE((SELECT AnnualAverageConsumption FROM AnnualAverage WHERE Segment = 'KAM'), 0) - COALESCE((SELECT AnnualAverageConsumption FROM AnnualAverage WHERE Segment = 'SME'), 0) AS KAM_SME_Difference\t----- bird -----\tdebit_card_specializing",
    "1482": "WITH Consumption AS ( SELECT  c.Segment, SUM(ym.Consumption) AS TotalConsumption FROM  yearmonth ym JOIN  customers c ON ym.CustomerID = c.CustomerID WHERE  ym.Date BETWEEN '201201' AND '201312' AND c.Currency = 'EUR' GROUP BY  c.Segment),ConsumptionChange AS ( SELECT  Segment, MAX(CASE WHEN ym.Date BETWEEN '201201' AND '201212' THEN TotalConsumption END) AS Consumption2012, MAX(CASE WHEN ym.Date BETWEEN '201301' AND '201312' THEN TotalConsumption END) AS Consumption2013 FROM  Consumption GROUP BY  Segment)SELECT Segment, ((Consumption2013 - Consumption2012) / NULLIF(Consumption2013, 0)) * 100 AS PercentageIncreaseFROM ConsumptionChangeWHERE Consumption2012 IS NOT NULL AND Consumption2013 IS NOT NULLORDER BY PercentageIncrease DESC;\t----- bird -----\tdebit_card_specializing",
    "1483": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'\t----- bird -----\tdebit_card_specializing",
    "1484": "SELECT (SELECT COUNT(*) FROM gasstations WHERE Segment = 'discount' AND Country = 'CZE') - (SELECT COUNT(*) FROM gasstations WHERE Segment = 'discount' AND Country = 'SVK') AS more_discount_gas_stations\t----- bird -----\tdebit_card_specializing",
    "1485": "SELECT (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') - (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304') AS ConsumptionDifference\t----- bird -----\tdebit_card_specializing",
    "1486": "SELECT COUNT(DISTINCT t.CustomerID) AS SMEs_using_EURFROM transactions_1k AS t JOIN customers AS c ON t.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND c.Currency = 'EUR';\t----- bird -----\tdebit_card_specializing",
    "1487": "SELECT T1.CustomerID, T2.Consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'EUR' AND T2.Date = '201310' ORDER BY T2.Consumption DESC LIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1488": "SELECT y.CustomerID, MAX(y.Consumption) AS MaxConsumption FROM yearmonth y INNER JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'KAM' GROUP BY y.CustomerID ORDER BY MaxConsumption DESC LIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1489": "SELECT SUM(YM.Consumption) FROM yearmonth AS YM INNER JOIN customers AS C ON YM.CustomerID = C.CustomerID WHERE C.Segment = 'KAM' AND YM.Date = '201305'\t----- bird -----\tdebit_card_specializing",
    "1490": "SELECT (COUNT(DISTINCT y.CustomerID) * 100.0 / (SELECT COUNT(CustomerID) FROM customers WHERE Segment = 'LAM')) AS PercentageFROM yearmonth AS y JOIN customers AS c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'LAM' AND y.Consumption > 46.73\t----- bird -----\tdebit_card_specializing",
    "1491": "SELECT Country, COUNT(*) AS TotalValueForMoneyGasStations FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY TotalValueForMoneyGasStations DESC\t----- bird -----\tdebit_card_specializing",
    "1492": "SELECT (CAST((SELECT COUNT(*) FROM customers WHERE Segment = 'KAM' AND Currency = 'EUR') AS REAL) /  NULLIF((SELECT COUNT(*) FROM customers WHERE Segment = 'KAM'), 0)) * 100 AS Percentage\t----- bird -----\tdebit_card_specializing",
    "1493": "SELECT (COUNT(DISTINCT CASE WHEN y.Consumption > 528.3 THEN y.CustomerID END) * 100.0) / COUNT(DISTINCT c.CustomerID) AS percentageFROM yearmonth yJOIN customers c ON y.CustomerID = c.CustomerIDWHERE y.Date = '201202'\t----- bird -----\tdebit_card_specializing",
    "1494": "SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS premium_percentageFROM gasstationsWHERE Country = 'SVK';\t----- bird -----\tdebit_card_specializing",
    "1495": "SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1496": "SELECT C.Segment, SUM(Y.Consumption) AS TotalConsumptionFROM customers AS CINNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerIDWHERE Y.Date = '201309'GROUP BY C.SegmentORDER BY TotalConsumption ASCLIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1497": "SELECT y.CustomerID, y.Consumption FROM yearmonth AS y INNER JOIN customers AS c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND y.Date = '201206' ORDER BY y.Consumption ASC LIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1498": "SELECT MAX(Consumption) AS HighestConsumptionFROM yearmonthWHERE Date LIKE '2012%';\t----- bird -----\tdebit_card_specializing",
    "1499": "SELECT MAX(total_consumption / 12) AS biggest_monthly_consumptionFROM ( SELECT SUM(Consumption) AS total_consumption FROM yearmonth AS ym INNER JOIN customers AS c ON ym.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' GROUP BY ym.CustomerID)\t----- bird -----\tdebit_card_specializing",
    "1500": "SELECT P.Description FROM products AS P INNER JOIN transactions_1k AS T ON P.ProductID = T.ProductID INNER JOIN yearmonth AS Y ON T.CustomerID = Y.CustomerID WHERE Y.Date = '201309'\t----- bird -----\tdebit_card_specializing",
    "1501": "SELECT DISTINCT G.Country FROM transactions_1k AS T INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID WHERE T.Date LIKE '201306%'\t----- bird -----\tdebit_card_specializing",
    "1502": "SELECT DISTINCT g.ChainID FROM transactions_1k t INNER JOIN customers c ON t.CustomerID = c.CustomerID INNER JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE c.Currency = 'EUR'\t----- bird -----\tdebit_card_specializing",
    "1503": "SELECT P.Description FROM transactions_1k AS T INNER JOIN customers AS C ON T.CustomerID = C.CustomerID INNER JOIN products AS P ON T.ProductID = P.ProductID WHERE C.Currency = 'EUR'\t----- bird -----\tdebit_card_specializing",
    "1504": "SELECT AVG(Price) AS AverageTotalPrice FROM transactions_1k WHERE Date LIKE '2012-01%';\t----- bird -----\tdebit_card_specializing",
    "1505": "SELECT COUNT(DISTINCT c.CustomerID) FROM customers AS c INNER JOIN yearmonth AS ym ON c.CustomerID = ym.CustomerID WHERE c.Currency = 'EUR' AND ym.Consumption > 1000\t----- bird -----\tdebit_card_specializing",
    "1506": "SELECT products.Description FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID INNER JOIN products ON transactions_1k.ProductID = products.ProductID WHERE gasstations.Country = 'CZE'\t----- bird -----\tdebit_card_specializing",
    "1507": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11\t----- bird -----\tdebit_card_specializing",
    "1508": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000\t----- bird -----\tdebit_card_specializing",
    "1509": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS G ON T1.GasStationID = G.GasStationID WHERE G.Country = 'CZE' AND T1.Date > '2012-01-01'\t----- bird -----\tdebit_card_specializing",
    "1510": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'\t----- bird -----\tdebit_card_specializing",
    "1511": "SELECT AVG(T2.Price) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR'\t----- bird -----\tdebit_card_specializing",
    "1512": "SELECT C.CustomerID, SUM(T.Price) AS TotalPaidFROM transactions_1k AS TINNER JOIN customers AS C ON T.CustomerID = C.CustomerIDWHERE T.Date = '2012-08-25'GROUP BY C.CustomerIDORDER BY TotalPaid DESCLIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1513": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.TransactionID LIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1514": "SELECT C.Currency FROM customers AS C INNER JOIN transactions_1k AS T ON C.CustomerID = T.CustomerID WHERE T.Date = '2012-08-24' AND T.Time = '16:25:00'\t----- bird -----\tdebit_card_specializing",
    "1515": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'\t----- bird -----\tdebit_card_specializing",
    "1516": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'EUR'\t----- bird -----\tdebit_card_specializing",
    "1517": "SELECT Segment FROM customers WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);\t----- bird -----\tdebit_card_specializing",
    "1518": "SELECT g.Country FROM transactions_1k AS t INNER JOIN gasstations AS g ON t.GasStationID = g.GasStationID WHERE t.Date = '2012-08-24' AND t.Time = '12:42:00'\t----- bird -----\tdebit_card_specializing",
    "1519": "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';\t----- bird -----\tdebit_card_specializing",
    "1520": "SELECT Date, Consumption FROM yearmonth WHERE CustomerID = (SELECT CustomerID  FROM transactions_1k  WHERE Date = '2012-08-24' AND Price = 124.05) AND Date LIKE '201201%'\t----- bird -----\tdebit_card_specializing",
    "1521": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'\t----- bird -----\tdebit_card_specializing",
    "1522": "SELECT C.Currency FROM customers AS C JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE Y.Date = '201306' AND Y.Consumption = 214582.17\t----- bird -----\tdebit_card_specializing",
    "1523": "SELECT g.Country FROM transactions_1k AS t INNER JOIN gasstations AS g ON t.GasStationID = g.GasStationID WHERE t.CardID = 667467\t----- bird -----\tdebit_card_specializing",
    "1524": "SELECT C.Currency FROM transactions_1k AS T INNER JOIN customers AS C ON T.CustomerID = C.CustomerID WHERE T.Date = '2012-08-24' AND (T.Amount * T.Price) = 548.4\t----- bird -----\tdebit_card_specializing",
    "1525": "SELECT CAST(COUNT(DISTINCT CASE WHEN C.Currency = 'EUR' THEN C.CustomerID END) AS REAL) * 100 / COUNT(DISTINCT C.CustomerID) AS percentageFROM customers AS C LEFT JOIN transactions_1k AS T ON C.CustomerID = T.CustomerID WHERE T.Date = '2012-08-25'\t----- bird -----\tdebit_card_specializing",
    "1526": "SELECT (MAX(CASE WHEN Date LIKE '2012%' THEN Consumption END) -  MAX(CASE WHEN Date LIKE '2013%' THEN Consumption END)) / MAX(CASE WHEN Date LIKE '2012%' THEN Consumption END) AS consumption_decrease_rateFROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' AND Price = 634.8)\t----- bird -----\tdebit_card_specializing",
    "1527": "SELECT T1.GasStationID, SUM(T2.Amount * T2.Price) AS TotalRevenueFROM gasstations AS T1INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationIDGROUP BY T1.GasStationIDORDER BY TotalRevenue DESCLIMIT 1\t----- bird -----\tdebit_card_specializing",
    "1528": "SELECT (COUNT(CASE WHEN g.Segment = 'Premium' THEN t.TransactionID END) * 100.0 / COUNT(t.TransactionID)) AS premium_percentageFROM gasstations gJOIN transactions_1k t ON g.GasStationID = t.GasStationIDWHERE g.Country = 'SVK';\t----- bird -----\tdebit_card_specializing",
    "1529": "SELECT SUM(Amount) AS AmountSpentInJanuary FROM transactions_1k WHERE CustomerID = 38508 AND Date BETWEEN '2012-01-01' AND '2012-01-31';\t----- bird -----\tdebit_card_specializing",
    "1530": "SELECT P.Description FROM products AS P INNER JOIN transactions_1k AS T ON P.ProductID = T.ProductID GROUP BY P.ProductID ORDER BY SUM(T.Amount) DESC LIMIT 5\t----- bird -----\tdebit_card_specializing",
    "1531": "SELECT c.CustomerID, c.Currency, SUM(t.Price) / SUM(t.Amount) AS AveragePricePerItemFROM transactions_1k AS tJOIN customers AS c ON t.CustomerID = c.CustomerIDWHERE t.CustomerID = ( SELECT CustomerID FROM ( SELECT CustomerID, SUM(Price) AS TotalSpending FROM transactions_1k GROUP BY CustomerID ) AS Spending ORDER BY TotalSpending DESC LIMIT 1)GROUP BY c.CustomerID, c.Currency\t----- bird -----\tdebit_card_specializing",
    "1532": "SELECT g.Country FROM gasstations AS g INNER JOIN transactions_1k AS t ON g.GasStationID = t.GasStationID WHERE t.Price = (SELECT MAX(Price)    FROM transactions_1k    WHERE ProductID = 2 AND Amount = 1) AND t.ProductID = 2 AND t.Amount = 1\t----- bird -----\tdebit_card_specializing",
    "1533": "SELECT y.CustomerID, y.Consumption FROM yearmonth AS y WHERE y.Date = '201208' AND y.CustomerID IN ( SELECT CustomerID FROM transactions_1k WHERE ProductID = 5 AND (Price / Amount) > 29.00)\t----- bird -----\tdebit_card_specializing"
}