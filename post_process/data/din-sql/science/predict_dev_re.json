{
    "0": "SELECT total_cost FROM projects WHERE title = 'Theseus';\t----- science -----\tcordis",
    "1": "SELECT total_cost FROM projects WHERE title = 'Theseus';\t----- science -----\tcordis",
    "2": "SELECT acronym FROM projects WHERE start_year = 2018;\t----- science -----\tcordis",
    "3": "SELECT acronym FROM projects WHERE start_year = 2018\t----- science -----\tcordis",
    "4": "SELECT title FROM projects WHERE start_year < 2016;\t----- science -----\tcordis",
    "5": "SELECT title FROM projects WHERE start_year < 2016\t----- science -----\tcordis",
    "6": "SELECT T1.institutions_name FROM institutions AS T1 INNER JOIN eu_territorial_units AS T2 ON T1.geocode_regions_3 = T2.geocode_regions WHERE T2.description = 'Nordjylland'\t----- science -----\tcordis",
    "7": "SELECT T1.institutions_name FROM institutions AS T1 INNER JOIN eu_territorial_units AS T2 ON T1.geocode_regions_3 = T2.geocode_regions WHERE T2.description = 'Nordjylland'\t----- science -----\tcordis",
    "8": "SELECT P.full_name FROM projects AS T1 INNER JOIN people AS P ON T1.principal_investigator = P.unics_id WHERE T1.start_year = 2014\t----- science -----\tcordis",
    "9": "SELECT P.full_name FROM projects AS PR INNER JOIN people AS P ON PR.principal_investigator = P.unics_id WHERE PR.start_year = 2014\t----- science -----\tcordis",
    "10": "SELECT P.title FROM projects AS P INNER JOIN project_subject_areas AS PSA ON PSA.project = P.unics_id INNER JOIN subject_areas AS SA ON PSA.subject_area = SA.code WHERE SA.title = 'Mathematics and Statistics'\t----- science -----\tcordis",
    "11": "SELECT projects.acronym, subject_areas.description FROM projects INNER JOIN project_subject_areas ON projects.unics_id = project_subject_areas.project INNER JOIN subject_areas ON project_subject_areas.subject_area = subject_areas.code WHERE subject_areas.title = 'Mathematics and Statistics'\t----- science -----\tcordis",
    "12": "SELECT DISTINCT T2.title FROM projects AS T1 INNER JOIN project_topics AS T3 ON T1.unics_id = T3.project INNER JOIN topics AS T2 ON T3.topic = T2.code WHERE T1.end_year = 2014\t----- science -----\tcordis",
    "13": "SELECT DISTINCT T3.title FROM projects AS T1 INNER JOIN project_topics AS T2 ON T1.unics_id = T2.project INNER JOIN topics AS T3 ON T2.topic = T3.code WHERE T1.end_year = 2014\t----- science -----\tcordis",
    "14": "SELECT DISTINCT T1.acronym FROM projects AS T1 INNER JOIN project_members AS T2 ON T1.unics_id = T2.project WHERE T2.country = 'Greece'\t----- science -----\tcordis",
    "15": "SELECT T1.institutions_name FROM institutions AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.unics_id WHERE T2.country_name IN ('France', 'Germany')\t----- science -----\tcordis",
    "16": "SELECT T1.institutions_name FROM institutions AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.unics_id WHERE T2.country_name != 'France'\t----- science -----\tcordis",
    "17": "SELECT COUNT(*) FROM projects WHERE start_year = 2016\t----- science -----\tcordis",
    "18": "SELECT title FROM projects WHERE total_cost = (SELECT MAX(total_cost) FROM projects);\t----- science -----\tcordis",
    "19": "SELECT pm.member_name FROM project_members AS pm INNER JOIN projects AS p ON pm.project = p.unics_id WHERE p.total_cost < (SELECT AVG(total_cost) FROM projects)\t----- science -----\tcordis",
    "20": "SELECT T1.unics_id FROM projects AS T1 INNER JOIN project_members AS T2 ON T1.unics_id = T2.project GROUP BY T1.unics_id HAVING COUNT(T2.unics_id) >= 100\t----- science -----\tcordis",
    "21": "SELECT fs.code, fs.titleFROM funding_schemes AS fsJOIN projects AS p ON p.ec_fund_scheme = fs.codeGROUP BY fs.code, fs.titleORDER BY COUNT(p.unics_id) DESCLIMIT 1\t----- science -----\tcordis",
    "22": "SELECT SUM(total_cost) FROM projects\t----- science -----\tcordis",
    "23": "SELECT title FROM projects WHERE start_year > 2006 AND end_year IS NOT NULL\t----- science -----\tcordis",
    "24": "SELECT title, (end_year - start_year) AS duration FROM projects WHERE start_year IS NOT NULL AND end_year IS NOT NULL ORDER BY duration DESC LIMIT 1\t----- science -----\tcordis",
    "25": "SELECT title FROM topics WHERE title LIKE 'Raw materials%'\t----- science -----\tcordis",
    "26": "SELECT title FROM topics WHERE title LIKE '%climate%'\t----- science -----\tcordis",
    "27": "SELECT COUNT(*) FROM projects AS P INNER JOIN people AS PE ON P.principal_investigator = PE.unics_id WHERE PE.full_name = 'Thomas Bell'\t----- science -----\tcordis",
    "28": "SELECT DISTINCT full_name FROM people\t----- science -----\tcordis",
    "29": "SELECT acronym FROM projects WHERE total_cost BETWEEN 100000 AND 200000\t----- science -----\tcordis",
    "30": "SELECT title FROM projects WHERE total_cost > 1000000\t----- science -----\tcordis",
    "31": "SELECT title FROM projects WHERE total_cost > 1000000\t----- science -----\tcordis",
    "32": "SELECT projects.title, project_members.member_name FROM projects INNER JOIN project_members ON project_members.project = projects.unics_id WHERE project_members.member_role = 'partner role'\t----- science -----\tcordis",
    "33": "SELECT code, description FROM erc_research_domains\t----- science -----\tcordis",
    "34": "SELECT countries.country_name FROM institutions INNER JOIN countries ON institutions.country_id = countries.unics_id\t----- science -----\tcordis",
    "35": "SELECT countries.country_name FROM institutions INNER JOIN countries ON institutions.country_id = countries.unics_id\t----- science -----\tcordis",
    "36": "```sqlSELECT country_code2, country_code3 FROM countries WHERE country_name = 'Andorra';```\t----- science -----\tcordis",
    "37": "SELECT code FROM funding_schemes;\t----- science -----\tcordis",
    "38": "SELECT title FROM programmes WHERE short_name = 'Transport';\t----- science -----\tcordis",
    "39": "SELECT PM.member_name, PM.member_role FROM project_members AS PM INNER JOIN projects AS P ON PM.project = P.unics_id WHERE P.acronym = 'GTBB'\t----- science -----\tcordis",
    "40": "SELECT T1.member_name, T1.member_role FROM project_members AS T1 INNER JOIN projects AS T2 ON T1.project = T2.unics_id WHERE T2.acronym = 'GTBB'\t----- science -----\tcordis",
    "41": "`SELECT title FROM programmes WHERE parent = 'FP7';`\t----- science -----\tcordis",
    "42": "```sqlSELECT title FROM programmes WHERE parent = 'FP7';```\t----- science -----\tcordis",
    "43": "SELECT T1.description FROM erc_panels AS T1 INNER JOIN erc_research_domains AS T2 ON T1.part_of = T2.code WHERE T2.description = 'Life Sciences'\t----- science -----\tcordis",
    "44": "SELECT T1.description FROM erc_panels AS T1 INNER JOIN erc_research_domains AS T2 ON T1.part_of = T2.code WHERE T2.description = 'life sciences'\t----- science -----\tcordis",
    "45": "SELECT PM.*FROM project_members AS PMINNER JOIN activity_types AS AT ON PM.activity_type = AT.codeWHERE AT.description = 'Research Organisations'\t----- science -----\tcordis",
    "46": "SELECT PM.member_name FROM project_members AS PM INNER JOIN activity_types AS AT ON PM.activity_type = AT.code WHERE AT.description = 'Research Organisations'\t----- science -----\tcordis",
    "47": "SELECT objective FROM projects WHERE title = 'DEEPCARBON';\t----- science -----\tcordis",
    "48": "SELECT objective FROM projects WHERE acronym = 'DEEPCARBON';\t----- science -----\tcordis",
    "49": "`SELECT title FROM projects WHERE objective LIKE '%carbon capturing%'`\t----- science -----\tcordis",
    "50": "SELECT COUNT(*) FROM projects WHERE objective LIKE '%carbon capturing%';\t----- science -----\tcordis",
    "51": "SELECT institutions.institutions_name FROM institutions INNER JOIN countries ON institutions.country_id = countries.unics_id INNER JOIN eu_territorial_units ON institutions.geocode_regions_3 = eu_territorial_units.geocode_regions WHERE countries.country_name = 'France' AND eu_territorial_units.description != 'Paris'\t----- science -----\tcordis",
    "52": "SELECT institutions.institutions_name FROM institutions INNER JOIN countries ON institutions.country_id = countries.unics_id WHERE countries.country_name = 'France' AND institutions.city != 'Paris'\t----- science -----\tcordis",
    "53": "SELECT institutions.institutions_name FROM institutions WHERE institutions.unics_id NOT IN (    SELECT projects.principal_investigator     FROM projects)\t----- science -----\tcordis",
    "54": "SELECT institutions.unics_id, institutions.institutions_name FROM institutions LEFT JOIN projects ON institutions.unics_id = projects.principal_investigator WHERE projects.principal_investigator IS NULL\t----- science -----\tcordis",
    "55": "SELECT P.full_name FROM people AS P INNER JOIN project_members AS PM ON P.unics_id = PM.unics_id GROUP BY P.unics_id HAVING COUNT(PM.project) > 1\t----- science -----\tcordis",
    "56": "SELECT p.full_nameFROM people AS pJOIN project_members AS pm ON p.unics_id = pm.unics_idGROUP BY p.unics_idHAVING COUNT(DISTINCT pm.project) > 1\t----- science -----\tcordis",
    "57": "SELECT sa.titleFROM subject_areas AS saWHERE sa.code = (    SELECT subject_area    FROM (        SELECT subject_area, SUM(ec_max_contribution + total_cost) AS total_funding        FROM project_subject_areas AS psa        INNER JOIN projects AS p ON psa.project = p.unics_id        GROUP BY subject_area    ) AS funding_totals    ORDER BY total_funding DESC    LIMIT 1)\t----- science -----\tcordis",
    "58": "SELECT T3.title AS subject_area, SUM(T1.ec_max_contribution) AS total_fundingFROM projects AS T1INNER JOIN project_subject_areas AS T2 ON T1.unics_id = T2.projectINNER JOIN subject_areas AS T3 ON T2.subject_area = T3.codeGROUP BY T3.titleORDER BY total_funding DESCLIMIT 1\t----- science -----\tcordis",
    "59": "SELECT T3.code, SUM(T1.ec_max_contribution) AS total_fundingFROM projects AS T1INNER JOIN project_subject_areas AS T2 ON T1.unics_id = T2.projectINNER JOIN subject_areas AS T3 ON T2.subject_area = T3.codeGROUP BY T3.codeORDER BY total_funding ASCLIMIT 1\t----- science -----\tcordis",
    "60": "```sqlSELECT SA.title FROM subject_areas AS SA JOIN project_subject_areas AS PSA ON PSA.subject_area = SA.code JOIN projects AS P ON PSA.project = P.unics_id WHERE P.ec_max_contribution = (SELECT MIN(ec_max_contribution) FROM projects)```\t----- science -----\tcordis",
    "61": "SELECT T1.institutions_name, COUNT(T2.project) AS project_countFROM institutions AS T1INNER JOIN project_members AS T2 ON T1.unics_id = T2.institution_idINNER JOIN projects AS T3 ON T2.project = T3.unics_idGROUP BY T1.institutions_nameORDER BY project_count DESCLIMIT 1\t----- science -----\tcordis",
    "62": "SELECT T1.institutions_name, COUNT(T2.project) AS project_countFROM institutions AS T1INNER JOIN project_members AS T2 ON T1.unics_id = T2.institution_idGROUP BY T1.unics_id, T1.institutions_nameORDER BY project_count DESCLIMIT 1\t----- science -----\tcordis",
    "63": "SELECT T1.institutions_name FROM institutions AS T1 LEFT JOIN project_members AS T2 ON T1.unics_id = T2.institution_id GROUP BY T1.unics_id ORDER BY COUNT(T2.project) ASC LIMIT 1\t----- science -----\tcordis",
    "64": "SELECT T1.institutions_name FROM institutions AS T1 LEFT JOIN project_members AS T2 ON T1.unics_id = T2.institution_id GROUP BY T1.unics_id, T1.institutions_name ORDER BY COUNT(T2.project) ASC LIMIT 1\t----- science -----\tcordis",
    "65": "SELECT T1.title, SUM(T2.ec_max_contribution) AS total_fundingFROM funding_schemes AS T1INNER JOIN projects AS T2 ON T1.code = T2.ec_fund_schemeGROUP BY T1.titleORDER BY total_funding DESCLIMIT 1\t----- science -----\tcordis",
    "66": "SELECT T1.title, SUM(T2.ec_max_contribution) AS total_fundingFROM funding_schemes AS T1INNER JOIN projects AS T2 ON T1.code = T2.ec_fund_schemeGROUP BY T1.titleORDER BY total_funding ASCLIMIT 1\t----- science -----\tcordis",
    "67": "SELECT     institutions.institutions_name,     SUM(projects.ec_max_contribution) AS total_fundingFROM     project_members INNER JOIN     projects ON project_members.project = projects.unics_id INNER JOIN     institutions ON project_members.institution_id = institutions.unics_id GROUP BY     institutions.institutions_name ORDER BY     total_funding DESC\t----- science -----\tcordis",
    "68": "SELECT projects.ec_max_contribution, project_members.member_name FROM projects INNER JOIN project_members ON project_members.project = projects.unics_id ORDER BY projects.ec_max_contribution DESC\t----- science -----\tcordis",
    "69": "```sqlSELECT title, start_year FROM projects ORDER BY start_year DESC;```\t----- science -----\tcordis",
    "70": "SELECT unics_id, title, start_date FROM projects ORDER BY start_date DESC LIMIT 1;\t----- science -----\tcordis",
    "71": "SELECT title, start_year FROM projects ORDER BY start_year ASC;\t----- science -----\tcordis",
    "72": "SELECT unics_id, title, start_date FROM projects ORDER BY start_date ASC\t----- science -----\tcordis",
    "73": "SELECT MIN(start_date) FROM projects\t----- science -----\tcordis",
    "74": "SELECT MIN(start_date) FROM projects\t----- science -----\tcordis",
    "75": "SELECT T1.title FROM projects AS T1 INNER JOIN project_subject_areas AS T2 ON T1.unics_id = T2.project INNER JOIN subject_areas AS T3 ON T2.subject_area = T3.code WHERE T3.title = 'Climate change and Carbon cycle research'\t----- science -----\tcordis",
    "76": "SELECT projects.title FROM projects INNER JOIN project_subject_areas ON project_subject_areas.project = projects.unics_id INNER JOIN subject_areas ON project_subject_areas.subject_area = subject_areas.code WHERE subject_areas.code = 'CCC'\t----- science -----\tcordis",
    "77": "```sqlSELECT DISTINCT code, description FROM project_member_roles ORDER BY code;``` This revised query maintains the original intent while improving the output's organization.\t----- science -----\tcordis",
    "78": "SELECT DISTINCT T2.description FROM project_members AS T1 INNER JOIN project_member_roles AS T2 ON T1.member_role = T2.code\t----- science -----\tcordis",
    "79": "`SELECT COUNT(*) FROM erc_panels WHERE description LIKE '%Life Sciences%';`\t----- science -----\tcordis",
    "80": "SELECT COUNT(*) FROM erc_panels AS T1 INNER JOIN erc_research_domains AS T2 ON T1.part_of = T2.code WHERE T2.description = 'Life Sciences'\t----- science -----\tcordis",
    "81": "SELECT code, description FROM erc_panels WHERE description LIKE '%social sciences%' OR description LIKE '%humanities%';\t----- science -----\tcordis",
    "82": "```sqlSELECT COUNT(*) FROM erc_panels WHERE description LIKE '%social sciences%' OR description LIKE '%humanities%';```\t----- science -----\tcordis",
    "83": "```sqlSELECT PM.unics_id, PM.member_name FROM project_members AS PM INNER JOIN institutions AS I ON PM.institution_id = I.unics_id``` This query will return all project members along with their IDs, without filtering for a specific type of institution. If there is a specific way to identify \"private for profit\" entities in the `institutions` table, that information would need to be provided to refine the query further.\t----- science -----\tcordis",
    "84": "SELECT pm.unics_id, pm.member_name, pm.member_role FROM project_members pmJOIN project_member_roles pmr ON pm.member_role = pmr.codeWHERE pmr.description LIKE '%business%'\t----- science -----\tcordis",
    "85": "SELECT COUNT(*) FROM project_members WHERE member_role = 'BUSINESS';\t----- science -----\tcordis",
    "86": "SELECT COUNT(*) FROM project_members pmJOIN project_member_roles pmr ON pm.member_role = pmr.codeWHERE pmr.description IN ('Higher', 'Secondary Education Establishments');\t----- science -----\tcordis",
    "87": "```sqlSELECT COUNT(*) FROM project_members;```If there is a specific criterion for Educational Establishments that is not provided in the schema, please provide that information for a more accurate query.\t----- science -----\tcordis",
    "88": "SELECT COUNT(DISTINCT T1.unics_id) FROM projects AS T1 INNER JOIN project_subject_areas AS T2 ON T1.unics_id = T2.project INNER JOIN subject_areas AS T3 ON T2.subject_area = T3.code WHERE T3.title = 'Robotics'\t----- science -----\tcordis",
    "89": "```sqlSELECT COUNT(DISTINCT T1.project) FROM project_subject_areas AS T1 INNER JOIN subject_areas AS T2 ON T1.subject_area = T2.code WHERE T2.title = 'Robotics'```This query counts the distinct projects associated with the subject area of Robotics by joining the `project_subject_areas` table with the `subject_areas` table.\t----- science -----\tcordis",
    "90": "SELECT T1.institutions_name, SUM(T2.total_cost) AS total_fundingFROM project_members AS T3INNER JOIN institutions AS T1 ON T3.institution_id = T1.unics_idINNER JOIN projects AS T2 ON T3.project = T2.unics_idWHERE T1.country_id NOT IN (SELECT unics_id FROM countries)  -- Assuming non-EU entities are not in the countries tableGROUP BY T1.institutions_nameORDER BY total_funding DESCLIMIT 1\t----- science -----\tcordis",
    "91": "SELECT institutions.institutions_name, SUM(projects.ec_max_contribution) AS total_fundingFROM institutionsJOIN project_members ON institutions.unics_id = project_members.institution_idJOIN projects ON project_members.project = projects.unics_idWHERE institutions.country_id NOT IN (SELECT unics_id FROM countries) -- Assuming countries table contains EU countriesGROUP BY institutions.institutions_nameORDER BY total_funding DESCLIMIT 1\t----- science -----\tcordis",
    "92": "SELECT     institutions.institutions_name,     SUM(projects.ec_max_contribution) AS total_fundingFROM     institutions INNER JOIN     projects ON institutions.unics_id = projects.principal_investigator INNER JOIN     countries ON institutions.country_id = countries.unics_id WHERE     countries.country_code2 NOT IN ('AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'GB') -- Replace with actual EU country codesGROUP BY     institutions.institutions_name ORDER BY     total_funding ASC LIMIT 1\t----- science -----\tcordis",
    "93": "SELECT I.institutions_name, MIN(P.total_cost) AS least_fundingFROM institutions AS IJOIN project_members AS PM ON I.unics_id = PM.institution_idJOIN projects AS P ON PM.project = P.unics_idWHERE I.country_id NOT IN (SELECT unics_id FROM countries WHERE country_code2 IN ('FR', 'DE', 'IT', 'ES', 'PL', 'NL', 'BE', 'CZ', 'AT', 'DK', 'FI', 'SE', 'IE', 'PT', 'HU', 'RO', 'SK', 'BG', 'HR', 'LT', 'LV', 'EE', 'SI', 'CY', 'MT'))GROUP BY I.institutions_nameORDER BY least_funding ASCLIMIT 1\t----- science -----\tcordis",
    "94": "```sqlSELECT COUNT(DISTINCT I.unics_id) FROM project_members AS PM INNER JOIN institutions AS I ON PM.institution_id = I.unics_id INNER JOIN countries AS C ON I.country_id = C.unics_id WHERE C.country_code2 NOT IN ('EU_COUNTRY_CODE_1', 'EU_COUNTRY_CODE_2', ...) -- Replace with actual EU country codes```In conclusion, the SQL query is structurally correct but requires actual EU country codes to be functional.\t----- science -----\tcordis",
    "95": "SELECT DISTINCT T1.member_name, T1.country FROM project_members AS T1 LEFT JOIN countries AS T2 ON T1.country = T2.country_name WHERE T2.country_name IS NULL\t----- science -----\tcordis",
    "96": "SELECT * FROM programmes WHERE title LIKE '%climate%';\t----- science -----\tcordis",
    "97": "SELECT title FROM programmes WHERE title LIKE '%climate%';\t----- science -----\tcordis",
    "98": "```sqlSELECT     P.title AS programme_title,     SUM(J.ec_max_contribution) AS total_funds_allocatedFROM     programmes AS PINNER JOIN     project_programmes AS JP ON P.code = JP.programmeINNER JOIN     projects AS J ON JP.project = J.unics_idGROUP BY     P.title```\t----- science -----\tcordis",
    "99": "SELECT P.title AS programme_title, SUM(J.ec_max_contribution) AS total_fundingFROM programmes AS PINNER JOIN project_programmes AS PP ON P.code = PP.programmeINNER JOIN projects AS J ON PP.project = J.unics_idGROUP BY P.title\t----- science -----\tcordis",
    "100": "SELECT * FROM disease_mutation WHERE ref_aa = 'E';\t----- science -----\toncomx",
    "101": "SELECT COUNT(*) FROM biomarker_fda_test WHERE test_manufacturer = '23andMe';\t----- science -----\toncomx",
    "102": "`SELECT speciescommonname FROM species WHERE genus = 'Mus';`\t----- science -----\toncomx",
    "103": "SELECT species, genus, speciescommonname FROM species\t----- science -----\toncomx",
    "104": "SELECT * FROM disease_mutation\t----- science -----\toncomx",
    "105": "SELECT biomarker_description FROM biomarker\t----- science -----\toncomx",
    "106": "SELECT COUNT(T1.test_trial_id) FROM biomarker_fda_test_trial AS T1 INNER JOIN biomarker_fda_test AS T2 ON T1.test_submission = T2.test_submission AND T1.test_trade_name = T2.test_trade_name WHERE T2.test_manufacturer = 'ABBOTT MOLECULAR INC'\t----- science -----\toncomx",
    "107": "```sqlSELECT gene_symbol, biomarker_description FROM biomarker WHERE test_is_a_panel = 'false';```\t----- science -----\toncomx",
    "108": "SELECT * FROM disease WHERE name LIKE '%cancer%';\t----- science -----\toncomx",
    "109": "SELECT biomarker_edrn.biomarker_title, biomarker_edrn.qa_state FROM biomarker_edrn JOIN biomarker ON biomarker_edrn.id = biomarker.id WHERE biomarker_edrn.phase = 'Two'\t----- science -----\toncomx",
    "110": "SELECT biomarker_title, qa_state FROM biomarker_edrn WHERE phase = 'Two';\t----- science -----\toncomx",
    "111": "SELECT gene_symbol FROM biomarker\t----- science -----\toncomx",
    "112": "```sqlSELECT T1.id, T1.gene_symbol, T1.biomarker_id FROM biomarker AS T1 INNER JOIN biomarker_edrn AS T2 ON T1.id = T2.id WHERE T2.biomarker_type != 'protein'```\t----- science -----\toncomx",
    "113": "SELECT biomarker_edrn.biomarker_title FROM biomarker_edrn JOIN biomarker ON biomarker_edrn.id = biomarker.id WHERE biomarker_edrn.biomarker_type != 'Protein'\t----- science -----\toncomx",
    "114": "SELECT DISTINCT xref_gene_ensembl.gene_symbol FROM differential_expression INNER JOIN disease ON differential_expression.doid = disease.id INNER JOIN xref_gene_ensembl ON differential_expression.gene_symbol = xref_gene_ensembl.gene_symbol WHERE disease.name = 'lung cancer'\t----- science -----\toncomx",
    "115": "SELECT B.gene_symbol, B.biomarker_description FROM biomarker AS B INNER JOIN biomarker_edrn AS E ON B.id = E.id INNER JOIN anatomical_entity AS A ON E.uberon_anatomical_id = A.id INNER JOIN disease AS D ON A.id = D.id WHERE D.name = 'breast cancer'\t----- science -----\toncomx",
    "116": "SELECT DISTINCT phase FROM biomarker_edrn\t----- science -----\toncomx",
    "117": "SELECT platform_method, test_study_design FROM biomarker_fda_test WHERE test_manufacturer = 'Dako Denmark A/S'\t----- science -----\toncomx",
    "118": "SELECT pvalue FROM differential_expression WHERE doid = (SELECT id FROM disease WHERE name = 'lung cancer')\t----- science -----\toncomx",
    "119": "SELECT DM.chromosome_id, DM.chromosome_pos FROM disease_mutation AS DM INNER JOIN disease AS D ON DM.doid = D.id WHERE D.name = 'skin cancer'\t----- science -----\toncomx",
    "120": "```sqlSELECT chromosome_pos FROM disease_mutation WHERE doid = (SELECT id FROM disease WHERE name = 'skin cancer' LIMIT 1)```\t----- science -----\toncomx",
    "121": "SELECT * FROM disease_mutation WHERE ref_aa = 'E';\t----- science -----\toncomx",
    "122": "SELECT COUNT(*) AS number_of_tests FROM biomarker_fda_test WHERE test_manufacturer = '23andMe';\t----- science -----\toncomx",
    "123": "```sqlSELECT DISTINCT T3.name FROM differential_expression AS T1 INNER JOIN disease AS T2 ON T1.doid = T2.id INNER JOIN cancer_tissue AS T4 ON T2.id = T4.doid INNER JOIN anatomical_entity AS T3 ON T4.uberon_anatomical_id = T3.id WHERE T1.gene_symbol = 'A1BG' AND T1.expression_change_direction = 'up regulated'```\t----- science -----\toncomx",
    "124": "SELECT * FROM species\t----- science -----\toncomx",
    "125": "SELECT xref_gene_ensembl.gene_symbol, differential_expression.pvalue FROM differential_expression INNER JOIN disease ON differential_expression.doid = disease.id INNER JOIN xref_gene_ensembl ON differential_expression.gene_symbol = xref_gene_ensembl.gene_symbol WHERE xref_gene_ensembl.gene_symbol = 'EGFR' AND disease.name = 'lung cancer'\t----- science -----\toncomx",
    "126": "SELECT T1.gene_symbol, T2.pvalue FROM differential_expression AS T2 INNER JOIN xref_gene_ensembl AS T1 ON T1.gene_symbol = T2.gene_symbol WHERE T2.doid = (SELECT id FROM disease WHERE name = 'lung cancer') AND T1.gene_symbol = 'EGFR'\t----- science -----\toncomx",
    "127": "SELECT * FROM disease_mutation\t----- science -----\toncomx",
    "128": "SELECT COUNT(*) FROM healthy_expression AS HE INNER JOIN stage AS S ON HE.uberon_developmental_id = S.id WHERE S.name = 'late adult stage'\t----- science -----\toncomx",
    "129": "SELECT D.name FROM disease AS D INNER JOIN differential_expression AS DE ON D.id = DE.doid WHERE DE.gene_symbol = 'A1BG' AND DE.statistical_significance = 'significant'\t----- science -----\toncomx",
    "130": "SELECT D.name FROM disease AS D INNER JOIN differential_expression AS DE ON D.id = DE.doid WHERE DE.gene_symbol = 'A1BG' AND DE.statistical_significance = 'Yes'\t----- science -----\toncomx",
    "131": "SELECT biomarker_description FROM biomarker\t----- science -----\toncomx",
    "132": "SELECT gene_symbol, biomarker_description FROM biomarker WHERE test_is_a_panel = '0'\t----- science -----\toncomx",
    "133": "SELECT DISTINCT T1.test_trade_name FROM biomarker_fda_test AS T1 INNER JOIN biomarker_fda_test_use AS T2 ON T1.test_trade_name = T2.test_trade_name AND T1.test_submission = T2.test_submission WHERE T2.approved_indication LIKE '%predisposition%'\t----- science -----\toncomx",
    "134": "SELECT gene_symbol FROM biomarker\t----- science -----\toncomx",
    "135": "SELECT T1.id, T2.biomarker_title FROM biomarker AS T1 INNER JOIN biomarker_edrn AS T2 ON T1.id = T2.id INNER JOIN biomarker_fda AS T3 ON T1.id = T3.id WHERE T2.biomarker_type = 'protein' AND T2.phase = 'two'\t----- science -----\toncomx",
    "136": "SELECT biomarker_title FROM biomarker_edrn WHERE biomarker_type = 'Protein' AND phase = 'Two'\t----- science -----\toncomx",
    "137": "```sqlSELECT B.gene_symbol, B.biomarker_description FROM disease AS D INNER JOIN disease_mutation AS DM ON D.id = DM.doid INNER JOIN biomarker_edrn AS BE ON DM.id = BE.id INNER JOIN biomarker AS B ON BE.id = B.id WHERE D.name = 'breast cancer'```Note: The exact join condition may vary based on the actual relationships in your schema. Please ensure that the join conditions reflect the correct foreign key relationships in your database.\t----- science -----\toncomx",
    "138": "SELECT DISTINCT phase FROM biomarker_edrn\t----- science -----\toncomx",
    "139": "SELECT T1.pvalue FROM differential_expression AS T1 INNER JOIN disease AS T2 ON T1.doid = T2.id WHERE T2.name = 'lung cancer'\t----- science -----\toncomx",
    "140": "SELECT COUNT(DISTINCT T1.gene_symbol) FROM xref_gene_ensembl AS T1 INNER JOIN species AS T2 ON T1.speciesid = T2.speciesid WHERE T2.genus = 'Homo'\t----- science -----\toncomx",
    "141": "SELECT COUNT(DISTINCT T1.ensembl_gene_id) FROM xref_gene_ensembl AS T1 INNER JOIN species AS T2 ON T1.speciesid = T2.speciesid WHERE T2.genus = 'Homo'\t----- science -----\toncomx",
    "142": "SELECT * FROM biomarker_fda_test WHERE test_manufacturer LIKE 'Roche%';\t----- science -----\toncomx",
    "143": "SELECT test_submission FROM biomarker_fda_test WHERE test_manufacturer LIKE 'Roche%';\t----- science -----\toncomx",
    "144": "SELECT D.name FROM disease AS D INNER JOIN disease_mutation AS DM ON D.id = DM.doid WHERE DM.cds_pos = 102997\t----- science -----\toncomx",
    "145": "SELECT D.name FROM disease AS D INNER JOIN disease_mutation AS DM ON D.id = DM.doid WHERE DM.cds_pos = 102997\t----- science -----\toncomx",
    "146": "SELECT gene_symbol FROM differential_expression WHERE pvalue BETWEEN 0.39 AND 0.41\t----- science -----\toncomx",
    "147": "SELECT gene_symbol FROM differential_expression WHERE pvalue BETWEEN 0.39 AND 0.41\t----- science -----\toncomx",
    "148": "SELECT DISTINCT dm.chromosome_id FROM disease_mutation AS dm INNER JOIN disease AS d ON dm.doid = d.id WHERE d.name = 'breast cancer'\t----- science -----\toncomx",
    "149": "SELECT DISTINCT T2.chromosome_id FROM disease AS T1 INNER JOIN disease_mutation AS T2 ON T1.id = T2.doid WHERE T1.name = 'breast cancer'\t----- science -----\toncomx",
    "150": "SELECT T1.name FROM anatomical_entity AS T1 INNER JOIN healthy_expression AS T2 ON T1.id = T2.uberon_anatomical_id WHERE T2.expression_level_gene_relative = 'LOW' AND T2.expression_level_anatomical_relative = 'HIGH'\t----- science -----\toncomx",
    "151": "SELECT T1.name FROM anatomical_entity AS T1 INNER JOIN healthy_expression AS T2 ON T1.id = T2.uberon_anatomical_id WHERE T2.expression_level_gene_relative = 'LOW' AND T2.expression_level_anatomical_relative = 'HIGH'\t----- science -----\toncomx",
    "152": "`SELECT name FROM anatomical_entity WHERE name LIKE 'bone%'`\t----- science -----\toncomx",
    "153": "`SELECT speciescommonname FROM species WHERE genus = 'Mus';`\t----- science -----\toncomx",
    "154": "SELECT D.name FROM differential_expression AS DE INNER JOIN disease AS D ON DE.doid = D.id WHERE DE.gene_symbol = 'A1BG' AND DE.expression_change_direction = 'up'\t----- science -----\toncomx",
    "155": "SELECT COUNT(*) FROM healthy_expression AS HE INNER JOIN stage AS S ON HE.uberon_developmental_id = S.id WHERE S.name LIKE 'late adult%'\t----- science -----\toncomx",
    "156": "```sqlSELECT COUNT(*) FROM biomarker_fda_test_trial AS T1 INNER JOIN biomarker_fda_test AS T2 ON T1.test_submission = T2.test_submission AND T1.test_trade_name = T2.test_trade_name WHERE T2.test_manufacturer = 'ABBOTT MOLECULAR INC'```\t----- science -----\toncomx",
    "157": "SELECT T1.test_trade_name FROM biomarker_fda_test AS T1 INNER JOIN biomarker_fda_test_use AS T2 ON T1.test_trade_name = T2.test_trade_name AND T1.test_submission = T2.test_submission WHERE T2.actual_use = 'predisposition'\t----- science -----\toncomx",
    "158": "SELECT xref_gene_ensembl.gene_symbol FROM healthy_expression JOIN xref_gene_ensembl ON healthy_expression.ensembl_gene_id = xref_gene_ensembl.ensembl_gene_id JOIN disease_mutation ON healthy_expression.disease_mutation_id = disease_mutation.id WHERE disease_mutation.doid = (SELECT id FROM disease WHERE name = 'lung cancer')\t----- science -----\toncomx",
    "159": "SELECT T2.platform_method, T2.test_study_design FROM biomarker_fda AS T1 INNER JOIN biomarker_fda_test AS T2 ON T1.test_trade_name = T2.test_trade_name WHERE T2.test_manufacturer = 'Dako Denmark A/S'\t----- science -----\toncomx",
    "160": "SELECT T1.biomarker_description FROM biomarker AS T1 INNER JOIN biomarker_fda AS T2 ON T1.id = T2.id WHERE T2.test_approval_status = 'class II'\t----- science -----\toncomx",
    "161": "```sqlSELECT biomarker.biomarker_description FROM biomarker INNER JOIN biomarker_fda ON biomarker.id = biomarker_fda.id INNER JOIN biomarker_fda_test ON biomarker_fda.id = biomarker_fda_test.id WHERE biomarker_fda_test.test_approval_status = 'class II'``` However, since the `biomarker_fda_test` table requires both `test_trade_name` and `test_submission` for the join, we need to adjust the join condition accordingly. The final corrected SQL query is:Revised_SQL: ```sqlSELECT biomarker.biomarker_description FROM biomarker INNER JOIN biomarker_fda ON biomarker.id = biomarker_fda.id INNER JOIN biomarker_fda_test ON biomarker_fda.id = biomarker_fda_test.biomarker_fda_id WHERE biomarker_fda_test.test_approval_status = 'class II'``` This ensures that the joins are correctly established based on the foreign key relationships.\t----- science -----\toncomx",
    "162": "SELECT * FROM healthy_expression WHERE expression_score > (SELECT AVG(expression_score) FROM healthy_expression);\t----- science -----\toncomx",
    "163": "SELECT ensembl_gene_id, uberon_anatomical_id, uberon_developmental_id, expression_score FROM healthy_expression WHERE expression_score > (SELECT AVG(expression_score) FROM healthy_expression)\t----- science -----\toncomx",
    "164": "SELECT T1.gene_symbol FROM biomarker AS T1 INNER JOIN biomarker_edrn AS T2 ON T1.id = T2.id INNER JOIN anatomical_entity AS T3 ON T2.uberon_anatomical_id = T3.id WHERE T2.biomarker_type = 'genomic' AND T3.name = 'breast'\t----- science -----\toncomx",
    "165": "SELECT T1.gene_symbol FROM biomarker AS T1 INNER JOIN biomarker_edrn AS T2 ON T1.id = T2.id INNER JOIN anatomical_entity AS T3 ON T2.uberon_anatomical_id = T3.id WHERE T2.biomarker_type = 'Genomic' AND T3.name = 'breast'\t----- science -----\toncomx",
    "166": "SELECT DISTINCT d.name FROM disease AS d INNER JOIN cancer_tissue AS ct ON ct.doid = d.id INNER JOIN anatomical_entity AS ae ON ct.uberon_anatomical_id = ae.id WHERE ae.name LIKE '%liver%'\t----- science -----\toncomx",
    "167": "SELECT d.name FROM disease dJOIN cancer_tissue ct ON d.id = ct.doidJOIN anatomical_entity ae ON ct.uberon_anatomical_id = ae.idWHERE ae.name = 'liver'\t----- science -----\toncomx",
    "168": "SELECT DISTINCT T3.test_manufacturer FROM biomarker AS T1 INNER JOIN biomarker_fda AS T2 ON T1.id = T2.id INNER JOIN biomarker_fda_test AS T3 ON T2.id = T3.biomarker_origin WHERE T1.gene_symbol = 'BRAF'\t----- science -----\toncomx",
    "169": "SELECT T3.test_manufacturer FROM biomarker AS T1 INNER JOIN biomarker_fda AS T2 ON T1.id = T2.id INNER JOIN biomarker_fda_test AS T3 ON T2.id = T3.test_submission WHERE T1.gene_symbol = 'BRAF'\t----- science -----\toncomx",
    "170": "```sqlSELECT name AS anatomical_entity_name FROM anatomical_entityUNIONSELECT speciescommonname AS species_name FROM species;``` This version maintains the original intent while clarifying the output.\t----- science -----\toncomx",
    "171": "SELECT DISTINCT he.uberon_anatomical_id FROM healthy_expression he JOIN xref_gene_ensembl xg ON he.ensembl_gene_id = xg.ensembl_gene_id WHERE xg.gene_symbol = 'A1BG';\t----- science -----\toncomx",
    "172": "SELECT T1.gene_symbol, T1.biomarker_description FROM biomarker AS T1 INNER JOIN biomarker_edrn AS T2 ON T1.id = T2.id WHERE T2.biomarker_type = 'breast' AND T2.phase = 'one'\t----- science -----\toncomx",
    "173": "SELECT T1.name, T2.expression_score FROM anatomical_entity AS T1 INNER JOIN healthy_expression AS T2 ON T1.id = T2.uberon_anatomical_id WHERE T2.ensembl_gene_id IN ('ENSMUSG00000000037', 'ENSMUSG00000000078')\t----- science -----\toncomx",
    "174": "```sqlSELECT T2.ncit_biomarker FROM biomarker AS T1 INNER JOIN biomarker_fda_ncit_term AS T2 ON T1.id = T2.biomarker_fda_id WHERE T1.gene_symbol = 'ALDH4A1'```\t----- science -----\toncomx",
    "175": "SELECT * FROM disease_mutation WHERE doid IN (    SELECT doid     FROM cancer_tissue     WHERE uberon_anatomical_id = (        SELECT id         FROM anatomical_entity         WHERE name = 'liver'    ))\t----- science -----\toncomx",
    "176": "```sqlSELECT T1.* FROM disease_mutation AS T1 INNER JOIN disease_mutation_tissue AS T3 ON T1.id = T3.disease_mutation_id INNER JOIN anatomical_entity AS T2 ON T3.uberon_anatomical_id = T2.id WHERE T2.name = 'liver'```\t----- science -----\toncomx",
    "177": "```sqlSELECT T1.gene_symbol FROM biomarker AS T1 INNER JOIN biomarker_fda AS T2 ON T1.id = T2.id INNER JOIN biomarker_fda_test AS T3 ON T2.id = T3.biomarker_origin WHERE T3.test_approval_status = 'PMP'``` This correction ensures that the JOIN between `biomarker_fda` and `biomarker_fda_test` is done using the correct foreign key relationship.\t----- science -----\toncomx",
    "178": "SELECT B.biomarker_description FROM biomarker AS B INNER JOIN biomarker_edrn AS E ON B.id = E.id INNER JOIN cancer_tissue AS CT ON E.uberon_anatomical_id = CT.uberon_anatomical_id INNER JOIN disease AS D ON CT.doid = D.id WHERE D.name = 'breast cancer'\t----- science -----\toncomx",
    "179": "SELECT     ae.name AS anatomical_entity_name,     COUNT(be.biomarker_id) AS biomarker_count FROM     anatomical_entity AS ae LEFT JOIN     biomarker_edrn AS be ON ae.id = be.uberon_anatomical_id LEFT JOIN     biomarker AS b ON be.biomarker_id = b.id GROUP BY     ae.id, ae.name\t----- science -----\toncomx",
    "180": "SELECT * FROM disease_mutation WHERE ref_aa = 'F';\t----- science -----\toncomx",
    "181": "SELECT * FROM disease WHERE name LIKE '%cancer%'\t----- science -----\toncomx",
    "182": "SELECT DISTINCT T3.test_manufacturer FROM biomarker AS T1 INNER JOIN biomarker_fda AS T2 ON T1.id = T2.id INNER JOIN biomarker_fda_test AS T3 ON T2.id = T3.biomarker_fda_id WHERE T1.gene_symbol = 'BRAF'\t----- science -----\toncomx",
    "183": "SELECT b.id AS biomarker_id, b.gene_symbol, b.biomarker_description, f.test_trade_nameFROM biomarker bJOIN biomarker_fda f ON b.id = f.idWHERE f.test_is_a_panel = '1';  -- Assuming '1' indicates that it is a panel\t----- science -----\toncomx",
    "184": "SELECT T1.gene_symbol FROM biomarker AS T1 INNER JOIN biomarker_fda AS T2 ON T1.id = T2.id INNER JOIN biomarker_fda_test AS T3 ON T2.id = T3.biomarker_origin WHERE T3.test_manufacturer = '23andMe'\t----- science -----\toncomx",
    "185": "SELECT DISTINCT T1.test_manufacturer FROM biomarker_fda_test AS T1 INNER JOIN biomarker_fda AS T2 ON T1.test_trade_name = T2.test_trade_name AND T1.test_submission = T2.test_submission INNER JOIN biomarker AS T3 ON T2.id = T3.id INNER JOIN biomarker_edrn AS T4 ON T3.id = T4.id INNER JOIN disease AS T5 ON T4.doid = T5.id WHERE T5.name = 'Breast Cancer'\t----- science -----\toncomx",
    "186": "SELECT     B.biomarker_description,     B.id AS biomarker_id,     F.test_trade_name,     F.test_submission,     T.test_approval_status FROM     biomarker AS B INNER JOIN     biomarker_fda AS F ON B.id = F.id INNER JOIN     biomarker_fda_test AS T ON F.test_submission = T.test_submission AND F.test_trade_name = T.test_trade_nameWHERE     (B.biomarker_description LIKE '%breast%' OR B.gene_symbol LIKE '%breast%')     AND T.test_approval_status = 'approved'\t----- science -----\toncomx",
    "187": "SELECT T1.id, T1.name, COUNT(T2.id) AS biomarker_countFROM anatomical_entity AS T1LEFT JOIN biomarker_edrn AS T2 ON T1.id = T2.uberon_anatomical_idGROUP BY T1.id, T1.nameORDER BY biomarker_count DESCLIMIT 1\t----- science -----\toncomx",
    "188": "The query cannot be executed as is due to the absence of the `chromosome_id` column in the `disease_mutation` table. Please verify the column names and provide the correct one.\t----- science -----\toncomx",
    "189": "SELECT d.name, COUNT(de.doid) AS entry_countFROM disease AS dINNER JOIN differential_expression AS de ON d.id = de.doidGROUP BY d.nameORDER BY entry_count DESCLIMIT 3\t----- science -----\toncomx",
    "190": "SELECT B.* FROM biomarker AS B LEFT JOIN biomarker_fda AS F ON B.id = F.id WHERE F.id IS NULL\t----- science -----\toncomx",
    "191": "SELECT * FROM biomarker_edrn WHERE id IN (SELECT id FROM biomarker_fda)\t----- science -----\toncomx",
    "192": "```sqlSELECT chromosome_id, COUNT(*) AS mutation_count FROM disease_mutation GROUP BY chromosome_id ORDER BY mutation_count DESC;```This query will return the count of mutations for each chromosome, sorted by the count in descending order, but it does not fulfill the requirement of identifying the cosmic data source. Since the schema does not provide a way to link to a cosmic data source, we cannot fully address the question as posed. Thus, the final SQL query remains as:```sqlSELECT chromosome_id, COUNT(*) AS mutation_count FROM disease_mutation GROUP BY chromosome_id ORDER BY mutation_count DESC;```\t----- science -----\toncomx",
    "193": "SELECT DISTINCT B.gene_symbol FROM biomarker AS BINNER JOIN biomarker_edrn AS BE ON B.id = BE.idINNER JOIN biomarker_fda AS BF ON B.id = BF.idINNER JOIN differential_expression AS DE ON BF.id = DE.doidINNER JOIN disease AS D ON DE.doid = D.idWHERE D.id = 1\t----- science -----\toncomx",
    "194": "SELECT     B.id AS biomarker_id,    FDT.test_trade_name,    FDT.test_submission,    COUNT(*) AS test_countFROM     biomarker AS BINNER JOIN     biomarker_fda AS F ON B.id = F.idINNER JOIN     biomarker_fda_test AS FDT ON F.id = FDT.idINNER JOIN     biomarker_fda_test_use AS FDTU ON FDT.test_trade_name = FDTU.test_trade_name                                     AND FDT.test_submission = FDTU.test_submissionGROUP BY     B.id, FDT.test_trade_name, FDT.test_submission\t----- science -----\toncomx",
    "195": "SELECT T2.test_trade_name FROM biomarker_fda AS T1 INNER JOIN biomarker_fda_test AS T2 ON T1.id = T2.biomarker_origin WHERE T2.test_approval_status = 'approved'\t----- science -----\toncomx",
    "196": "SELECT DISTINCT bft.test_manufacturer FROM biomarker_fda_test AS bft INNER JOIN biomarker_fda AS bfd ON bft.test_submission = bfd.test_submission AND bft.test_trade_name = bfd.test_trade_name INNER JOIN biomarker_edrn AS be ON bfd.id = be.id WHERE bft.test_approval_status = 'approved' AND be.biomarker_type = 'lung cancer'\t----- science -----\toncomx",
    "197": "SELECT DISTINCT D.name FROM disease AS D INNER JOIN biomarker AS B ON D.id = B.id INNER JOIN biomarker_edrn AS BE ON B.id = BE.id INNER JOIN anatomical_entity AS A ON BE.uberon_anatomical_id = A.id WHERE B.biomarker_description LIKE '%blood test%'\t----- science -----\toncomx",
    "198": "```sqlSELECT     biomarker.id,     biomarker.gene_symbol,     biomarker.biomarker_description,     biomarker.biomarker_id,     biomarker.test_is_a_panel,     healthy_expression.ensembl_gene_id,     healthy_expression.uberon_anatomical_id,     healthy_expression.uberon_developmental_id,     healthy_expression.expression_level_gene_relative,     healthy_expression.expression_level_anatomical_relative,     healthy_expression.call_quality,     healthy_expression.expression_rank_score,     healthy_expression.expression_score FROM     biomarker INNER JOIN     xref_gene_ensembl ON biomarker.gene_symbol = xref_gene_ensembl.gene_symbol INNER JOIN     healthy_expression ON xref_gene_ensembl.ensembl_gene_id = healthy_expression.ensembl_gene_id```\t----- science -----\toncomx",
    "199": "None\t----- science -----\tsdss",
    "200": "SELECT * FROM specobj WHERE class = 'star'\t----- science -----\tsdss",
    "201": "SELECT T1.objid, T1.ra, T1.dec FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T2.bestobjid = T1.objid\t----- science -----\tsdss",
    "202": "SELECT T1.objid, T1.ra, T1.dec FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T1.objid = T2.bestobjid\t----- science -----\tsdss",
    "203": "SELECT T1.objid, T1.run, T1.mjd, T2.class FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T2.bestobjid = T1.objid WHERE T2.class = 'Galaxy'\t----- science -----\tsdss",
    "204": "```sqlSELECT T1.specobjid, T1.class, T1.subclass FROM specobj AS T1 INNER JOIN photoobj AS T2 ON T1.bestobjid = T2.objidWHERE T1.class = 'GALAXY'```This query now correctly finds galaxies that are photometrically observable.\t----- science -----\tsdss",
    "205": "```sqlSELECT T1.objid, T1.ra, T1.dec FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T2.bestobjid = T1.objid WHERE T1.type = 1```If there is no specific value to filter for \"photometrically observable Galaxy,\" then the original query is correct as is:Final_SQL: ```sqlSELECT T1.objid, T1.ra, T1.dec FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T2.bestobjid = T1.objid``` Please confirm if there is a specific value for the type of galaxy to finalize the query.\t----- science -----\tsdss",
    "206": "SELECT T1.objid, T1.ra, T1.dec FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T1.objid = T2.bestobjid WHERE T1.type = 1\t----- science -----\tsdss",
    "207": "SELECT objid, ra, dec FROM photoobj WHERE ra > 185 AND ra < 186 AND dec > 15 AND dec < 16\t----- science -----\tsdss",
    "208": "SELECT objid, ra, dec FROM photoobj WHERE ra BETWEEN 185 AND 186 AND dec BETWEEN 15 AND 16\t----- science -----\tsdss",
    "209": "SELECT objid, ra, dec FROM photoobj WHERE ra > 185 AND ra < 186 AND dec > 15 AND dec < 16\t----- science -----\tsdss",
    "210": "SELECT objid, ra, dec FROM photoobj WHERE ra BETWEEN 185 AND 186 AND dec BETWEEN 15 AND 16\t----- science -----\tsdss",
    "211": "```sqlSELECT T1.specobjid, T1.ra, T1.dec, T2.type FROM specobj AS T1 INNER JOIN photoobj AS T2 ON T1.bestobjid = T2.objid WHERE T1.specobjid IN (SELECT specobjid FROM spplines) AND T1.ra > 185 AND T1.ra < 186 AND T1.dec > 15 AND T1.dec < 16```\t----- science -----\tsdss",
    "212": "```sqlSELECT T1.objid, T1.ra, T1.dec, T2.z FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T2.bestobjid = T1.objid WHERE T1.ra > 185 AND T1.ra < 186 AND T1.dec > 15 AND T1.dec < 16```\t----- science -----\tsdss",
    "213": "SELECT T1.* FROM specobj AS T1 INNER JOIN galspecline AS T2 ON T1.specobjid = T2.specobjid INNER JOIN spplines AS T3 ON T1.specobjid = T3.specobjid WHERE T1.ra > 185 AND T1.ra < 186 AND T1.dec > 15 AND T1.dec < 16\t----- science -----\tsdss",
    "214": "SELECT T1.objid, T1.ra, T1.dec, T2.z FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T1.objid = T2.bestobjid WHERE T1.ra > 185 AND T1.ra < 186 AND T1.dec > 15 AND T1.dec < 16\t----- science -----\tsdss",
    "215": "SELECT * FROM photoobj WHERE (g - u < 0.4) AND (r - g < 0.7) AND (r - i > 0.4) AND (i - z > 0.4)\t----- science -----\tsdss",
    "216": "SELECT T1.*FROM photoobj AS T1INNER JOIN photo_type AS T2 ON T1.type = T2.valueWHERE (T1.u - T1.g < 0.4)   AND (T1.g - T1.r < 0.7)   AND (T1.r - T1.i > 0.4)   AND (T1.i - T1.z > 0.4)\t----- science -----\tsdss",
    "217": "```sqlSELECT DISTINCT specobj.specobjidFROM specobjINNER JOIN galspecline ON specobj.specobjid = galspecline.specobjidINNER JOIN spplines ON specobj.specobjid = spplines.specobjidINNER JOIN photoobj ON specobj.bestobjid = photoobj.objidINNER JOIN neighbors ON photoobj.objid = neighbors.objidWHERE specobj.class = 'star'  AND neighbors.distance < 0.05  AND ABS(photoobj.u - photoobj.g) < 0.4  AND ABS(photoobj.g - photoobj.r) < 0.7  AND ABS(photoobj.r - photoobj.i) > 0.4  AND ABS(photoobj.i - photoobj.z) > 0.4```\t----- science -----\tsdss",
    "218": "SELECT T1.objid FROM photoobj AS T1 INNER JOIN neighbors AS T2 ON T1.objid = T2.objid WHERE T2.distance < 0.05 AND (T1.u - T1.g < 0.4) AND (T1.g - T1.r < 0.7) AND (T1.r - T1.i > 0.4) AND (T1.i - T1.z > 0.4)\t----- science -----\tsdss",
    "219": "```sqlSELECT COUNT(*) FROM photoobj AS p INNER JOIN photo_type AS pt ON p.type = pt.value WHERE p.r < 17 AND p.extinction_r > 0.2 AND pt.name = 'GALAXY'```\t----- science -----\tsdss",
    "220": "SELECT COUNT(*) FROM photoobj WHERE r < 17 AND extinction_r > 0.2\t----- science -----\tsdss",
    "221": "SELECT T1.objid, T1.gFROM photoobj AS T1INNER JOIN specobj AS T2 ON T2.bestobjid = T1.objidWHERE T2.class = 'GALAXY'   AND T1.g < 22  AND (T1.u - T1.g) BETWEEN -0.27 AND 0.71  AND (T1.g - T1.r) BETWEEN -0.24 AND 0.35  AND (T1.r - T1.i) BETWEEN -0.27 AND 0.57  AND (T1.i - T1.z) BETWEEN -0.35 AND 0.7ORDER BY T1.g DESC\t----- science -----\tsdss",
    "222": "SELECT T1.*FROM photoobj AS T1INNER JOIN photo_type AS T2 ON T1.type = T2.valueWHERE T1.g < 22  AND T1.u - T1.g >= -0.27  AND T1.u - T1.g < 0.71  AND T1.g - T1.r >= -0.24  AND T1.g - T1.r < 0.35  AND T1.r - T1.i >= -0.27  AND T1.r - T1.i < 0.57  AND T1.i - T1.z >= -0.35  AND T1.i - T1.z < 0.7ORDER BY T1.g DESC\t----- science -----\tsdss",
    "223": "```sqlSELECT objid, ra, dec FROM photoobj WHERE i < 19   AND i > 0   AND (g - r) > 2.26   AND (i - z) < 0.25   AND (u - g > 2.0 OR u > 22.3)```\t----- science -----\tsdss",
    "224": "```sqlSELECT *FROM photoobj AS pINNER JOIN photo_type AS pt ON p.type = pt.valueWHERE p.i < 19   AND p.i > 0   AND (p.g - p.r) > 2.26   AND (p.i - p.z) < 0.25   AND (p.u - p.g > 2.0 OR p.u > 22.3)```\t----- science -----\tsdss",
    "225": "SELECT objid, ra, dec FROM photoobj WHERE ra BETWEEN 140.9 AND 141.1 AND g < 18.0 AND (u - g) > 2.2\t----- science -----\tsdss",
    "226": "SELECT objid, ra, dec FROM photoobj WHERE ra BETWEEN 140.9 AND 141.1 AND g < 18.0 AND (u - g) > 2.2\t----- science -----\tsdss",
    "227": "SELECT T1.objid, T1.ra, T1.dec FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T2.bestobjid = T1.objid WHERE T2.class = 'Galaxy' AND T1.g BETWEEN 17 AND 18 AND T2.z < 0.05\t----- science -----\tsdss",
    "228": "SELECT T1.objid, T1.ra, T1.dec FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T1.objid = T2.bestobjid WHERE T1.g < 18.0 AND T1.g > 17 AND T2.z < 0.05 AND T2.class = 'Galaxy'\t----- science -----\tsdss",
    "229": "SELECT objid, ra, dec FROM photoobj WHERE (u - g) < 0.5\t----- science -----\tsdss",
    "230": "SELECT objid, ra, dec FROM photoobj WHERE (u - g) < 0.5\t----- science -----\tsdss",
    "231": "SELECT u, g, r, i, z FROM photoobj WHERE ABS(u - g) < 0.5\t----- science -----\tsdss",
    "232": "```sqlSELECT T1.u, T1.g, T1.r, T1.i, T1.z FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T1.objid = T2.bestobjid WHERE T1.u - T1.g < 0.5 AND T2.class = 'Star'```Note: The condition `T2.class = 'Star'` is a placeholder and should be replaced with the actual value that indicates a star in the `class` column.\t----- science -----\tsdss",
    "233": "SELECT T1.objid, T1.ra, T1.dec FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T2.bestobjid = T1.objid WHERE T1.g > 17 AND T1.g < 18 AND T2.z < 0.05\t----- science -----\tsdss",
    "234": "SELECT T1.objid, T1.ra, T1.dec FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T1.objid = T2.bestobjid WHERE T2.class = 'Galaxy' AND T1.g BETWEEN 17 AND 18 AND T2.z < 0.05\t----- science -----\tsdss",
    "235": "SELECT T1.u, T1.g, T1.r, T1.i, T1.z FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T1.objid = T2.bestobjid WHERE T2.class = 'GALAXY' AND T1.g BETWEEN 17 AND 18 AND T2.z < 0.05\t----- science -----\tsdss",
    "236": "```sqlSELECT     T1.u,     T1.g,     T1.r,     T1.i,     T1.z FROM     photoobj AS T1 INNER JOIN     photo_type AS T2 ON T1.type = T2.value INNER JOIN     specobj AS T3 ON T3.bestobjid = T1.objid INNER JOIN     galspecline AS T4 ON T3.specobjid = T4.specobjid INNER JOIN     spplines AS T5 ON T3.specobjid = T5.specobjid WHERE     T1.g > 17     AND T1.g < 18     AND T3.z < 0.05```\t----- science -----\tsdss",
    "237": "SELECT     P.objid AS photometric_object_id,     N.neighborobjid AS nearest_neighbor_id,     N.distance AS distance_to_neighbor,     P.type AS center_type FROM     photoobj AS P INNER JOIN     neighbors AS N ON     P.objid = N.objid\t----- science -----\tsdss",
    "238": "SELECT     T1.objid AS object_id,     T2.neighborobjid AS nearest_neighbor_id,     T2.distance AS distance_to_neighbors,     T1.type AS center_type FROM     photoobj AS T1 INNER JOIN     neighbors AS T2 ON     T1.objid = T2.objid\t----- science -----\tsdss",
    "239": "SELECT DISTINCT T2.name FROM photoobj AS T1 INNER JOIN photo_type AS T2 ON T1.type = T2.value WHERE T1.ra > 100 AND T1.dec < 100\t----- science -----\tsdss",
    "240": "SELECT DISTINCT specobj.class FROM photoobj INNER JOIN specobj ON photoobj.objid = specobj.bestobjid WHERE photoobj.ra > 100 AND photoobj.dec < 100\t----- science -----\tsdss",
    "241": "SELECT COUNT(*) FROM specobj WHERE class = 'STAR' AND scienceprimary = 1\t----- science -----\tsdss",
    "242": "SELECT COUNT(*) FROM specobj WHERE class = 'STAR' AND scienceprimary = 1\t----- science -----\tsdss",
    "243": "SELECT DISTINCT T1.type, T2.name FROM photoobj AS T1 INNER JOIN photo_type AS T2 ON T1.type = T2.value\t----- science -----\tsdss",
    "244": "SELECT DISTINCT T1.value, T1.name, T1.description FROM photo_type AS T1 INNER JOIN photoobj AS T2 ON T1.value = T2.type\t----- science -----\tsdss",
    "245": "SELECT photoobj.*, specobj.*FROM photoobjINNER JOIN photo_type ON photoobj.type = photo_type.valueINNER JOIN specobj ON specobj.bestobjid = photoobj.objidINNER JOIN galspecline ON galspecline.specobjid = specobj.specobjidINNER JOIN spplines ON spplines.specobjid = specobj.specobjidWHERE photo_type.name = 'Galaxy' AND photoobj.clean = 1\t----- science -----\tsdss",
    "246": "SELECT photoobj.*, specobj.class, photo_type.name, photo_type.description FROM photoobj INNER JOIN photo_type ON photoobj.type = photo_type.value INNER JOIN specobj ON specobj.bestobjid = photoobj.objid INNER JOIN galspecline ON specobj.specobjid = galspecline.specobjid INNER JOIN spplines ON specobj.specobjid = spplines.specobjid WHERE specobj.class = 'Galaxy'\t----- science -----\tsdss",
    "247": "SELECT T1.objid, T1.ra, T1.dec, T2.name FROM photoobj AS T1 INNER JOIN photo_type AS T2 ON T1.type = T2.value WHERE T2.name = 'Star'\t----- science -----\tsdss",
    "248": "SELECT T1.ra, T1.dec, T2.name FROM photoobj AS T1 INNER JOIN photo_type AS T2 ON T1.type = T2.value\t----- science -----\tsdss",
    "249": "```sqlSELECT photoobj.objid, specobj.specobjid FROM photoobj INNER JOIN specobj ON photoobj.objid = specobj.bestobjid WHERE specobj.class = 'GALAXY' AND (photoobj.u - photoobj.r) > 2.22 AND (photoobj.g - photoobj.i) > 1```\t----- science -----\tsdss",
    "250": "SELECT photoobj.objid, specobj.specobjid FROM photoobj JOIN specobj ON photoobj.objid = specobj.bestobjid JOIN galspecline ON specobj.specobjid = galspecline.specobjid JOIN spplines ON specobj.specobjid = spplines.specobjid WHERE (u - r) > 2.22 AND (g - i) > 1\t----- science -----\tsdss",
    "251": "SELECT T1.objid, T1.mjd FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T1.objid = T2.bestobjid WHERE T2.class = 'K'\t----- science -----\tsdss",
    "252": "SELECT T1.objid, T1.mjd FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T1.objid = T2.bestobjid WHERE T2.class = 'Star' AND T2.subclass = 'K'\t----- science -----\tsdss",
    "253": "SELECT T1.z, T1.ra, T1.dec FROM specobj AS T1 INNER JOIN galspecline AS T2 ON T1.specobjid = T2.specobjid INNER JOIN spplines AS T3 ON T1.specobjid = T3.specobjid WHERE T1.class = 'Starforming Galaxy' OR T1.subclass = 'Starforming Galaxy'\t----- science -----\tsdss",
    "254": "SELECT specobj.z, specobj.ra, specobj.dec FROM specobj INNER JOIN galspecline ON specobj.specobjid = galspecline.specobjid INNER JOIN spplines ON specobj.specobjid = spplines.specobjid INNER JOIN photoobj ON specobj.bestobjid = photoobj.objid WHERE specobj.class = 'STARFORMING GALAXY'\t----- science -----\tsdss",
    "255": "SELECT run, MIN(extinction_r) AS minimum_extinction_r FROM photoobj GROUP BY run\t----- science -----\tsdss",
    "256": "SELECT run, MIN(extinction_r) AS min_extinction_r FROM photoobj GROUP BY run;\t----- science -----\tsdss",
    "257": "SELECT T1.ra, T1.dec FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T1.objid = T2.bestobjid INNER JOIN galspecline AS T3 ON T2.specobjid = T3.specobjid WHERE T2.class = 'QSO'\t----- science -----\tsdss",
    "258": "SELECT T1.ra AS galactic_longitude, T1.dec AS galactic_latitude FROM specobj AS T1 INNER JOIN galspecline AS T2 ON T1.specobjid = T2.specobjid WHERE T1.class = 'QSO'\t----- science -----\tsdss",
    "259": "SELECT COUNT(*) FROM neighbors AS N INNER JOIN photoobj AS P ON N.objid = P.objid WHERE N.distance < 0.05   AND ABS(P.u - P.g) < 0.4   AND ABS(P.g - P.r) < 0.7   AND ABS(P.r - P.i) > 0.4   AND ABS(P.i - P.z) > 0.4   AND P.type = <Binary Star Type Value>\t----- science -----\tsdss",
    "260": "SELECT COUNT(*) FROM photoobj AS p INNER JOIN neighbors AS n ON p.objid = n.objid WHERE p.type = 2  -- Assuming '2' is the type value for Binary Star systemsAND n.distance < 0.05 AND (p.u - p.g) < 0.4 AND (p.g - p.r) < 0.7 AND (p.r - p.i) > 0.4 AND (p.i - p.z) > 0.4\t----- science -----\tsdss",
    "261": "SELECT COUNT(*) FROM neighbors AS N INNER JOIN photoobj AS P ON N.objid = P.objid WHERE N.distance < 0.05   AND ABS(P.u - P.g) < 0.4   AND ABS(P.g - P.r) < 0.7   AND ABS(P.r - P.i) > 0.4   AND ABS(P.i - P.z) > 0.4\t----- science -----\tsdss",
    "262": "```sqlSELECT COUNT(*) FROM photoobj AS P INNER JOIN neighbors AS N ON P.objid = N.objid WHERE P.type = <BINARY_STAR_TYPE> AND N.distance < 0.05 AND ABS(P.u - P.g) < 0.4 AND ABS(P.g - P.r) < 0.7 AND (P.r - P.i) > 0.4 AND (P.i - P.z) > 0.4``` Replace `<BINARY_STAR_TYPE>` with the actual value for the Binary Star type.\t----- science -----\tsdss",
    "263": "SELECT DISTINCT T1.specobjid FROM specobj AS T1 INNER JOIN galspecline AS T2 ON T1.specobjid = T2.specobjid INNER JOIN spplines AS T3 ON T1.specobjid = T3.specobjid WHERE T1.subclass = 'Carbon'\t----- science -----\tsdss",
    "264": "SELECT P.*FROM photoobj AS PJOIN specobj AS S ON P.objid = S.bestobjidJOIN galspecline AS G ON S.specobjid = G.specobjidJOIN spplines AS SP ON S.specobjid = SP.specobjidWHERE S.subclass = 'Carbon' AND P.type = (SELECT value FROM photo_type WHERE name = 'Star')\t----- science -----\tsdss",
    "265": "SELECT COUNT(DISTINCT T1.objid) FROM photoobj AS T1 INNER JOIN specobj AS T2 ON T1.objid = T2.bestobjid WHERE T2.class = 'Galaxy'\t----- science -----\tsdss",
    "266": "SELECT COUNT(*) FROM photoobj AS po INNER JOIN photo_type AS pt ON po.type = pt.value WHERE pt.name = 'Galaxy'\t----- science -----\tsdss",
    "267": "SELECT     specobj.specobjid,     specobj.class,     specobj.subclass FROM     specobj JOIN     galspecline ON galspecline.specobjid = specobj.specobjid JOIN     spplines ON spplines.specobjid = specobj.specobjid WHERE     specobj.class = 'Galaxy'     AND specobj.subclass LIKE '%AGN%'\t----- science -----\tsdss",
    "268": "```sqlSELECT T1.specobjid, T1.class, T1.subclass FROM specobj AS T1 INNER JOIN galspecline AS T2 ON T1.specobjid = T2.specobjid INNER JOIN spplines AS T3 ON T1.specobjid = T3.specobjid WHERE T1.class = 'Galaxy' AND T1.subclass LIKE '%AGN%'```\t----- science -----\tsdss",
    "269": "```sqlSELECT MIN(T1.distance) FROM neighbors AS T1 INNER JOIN photoobj AS T2 ON T1.objid = T2.objid WHERE T2.type = 1```If the actual value is known, it should be substituted in place of `1`. If not, the query cannot be executed as is.\t----- science -----\tsdss",
    "270": "SELECT MIN(distance) FROM neighbors WHERE neighbortype = 1If there is no specific type to filter by, the original query would be acceptable as it stands, but it may not accurately answer the question as intended.\t----- science -----\tsdss",
    "271": "SELECT MAX(neighbors.distance) FROM neighbors INNER JOIN photoobj ON neighbors.objid = photoobj.objid WHERE neighbors.type = 1\t----- science -----\tsdss",
    "272": "SELECT MAX(T1.distance) FROM neighbors AS T1 INNER JOIN photoobj AS T2 ON T1.objid = T2.objid\t----- science -----\tsdss",
    "273": "```sqlSELECT T1.ra, T1.dec, T2.distanceFROM photoobj AS T1INNER JOIN neighbors AS T2 ON T1.objid = T2.objidWHERE T2.distance = (SELECT MIN(distance) FROM neighbors)```\t----- science -----\tsdss",
    "274": "```sqlSELECT MIN(T1.distance) AS least_distance, T2.b AS galactic_latitude, T2.l AS galactic_longitudeFROM neighbors AS T1INNER JOIN photoobj AS T2 ON T1.objid = T2.objidLIMIT 1```\t----- science -----\tsdss",
    "275": "SELECT T1.ra, T1.dec, T2.distance FROM photoobj AS T1 INNER JOIN neighbors AS T2 ON T1.objid = T2.objid WHERE T2.distance = (SELECT MIN(distance) FROM neighbors)\t----- science -----\tsdss",
    "276": "SELECT T1.ra, T1.dec, T2.distance FROM photoobj AS T1 INNER JOIN neighbors AS T2 ON T1.objid = T2.objid ORDER BY T2.distance LIMIT 1\t----- science -----\tsdss",
    "277": "SELECT specobj.z FROM photoobj JOIN neighbors ON photoobj.objid = neighbors.objid JOIN specobj ON specobj.bestobjid = photoobj.objid WHERE neighbors.distance = (SELECT MIN(distance) FROM neighbors)\t----- science -----\tsdss",
    "278": "SELECT specobj.z FROM specobj JOIN galspecline ON specobj.specobjid = galspecline.specobjid JOIN photoobj ON specobj.bestobjid = photoobj.objid WHERE photoobj.objid = (SELECT objid FROM neighbors ORDER BY distance ASC LIMIT 1)\t----- science -----\tsdss",
    "279": "SELECT s.zFROM specobj AS sJOIN photoobj AS p ON s.bestobjid = p.objidWHERE p.objid = (    SELECT objid    FROM (        SELECT objid, MIN(distance) AS min_distance        FROM neighbors        GROUP BY objid    ) AS min_distances    ORDER BY min_distance    LIMIT 1)\t----- science -----\tsdss",
    "280": "SELECT s.z    FROM specobj AS s    INNER JOIN galspecline AS g ON s.specobjid = g.specobjid    INNER JOIN photoobj AS p ON s.bestobjid = p.objid    WHERE p.objid = (SELECT n.objid FROM neighbors AS n ORDER BY n.distance ASC LIMIT 1)\t----- science -----\tsdss",
    "281": "SELECT DISTINCT run FROM photoobj\t----- science -----\tsdss",
    "282": "SELECT DISTINCT run FROM photoobj\t----- science -----\tsdss",
    "283": "SELECT COUNT(DISTINCT run) FROM photoobj\t----- science -----\tsdss",
    "284": "SELECT COUNT(DISTINCT run) FROM photoobj\t----- science -----\tsdss",
    "285": "SELECT photo_type.name, COUNT(photoobj.objid) FROM photoobj INNER JOIN photo_type ON photoobj.type = photo_type.value GROUP BY photo_type.name\t----- science -----\tsdss",
    "286": "SELECT T2.name, COUNT(T1.objid) AS object_countFROM photoobj AS T1INNER JOIN photo_type AS T2 ON T1.type = T2.valueGROUP BY T2.name\t----- science -----\tsdss",
    "287": "SELECT     P.ra,     P.dec,     S.class FROM     specobj AS S INNER JOIN     photoobj AS P ON S.bestobjid = P.objid INNER JOIN     galspecline AS G ON S.specobjid = G.specobjid INNER JOIN     spplines AS SP ON S.specobjid = SP.specobjidWHERE     S.class = 'galactic'  -- Assuming 'galactic' is the class for galactic stars\t----- science -----\tsdss",
    "288": "SELECT T1.ra, T1.dec FROM specobj AS T1 INNER JOIN galspecline AS T2 ON T1.specobjid = T2.specobjidWHERE T2.equivalent_width = 'galactic-stars'\t----- science -----\tsdss",
    "289": "SELECT T1.objid, T2.name FROM photoobj AS T1 INNER JOIN photo_type AS T2 ON T1.type = T2.value WHERE T1.ra > 100 AND T1.dec < 100\t----- science -----\tsdss",
    "290": "SELECT T1.objid, T2.name FROM photoobj AS T1 INNER JOIN photo_type AS T2 ON T1.type = T2.value WHERE T1.ra > 100 AND T1.dec < 100\t----- science -----\tsdss",
    "291": "SELECT P.objid, P.ra, P.dec FROM photoobj AS P INNER JOIN specobj AS S ON S.bestobjid = P.objid\t----- science -----\tsdss",
    "292": "```sqlSELECT T1.bestobjid, T2.ra, T2.dec FROM specobj AS T1 INNER JOIN photoobj AS T2 ON T1.bestobjid = T2.objid WHERE T1.class = 'emission line'  -- Assuming 'emission line' is the value indicating emission line estimates```Please adjust the condition in the WHERE clause based on the actual value that indicates emission line estimates in your database schema.\t----- science -----\tsdss",
    "293": "SELECT specobjid FROM specobj WHERE class = 'galactic-stars' AND subclass IS NOT NULL\t----- science -----\tsdss",
    "294": "SELECT equivalent_width FROM specobj WHERE class = 'galactic-stars'If there is no such column, then the query cannot be corrected without additional information about where to find the equivalent width estimates. If the column does not exist, the query would need to be revised based on the actual schema.\t----- science -----\tsdss",
    "295": "`SELECT COUNT(*) FROM specobj WHERE class = 'galactic-stars'`\t----- science -----\tsdss",
    "296": "SELECT COUNT(*) FROM specobj JOIN galspecline ON galspecline.specobjid = specobj.specobjid WHERE specobj.class = 'galactic-stars'\t----- science -----\tsdss",
    "297": "```sqlSELECT *FROM specobj AS sINNER JOIN galspecline AS g ON s.specobjid = g.specobjidINNER JOIN spplines AS sp ON s.specobjid = sp.specobjid``` This query now correctly retrieves all information about spectroscopic objects and their associated emission line estimates from both the `galspecline` and `spplines` tables.\t----- science -----\tsdss",
    "298": "```sqlSELECT T1.* FROM specobj AS T1 INNER JOIN spplines AS T2 ON T1.specobjid = T2.specobjid WHERE T1.class LIKE '%galaxy%' OR T1.subclass LIKE '%galaxy%'```\t----- science -----\tsdss"
}