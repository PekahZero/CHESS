SELECT MAX(frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) AS highest_eligible_free_rate FROM frpm INNER JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` WHERE schools.`County` = 'Alameda'
SELECT (frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) AS eligible_free_rate FROM `frpm` WHERE frpm.`School Type` = 'Continuation Schools' AND frpm.`Enrollment (Ages 5-17)` > 0 ORDER BY eligible_free_rate ASC LIMIT 3
SELECT DISTINCT `schools`.`Zip` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `frpm`.`District Name` = 'Fresno County Office of Education' AND `frpm`.`Charter School (Y/N)` = 1
SELECT `MailStreet`, `MailCity`, `MailZip`, `MailState` FROM `schools` JOIN `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode` ORDER BY `FRPM Count (K-12)` DESC LIMIT 1
SELECT DISTINCT `schools`.`Phone` FROM `schools` INNER JOIN `frpm` ON `schools`.`CDSCode` = `frpm`.`CDSCode` WHERE `frpm`.`Charter Funding Type` = 'Directly funded' AND `schools`.`OpenDate` > '2000-01-01' AND `frpm`.`Charter School (Y/N)` = 1
SELECT COUNT(DISTINCT T2.`School`) FROM `satscores` AS T1 INNER JOIN `schools` AS T2 ON T1.`cds` = T2.`CDSCode` WHERE T1.`AvgScrMath` < 400 AND T2.`Virtual` = 'F'
SELECT schools.`School` FROM satscores INNER JOIN schools ON satscores.`cds` = schools.`CDSCode` WHERE satscores.`NumTstTakr` > 500 AND schools.`Magnet` = 1
SELECT schools.Phone FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.NumGE1500 > 0 ORDER BY satscores.NumTstTakr DESC LIMIT 1
SELECT s.`NumTstTakr` FROM satscores AS s INNER JOIN frpm AS f ON s.`cds` = f.`CDSCode` WHERE f.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm)
SELECT COUNT(DISTINCT T1.`CDSCode`) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` INNER JOIN frpm AS T3 ON T1.`CDSCode` = T3.`CDSCode` WHERE T2.`AvgScrMath` > 560 AND T3.`Charter Funding Type` = 'Directly funded'
SELECT f.`FRPM Count (Ages 5-17)` FROM satscores AS s INNER JOIN schools AS sch ON s.cds = sch.`CDSCode` INNER JOIN frpm AS f ON sch.`CDSCode` = f.`CDSCode` ORDER BY s.`AvgScrRead` DESC LIMIT 1
SELECT DISTINCT T1.`CDSCode` FROM `frpm` AS T1 WHERE (T1.`Enrollment (K-12)` + T1.`Enrollment (Ages 5-17)`) > 500
SELECT MAX((frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) * 100) AS highest_eligible_free_rate FROM frpm INNER JOIN satscores ON frpm.`CDSCode` = satscores.`cds` WHERE (satscores.`NumGE1500` * 1.0 / satscores.`NumTstTakr`) > 0.3
SELECT schools.Phone FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY (satscores.NumGE1500 * 1.0 / satscores.NumTstTakr) DESC LIMIT 3
SELECT T1.`NCESSchool` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.`CDSCode` = T2.`CDSCode` ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5
SELECT schools.`District`, AVG(satscores.`AvgScrRead`) AS avg_reading_score FROM schools INNER JOIN satscores ON schools.`CDSCode` = satscores.`cds` WHERE schools.`StatusType` = 'Active' GROUP BY schools.`District` ORDER BY avg_reading_score DESC LIMIT 1
SELECT COUNT(*) FROM `schools` AS T1 INNER JOIN `satscores` AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T1.`County` = 'Alameda' AND T1.`StatusType` = 'Merged' AND T2.`NumTstTakr` < 100
SELECT DISTINCT T1.`CharterNum` FROM `satscores` AS T2 INNER JOIN `schools` AS T1 ON T2.`cds` = T1.`CDSCode` WHERE T2.`AvgScrWrite` = 499
SELECT COUNT(DISTINCT schools.`School`) FROM schools INNER JOIN satscores ON schools.`CDSCode` = satscores.`cds` WHERE schools.`County` = 'Contra Costa' AND schools.`FundingType` = 'Directly funded' AND satscores.`NumTstTakr` <= 250
SELECT `schools`.`Phone` FROM `satscores` JOIN `schools` ON `satscores`.`cds` = `schools`.`CDSCode` ORDER BY `satscores`.`AvgScrMath` DESC LIMIT 1
SELECT COUNT(*) FROM schools JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE frpm.`County Name` = 'Amador' AND frpm.`Low Grade` = '9' AND frpm.`High Grade` = '12'
SELECT COUNT(*) FROM `frpm` AS F INNER JOIN `schools` AS S ON F.`CDSCode` = S.`CDSCode` WHERE S.`County` = 'Los Angeles' AND F.`Free Meal Count (K-12)` > 500 AND F.`FRPM Count (K-12)` < 700
SELECT S.School FROM schools AS S JOIN satscores AS SS ON S.CDSCode = SS.cds WHERE S.County = 'Contra Costa' AND S.StatusType = 'Active' AND SS.NumTstTakr IS NOT NULL ORDER BY SS.NumTstTakr DESC LIMIT 1
SELECT frpm.`School Name`, schools.`Street`, schools.`City`, schools.`State`, schools.`Zip` FROM frpm INNER JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` WHERE (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > 30
SELECT DISTINCT schools.`School` FROM frpm INNER JOIN satscores ON frpm.`CDSCode` = satscores.`cds` INNER JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` WHERE frpm.`Percent (%) Eligible Free (K-12)` > 0.1 AND (satscores.`AvgScrRead` + satscores.`AvgScrMath` + satscores.`AvgScrWrite`) >= 1500
SELECT s.`School`, s.`FundingType` FROM `schools` AS s INNER JOIN `satscores` AS ss ON s.`CDSCode` = ss.`cds` WHERE s.`City` = 'Riverside' GROUP BY s.`School`, s.`FundingType` HAVING AVG(ss.`AvgScrMath`) > 400
SELECT `schools`.`School`, `schools`.`Street`, `schools`.`City`, `schools`.`Zip`, `schools`.`State` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `frpm`.`School Type` LIKE '%High Schools%' AND `frpm`.`Free Meal Count (Ages 5-17)` > 800 AND `schools`.`City` = 'Monterey'
SELECT schools.`School`, AVG(satscores.`AvgScrWrite`) AS AvgWriteScore, schools.`Phone` FROM satscores INNER JOIN schools ON satscores.`cds` = schools.`CDSCode` WHERE schools.`OpenDate` > '1991-01-01' OR schools.`ClosedDate` < '2000-01-01' GROUP BY schools.`School`
SELECT T1.`School Name`, T2.`DOCType` FROM `frpm` AS T1 INNER JOIN `schools` AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T1.`Charter Funding Type` = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T1_sub.`Enrollment (K-12)` - T1_sub.`Enrollment (Ages 5-17)`) FROM `frpm` AS T1_sub WHERE T1_sub.`Charter Funding Type` = 'Locally funded'))
SELECT `OpenDate` FROM `schools` WHERE `CDSCode` = (SELECT `CDSCode` FROM `frpm` ORDER BY `Enrollment (K-12)` DESC LIMIT 1)
SELECT schools.`City` FROM frpm INNER JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` ORDER BY frpm.`Enrollment (K-12)` ASC LIMIT 5
SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` AS `Eligible Free Rate` FROM `frpm` ORDER BY `Enrollment (K-12)` DESC LIMIT 2 OFFSET 9
SELECT (frpm.`FRPM Count (K-12)` / frpm.`Enrollment (K-12)`) AS `Eligible Free or Reduced Price Meal Rate` FROM frpm INNER JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` WHERE schools.`SOC` = 66 ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 5
SELECT frpm.`School Name`, schools.`Website` FROM frpm INNER JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` WHERE frpm.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000
SELECT (frpm.`Free Meal Count (Ages 5-17)` / frpm.`Enrollment (Ages 5-17)`) AS free_rate FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.`AdmFName1` = 'Kacey' AND schools.`AdmLName1` = 'Gibson'
SELECT `AdmEmail1` FROM `schools` AS T1 INNER JOIN `frpm` AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T2.`Charter School (Y/N)` = 1 ORDER BY T2.`Enrollment (K-12)` ASC LIMIT 1
SELECT T1.AdmFName1 || ' ' || T1.AdmLName1 AS FullName FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 >= 1) AND T2.NumGE1500 >= 1
SELECT T1.`Street`, T1.`City`, T1.`Zip`, T1.`State` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T2.`NumTstTakr` > 0 ORDER BY (T2.`NumGE1500` * 1.0 / T2.`NumTstTakr`) ASC LIMIT 1
SELECT schools.`Website` FROM schools INNER JOIN satscores ON schools.`CDSCode` = satscores.`cds` WHERE schools.`County` = 'Los Angeles' AND satscores.`NumTstTakr` BETWEEN 2000 AND 3000
SELECT AVG(satscores.`NumTstTakr`) FROM satscores INNER JOIN schools ON satscores.`cds` = schools.`CDSCode` WHERE schools.`County` = 'Fresno' AND schools.`OpenDate` BETWEEN '1980-01-01' AND '1980-12-31'
SELECT schools.Phone FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.District = 'Fresno Unified' ORDER BY satscores.AvgScrRead ASC LIMIT 1
SELECT DISTINCT T1.`School`, T1.`County`, T1.`District`, T1.`Street`, T1.`City`, T1.`Zip`, T1.`State`, T1.`Phone`, T1.`Website`, T1.`OpenDate`, T1.`ClosedDate`, T1.`Charter`, T1.`FundingType`, T1.`LastUpdate` FROM `schools` AS T1 INNER JOIN `satscores` AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T1.`Virtual` = 'F' ORDER BY T2.`AvgScrRead` DESC LIMIT 5
SELECT T3.`Educational Option Type` FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode INNER JOIN frpm AS T3 ON T2.CDSCode = T3.CDSCode ORDER BY T1.`AvgScrMath` DESC LIMIT 1
SELECT T1.`AvgScrMath`, T2.`County` FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.`cds` = T2.`CDSCode` ORDER BY (T1.`AvgScrMath` + T1.`AvgScrRead` + T1.`AvgScrWrite`) ASC LIMIT 1
SELECT AVG(satscores.`AvgScrWrite`), schools.`City` FROM satscores INNER JOIN schools ON satscores.`cds` = schools.`CDSCode` WHERE satscores.`NumTstTakr` >= 1500 GROUP BY schools.`CDSCode` ORDER BY satscores.`NumTstTakr` DESC LIMIT 1
SELECT schools.`School`, AVG(satscores.`AvgScrWrite`) AS `Average_Writing_Score` FROM schools INNER JOIN satscores ON schools.`CDSCode` = satscores.`cds` WHERE schools.`AdmFName1` = 'Ricci' AND schools.`AdmLName1` = 'Ulrich' GROUP BY schools.`School`
SELECT T.`School Name` FROM ( SELECT T1.`School Name`, SUM(T1.`Enrollment (K-12)`) AS total_enrollment FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T2.`DOC` = '31' GROUP BY T1.`School Name` ) T ORDER BY T.total_enrollment DESC LIMIT 1
SELECT COUNT(`schools`.`CDSCode`) / 12 AS `Monthly_Average` FROM `schools` WHERE `schools`.`OpenDate` BETWEEN '1980-01-01' AND '1980-12-31' AND `schools`.`County` = 'Alameda' AND `schools`.`DOC` = 52
SELECT (SELECT COUNT(*) FROM schools WHERE `StatusType` = 'Merged' AND `DOC` = '54' AND `County` = 'Orange') * 1.0 / (SELECT COUNT(*) FROM schools WHERE `StatusType` = 'Merged' AND `DOC` = '52' AND `County` = 'Orange') AS ratio;
SELECT County, School, ClosedDate FROM schools WHERE StatusType = 'Closed' AND County IN (SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1)
SELECT T1.`School`, T1.`Street` FROM `satscores` AS T2 INNER JOIN `schools` AS T1 ON T2.`cds` = T1.`CDSCode` ORDER BY T2.`AvgScrMath` DESC LIMIT 1 OFFSET 5
SELECT schools.`MailStreet`, satscores.`sname` FROM satscores INNER JOIN schools ON satscores.`cds` = schools.`CDSCode` ORDER BY satscores.`AvgScrRead` ASC LIMIT 1
SELECT COUNT(DISTINCT schools.`CDSCode`) FROM satscores INNER JOIN schools ON satscores.`cds` = schools.`CDSCode` WHERE (satscores.`AvgScrRead` + satscores.`AvgScrMath` + satscores.`AvgScrWrite`) >= 1500 AND schools.`MailCity` = 'Lakeport'
SELECT SUM(satscores.`NumTstTakr`) FROM satscores JOIN schools ON satscores.`cds` = schools.`CDSCode` WHERE schools.`MailCity` = 'Fresno'
SELECT T1.`School`, T1.`MailZip` FROM `schools` AS T1 WHERE T1.`AdmFName1` = 'Avetik' AND T1.`AdmLName1` = 'Atoian'
SELECT CAST(COUNT(CASE WHEN `County` = 'Colusa' THEN `CDSCode` END) AS REAL) / COUNT(CASE WHEN `County` = 'Humboldt' THEN `CDSCode` END) AS ratio FROM `schools` WHERE `State` = 'CA'
SELECT COUNT(*) FROM `schools` WHERE `MailState` = 'CA' AND `StatusType` = 'Active' AND `County` = 'San Joaquin'
SELECT schools.Phone, schools.Ext FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrWrite DESC LIMIT 1 OFFSET 332
SELECT `schools`.`School`, `schools`.`Phone`, `schools`.`Ext` FROM `schools` WHERE `schools`.`Zip` = '95203-3704'
SELECT DISTINCT `schools`.`Website` FROM `schools` WHERE `AdmFName1` IN ('Mike', 'Dante') AND `AdmLName1` IN ('Larson', 'Alvarez')
SELECT DISTINCT `schools`.`Website` FROM `schools` WHERE `schools`.`Virtual` = 'P' AND `schools`.`Charter` = 1 AND `schools`.`County` = 'San Joaquin'
SELECT COUNT(*) FROM schools WHERE City = 'Hickman' AND Charter = 1 AND DOC = '52'
SELECT COUNT(*) FROM `schools` AS T1 INNER JOIN `frpm` AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T1.`County` = 'Los Angeles' AND T1.`Charter` = 0 AND (T2.`Free Meal Count (K-12)` * 100.0 / T2.`Enrollment (K-12)`) < 0.18
SELECT `School`, `City`, `AdmFName1`, `AdmLName1`, `AdmFName2`, `AdmLName2` FROM `schools` WHERE `Charter` = 1 AND `CharterNum` = '00D2'
SELECT COUNT(*) AS total_schools FROM schools WHERE MailCity = 'Hickman' AND CharterNum = '00D4'
SELECT CAST(COUNT(CASE WHEN frpm.`Charter Funding Type` = 'Locally funded' THEN 1 END) AS REAL) * 100 / COUNT(frpm.`CDSCode`) FROM frpm INNER JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` WHERE schools.`County` = 'Santa Clara'
SELECT COUNT(`schools`.`CDSCode`) FROM `schools` WHERE `schools`.`OpenDate` BETWEEN '2000-01-01' AND '2005-12-31' AND `schools`.`County` = 'Stanislaus' AND `schools`.`FundingType` = 'Directly funded'
SELECT COUNT(*) FROM `schools` WHERE `StatusType` = 'Closed' AND `City` = 'San Francisco' AND `OpenDate` <= '1989-12-31' AND (`ClosedDate` IS NOT NULL AND `ClosedDate` >= '1989-01-01')
SELECT `schools`.`County` FROM `schools` WHERE `schools`.`StatusType` = 'Closed' AND strftime('%Y', `schools`.`ClosedDate`) BETWEEN '1980' AND '1989' AND `schools`.`SOC` = 11 GROUP BY `schools`.`County` ORDER BY COUNT(`schools`.`ClosedDate`) DESC LIMIT 1
SELECT DISTINCT `NCESDist` FROM `schools` WHERE `SOC` = 31
SELECT COUNT(*) FROM `schools` WHERE `County` = 'Alpine' AND `StatusType` IN ('Active', 'Closed') AND `School` LIKE '%District Community Day School%'
SELECT DISTINCT `frpm`.`District Code` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`Magnet` = 0 AND `schools`.`City` = 'Fresno'
SELECT SUM(`Enrollment (Ages 5-17)`) FROM `frpm` AS T1 INNER JOIN `schools` AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T2.`EdOpsCode` = 'SSS' AND T2.`City` = 'Fremont' AND T1.`Academic Year` = '2014-2015'
SELECT `frpm`.`FRPM Count (Ages 5-17)` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `schools`.`MailStreet` = 'PO Box 1040' AND `schools`.`CDSCode` = (SELECT `CDSCode` FROM `schools` WHERE `School` = 'Youth Authority School' LIMIT 1)
SELECT MIN(`Low Grade`) FROM `frpm` AS T1 INNER JOIN `schools` AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T2.`NCESDist` = '613360' AND T2.`EdOpsCode` = 'SPECON'
SELECT `frpm`.`School Name` FROM `frpm` INNER JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `frpm`.`NSLP Provision Status` = 'Breakfast Provision 2' AND `frpm`.`County Code` = '37'
SELECT schools.`City` FROM frpm INNER JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` WHERE frpm.`NSLP Provision Status` = 'Lunch Provision 2' AND frpm.`Low Grade` = '9' AND frpm.`High Grade` = '12' AND frpm.`County Name` = 'Merced' AND schools.`EILCode` = 'HS'
SELECT `schools`.`School`, (`frpm`.`Free Meal Count (Ages 5-17)` / NULLIF(`frpm`.`Enrollment (Ages 5-17)`, 0) * 100) AS `Percent Eligible FRPM (Ages 5-17)` FROM `frpm` JOIN `schools` ON `frpm`.`CDSCode` = `schools`.`CDSCode` WHERE `frpm`.`Low Grade` = 'K' AND `frpm`.`High Grade` = '9' AND `schools`.`County` = 'Los Angeles' AND `frpm`.`Enrollment (Ages 5-17)` > 0
SELECT frpm.`Low Grade`, frpm.`High Grade`, COUNT(*) as count FROM frpm INNER JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` WHERE schools.`City` = 'Adelanto' GROUP BY frpm.`Low Grade`, frpm.`High Grade` ORDER BY count DESC LIMIT 1
SELECT `County`, COUNT(`CDSCode`) AS `SchoolCount` FROM `schools` WHERE `Virtual` = 'F' AND `County` IN ('San Diego', 'Santa Barbara') GROUP BY `County` ORDER BY `SchoolCount` DESC LIMIT 1;
SELECT T1.`School Type`, T2.`School`, T2.`Latitude` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` ORDER BY T2.`Latitude` DESC LIMIT 1
SELECT T1.City, T1.School, T2.`Low Grade` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.School = T2.K WHERE T1.State = 'CA' ORDER BY T1.Latitude ASC LIMIT 1
SELECT T1.`Low Grade`, T1.`High Grade` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` ORDER BY T2.`Longitude` DESC LIMIT 1
SELECT COUNT(DISTINCT `schools`.`City`), COUNT(`schools`.`CDSCode`) FROM `schools` WHERE `schools`.`Magnet` = 1 AND `schools`.`Low Grade` IN ('K', '1', '2', '3', '4', '5', '6', '7', '8') AND `schools`.`High Grade` IN ('8', '9', '10', '11', '12') GROUP BY `schools`.`City`
SELECT `AdmFName1`, `District`, COUNT(`AdmFName1`) AS name_count FROM `schools` WHERE `AdmFName1` IS NOT NULL GROUP BY `AdmFName1`, `District` ORDER BY name_count DESC LIMIT 2
SELECT frpm.`Percent (%) Eligible Free (K-12)`, frpm.`District Code` FROM frpm INNER JOIN schools ON frpm.`CDSCode` = schools.`CDSCode` WHERE schools.`AdmFName1` = 'Alusine'
SELECT T1.AdmLName1, T1.District, T1.County, T1.School FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2."Charter School Number" = '40'
SELECT `AdmEmail1` FROM `schools` WHERE `County` = 'San Bernardino' AND `District` = 'San Bernardino City Unified' AND `OpenDate` BETWEEN '2009-01-01' AND '2010-12-31' AND (`SOC` = 62 OR `DOC` = 54)
SELECT T1.`AdmEmail1`, T2.`sname` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T2.`NumTstTakr` = (SELECT MAX(`NumTstTakr`) FROM satscores WHERE `NumGE1500` > 0) AND T2.`NumGE1500` > 0
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.A3 = 'East Bohemia'
SELECT COUNT(DISTINCT account.`account_id`) FROM account INNER JOIN district ON account.`district_id` = district.`district_id` INNER JOIN loan ON account.`account_id` = loan.`account_id` WHERE district.`A3` = 'Prague' AND loan.`status` IN ('C', 'A')
SELECT CASE WHEN AVG(`A12`) > AVG(`A13`) THEN '1995 has a higher percentage' ELSE '1996 has a higher percentage' END AS higher_percentage FROM `district`
SELECT COUNT(DISTINCT `district`.`district_id`) FROM `district` JOIN `client` ON `district`.`district_id` = `client`.`district_id` WHERE `client`.`gender` = 'F' AND `district`.`A11` > 6000 AND `district`.`A11` < 10000
SELECT COUNT(client.`client_id`) FROM client INNER JOIN district ON client.`district_id` = district.`district_id` WHERE client.`gender` = 'M' AND district.`A3` = 'North Bohemia' AND district.`A11` > 8000
SELECT MIN(T2.account_id) AS lowest_account_id, (SELECT MAX(salary) FROM (SELECT AVG(T3.salary) AS salary FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'F' GROUP BY T1.client_id) AS T3) - (SELECT AVG(salary) FROM (SELECT AVG(T3.salary) AS salary FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(T4.birth_date) FROM client AS T4 WHERE T4.gender = 'F') GROUP BY T1.client_id) AS T5) AS gap FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC LIMIT 1;
SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A11 = (SELECT MAX(A11) FROM district) AND T3.birth_date = (SELECT MIN(birth_date) FROM client) LIMIT 1
SELECT COUNT(DISTINCT client.`client_id`) FROM client INNER JOIN disp ON client.`client_id` = disp.`client_id` INNER JOIN account ON disp.`account_id` = account.`account_id` WHERE account.`frequency` = 'POPLATEK TYDNE' AND disp.`type` = 'OWNER'
SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T2.type = 'DISPONENT' AND T3.frequency = 'POPLATEK PO OBRATU'
SELECT `account`.`account_id` FROM `account` INNER JOIN `loan` ON `account`.`account_id` = `loan`.`account_id` WHERE `loan`.`date` LIKE '1997%' AND `loan`.`status` = 'A' AND `account`.`frequency` = 'POPLATEK TYDNE' ORDER BY `loan`.`amount` ASC LIMIT 1
SELECT `account`.`account_id` FROM `account` INNER JOIN `loan` ON `account`.`account_id` = `loan`.`account_id` WHERE `loan`.`duration` > 12 AND STRFTIME('%Y', `account`.`date`) = '1993' ORDER BY `loan`.`amount` DESC LIMIT 1
SELECT COUNT(DISTINCT client.`client_id`) FROM client INNER JOIN account ON client.`district_id` = account.`district_id` WHERE client.`gender` = 'F' AND client.`birth_date` < '1950-01-01' AND account.`district_id` = (SELECT `district_id` FROM district WHERE `A2` = 'Slokolov')
SELECT account.account_id FROM account INNER JOIN trans ON account.account_id = trans.account_id WHERE STRFTIME('%Y', trans.date) = '1995' AND trans.date = (SELECT MIN(trans.date) FROM trans WHERE STRFTIME('%Y', trans.date) = '1995')
SELECT DISTINCT `account`.`account_id` FROM `account` WHERE `account`.`date` < '1997-01-01' AND `account`.`account_id` IN (SELECT `trans`.`account_id` FROM `trans` WHERE `trans`.`amount` > 3000)
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'
SELECT `account`.`date` FROM `account` AS `account` INNER JOIN `trans` AS `trans` ON `account`.`account_id` = `trans`.`account_id` WHERE `trans`.`amount` = 840 AND `trans`.`date` = '1998-10-14'
SELECT account.district_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.date = '1994-08-25'
SELECT MAX(trans.`amount`) FROM trans INNER JOIN card ON trans.`account_id` = card.`disp_id` INNER JOIN disp ON card.`disp_id` = disp.`disp_id` INNER JOIN client ON disp.`client_id` = client.`client_id` WHERE card.`issued` = '1996-10-21'
SELECT client.gender FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN district ON account.district_id = district.district_id WHERE client.birth_date = (SELECT MIN(client.birth_date) FROM client INNER JOIN account ON client.district_id = account.district_id INNER JOIN district ON account.district_id = district.district_id GROUP BY district.district_id ORDER BY AVG(district.A11) DESC LIMIT 1) LIMIT 1
SELECT T1.amount FROM trans T1 INNER JOIN account T2 ON T1.account_id = T2.account_id WHERE T2.account_id = (SELECT T3.account_id FROM loan T3 ORDER BY T3.amount DESC LIMIT 1) AND T1.date = (SELECT MIN(T4.date) FROM trans T4 WHERE T4.account_id = T2.account_id)
SELECT COUNT(DISTINCT C.client_id) FROM `client` AS C INNER JOIN `account` AS A ON C.client_id = A.account_id INNER JOIN `district` AS D ON C.district_id = D.district_id WHERE D.A2 = 'Jesenik' AND C.gender = 'F'
SELECT D.`disp_id` FROM `trans` AS T INNER JOIN `disp` AS D ON T.`account_id` = D.`account_id` WHERE T.`amount` = 5100 AND T.`date` = '1998-09-02'
SELECT COUNT(`account`.`account_id`) FROM `account` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `district`.`A2` = 'Litomerice' AND STRFTIME('%Y', `account`.`date`) = '1996'
SELECT district.`A2` FROM client INNER JOIN disp ON client.`client_id` = disp.`client_id` INNER JOIN account ON disp.`account_id` = account.`account_id` INNER JOIN district ON account.`district_id` = district.`district_id` WHERE client.`gender` = 'F' AND client.`birth_date` = '1976-01-29'
SELECT client.`birth_date` FROM client INNER JOIN loan ON client.`client_id` = loan.`account_id` WHERE loan.`amount` = 98832 AND loan.`date` = '1996-01-03'
SELECT T1.`account_id` FROM `account` AS T1 INNER JOIN `client` AS T2 ON T1.`district_id` = T2.`district_id` INNER JOIN `district` AS T3 ON T1.`district_id` = T3.`district_id` WHERE T3.`A3` = 'Prague' LIMIT 1
SELECT CAST(SUM(CASE WHEN c.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(c.client_id) FROM client AS c INNER JOIN district AS d ON c.district_id = d.district_id WHERE d.A3 = 'South Bohemia' AND d.A4 = (SELECT MAX(A4) FROM district WHERE A3 = 'South Bohemia')
SELECT ((T3.balance - T2.balance) / T2.balance) * 100 AS increase_rate FROM (SELECT account_id FROM loan WHERE date = '1993-07-05' LIMIT 1) AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id AND T2.date = '1993-03-22' INNER JOIN trans AS T3 ON T1.account_id = T3.account_id AND T3.date = '1998-12-27'
SELECT SUM(CASE WHEN `loan`.`status` = 'A' THEN `loan`.`amount` ELSE 0 END) * 100.0 / SUM(`loan`.`amount`) AS percentage FROM `loan`
SELECT CAST(COUNT(DISTINCT loan.`account_id`) AS REAL) * 100 / (SELECT COUNT(DISTINCT account.`account_id`) FROM account) FROM loan WHERE loan.`amount` < 100000 AND loan.`status` = 'A'
SELECT account.account_id, district.A2, district.A3 FROM account INNER JOIN district ON account.district_id = district.district_id INNER JOIN trans ON account.account_id = trans.account_id WHERE strftime('%Y', account.date) = '1993' AND trans.date > account.date
SELECT `account`.`account_id`, `account`.`frequency` FROM `account` INNER JOIN `disp` ON `account`.`account_id` = `disp`.`account_id` INNER JOIN `client` ON `disp`.`client_id` = `client`.`client_id` INNER JOIN `district` ON `client`.`district_id` = `district`.`district_id` WHERE `district`.`A3` = 'east Bohemia' AND `account`.`date` BETWEEN '1995-01-01' AND '2000-12-31'
SELECT `account`.`account_id`, `account`.`date` FROM `account` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `district`.`A2` = 'Prachatice'
SELECT district.`A2`, district.`A3` FROM loan INNER JOIN account ON loan.`account_id` = account.`account_id` INNER JOIN district ON account.`district_id` = district.`district_id` WHERE loan.`loan_id` = 4990;
SELECT account.`account_id`, district.`A2`, district.`A3` FROM `loan` INNER JOIN `account` ON loan.`account_id` = account.`account_id` INNER JOIN `district` ON account.`district_id` = district.`district_id` WHERE loan.`amount` > 300000
SELECT T1.`loan_id`, T2.`district_id`, T3.`A11` FROM `loan` AS T1 INNER JOIN `account` AS T2 ON T1.`account_id` = T2.`account_id` INNER JOIN `district` AS T3 ON T2.`district_id` = T3.`district_id` WHERE T1.`duration` = 60
SELECT `district`.`A2`, ((`district`.`A13` - `district`.`A12`) / `district`.`A12`) * 100 AS `unemployment_increment_rate` FROM `loan` INNER JOIN `account` ON `loan`.`account_id` = `account`.`account_id` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `loan`.`status` = 'D'
SELECT CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM `account` WHERE `date` LIKE '1993%') AS percentage FROM `account` AS A INNER JOIN `district` AS D ON A.`district_id` = D.`district_id` WHERE D.`A2` = 'Decin' AND A.`date` LIKE '1993%';
SELECT `account`.`account_id` FROM `account` WHERE `account`.`frequency` = 'POPLATEK MESICNE'
SELECT d.A2, COUNT(c.client_id) AS female_account_holders FROM client AS c INNER JOIN account AS a ON c.district_id = a.district_id INNER JOIN district AS d ON a.district_id = d.district_id WHERE c.gender = 'F' GROUP BY d.A2 ORDER BY female_account_holders DESC LIMIT 10
SELECT T3.A2, SUM(T1.amount) AS total_withdrawn FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type = 'VYDAJ' AND T1.date LIKE '1996-01%' GROUP BY T3.A2 ORDER BY total_withdrawn DESC LIMIT 10
SELECT COUNT(DISTINCT a.`account_id`) FROM `account` AS a INNER JOIN `district` AS d ON a.`district_id` = d.`district_id` LEFT JOIN `disp` AS disp ON a.`account_id` = disp.`account_id` LEFT JOIN `card` AS c ON disp.`disp_id` = c.`disp_id` WHERE d.`A3` = 'South Bohemia' AND c.`card_id` IS NULL
SELECT T2.`A3` FROM `district` AS T2 INNER JOIN `account` AS T1 ON T1.`district_id` = T2.`district_id` INNER JOIN `loan` AS T3 ON T3.`account_id` = T1.`account_id` WHERE T3.`status` = 'C' GROUP BY T2.`district_id` ORDER BY COUNT(T3.`loan_id`) DESC LIMIT 1
SELECT AVG(loan.`amount`) FROM loan INNER JOIN account ON loan.`account_id` = account.`account_id` INNER JOIN disp ON account.`account_id` = disp.`account_id` INNER JOIN client ON disp.`client_id` = client.`client_id` WHERE client.`gender` = 'M'
SELECT T1.district_id, T2.A2 FROM `account` AS T1 INNER JOIN `district` AS T2 ON T1.district_id = T2.district_id ORDER BY T2.A13 DESC
SELECT COUNT(`account`.`account_id`) FROM `account` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `district`.`A16` = (SELECT MAX(`A16`) FROM `district`)
SELECT COUNT(DISTINCT account.`account_id`) FROM account INNER JOIN trans ON account.`account_id` = trans.`account_id` WHERE trans.`operation` = 'VYBER KARTOU' AND account.`frequency` = 'POPLATEK MESICNE' AND trans.`balance` < 0
SELECT COUNT(DISTINCT loan.`account_id`) FROM loan INNER JOIN account ON loan.`account_id` = account.`account_id` WHERE loan.`amount` >= 250000 AND account.`frequency` = 'POPLATEK MESICNE' AND loan.`date` BETWEEN '1995-01-01' AND '1997-12-31'
SELECT COUNT(DISTINCT T1.account_id) FROM `account` AS T1 INNER JOIN `loan` AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.district_id = 1
SELECT COUNT(DISTINCT client.`client_id`) FROM client INNER JOIN account ON client.`district_id` = account.`district_id` INNER JOIN district ON account.`district_id` = district.`district_id` WHERE district.`A15` = (SELECT DISTINCT district.`A15` FROM district ORDER BY district.`A15` DESC LIMIT 1 OFFSET 1) AND client.`gender` = 'M'
SELECT COUNT(card.`card_id`) FROM card INNER JOIN disp ON card.`disp_id` = disp.`disp_id` WHERE card.`type` = 'gold' AND disp.`type` = 'DISPONENT'
SELECT COUNT(*) FROM `account` AS T1 INNER JOIN `district` AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'
SELECT DISTINCT district.`A2` FROM `district` INNER JOIN `account` ON district.`district_id` = account.`district_id` INNER JOIN `trans` ON account.`account_id` = trans.`account_id` WHERE trans.`amount` > 10000 AND strftime('%Y', trans.`date`) = '1997'
SELECT DISTINCT account.`account_id` FROM `order` INNER JOIN account ON `order`.account_id = account.`account_id` INNER JOIN district ON account.`district_id` = district.`district_id` WHERE `order`.k_symbol = 'SIPO' AND district.A2 = 'Pisek'
SELECT DISTINCT A.account_id FROM `account` AS A INNER JOIN `disp` AS D ON A.account_id = D.account_id INNER JOIN `card` AS C ON D.disp_id = C.disp_id WHERE C.type = 'gold' AND D.account_id IN (SELECT D2.account_id FROM `disp` AS D2 INNER JOIN `card` AS C2 ON D2.disp_id = C2.disp_id WHERE C2.type = 'junior')
SELECT AVG(`amount`) AS `average_amount` FROM `trans` WHERE `operation` = 'VYBER KARTOU' AND STRFTIME('%Y', `date`) = '2021';
SELECT `disp`.`client_id` FROM `disp` INNER JOIN `trans` ON `disp`.`account_id` = `trans`.`account_id` WHERE `trans`.`operation` = 'VYBER KARTOU' AND STRFTIME('%Y', `trans`.`date`) = '1998' GROUP BY `disp`.`client_id` HAVING SUM(`trans`.`amount`) < (SELECT AVG(total_spent) FROM (SELECT SUM(`trans`.`amount`) AS total_spent FROM `trans` INNER JOIN `disp` ON `trans`.`account_id` = `disp`.`account_id` WHERE `trans`.`operation` = 'VYBER KARTOU' AND STRFTIME('%Y', `trans`.`date`) = '1998' GROUP BY `disp`.`client_id`))
SELECT DISTINCT client.`client_id` FROM client INNER JOIN disp ON client.`client_id` = disp.`client_id` INNER JOIN card ON disp.`disp_id` = card.`disp_id` INNER JOIN loan ON disp.`account_id` = loan.`account_id` WHERE client.`gender` = 'F'
SELECT COUNT(DISTINCT account.`account_id`) FROM client AS client INNER JOIN account AS account ON client.`district_id` = account.`district_id` INNER JOIN district AS district ON client.`district_id` = district.`district_id` WHERE client.`gender` = 'F' AND district.`A3` = 'south Bohemia'
SELECT DISTINCT account.`account_id` FROM account INNER JOIN disp ON account.`account_id` = disp.`account_id` INNER JOIN district ON account.`district_id` = district.`district_id` WHERE district.`A2` = 'Tabor' AND disp.`type` = 'OWNER'
SELECT DISTINCT disp.`type` FROM disp INNER JOIN account ON disp.`account_id` = account.`account_id` INNER JOIN district ON account.`district_id` = district.`district_id` WHERE disp.`type` != 'OWNER' AND district.`A11` > 8000 AND district.`A11` <= 9000;
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'North Bohemia' AND T3.bank = 'AB'
SELECT DISTINCT district.`A2` FROM `district` INNER JOIN `account` ON district.`district_id` = account.`district_id` INNER JOIN `trans` ON account.`account_id` = trans.`account_id` WHERE trans.`type` = 'VYDAJ'
SELECT AVG(district.`A15`) FROM district INNER JOIN account ON district.`district_id` = account.`district_id` WHERE district.`A15` > 4000 AND account.`date` >= '1997-01-01'
SELECT COUNT(card.`card_id`) FROM card JOIN disp ON card.`disp_id` = disp.`disp_id` JOIN account ON disp.`account_id` = account.`account_id` WHERE card.`type` = 'classic' AND disp.`type` = 'OWNER'
SELECT COUNT(T1.gender) FROM `client` AS T1 INNER JOIN `district` AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Hl.m. Praha' AND T1.gender = 'M'
SELECT (COUNT(CASE WHEN `type` = 'gold' AND `issued` < '1998-01-01' THEN 1 END) * 100.0 / COUNT(*)) AS `PercentGold` FROM `card`
SELECT d.`client_id` FROM disp AS d JOIN loan AS l ON d.`account_id` = l.`account_id` WHERE l.`amount` = (SELECT MAX(`amount`) FROM loan) AND d.`type` = 'OWNER'
SELECT `district`.`A15` FROM `account` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `account`.`account_id` = 532
SELECT T1.`district_id` FROM `account` AS T1 INNER JOIN `order` AS T2 ON T1.`account_id` = T2.`account_id` WHERE T2.`order_id` = 33333
SELECT `trans`.`trans_id`, `trans`.`date`, `trans`.`amount`, `trans`.`balance` FROM `trans` WHERE `account_id` IN (SELECT `account_id` FROM `disp` WHERE `client_id` = 3356) AND `operation` = 'VYBER'
SELECT COUNT(DISTINCT account.`account_id`) FROM `account` INNER JOIN `loan` ON account.`account_id` = loan.`account_id` WHERE account.`frequency` = 'POPLATEK TYDNE' AND loan.`amount` < 200000
SELECT DISTINCT card.`type` FROM card INNER JOIN disp ON card.`disp_id` = disp.`disp_id` INNER JOIN client ON disp.`client_id` = client.`client_id` WHERE client.`client_id` = 13539
SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541
SELECT T2.`A2` FROM `account` AS T1 INNER JOIN `district` AS T2 ON T1.`district_id` = T2.`district_id` INNER JOIN `loan` AS T3 ON T1.`account_id` = T3.`account_id` WHERE T3.`status` = 'A' GROUP BY T2.`district_id` ORDER BY COUNT(T1.`account_id`) DESC LIMIT 1
SELECT T2.client_id FROM `order` AS T1 INNER JOIN `disp` AS T2 ON T1.account_id = T2.account_id WHERE T1.order_id = 32423
SELECT trans.* FROM `trans` INNER JOIN `account` ON trans.`account_id` = account.`account_id` WHERE account.`district_id` = 5
SELECT COUNT(*) FROM `account` AS T1 INNER JOIN `district` AS T2 ON T1.`district_id` = T2.`district_id` WHERE T2.`A2` = 'Jesenik'
SELECT DISTINCT c.`client_id` FROM `client` AS c INNER JOIN `disp` AS d ON c.`client_id` = d.`client_id` INNER JOIN `card` AS ca ON d.`disp_id` = ca.`disp_id` WHERE ca.`type` = 'junior' AND ca.`issued` >= '1997-01-01'
SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.gender) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A11 > 10000
SELECT (SUM(CASE WHEN STRFTIME('%Y', loan.`date`) = '1997' THEN loan.`amount` ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', loan.`date`) = '1996' THEN loan.`amount` ELSE 0 END)) * 100.0 / NULLIF(SUM(CASE WHEN STRFTIME('%Y', loan.`date`) = '1996' THEN loan.`amount` ELSE 0 END), 0) AS growth_rate FROM loan INNER JOIN disp ON loan.`account_id` = disp.`account_id` INNER JOIN client ON disp.`client_id` = client.`client_id` WHERE client.`gender` = 'M'
SELECT COUNT(trans.`trans_id`) FROM trans WHERE trans.`operation` = 'VYBER KARTOU' AND trans.`date` > '1995-01-01'
SELECT (SELECT SUM(`A16`) FROM `district` WHERE `A3` = 'North Bohemia') - (SELECT SUM(`A16`) FROM `district` WHERE `A3` = 'East Bohemia') AS `crime_difference`
SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type IN ('OWNER', 'DISPONENT')
SELECT COUNT(*) AS frequency, k_symbol FROM trans WHERE account_id = 3 AND amount = 3539 GROUP BY k_symbol
SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.account_id = 130
SELECT COUNT(DISTINCT account.`account_id`) FROM `account` INNER JOIN `disp` ON account.`account_id` = disp.`account_id` WHERE disp.`type` = 'OWNER' AND account.`frequency` = 'POPLATEK PO OBRATU'
SELECT SUM(l.amount) AS total_debt, SUM(l.payments) AS total_payments FROM loan l JOIN disp d ON l.account_id = d.account_id WHERE d.client_id = '992'
SELECT SUM(trans.`amount`), client.`gender` FROM trans INNER JOIN account ON trans.`account_id` = account.`account_id` INNER JOIN disp ON account.`account_id` = disp.`account_id` INNER JOIN client ON disp.`client_id` = client.`client_id` WHERE trans.`trans_id` = 851 AND client.`client_id` = 4
SELECT DISTINCT card.`type` FROM card INNER JOIN disp ON card.`disp_id` = disp.`disp_id` WHERE disp.`client_id` = 9
SELECT SUM(t.amount) FROM trans t INNER JOIN account a ON t.account_id = a.account_id INNER JOIN disp d ON a.account_id = d.account_id INNER JOIN client c ON d.client_id = c.client_id WHERE c.client_id = 617 AND strftime('%Y', t.date) = '1998'
SELECT `client`.`client_id` FROM `client` JOIN `district` ON `client`.`district_id` = `district`.`district_id` JOIN `account` ON `client`.`district_id` = `account`.`district_id` WHERE `client`.`birth_date` BETWEEN '1983-01-01' AND '1987-12-31' AND `district`.`A3` = 'east Bohemia'
SELECT client.`client_id` FROM client INNER JOIN disp ON client.`client_id` = disp.`client_id` INNER JOIN loan ON disp.`account_id` = loan.`account_id` WHERE client.`gender` = 'F' ORDER BY loan.`amount` DESC LIMIT 3
SELECT COUNT(DISTINCT client.`client_id`) FROM client INNER JOIN disp ON client.`client_id` = disp.`client_id` INNER JOIN account ON disp.`account_id` = account.`account_id` INNER JOIN trans ON account.`account_id` = trans.`account_id` WHERE client.`gender` = 'M' AND client.`birth_date` BETWEEN '1974-01-01' AND '1976-12-31' AND trans.`amount` > 4000 AND trans.`operation` = 'SIPO'
SELECT COUNT(`account`.`account_id`) FROM `account` INNER JOIN `district` ON `account`.`district_id` = `district`.`district_id` WHERE `district`.`A2` = 'Beroun' AND `account`.`date` > '1996-01-01'
SELECT COUNT(T1.client_id) FROM `client` AS T1 INNER JOIN `disp` AS T2 ON T1.client_id = T2.client_id INNER JOIN `card` AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'
SELECT CAST(COUNT(CASE WHEN client.`gender` = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(client.`client_id`) FROM client INNER JOIN account ON client.`district_id` = account.`district_id` INNER JOIN district ON account.`district_id` = district.`district_id` WHERE district.`A3` = 'Prague'
SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.gender) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE'
SELECT COUNT(DISTINCT client.`client_id`) FROM client INNER JOIN account ON client.`district_id` = account.`district_id` WHERE account.`frequency` = 'POPLATEK TYDNE'
SELECT `account`.`account_id`, MIN(`loan`.`amount`) AS `lowest_approved_amount` FROM `account` INNER JOIN `loan` ON `account`.`account_id` = `loan`.`account_id` WHERE `loan`.`duration` > 24 AND `account`.`date` < '1997-01-01' GROUP BY `account`.`account_id` ORDER BY `lowest_approved_amount` ASC LIMIT 1
SELECT `account`.`account_id` FROM `client` INNER JOIN `disp` ON `client`.`client_id` = `disp`.`client_id` INNER JOIN `account` ON `disp`.`account_id` = `account`.`account_id` WHERE `client`.`gender` = 'F' AND `account`.`district_id` = (SELECT `district_id` FROM `district` WHERE `A11` = (SELECT MIN(`A11`) FROM `district`)) ORDER BY `client`.`birth_date` ASC LIMIT 1
SELECT COUNT(*) FROM `client` AS T1 INNER JOIN `district` AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date BETWEEN '1920-01-01' AND '1920-12-31' AND T2.A3 = 'East Bohemia'
SELECT COUNT(DISTINCT loan.`account_id`) FROM loan INNER JOIN account ON loan.`account_id` = account.`account_id` WHERE loan.`duration` = 24 AND account.`frequency` = 'POPLATEK TYDNE'
SELECT AVG(loan.`amount`) FROM `loan` WHERE loan.`status` = 'C' AND loan.`account_id` IN (SELECT `account_id` FROM `account` WHERE `frequency` = 'POPLATEK PO OBRATU')
SELECT client.`client_id`, client.`district_id` FROM client INNER JOIN disp ON client.`client_id` = disp.`client_id` INNER JOIN account ON disp.`account_id` = account.`account_id` WHERE disp.`type` = 'OWNER'
SELECT T1.client_id, (strftime('%Y', 'now') - strftime('%Y', T1.birth_date)) AS age FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T3.type = 'gold' AND T4.status = 'A'
SELECT bond.bond_type FROM bond GROUP BY bond.bond_type ORDER BY COUNT(bond.bond_type) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.`molecule_id`) FROM `molecule` AS T1 INNER JOIN `atom` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '-' AND T2.`element` = 'cl'
SELECT AVG(o_count) FROM (SELECT COUNT(*) AS o_count FROM `atom` WHERE `element` = 'o' AND `molecule_id` IN (SELECT `molecule_id` FROM `bond` WHERE `bond_type` = '-') GROUP BY `molecule_id`);
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'na' AND T1.label = '-'
SELECT DISTINCT T1.`molecule_id` FROM `molecule` AS T1 INNER JOIN `bond` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '+' AND T2.`bond_type` = '#'
SELECT CAST(SUM(CASE WHEN A.element = 'c' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(A.atom_id) AS percentage FROM atom AS A INNER JOIN bond AS B ON A.molecule_id = B.molecule_id WHERE B.bond_type = ' = '
SELECT COUNT(bond_id) FROM bond WHERE bond_type = '#'
SELECT COUNT(*) FROM `atom` WHERE `element` != 'br'
SELECT COUNT(*) FROM `molecule` WHERE `molecule_id` BETWEEN 'TR000' AND 'TR099' AND `label` = '+'
SELECT DISTINCT T1.`molecule_id` FROM `atom` AS T1 WHERE T1.`element` = 'si'
SELECT DISTINCT T1.`element` FROM `atom` AS T1 INNER JOIN `connected` AS T2 ON T1.`atom_id` = T2.`atom_id` WHERE T2.`bond_id` = 'TR004_8_9' UNION SELECT DISTINCT T1.`element` FROM `atom` AS T1 INNER JOIN `connected` AS T2 ON T1.`atom_id` = T2.`atom_id2` WHERE T2.`bond_id` = 'TR004_8_9'
SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='
SELECT m.`label` FROM molecule AS m INNER JOIN atom AS a ON m.`molecule_id` = a.`molecule_id` WHERE a.`element` = 'h' GROUP BY m.`label` ORDER BY COUNT(a.`atom_id`) DESC LIMIT 1
SELECT T2.bond_type FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T1.element = 'te'
SELECT T1.atom_id, T2.atom_id2 FROM connected AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id2 = T2.atom_id AND T1.bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '-');
SELECT DISTINCT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.label = '-'
SELECT atom.`element` FROM atom INNER JOIN molecule ON atom.`molecule_id` = molecule.`molecule_id` WHERE molecule.`label` = '-' GROUP BY atom.`element` ORDER BY COUNT(atom.`atom_id`) ASC LIMIT 1
SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20'
SELECT DISTINCT M.label FROM molecule AS M WHERE M.molecule_id NOT IN (SELECT A.molecule_id FROM atom AS A WHERE A.element = 'sn')
SELECT COUNT(DISTINCT T1.`atom_id`) FROM `atom` AS T1 INNER JOIN `bond` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE (T1.`element` = 'i' OR T1.`element` = 's') AND T2.`bond_type` = '-'
SELECT DISTINCT connected.`atom_id`, connected.`atom_id2` FROM `connected` INNER JOIN `bond` ON connected.`bond_id` = bond.`bond_id` WHERE bond.`bond_type` = '#';
SELECT DISTINCT T2.`atom_id2` FROM `connected` AS T2 INNER JOIN `atom` AS T1 ON T2.`atom_id` = T1.`atom_id` WHERE T1.`molecule_id` = 'TR181'
SELECT 100 * (COUNT(*) - SUM(CASE WHEN T2.element = 'f' THEN 1 ELSE 0 END)) * 1.0 / COUNT(*) AS percent FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT CAST(SUM(CASE WHEN B.`bond_type` = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(B.`bond_id`) AS percent FROM `molecule` AS M INNER JOIN `bond` AS B ON M.`molecule_id` = B.`molecule_id` WHERE M.`label` = '+'
SELECT DISTINCT `atom`.`element` FROM `atom` WHERE `atom`.`molecule_id` = 'TR000' ORDER BY `atom`.`element` ASC LIMIT 3
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR001' AND T2.bond_id = 'TR001_2_6'
SELECT (SUM(label = '+') - SUM(label = '-')) AS difference FROM `molecule`
SELECT `connected`.`atom_id` FROM `connected` WHERE `connected`.`bond_id` = 'TR000_2_5'
SELECT connected.bond_id FROM connected WHERE connected.atom_id2 = 'TR000_2'
SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' ORDER BY T1.molecule_id ASC LIMIT 5
SELECT CAST(SUM(CASE WHEN T1.bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR008'
SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) AS percent FROM molecule AS T1
SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) AS percent FROM atom AS T1 WHERE T1.molecule_id = 'TR206'
SELECT DISTINCT bond.`bond_type` FROM bond WHERE bond.`molecule_id` = 'TR000'
SELECT DISTINCT a.`element`, m.`label` FROM `atom` AS a INNER JOIN `molecule` AS m ON a.`molecule_id` = m.`molecule_id` WHERE m.`molecule_id` = 'TR060'
SELECT T2.bond_type, T1.label FROM (SELECT bond_type FROM bond WHERE molecule_id = 'TR018' GROUP BY bond_type ORDER BY COUNT(*) DESC LIMIT 1) AS T2, molecule AS T1 WHERE T1.molecule_id = 'TR018'
SELECT DISTINCT T1.`molecule_id` FROM `bond` AS T2 INNER JOIN `connected` AS T3 ON T2.`bond_id` = T3.`bond_id` INNER JOIN `molecule` AS T1 ON T2.`molecule_id` = T1.`molecule_id` WHERE T2.`bond_type` = '-' AND T1.`label` = '-' ORDER BY T1.`molecule_id` ASC LIMIT 3
SELECT `bond`.`bond_id` FROM `bond` WHERE `bond`.`molecule_id` = 'TR006' ORDER BY `bond`.`bond_id` ASC LIMIT 2
SELECT COUNT(bond.`bond_id`) FROM bond INNER JOIN connected ON bond.`bond_id` = connected.`bond_id` WHERE bond.`molecule_id` = 'TR009' AND (connected.`atom_id` = 'TR009_12' OR connected.`atom_id2` = 'TR009_12')
SELECT COUNT(DISTINCT T1.`molecule_id`) FROM `molecule` AS T1 INNER JOIN `atom` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '+' AND T2.`element` = 'br'
SELECT bond.`bond_type`, connected.`atom_id`, connected.`atom_id2` FROM bond INNER JOIN connected ON bond.`bond_id` = connected.`bond_id` WHERE bond.`bond_id` = 'TR001_6_9'
SELECT T1.`molecule_id`, T2.`label` FROM `atom` AS T1 INNER JOIN `molecule` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`atom_id` = 'TR001_10'
SELECT COUNT(DISTINCT bond.`molecule_id`) FROM bond WHERE bond.`bond_type` = '#';
SELECT COUNT(`connected`.`bond_id`) FROM `connected` WHERE `connected`.`atom_id` = 'TR000_19' OR `connected`.`atom_id2` = 'TR000_19'
SELECT DISTINCT atom.`element` FROM `atom` WHERE atom.`molecule_id` = 'TR004'
SELECT COUNT(*) FROM `molecule` WHERE `label` = '-';
SELECT DISTINCT T1.`molecule_id` FROM `atom` AS T1 INNER JOIN `molecule` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE SUBSTR(T1.`atom_id`, 7, 2) BETWEEN '21' AND '25' AND T2.`label` = '+'
SELECT DISTINCT B.bond_id FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id INNER JOIN atom AS A1 ON C.atom_id = A1.atom_id INNER JOIN atom AS A2 ON C.atom_id2 = A2.atom_id WHERE A1.element = 'p' AND A2.element = 'n'
SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' GROUP BY T1.molecule_id ORDER BY COUNT(T2.bond_id) DESC LIMIT 1
SELECT CAST(COUNT(DISTINCT C.`bond_id`) AS REAL) / COUNT(DISTINCT A.`atom_id`) FROM `atom` AS A INNER JOIN `connected` AS C ON A.`atom_id` = C.`atom_id` WHERE A.`element` = 'i'
SELECT T2.bond_type, T1.bond_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T1.atom_id, 7, 2) + 0 = 45
SELECT DISTINCT `element` FROM `atom` WHERE `atom_id` NOT IN (SELECT `atom_id` FROM `connected`)
SELECT T1.`atom_id` FROM `atom` AS T1 INNER JOIN `bond` AS T2 ON T1.`molecule_id` = T2.`molecule_id` INNER JOIN `connected` AS T3 ON T2.`bond_id` = T3.`bond_id` WHERE T2.`molecule_id` = 'TR447' AND T2.`bond_type` = '#';
SELECT `element` FROM `atom` WHERE `atom_id` IN (SELECT `atom_id2` FROM `connected` WHERE `bond_id` = 'TR144_8_19')
SELECT T1.`molecule_id` FROM `molecule` AS T1 INNER JOIN `bond` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '+' AND T2.`bond_type` = '=' GROUP BY T1.`molecule_id` ORDER BY COUNT(T2.`bond_id`) DESC LIMIT 1
SELECT `atom`.`element` FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`label` = '+' GROUP BY `atom`.`element` ORDER BY COUNT(`atom`.`atom_id`) ASC LIMIT 1
SELECT DISTINCT T1.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'pb'
SELECT DISTINCT a.element FROM bond AS b INNER JOIN connected AS c ON b.bond_id = c.bond_id INNER JOIN atom AS a ON c.atom_id = a.atom_id WHERE b.bond_type = '#'
SELECT CAST(COUNT(bond.`bond_id`) AS FLOAT) * 100 / (SELECT COUNT(connected.`atom_id`) FROM connected INNER JOIN atom ON connected.`atom_id` = atom.`atom_id` GROUP BY atom.`element` ORDER BY COUNT(atom.`atom_id`) DESC LIMIT 1) AS percentage FROM bond INNER JOIN connected ON bond.`bond_id` = connected.`bond_id` INNER JOIN atom AS A1 ON connected.`atom_id` = A1.`atom_id` INNER JOIN atom AS A2 ON connected.`atom_id2` = A2.`atom_id` GROUP BY A1.`element`, A2.`element` ORDER BY COUNT(bond.`bond_id`) DESC LIMIT 1;
SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'
SELECT COUNT(*) FROM `atom` WHERE `element` IN ('c', 'h')
SELECT DISTINCT C.`atom_id2` FROM `connected` AS C INNER JOIN `atom` AS A ON C.`atom_id` = A.`atom_id` WHERE A.`element` = 's'
SELECT DISTINCT B.bond_type FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id INNER JOIN atom AS A ON C.atom_id = A.atom_id WHERE A.element = 'sn'
SELECT COUNT(DISTINCT T1.`element`) FROM `atom` AS T1 INNER JOIN `bond` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`bond_type` = '-';
SELECT COUNT(DISTINCT atom.`atom_id`) FROM atom INNER JOIN bond ON atom.`molecule_id` = bond.`molecule_id` WHERE bond.`bond_type` = '#' AND (atom.`element` = 'p' OR atom.`element` = 'br')
SELECT DISTINCT B.bond_id FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE M.label = '+'
SELECT DISTINCT T1.`molecule_id` FROM `molecule` AS T1 INNER JOIN `bond` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`bond_type` = '-' AND T1.`label` = '-'
SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS FLOAT) * 100 / COUNT(T1.atom_id) AS percent FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-';
SELECT `molecule`.`label` FROM `molecule` WHERE `molecule`.`molecule_id` IN ('TR000', 'TR001', 'TR002')
SELECT `molecule`.`molecule_id` FROM `molecule` WHERE `molecule`.`label` = '-'
SELECT COUNT(*) FROM `molecule` WHERE `molecule`.`molecule_id` BETWEEN 'TR000' AND 'TR030' AND `molecule`.`label` = '+'
SELECT DISTINCT bond.`bond_type` FROM bond INNER JOIN molecule ON bond.`molecule_id` = molecule.`molecule_id` WHERE molecule.`molecule_id` BETWEEN 'TR000' AND 'TR050'
SELECT DISTINCT T1.`element` FROM atom AS T1 INNER JOIN connected AS T2 ON T1.`atom_id` = T2.`atom_id` INNER JOIN bond AS T3 ON T2.`bond_id` = T3.`bond_id` WHERE T3.`bond_id` = 'TR001_10_11'
SELECT COUNT(DISTINCT bond.`bond_id`) FROM bond INNER JOIN atom ON bond.`molecule_id` = atom.`molecule_id` WHERE atom.`element` = 'i'
SELECT MAX(m.label) FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE a.element = 'ca'
SELECT EXISTS(SELECT 1 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_1_8' AND T2.element IN ('cl', 'c') GROUP BY T1.bond_id HAVING COUNT(DISTINCT T2.element) = 2)
SELECT DISTINCT `molecule`.`molecule_id` FROM `molecule` INNER JOIN `bond` ON `molecule`.`molecule_id` = `bond`.`molecule_id` INNER JOIN `atom` ON `molecule`.`molecule_id` = `atom`.`molecule_id` WHERE `bond`.`bond_type` = '#' AND `molecule`.`label` = '-' AND `atom`.`element` = 'c' LIMIT 2
SELECT CAST(SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.molecule_id) AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT DISTINCT atom.element FROM atom WHERE atom.molecule_id = 'TR001'
SELECT DISTINCT bond.molecule_id FROM bond WHERE bond.bond_type = '='
SELECT C.`atom_id`, C.`atom_id2` FROM connected AS C INNER JOIN bond AS B ON C.`bond_id` = B.`bond_id` WHERE B.`bond_type` = '#';
SELECT DISTINCT A.element FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id INNER JOIN atom AS A ON C.atom_id = A.atom_id WHERE B.bond_id = 'TR005_16_26'
SELECT COUNT(DISTINCT T1.`molecule_id`) FROM `bond` AS T1 INNER JOIN `molecule` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`bond_type` = '-' AND T2.`label` = '-';
SELECT `molecule`.`label` FROM `bond` INNER JOIN `molecule` ON `bond`.`molecule_id` = `molecule`.`molecule_id` WHERE `bond`.`bond_id` = 'TR001_10_11'
SELECT bond.bond_id, molecule.label FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#';
SELECT atom.`element`, COUNT(*) AS `count` FROM atom INNER JOIN molecule ON atom.`molecule_id` = molecule.`molecule_id` WHERE substr(atom.`atom_id`, 7, 1) = '4' AND molecule.`label` = '+' GROUP BY atom.`element`
SELECT molecule.`label`, CAST(SUM(CASE WHEN atom.`element` = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(atom.`element`) AS ratio FROM atom INNER JOIN molecule ON atom.`molecule_id` = molecule.`molecule_id` WHERE atom.`molecule_id` = 'TR006'
SELECT DISTINCT T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'
SELECT DISTINCT bond.`bond_type` FROM bond INNER JOIN atom ON bond.`molecule_id` = atom.`molecule_id` WHERE atom.`element` = 'te'
SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11' UNION SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'
SELECT CAST(COUNT(CASE WHEN T2.bond_type = '#' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id
SELECT CAST(SUM(CASE WHEN T2.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.bond_id) AS percent FROM bond AS T2 WHERE T2.molecule_id = 'TR047'
SELECT T1.`label` FROM `molecule` AS T1 INNER JOIN `atom` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`atom_id` = 'TR001_1'
SELECT `molecule`.`label` FROM `molecule` WHERE `molecule`.`molecule_id` = 'TR151'
SELECT DISTINCT `atom`.`element` FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `molecule`.`molecule_id` = 'TR151' AND `atom`.`element` IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca')
SELECT COUNT(*) FROM `molecule` WHERE `label` = '+'
SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE CAST(substr(molecule.molecule_id, 3, 3) AS INTEGER) > 10 AND CAST(substr(molecule.molecule_id, 3, 3) AS INTEGER) < 50 AND atom.element = 'c'
SELECT COUNT(T1.atom_id) FROM `atom` AS T1 INNER JOIN `molecule` AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT bond.`bond_id` FROM bond INNER JOIN molecule ON bond.`molecule_id` = molecule.`molecule_id` WHERE bond.`bond_type` = '=' AND molecule.`label` = '+'
SELECT COUNT(a.`atom_id`) FROM `atom` AS a INNER JOIN `molecule` AS m ON a.`molecule_id` = m.`molecule_id` WHERE a.`element` = 'h' AND m.`label` = '+'
SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_id = 'TR000_1_2' AND T3.atom_id = 'TR000_1'
SELECT `atom`.`atom_id` FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `atom`.`element` = 'c' AND `molecule`.`label` = '-'
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id
SELECT `label` FROM `molecule` WHERE `molecule_id` = 'TR124'
SELECT T1.`atom_id` FROM `atom` AS T1 WHERE T1.`molecule_id` = 'TR186'
SELECT `bond`.`bond_type` FROM `bond` WHERE `bond`.`bond_id` = 'TR007_4_19'
SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'
SELECT COUNT(T1.`bond_id`) FROM `bond` AS T1 INNER JOIN `molecule` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`bond_type` = '=' AND T2.`molecule_id` = 'TR006' AND T2.`label` = '+'
SELECT DISTINCT M.`molecule_id`, A.`element` FROM `molecule` AS M INNER JOIN `atom` AS A ON M.`molecule_id` = A.`molecule_id` WHERE M.`label` = '+'
SELECT bond.`bond_id`, atom.`atom_id`, atom.`element` FROM bond INNER JOIN connected ON bond.`bond_id` = connected.`bond_id` INNER JOIN atom ON connected.`atom_id` = atom.`atom_id` WHERE bond.`bond_type` = '-';
SELECT m.`molecule_id`, GROUP_CONCAT(a.`element`) AS elements FROM molecule AS m INNER JOIN bond AS b ON m.`molecule_id` = b.`molecule_id` INNER JOIN connected AS c ON b.`bond_id` = c.`bond_id` INNER JOIN atom AS a ON c.`atom_id` = a.`atom_id` WHERE b.`bond_type` = '#' GROUP BY m.`molecule_id`
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR000_2_3'
SELECT COUNT(DISTINCT connected.`bond_id`) FROM connected INNER JOIN atom AS A1 ON connected.`atom_id` = A1.`atom_id` INNER JOIN atom AS A2 ON connected.`atom_id2` = A2.`atom_id` WHERE A1.`element` = 'cl' OR A2.`element` = 'cl'
SELECT `atom`.`atom_id`, COUNT(DISTINCT `bond`.`bond_type`) AS `bond_type_count` FROM `atom` INNER JOIN `bond` ON `atom`.`molecule_id` = `bond`.`molecule_id` WHERE `atom`.`molecule_id` = 'TR346' GROUP BY `atom`.`atom_id`
SELECT COUNT(DISTINCT T1.`molecule_id`) AS DoubleBondCount, COUNT(DISTINCT CASE WHEN T2.`label` = '+' THEN T1.`molecule_id` END) AS CarcinogenicCount FROM `bond` AS T1 INNER JOIN `molecule` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`bond_type` = '='
SELECT COUNT(DISTINCT m.`molecule_id`) FROM `molecule` AS m LEFT JOIN `bond` AS b ON m.`molecule_id` = b.`molecule_id` LEFT JOIN `atom` AS a ON m.`molecule_id` = a.`molecule_id` WHERE a.`element` != 's' AND (b.`bond_type` IS NULL OR b.`bond_type` != ' = ')
SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_2_4'
SELECT COUNT(*) FROM `atom` WHERE `molecule_id` = 'TR005'
SELECT COUNT(*) FROM `bond` WHERE `bond_type` = '-';
SELECT DISTINCT T1.`molecule_id` FROM `atom` AS T1 INNER JOIN `molecule` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`element` = 'cl' AND T2.`label` = '+'
SELECT DISTINCT T1.`molecule_id` FROM `atom` AS T1 INNER JOIN `molecule` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`element` = 'c' AND T2.`label` = '-'
SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) AS percentage FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id
SELECT `bond`.`molecule_id` FROM `bond` WHERE `bond`.`bond_id` = 'TR001_1_7'
SELECT COUNT(DISTINCT T1.`atom_id`) FROM `connected` AS T1 INNER JOIN `bond` AS T2 ON T1.`bond_id` = T2.`bond_id` WHERE T2.`bond_id` = 'TR001_3_4'
SELECT bond.`bond_type` FROM bond INNER JOIN connected ON bond.`bond_id` = connected.`bond_id` WHERE connected.`atom_id` = 'TR000_1' AND connected.`atom_id2` = 'TR000_2'
SELECT T1.`molecule_id` FROM `atom` AS T1 INNER JOIN `connected` AS T2 ON T1.`atom_id` = T2.`atom_id` WHERE T1.`atom_id` = 'TR000_2' AND T2.`atom_id2` = 'TR000_4'
SELECT `element` FROM `atom` WHERE `atom_id` = 'TR000_1'
SELECT `molecule`.`label` FROM `molecule` WHERE `molecule`.`molecule_id` = 'TR000'
SELECT CAST(SUM(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) AS percentage FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'n'
SELECT DISTINCT T1.`molecule_id` FROM `atom` AS T1 INNER JOIN `bond` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`element` = 's' AND T2.`bond_type` = '='
SELECT T1.`molecule_id` FROM `molecule` AS T1 INNER JOIN `atom` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '-' GROUP BY T1.`molecule_id` HAVING COUNT(T2.`atom_id`) > 5
SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.molecule_id = 'TR024'
SELECT T1.`molecule_id` FROM `molecule` AS T1 INNER JOIN `atom` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '+' GROUP BY T1.`molecule_id` ORDER BY COUNT(T2.`atom_id`) DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN m.`label` = '+' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(m.`molecule_id`) FROM molecule AS m INNER JOIN atom AS a ON m.`molecule_id` = a.`molecule_id` INNER JOIN bond AS b ON m.`molecule_id` = b.`molecule_id` WHERE a.`element` = 'h' AND b.`bond_type` = '#';
SELECT COUNT(*) FROM `molecule` WHERE `label` = '+'
SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 WHERE T1.bond_type = '-' AND T1.molecule_id BETWEEN 'TR004' AND 'TR010'
SELECT COUNT(`atom`.`atom_id`) FROM `atom` WHERE `atom`.`molecule_id` = 'TR008' AND `atom`.`element` = 'c'
SELECT `atom`.`element` FROM `atom` INNER JOIN `molecule` ON `atom`.`molecule_id` = `molecule`.`molecule_id` WHERE `atom`.`atom_id` = 'TR004_7' AND `molecule`.`label` = '-'
SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.element = 'o'
SELECT COUNT(DISTINCT T1.`molecule_id`) FROM `molecule` AS T1 INNER JOIN `bond` AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`bond_type` = '#' AND T1.`label` = '-'
SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR016'
SELECT `atom`.`atom_id` FROM `atom` JOIN `bond` ON `atom`.`molecule_id` = `bond`.`molecule_id` JOIN `connected` ON `bond`.`bond_id` = `connected`.`bond_id` WHERE `atom`.`element` = 'c' AND `bond`.`bond_type` = '=' AND `atom`.`molecule_id` = 'TR012'
SELECT atom.atom_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'o'
SELECT `name` FROM `cards` WHERE `cardKingdomFoilId` IS NOT NULL AND `cardKingdomId` IS NOT NULL AND `cardKingdomFoilId` = `cardKingdomId` AND `cardKingdomFoilId` <> 'None'
SELECT `cards`.`name` FROM `cards` WHERE `cards`.`borderColor` = 'borderless' AND `cards`.`cardKingdomFoilId` IS NULL
SELECT `name` FROM `cards` WHERE `faceConvertedManaCost` IS NOT NULL AND `faceConvertedManaCost` = (SELECT MAX(`faceConvertedManaCost`) FROM `cards` WHERE `faceConvertedManaCost` IS NOT NULL)
SELECT DISTINCT cards.`name` FROM cards INNER JOIN legalities ON cards.`uuid` = legalities.`uuid` WHERE cards.`frameVersion` = '2015' AND cards.`edhrecRank` < 100
SELECT DISTINCT cards.`name` FROM `cards` INNER JOIN `legalities` ON cards.`uuid` = legalities.`uuid` WHERE cards.`rarity` = 'mythic' AND legalities.`status` = 'Banned' AND legalities.`format` = 'gladiator'
SELECT legalities.`format`, legalities.`status` FROM `cards` INNER JOIN `legalities` ON cards.`uuid` = legalities.`uuid` WHERE cards.`type` = 'Artifact' AND cards.`side` IS NULL AND legalities.`format` = 'vintage'
SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE (cards.power = '*' OR cards.power IS NULL) AND legalities.format = 'commander' AND legalities.status = 'Legal'
SELECT T1.`id`, T1.`name`, T1.`text`, T1.`hasContentWarning`, T2.`text` AS ruling_text FROM `cards` AS T1 LEFT JOIN `rulings` AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`artist` = 'Stephen Daniele';
SELECT R.`date`, R.`text` FROM rulings AS R INNER JOIN cards AS C ON R.`uuid` = C.`uuid` WHERE C.`name` = 'Sublime Epiphany' AND C.`number` = '74s'
SELECT T1.`name`, T1.`artist`, T1.`isPromo` FROM `cards` AS T1 INNER JOIN `rulings` AS T2 ON T1.`uuid` = T2.`uuid` GROUP BY T1.`uuid` ORDER BY COUNT(T2.`uuid`) DESC LIMIT 1
SELECT DISTINCT T2.`language` FROM `cards` AS T1 INNER JOIN `foreign_data` AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`name` = 'Annul' AND T1.`number` = '29'
SELECT T1.`name` FROM `cards` AS T1 INNER JOIN `foreign_data` AS T2 ON T1.`uuid` = T2.`uuid` WHERE T2.`language` = 'Japanese'
SELECT CAST(SUM(CASE WHEN F.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(C.id) FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid
SELECT sets.`name`, sets.`totalSetSize` FROM sets INNER JOIN set_translations ON sets.`code` = set_translations.`setCode` WHERE set_translations.`language` = 'Italian'
SELECT COUNT(DISTINCT `type`) FROM `cards` WHERE `artist` = 'Aaron Boyd'
SELECT keywords FROM cards WHERE name = 'Angel of Mercy'
SELECT COUNT(*) FROM `cards` WHERE `power` = '*'
SELECT `promoTypes` FROM `cards` WHERE `name` = 'Duress'
SELECT `borderColor` FROM `cards` WHERE `name` = 'Ancestor''s Chosen'
SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'
SELECT DISTINCT T2.language FROM set_translations AS T2 INNER JOIN cards AS T1 ON T2.setCode = T1.setCode WHERE T1.name = 'Angel of Mercy'
SELECT COUNT(DISTINCT cards.`id`) FROM cards INNER JOIN legalities ON cards.`uuid` = legalities.`uuid` WHERE legalities.`status` = 'restricted' AND cards.`isTextless` = 0
SELECT rulings.`text` FROM rulings INNER JOIN cards ON rulings.`uuid` = cards.`uuid` WHERE cards.`name` = 'Condemn'
SELECT COUNT(DISTINCT cards.`id`) FROM `cards` JOIN `legalities` ON cards.`uuid` = legalities.`uuid` WHERE legalities.`status` = 'restricted' AND cards.`isStarter` = 1
SELECT T1.`status` FROM `legalities` AS T1 INNER JOIN `cards` AS T2 ON T1.`uuid` = T2.`uuid` WHERE T2.`name` = 'Cloudchaser Eagle'
SELECT `type` FROM `cards` WHERE `name` = 'Benalish Knight'
SELECT legalities.`format` FROM legalities INNER JOIN cards ON legalities.`uuid` = cards.`uuid` WHERE cards.`name` = 'Benalish Knight'
SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'
SELECT CAST(COUNT(CASE WHEN `borderColor` = 'borderless' THEN `id` ELSE NULL END) AS REAL) * 100 / COUNT(`id`) FROM `cards`
SELECT COUNT(*) FROM `foreign_data` AS T1 INNER JOIN `cards` AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'German' AND T2.isReprint = 1
SELECT COUNT(*) FROM `cards` AS T1 INNER JOIN `foreign_data` AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`borderColor` = 'borderless' AND T2.`language` = 'Russian'
SELECT CAST(SUM(CASE WHEN F.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(C.id) FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE C.isStorySpotlight = 1
SELECT COUNT(*) FROM `cards` WHERE `toughness` = '99'
SELECT `cards`.`name` FROM `cards` WHERE `cards`.`artist` = 'Aaron Boyd'
SELECT COUNT(`id`) FROM `cards` WHERE `borderColor` = 'black' AND `availability` = 'mtgo'
SELECT `id` FROM `cards` WHERE `convertedManaCost` = 0
SELECT DISTINCT `layout` FROM `cards` WHERE `keywords` LIKE '%Flying%'
SELECT COUNT(*) FROM `cards` WHERE `originalType` = 'Summon - Angel' AND `subtypes` NOT LIKE '%Angel%'
SELECT `cards`.`id` FROM `cards` WHERE `cards`.`cardKingdomFoilId` IS NOT NULL AND `cards`.`cardKingdomId` IS NOT NULL;
SELECT id FROM cards WHERE duelDeck = 'a'
SELECT DISTINCT cards.`edhrecRank` FROM `cards` WHERE cards.`frameVersion` = '2015'
SELECT T1.artist FROM `cards` AS T1 INNER JOIN `foreign_data` AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'
SELECT T1.`name`, T1.`artist`, T1.`convertedManaCost`, T1.`power`, T1.`toughness`, T2.`flavorText` FROM `cards` AS T1 INNER JOIN `foreign_data` AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`availability` = 'paper' AND T2.`language` = 'Japanese'
SELECT COUNT(cards.`id`) FROM `cards` INNER JOIN `legalities` ON cards.`uuid` = legalities.`uuid` WHERE legalities.`status` = 'Banned' AND cards.`borderColor` = 'white'
SELECT DISTINCT cards.uuid, foreign_data.language FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE legalities.format = 'legacy'
SELECT rulings.`text` FROM rulings INNER JOIN cards ON rulings.`uuid` = cards.`uuid` WHERE cards.`name` = 'Beacon of Immortality'
SELECT COUNT(cards.`id`) AS card_count, legalities.`status` FROM cards JOIN legalities ON cards.`uuid` = legalities.`uuid` WHERE cards.`frameVersion` = 'future' GROUP BY legalities.`status`
SELECT colors FROM cards WHERE setCode = 'OGW'
SELECT DISTINCT cards.name, set_translations.language FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode INNER JOIN sets ON set_translations.setCode = sets.code WHERE sets.code = '10E' AND cards.convertedManaCost = 5
SELECT `cards`.`name`, `rulings`.`date` FROM `cards` INNER JOIN `rulings` ON `cards`.`uuid` = `rulings`.`uuid` WHERE `cards`.`originalType` = 'Creature - Elf'
SELECT DISTINCT cards.`colors`, legalities.`format` FROM `cards` INNER JOIN `legalities` ON cards.`uuid` = legalities.`uuid` WHERE cards.`id` BETWEEN 1 AND 20
SELECT DISTINCT T1.`name` FROM `cards` AS T1 INNER JOIN `foreign_data` AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`originalType` = 'Artifact' AND T1.`colors` = 'B'
SELECT T1.`name` FROM `cards` AS T1 INNER JOIN `rulings` AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`rarity` = 'uncommon' ORDER BY T2.`date` ASC LIMIT 3
SELECT COUNT(*) FROM `cards` AS T1 WHERE T1.`artist` = 'John Avon' AND T1.`hasFoil` = 1 AND T1.`cardKingdomFoilId` IS NULL
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(*) FROM `cards` WHERE `artist` = 'UDON' AND `availability` = 'mtgo' AND `hand` = -1
SELECT COUNT(`id`) FROM `cards` WHERE `frameVersion` = '1993' AND `availability` = 'paper' AND `hasContentWarning` = 1
SELECT `manaCost` FROM `cards` WHERE `layout` = 'normal' AND `frameVersion` = '2003' AND `borderColor` = 'black' AND `availability` IN ('paper', 'mtgo')
SELECT SUM(`manaCost`) FROM `cards` WHERE `artist` = 'Rob Alexander'
SELECT DISTINCT cards.type FROM cards WHERE cards.availability = 'arena'
SELECT DISTINCT T1.`setCode` FROM `cards` AS T1 INNER JOIN `foreign_data` AS T2 ON T1.`uuid` = T2.`uuid` WHERE T2.`language` = 'Spanish'
SELECT CAST(COUNT(CASE WHEN hand = '+3' THEN 1 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE frameEffects = 'legendary'
SELECT CAST(COUNT(CASE WHEN `isStorySpotlight` = 1 AND `isTextless` = 0 THEN `id` ELSE NULL END) AS REAL) * 100 / COUNT(`id`) AS percentage, `id` FROM `cards` WHERE `isStorySpotlight` = 1 GROUP BY `id`
SELECT CAST(SUM(CASE WHEN foreign_data.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(cards.id) AS percentage, cards.name FROM cards LEFT JOIN foreign_data ON cards.uuid = foreign_data.uuid GROUP BY cards.name
SELECT DISTINCT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309
SELECT COUNT(DISTINCT T1.`code`) FROM `sets` AS T1 INNER JOIN `set_translations` AS T2 ON T1.`code` = T2.`setCode` WHERE T1.`block` = 'Commander' AND T2.`language` = 'Portuguese (Brazil)'
SELECT cards.`id` FROM cards INNER JOIN legalities ON cards.`uuid` = legalities.`uuid` WHERE cards.`types` = 'Creature' AND legalities.`status` = 'Legal'
SELECT DISTINCT T1.`types` FROM `cards` AS T1 INNER JOIN `foreign_data` AS T2 ON T1.`uuid` = T2.`uuid` WHERE T2.`language` = 'German' AND T1.`subtypes` IS NOT NULL AND T1.`supertypes` IS NOT NULL
SELECT COUNT(*) FROM cards WHERE power IS NULL AND text LIKE '%triggered ability%'
SELECT COUNT(DISTINCT cards.`id`) FROM cards INNER JOIN legalities ON cards.`uuid` = legalities.`uuid` INNER JOIN rulings ON cards.`uuid` = rulings.`uuid` WHERE legalities.`format` = 'pre-modern' AND rulings.`text` = 'This is a triggered mana ability' AND cards.`side` IS NULL;
SELECT `cards`.`id` FROM `cards` INNER JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE `cards`.`artist` = 'Erica Yang' AND `legalities`.`format` = 'pauper' AND `cards`.`availability` = 'paper'
SELECT `artist` FROM `cards` WHERE `text` LIKE '%Das perfekte Gegenmittel zu einer dichten Formation%'
SELECT T2.name FROM `cards` AS T1 INNER JOIN `foreign_data` AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Creature — Human Cleric' AND T1.layout = 'normal' AND T1.borderColor = 'black' AND T2.language = 'French' AND T1.artist = 'Pete Venters'
SELECT COUNT(DISTINCT cards.id) FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.rarity = 'rare' AND rulings.date = '2009-01-10'
SELECT ST.language FROM `sets` AS S INNER JOIN `set_translations` AS ST ON S.`code` = ST.`setCode` WHERE S.`baseSetSize` = 180 AND S.`block` = 'Ravnica'
SELECT CAST(SUM(CASE WHEN cards.`hasContentWarning` = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(cards.`id`) FROM cards INNER JOIN legalities ON cards.`uuid` = legalities.`uuid` WHERE legalities.`format` = 'commander' AND legalities.`status` = 'Legal'
SELECT CAST(COUNT(CASE WHEN foreign_data.`language` = 'French' AND (cards.`power` IS NULL OR cards.`power` = '*') THEN 1 END) AS REAL) * 100 / COUNT(CASE WHEN cards.`power` IS NULL OR cards.`power` = '*' THEN 1 END) FROM `cards` LEFT JOIN `foreign_data` ON cards.`uuid` = foreign_data.`uuid` WHERE cards.`power` IS NULL OR cards.`power` = '*';
SELECT CAST(SUM(CASE WHEN ST.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ST.language) FROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code WHERE S.type = 'expansion'
SELECT DISTINCT `cards`.`availability` FROM `cards` WHERE `cards`.`artist` = 'Daren Bader'
SELECT COUNT(`id`) FROM `cards` WHERE `borderColor` = 'borderless' AND `edhrecRank` > 12000
SELECT COUNT(*) FROM `cards` WHERE `isOversized` = 1 AND `isReprint` = 1 AND `isPromo` = 1
SELECT `name` FROM `cards` WHERE `power` IS NULL OR `power` = '*' AND `promoTypes` = 'arenaleague' ORDER BY `name` LIMIT 3
SELECT T1.language FROM foreign_data AS T1 WHERE T1.multiverseid = 149934
SELECT `id` FROM `cards` WHERE `cardKingdomFoilId` IS NOT NULL AND `cardKingdomId` IS NOT NULL ORDER BY `cardKingdomFoilId` ASC LIMIT 3
SELECT CAST(COUNT(CASE WHEN cards.`isTextless` = 1 AND cards.`layout` = 'normal' THEN 1 END) AS REAL) * 100 / COUNT(cards.`isTextless`) AS proportion FROM `cards`
SELECT `cards`.`number` FROM `cards` WHERE `cards`.`subtypes` IN ('Angel', 'Wizard') AND `cards`.`otherFaceIds` IS NULL
SELECT sets.`name` FROM sets WHERE sets.`mtgoCode` IS NULL OR sets.`mtgoCode` = '' ORDER BY sets.`name` ASC LIMIT 3
SELECT DISTINCT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T1.code = 'ARC'
SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 1
SELECT T1.language, T2.type FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.id = 206 AND T1.setCode = T2.code
SELECT sets.`id`, sets.`name` FROM sets INNER JOIN set_translations ON sets.`code` = set_translations.`setCode` WHERE set_translations.`language` = 'Italian' AND sets.`block` = 'Shadowmoor' ORDER BY sets.`name` LIMIT 2
SELECT `sets`.`id` FROM `sets` INNER JOIN `set_translations` ON `sets`.`code` = `set_translations`.`setCode` WHERE `sets`.`isForeignOnly` = 0 AND `sets`.`isFoilOnly` = 1 AND `set_translations`.`language` = 'Japanese'
SELECT sets.`name` FROM sets INNER JOIN set_translations ON sets.`code` = set_translations.`setCode` WHERE set_translations.`language` = 'Russian' ORDER BY sets.`baseSetSize` DESC LIMIT 1
SELECT CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM cards WHERE isOnlineOnly = 1) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Chinese Simplified' AND T2.isOnlineOnly = 1
SELECT COUNT(DISTINCT S.`id`) FROM `sets` AS S INNER JOIN `set_translations` AS ST ON S.`code` = ST.`setCode` WHERE ST.`language` = 'Japanese' AND (S.`mtgoCode` IS NULL OR S.`mtgoCode` = '')
SELECT `id` FROM `cards` WHERE `borderColor` = 'black'
SELECT `id` FROM `cards` WHERE `frameEffects` = 'extendedart'
SELECT `cards`.`name` FROM `cards` WHERE `cards`.`borderColor` = 'black' AND `cards`.`isFullArt` = 1
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 174 AND T2.language IS NOT NULL
SELECT name FROM sets WHERE code = 'ALL'
SELECT T2.language FROM foreign_data AS T2 WHERE T2.uuid IN (SELECT T1.uuid FROM cards AS T1 WHERE T1.name = 'A Pedra Fellwar') AND EXISTS (SELECT 1 FROM cards AS T1 WHERE T1.name = 'A Pedra Fellwar')
SELECT `code` FROM `sets` WHERE `releaseDate` = '2007-07-13'
SELECT `baseSetSize`, `code` FROM `sets` WHERE `block` IN ('Masques', 'Mirage')
SELECT `sets`.`code` FROM `sets` WHERE `sets`.`type` = 'expansion'
SELECT foreign_data.`name`, cards.`type` FROM cards INNER JOIN foreign_data ON cards.`uuid` = foreign_data.`uuid` WHERE cards.`watermark` = 'boros'
SELECT foreign_data.`language`, foreign_data.`flavorText`, cards.`type` FROM cards INNER JOIN foreign_data ON cards.`uuid` = foreign_data.`uuid` WHERE cards.`watermark` = 'colorpie'
SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedManaCost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Abyssal Horror'
SELECT DISTINCT `sets`.`code` FROM `sets` INNER JOIN `cards` ON `sets`.`code` = `cards`.`setCode` INNER JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE `legalities`.`format` = 'commander'
SELECT foreign_data.`name`, cards.`type` FROM cards INNER JOIN foreign_data ON cards.`uuid` = foreign_data.`uuid` WHERE cards.`watermark` = 'abzan'
SELECT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius'
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'
SELECT `name` FROM `cards` WHERE `isTextless` = 0
SELECT `convertedManaCost` FROM `cards` WHERE `name` = 'Ancestor''s Chosen'
SELECT COUNT(*) FROM `cards` WHERE `borderColor` = 'white' AND (`power` IS NULL OR `power` = '*')
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL
SELECT `subtypes`, `supertypes` FROM `cards` WHERE `name` = 'Molimo, Maro-Sorcerer'
SELECT cards.`purchaseUrls` FROM cards WHERE cards.`promoTypes` = 'bundle'
SELECT COUNT(DISTINCT `artist`) FROM `cards` WHERE `borderColor` = 'black' AND `availability` LIKE '%arena%' AND `availability` LIKE '%mtgo%'
SELECT CASE WHEN (SELECT `convertedManaCost` FROM `cards` WHERE `name` = 'Serra Angel') > (SELECT `convertedManaCost` FROM `cards` WHERE `name` = 'Shrine Keeper') THEN 'Serra Angel' ELSE 'Shrine Keeper' END AS higher_cost_card
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'
SELECT `name` FROM `cards` WHERE `frameVersion` = '2003' ORDER BY `convertedManaCost` DESC LIMIT 3
SELECT ST.translation FROM set_translations AS ST INNER JOIN cards AS C ON ST.setCode = C.setCode WHERE C.name = 'Ancestor''s Chosen' AND ST.language = 'Italian'
SELECT COUNT(*) FROM set_translations AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode WHERE T2.name = 'Angel of Mercy'
SELECT cards.name FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(*) > 0 AS has_korean_version FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Korean'
SELECT COUNT(*) FROM `cards` AS c INNER JOIN `set_translations` AS st ON c.`setCode` = st.`setCode` INNER JOIN `sets` AS s ON st.`setCode` = s.`code` WHERE st.`translation` = 'Hauptset Zehnte Edition' AND c.`artist` = 'Adam Rex'
SELECT sets.`baseSetSize` FROM sets INNER JOIN set_translations ON sets.`code` = set_translations.`setCode` WHERE set_translations.`translation` = 'Hauptset Zehnte Edition'
SELECT T2.`translation` FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.`code` = T2.`setCode` WHERE T1.`name` = 'Eighth Edition' AND T2.`language` = 'Chinese Simplified'
SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END AS AppearedOnMTGO FROM cards AS T1 INNER JOIN sets AS T2 ON T1.mtgoId = T2.mtgoCode WHERE T1.name = 'Angel of Mercy' AND T2.mtgoCode IS NOT NULL;
SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Ancestor''s Chosen'
SELECT sets.`type` FROM sets INNER JOIN set_translations ON sets.`code` = set_translations.`setCode` WHERE set_translations.`translation` = 'Hauptset Zehnte Edition'
SELECT COUNT(DISTINCT s.`id`) FROM `sets` AS s INNER JOIN `set_translations` AS st ON s.`code` = st.`setCode` WHERE s.`block` = 'Ice Age' AND st.`language` = 'Italian'
SELECT COUNT(*) FROM sets AS T1 INNER JOIN cards AS T2 ON T1.id = T2.id WHERE T2.name = 'Adarkar Valkyrie' AND T1.isForeignOnly = 1
SELECT COUNT(sets.`id`) FROM `sets` INNER JOIN `set_translations` ON sets.`code` = set_translations.`setCode` WHERE set_translations.`language` = 'Italian' AND sets.`baseSetSize` < 10
SELECT COUNT(*) FROM `cards` WHERE `setCode` = 'Coldsnap' AND `borderColor` = 'black'
SELECT cards.`name` FROM `cards` INNER JOIN `sets` ON cards.`setCode` = sets.`code` WHERE sets.`name` = 'Coldsnap' AND cards.`convertedManaCost` = (SELECT MAX(`convertedManaCost`) FROM `cards` INNER JOIN `sets` ON cards.`setCode` = sets.`code` WHERE sets.`name` = 'Coldsnap')
SELECT DISTINCT cards.artist FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')
SELECT T1.name FROM `cards` AS T1 INNER JOIN `sets` AS T2 ON T1.setCode = T2.code WHERE T1.number = '4' AND T2.name = 'Coldsnap'
SELECT COUNT(*) FROM `cards` AS T1 INNER JOIN `sets` AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5 AND (T1.power IS NULL OR T1.power = '*')
SELECT T2.flavorText FROM `cards` AS T1 INNER JOIN `foreign_data` AS T2 ON T1.uuid = T2.uuid WHERE T1.`name` = 'Ancestor''s Chosen' AND T2.`language` = 'Italian'
SELECT DISTINCT foreign_data.`language` FROM `foreign_data` INNER JOIN `cards` ON foreign_data.`uuid` = cards.`uuid` WHERE cards.`name` = 'Ancestor''s Chosen' AND foreign_data.`flavorText` IS NOT NULL
SELECT foreign_data.`type` FROM foreign_data INNER JOIN cards ON foreign_data.`uuid` = cards.`uuid` WHERE foreign_data.`language` = 'German' AND cards.`name` = 'Ancestor''s Chosen'
SELECT T2.`text` FROM `foreign_data` AS T2 INNER JOIN `cards` AS T1 ON T2.`uuid` = T1.`uuid` INNER JOIN `sets` AS T3 ON T1.`setCode` = T3.`code` WHERE T2.`language` = 'Italian' AND T3.`name` = 'Coldsnap'
SELECT `foreign_data`.`name` FROM `cards` INNER JOIN `foreign_data` ON `cards`.`uuid` = `foreign_data`.`uuid` INNER JOIN `sets` ON `cards`.`setCode` = `sets`.`code` WHERE `sets`.`name` = 'Coldsnap' AND `foreign_data`.`language` = 'Italian' ORDER BY `cards`.`convertedManaCost` DESC LIMIT 1
SELECT rulings.`date` FROM rulings INNER JOIN cards ON rulings.`uuid` = cards.`uuid` WHERE cards.`name` = 'Reminisce'
SELECT CAST(SUM(CASE WHEN `cards`.`convertedManaCost` = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(1) FROM `cards` INNER JOIN `sets` ON `cards`.`setCode` = `sets`.`code` WHERE `sets`.`name` = 'Coldsnap'
SELECT CAST(SUM(CASE WHEN cards.cardKingdomFoilId = cards.cardKingdomId AND cards.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap'
SELECT `code` FROM `sets` WHERE `releaseDate` = '2017-07-14'
SELECT `keyruneCode` FROM `sets` WHERE `code` = 'PKHC'
SELECT `mcmId` FROM `sets` WHERE `code` = 'SS2'
SELECT `mcmName` FROM `sets` WHERE `releaseDate` = '2017-06-09'
SELECT sets.type FROM sets WHERE sets.name = 'From the Vault: Lore'
SELECT `parentCode` FROM `sets` WHERE `name` = 'Commander 2014 Oversized'
SELECT cards.`id`, cards.`name`, rulings.`text`, cards.`hasContentWarning` FROM `cards` INNER JOIN `rulings` ON cards.`uuid` = rulings.`uuid` WHERE cards.`artist` = 'Jim Pavelec'
SELECT S.`releaseDate` FROM `sets` AS S INNER JOIN `cards` AS C ON C.`setCode` = S.`code` WHERE C.`name` = 'Evacuation'
SELECT sets.baseSetSize FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.translation = 'Rinascita di Alara'
SELECT DISTINCT sets.`type` FROM sets INNER JOIN set_translations ON sets.`code` = set_translations.`setCode` WHERE set_translations.`translation` = 'Huitième édition'
SELECT ST.translation FROM `cards` AS C INNER JOIN `sets` AS S ON C.setCode = S.code INNER JOIN `set_translations` AS ST ON S.code = ST.setCode WHERE C.name = 'Tendo Ice Bridge' AND ST.language = 'French'
SELECT COUNT(*) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Salvat 2011' AND T1.translation IS NOT NULL
SELECT ST.`translation` FROM sets AS S INNER JOIN cards AS C ON S.`code` = C.`setCode` INNER JOIN set_translations AS ST ON S.`code` = ST.`setCode` WHERE C.`name` = 'Fellwar Stone' AND ST.`language` = 'Japanese'
SELECT `cards`.`name` FROM `cards` INNER JOIN `sets` ON `cards`.`setCode` = `sets`.`code` WHERE `sets`.`name` = 'Journey into Nyx Hero''s Path' ORDER BY `cards`.`convertedManaCost` DESC LIMIT 1
SELECT `sets`.`releaseDate` FROM `sets` INNER JOIN `set_translations` ON `sets`.`code` = `set_translations`.`setCode` WHERE `set_translations`.`translation` = 'Ola de frío'
SELECT DISTINCT sets.`type` FROM cards INNER JOIN sets ON cards.`setCode` = sets.`code` WHERE cards.`name` = 'Samite Pilgrim'
SELECT COUNT(cards.`id`) FROM `cards` INNER JOIN `sets` ON cards.`setCode` = sets.`code` WHERE sets.`name` = 'World Championship Decks 2004' AND cards.`convertedManaCost` = 3
SELECT T2.translation FROM `sets` AS T1 INNER JOIN `set_translations` AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Mirrodin' AND T2.language = 'Chinese Simplified'
SELECT CAST(SUM(CASE WHEN S.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code WHERE ST.language = 'Japanese'
SELECT CAST(SUM(CASE WHEN cards.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(foreign_data.id) AS percentage FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Portuguese (Brazil)';
SELECT DISTINCT cards.`availability` FROM cards WHERE cards.`artist` = 'Aleksi Briclot' AND cards.`isTextless` = 1
SELECT `id` FROM `sets` WHERE `baseSetSize` = (SELECT MAX(`baseSetSize`) FROM `sets`);
SELECT `artist` FROM `cards` WHERE `otherFaceIds` IS NULL ORDER BY `convertedManaCost` DESC LIMIT 1
SELECT MAX(`frameEffects`) AS most_common_frame_effect FROM `cards` WHERE `cardKingdomFoilId` IS NOT NULL AND `cardKingdomId` IS NOT NULL
SELECT COUNT(`id`) FROM `cards` WHERE `power` IS NULL AND `hasFoil` = 0 AND `duelDeck` = 'a'
SELECT `id` FROM `sets` WHERE `type` = 'commander' ORDER BY `totalSetSize` DESC LIMIT 1
SELECT `cards`.`name` FROM `cards` INNER JOIN `legalities` ON `cards`.`uuid` = `legalities`.`uuid` WHERE `legalities`.`format` = 'duel' ORDER BY `cards`.`convertedManaCost` DESC LIMIT 10
SELECT T1.`originalReleaseDate`, T2.`format` FROM `cards` AS T1 INNER JOIN `legalities` AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`rarity` = 'mythic' AND T1.`originalReleaseDate` = (SELECT MIN(`originalReleaseDate`) FROM `cards` WHERE `rarity` = 'mythic') AND T2.`status` = 'Legal'
SELECT COUNT(*) FROM `cards` AS T1 INNER JOIN `foreign_data` AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`artist` = 'Volkan Baga' AND T2.`language` = 'French'
SELECT COUNT(cards.`id`) FROM cards JOIN legalities ON cards.`uuid` = legalities.`uuid` WHERE cards.`rarity` = 'rare' AND cards.`type` = 'Enchantment' AND cards.`name` = 'Abundance' AND legalities.`status` = 'Legal'
SELECT T1.format, GROUP_CONCAT(T2.name) AS card_names FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'banned' GROUP BY T1.format ORDER BY COUNT(T1.uuid) DESC LIMIT 1
SELECT T2.language FROM set_translations AS T2 INNER JOIN sets AS T1 ON T2.setCode = T1.code WHERE T1.name = 'Battlebond'
SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = (SELECT artist FROM cards GROUP BY artist ORDER BY COUNT(*) ASC LIMIT 1) AND T2.uuid = T1.uuid
SELECT legalities.`status` FROM `cards` INNER JOIN `legalities` ON cards.`uuid` = legalities.`uuid` WHERE cards.`frameVersion` = '1997' AND cards.`artist` = 'D. Alexander Gregory' AND legalities.`format` = 'legacy' AND cards.`hasContentWarning` = 1
SELECT DISTINCT T1.name, T2.format FROM `cards` AS T1 INNER JOIN `legalities` AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'banned' AND T2.format IS NOT NULL
SELECT AVG(set_count) FROM (SELECT COUNT(DISTINCT sets.`id`) AS set_count FROM sets INNER JOIN set_translations ON sets.`code` = set_translations.`setCode` WHERE sets.`releaseDate` BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY set_translations.`language`);
SELECT DISTINCT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena'
SELECT DISTINCT `cards`.`uuid` FROM `legalities` WHERE `legalities`.`format` = 'oldschool' AND (`legalities`.`status` = 'banned' OR `legalities`.`status` = 'restricted')
SELECT COUNT(*) FROM `cards` WHERE `artist` = 'Matthew D. Wilson' AND `availability` = 'paper'
SELECT R.`text` FROM `cards` AS C INNER JOIN `rulings` AS R ON C.`uuid` = R.`uuid` WHERE C.`artist` = 'Kev Walker' ORDER BY R.`date` DESC
SELECT DISTINCT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN sets ON sets.id = legalities.id WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal'
SELECT DISTINCT s.name FROM sets AS s WHERE s.code IN (SELECT st.setCode FROM set_translations AS st WHERE st.language = 'Korean') AND s.code NOT IN (SELECT st.setCode FROM set_translations WHERE language = 'Japanese')
SELECT DISTINCT cards.`frameVersion`, cards.`artist` FROM cards LEFT JOIN legalities ON cards.`uuid` = legalities.`uuid` WHERE cards.`artist` = 'Allen Williams' OR legalities.`status` = 'banned'
SELECT `DisplayName`, `Reputation` FROM `users` WHERE `DisplayName` IN ('Harlan', 'Jarrod Dixon') ORDER BY `Reputation` DESC LIMIT 1
SELECT `DisplayName` FROM `users` WHERE STRFTIME('%Y', `CreationDate`) = '2014'
SELECT COUNT(`Id`) FROM `users` WHERE `LastAccessDate` > '2014-09-01 00:00:00'
SELECT `DisplayName` FROM `users` ORDER BY `Views` DESC LIMIT 1
SELECT COUNT(*) FROM `users` WHERE `UpVotes` > 100 AND `DownVotes` > 1;
SELECT COUNT(*) FROM `users` WHERE `Views` > 10 AND `CreationDate` > '2013-01-01'
SELECT COUNT(*) FROM `posts` WHERE `OwnerUserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'csgillespie')
SELECT posts.Title FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'csgillespie'
SELECT users.`DisplayName` FROM posts INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE posts.`Title` = 'Eliciting priors from experts'
SELECT T1.`Title` FROM `posts` AS T1 INNER JOIN `users` AS T2 ON T1.`OwnerUserId` = T2.`Id` WHERE T2.`DisplayName` = 'csgillespie' ORDER BY T1.`ViewCount` DESC LIMIT 1
SELECT users.`DisplayName` FROM `posts` JOIN `users` ON posts.`OwnerUserId` = users.`Id` WHERE posts.`FavoriteCount` = (SELECT MAX(`FavoriteCount`) FROM `posts`)
SELECT SUM(posts.`CommentCount`) FROM posts INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE users.`DisplayName` = 'csgillespie'
SELECT MAX(`AnswerCount`) FROM `posts` WHERE `OwnerUserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'csgillespie')
SELECT `users`.`DisplayName` FROM `posts` INNER JOIN `users` ON `posts`.`LastEditorUserId` = `users`.`Id` WHERE `posts`.`Title` = 'Examples for teaching: Correlation does not mean causation'
SELECT COUNT(*) FROM `posts` WHERE `OwnerUserId` = (SELECT `Id` FROM `users` WHERE `DisplayName` = 'csgillespie') AND `ParentId` IS NULL
SELECT DISTINCT users.`DisplayName` FROM posts INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE posts.`ClosedDate` IS NOT NULL
SELECT COUNT(*) FROM `posts` AS T1 INNER JOIN `users` AS T2 ON T1.`OwnerUserId` = T2.`Id` WHERE T2.`Age` > 65 AND T1.`Score` >= 20
SELECT users.`Location` FROM posts INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE posts.`Title` = 'Eliciting priors from experts'
SELECT posts.`Body` FROM tags INNER JOIN posts ON tags.`ExcerptPostId` = posts.`Id` WHERE tags.`TagName` = 'bayesian'
SELECT P.Body FROM posts AS P INNER JOIN tags AS T ON P.Id = T.ExcerptPostId WHERE T.Count = (SELECT MAX(Count) FROM tags)
SELECT COUNT(`badges`.`Id`) FROM `badges` INNER JOIN `users` ON `badges`.`UserId` = `users`.`Id` WHERE `users`.`DisplayName` = 'csgillespie'
SELECT T1.`Name` FROM `badges` AS T1 INNER JOIN `users` AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`DisplayName` = 'csgillespie';
SELECT COUNT(`badges`.`Id`) FROM `badges` INNER JOIN `users` ON `badges`.`UserId` = `users`.`Id` WHERE `users`.`DisplayName` = 'csgillespie' AND strftime('%Y', `badges`.`Date`) = '2011'
SELECT U.`DisplayName` FROM `users` AS U INNER JOIN `badges` AS B ON U.`Id` = B.`UserId` GROUP BY U.`Id` ORDER BY COUNT(B.`Id`) DESC LIMIT 1
SELECT AVG(posts.`Score`) FROM posts INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE users.`DisplayName` = 'csgillespie'
SELECT AVG(badge_count) FROM (SELECT COUNT(badges.Id) AS badge_count FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Views > 200 GROUP BY users.Id) AS badge_counts
SELECT CAST(SUM(CASE WHEN U.`Age` > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(P.`Id`) AS percentage FROM `posts` AS P INNER JOIN `users` AS U ON P.`OwnerUserId` = U.`Id` WHERE P.`Score` > 20
SELECT COUNT(`Id`) FROM `votes` WHERE `UserId` = 58 AND `CreationDate` = '2010-07-19'
SELECT CreationDate FROM votes GROUP BY PostId ORDER BY COUNT(Id) DESC LIMIT 1;
SELECT COUNT(`Id`) FROM `badges` WHERE `Name` = 'Revival'
SELECT T2.Title FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score = (SELECT MAX(Score) FROM comments)
SELECT COUNT(comments.`Id`) FROM comments INNER JOIN posts ON comments.`PostId` = posts.`Id` WHERE posts.`ViewCount` = 1910
SELECT posts.`FavoriteCount` FROM comments INNER JOIN posts ON comments.`PostId` = posts.`Id` WHERE comments.`UserId` = 3025 AND comments.`CreationDate` = '2014-04-23 20:29:39.0'
SELECT `comments`.`Text` FROM `comments` INNER JOIN `posts` ON `comments`.`PostId` = `posts`.`Id` WHERE `posts`.`ParentId` = 107829 LIMIT 1
SELECT CASE WHEN posts.`ClosedDate` IS NULL THEN 'No' ELSE 'Yes' END AS `WellFinished` FROM comments INNER JOIN posts ON comments.`PostId` = posts.`Id` WHERE comments.`UserId` = '23853' AND comments.`CreationDate` = '2013-07-12 09:08:18.0'
SELECT users.`Reputation` FROM users INNER JOIN posts ON users.`Id` = posts.`OwnerUserId` WHERE posts.`Id` = 65041
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini')
SELECT `users`.`DisplayName` FROM `votes` INNER JOIN `users` ON `votes`.`UserId` = `users`.`Id` WHERE `votes`.`Id` = 6347
SELECT COUNT(votes.`Id`) FROM votes INNER JOIN posts ON votes.`PostId` = posts.`Id` WHERE posts.`Title` LIKE '%data visualization%';
SELECT T1.`Name` FROM `badges` AS T1 INNER JOIN `users` AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`DisplayName` = 'DatEpicCoderGuyWhoPrograms'
SELECT COUNT(posts.`Id`) * 1.0 / COUNT(votes.`Id`) AS PostVoteRatio FROM `posts` LEFT JOIN `votes` ON posts.`Id` = votes.`PostId` WHERE posts.`OwnerUserId` = 24
SELECT `ViewCount` FROM `posts` WHERE `Title` = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'
SELECT `Text` FROM `comments` WHERE `Score` = 17
SELECT `DisplayName` FROM `users` WHERE `WebsiteUrl` = 'http://stackoverflow.com'
SELECT DISTINCT T1.`Name` FROM `badges` AS T1 INNER JOIN `users` AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`DisplayName` = 'SilentGhost'
SELECT users.`DisplayName` FROM comments INNER JOIN users ON comments.`UserId` = users.`Id` WHERE comments.`Text` = 'thank you user93!'
SELECT comments.`Text` FROM comments JOIN users ON comments.`UserId` = users.`Id` WHERE users.`DisplayName` = 'A Lion'
SELECT users.`DisplayName`, users.`Reputation` FROM posts INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE posts.`Title` = 'Understanding what Dassault iSight is doing?'
SELECT comments.`Text` FROM comments INNER JOIN posts ON comments.`PostId` = posts.`Id` WHERE posts.`Title` = 'How does gentle boosting differ from AdaBoost?'
SELECT DISTINCT users.DisplayName FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Name = 'Necromancer' LIMIT 10
SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.LastEditorUserId WHERE T2.Title = 'Open source tools for visualizing multi-dimensional data'
SELECT posts.Title FROM posts WHERE posts.LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'Vebjorn Ljosa')
SELECT SUM(posts.`Score`) AS total_score, users.`WebsiteUrl` FROM posts INNER JOIN users ON posts.`LastEditorUserId` = users.`Id` WHERE users.`DisplayName` = 'Yevgeny'
SELECT comments.`Text` FROM comments INNER JOIN posts ON comments.`PostId` = posts.`Id` WHERE posts.`Title` = 'Why square the difference instead of taking the absolute value in standard deviation?'
SELECT SUM(votes.BountyAmount) FROM votes INNER JOIN posts ON votes.PostId = posts.Id WHERE posts.Title LIKE '%data%'
SELECT DISTINCT U.`DisplayName` FROM `votes` AS V INNER JOIN `posts` AS P ON V.`PostId` = P.`Id` INNER JOIN `users` AS U ON V.`UserId` = U.`Id` WHERE V.`BountyAmount` = 50 AND P.`Title` LIKE '%variance%'
SELECT AVG(`posts`.`ViewCount`), `posts`.`Title`, `comments`.`Text`, `comments`.`Score` FROM `posts` LEFT JOIN `comments` ON `comments`.`PostId` = `posts`.`Id` WHERE `posts`.`Tags` LIKE '%<humor>%'
SELECT COUNT(*) FROM comments WHERE UserId = 13
SELECT `Id` FROM `users` WHERE `Reputation` = (SELECT MAX(`Reputation`) FROM `users`)
SELECT `Id` FROM `users` ORDER BY `Views` ASC LIMIT 1
SELECT COUNT(DISTINCT badges.`UserId`) FROM badges WHERE badges.`Name` = 'Supporter' AND strftime('%Y', badges.`Date`) = '2011'
SELECT COUNT(T1.UserId) FROM (SELECT T2.UserId FROM badges AS T2 GROUP BY T2.UserId HAVING COUNT(T2.Id) > 5) AS T1
SELECT COUNT(DISTINCT badges.`UserId`) FROM badges INNER JOIN users ON badges.`UserId` = users.`Id` WHERE badges.`Name` IN ('Teacher', 'Supporter') AND users.`Location` = 'New York'
SELECT users.`DisplayName`, users.`Reputation` FROM posts INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE posts.`Id` = 1
SELECT T1.OwnerUserId FROM posts AS T1 LEFT JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount >= 1000 GROUP BY T1.OwnerUserId HAVING COUNT(T2.Id) = 1 AND COUNT(T2.Id) IS NOT NULL
SELECT u.`Id`, b.`Name` FROM users AS u INNER JOIN comments AS c ON u.`Id` = c.`UserId` LEFT JOIN badges AS b ON u.`Id` = b.`UserId` GROUP BY u.`Id` ORDER BY COUNT(c.`Id`) DESC
SELECT COUNT(*) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Teacher' AND T2.Location = 'India'
SELECT (CAST(COUNT(CASE WHEN strftime('%Y', `Date`) = '2010' THEN 1 END) AS REAL) * 100 / COUNT(*)) - (CAST(COUNT(CASE WHEN strftime('%Y', `Date`) = '2011' THEN 1 END) AS REAL) * 100 / COUNT(*)) AS percentage_difference FROM `badges` WHERE `Name` = 'Students'
SELECT postHistory.`PostHistoryTypeId`, COUNT(DISTINCT comments.`UserId`) AS unique_user_count FROM postHistory LEFT JOIN comments ON postHistory.`PostId` = comments.`PostId` WHERE postHistory.`PostId` = 3720 GROUP BY postHistory.`PostHistoryTypeId`
SELECT posts.`Id`, posts.`ViewCount` FROM posts INNER JOIN postLinks ON posts.`Id` = postLinks.`RelatedPostId` WHERE postLinks.`PostId` = 61217
SELECT posts.Score, postLinks.LinkTypeId FROM posts INNER JOIN postLinks ON posts.Id = postLinks.PostId WHERE posts.Id = 395
SELECT posts.`Id` AS post_id, posts.`OwnerUserId` AS user_id FROM `posts` WHERE posts.`Score` > 60
SELECT SUM(posts.FavoriteCount) FROM posts AS posts WHERE posts.OwnerUserId = 686 AND strftime('%Y', posts.CreaionDate) = '2011'
SELECT CAST(SUM(users.`UpVotes`) AS REAL) / COUNT(users.`Id`) AS average_up_votes, CAST(SUM(users.`Age`) AS REAL) / COUNT(users.`Id`) AS average_age FROM users INNER JOIN posts ON users.`Id` = posts.`OwnerUserId` GROUP BY users.`Id` HAVING COUNT(posts.`Id`) > 10
SELECT COUNT(DISTINCT `UserId`) FROM `badges` WHERE `Name` = 'Announcer'
SELECT T1.`Name` FROM `badges` AS T1 WHERE T1.`Date` LIKE '2010-07-19 19:39:%'
SELECT COUNT(Id) FROM comments WHERE Score > 60
SELECT `Text` FROM `comments` WHERE `CreationDate` = '2010-07-19 19:25:47.0'
SELECT COUNT(*) FROM `posts` WHERE `Score` = 10;
SELECT DISTINCT B.`Name` FROM `badges` AS B INNER JOIN `users` AS U ON B.`UserId` = U.`Id` WHERE U.`Reputation` = (SELECT MAX(`Reputation`) FROM `users`)
SELECT users.Reputation FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE badges.Date = '2010-07-19 19:39:08.0'
SELECT DISTINCT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Pierre'
SELECT DISTINCT badges.`Date` FROM `badges` INNER JOIN `users` ON badges.`UserId` = users.`Id` WHERE users.`Location` = 'Rochester, NY'
SELECT CAST(COUNT(DISTINCT T1.`UserId`) AS REAL) * 100 / (SELECT COUNT(DISTINCT `Id`) FROM `users`) AS percentage FROM `badges` AS T1 WHERE T1.`Name` = 'Teacher'
SELECT CAST(COUNT(CASE WHEN U.`Age` BETWEEN 13 AND 18 THEN 1 END) AS REAL) * 100 / COUNT(U.`Id`) AS percentage FROM badges AS B INNER JOIN users AS U ON B.`UserId` = U.`Id` WHERE B.`Name` = 'Organizer'
SELECT `comments`.`Score` FROM `comments` INNER JOIN `posts` ON `comments`.`PostId` = `posts`.`Id` WHERE `posts`.`Id` IN (SELECT `Id` FROM `posts` WHERE `CreationDate` = '2010-07-19 19:19:56.0')
SELECT `Text` FROM `comments` WHERE `CreationDate` = '2010-07-19 19:37:33.0'
SELECT users.Age FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Location = 'Vienna, Austria'
SELECT COUNT(DISTINCT U.`Id`) FROM `users` AS U INNER JOIN `badges` AS B ON U.`Id` = B.`UserId` WHERE B.`Name` = 'Supporter' AND U.`Age` BETWEEN 19 AND 65
SELECT SUM(users.`Views`) FROM badges INNER JOIN users ON badges.`UserId` = users.`Id` WHERE badges.`Date` = '2010-07-19 19:39:08.0'
SELECT T1.`Name` FROM `badges` AS T1 INNER JOIN `users` AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`Reputation` = (SELECT MIN(`Reputation`) FROM `users`);
SELECT DISTINCT T1.`Name` FROM `badges` AS T1 INNER JOIN `users` AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`DisplayName` = 'Sharpie'
SELECT COUNT(badges.`Id`) FROM badges INNER JOIN users ON badges.`UserId` = users.`Id` WHERE badges.`Name` = 'Supporter' AND users.`Age` > 65
SELECT `DisplayName` FROM `users` WHERE `Id` = 30
SELECT COUNT(*) FROM `users` WHERE `Location` = 'New York, NY'
SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2010';
SELECT COUNT(*) FROM `users` WHERE `Age` BETWEEN 19 AND 65
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT CAST(COUNT(CASE WHEN strftime('%Y', `CreationDate`) = '2010' THEN `Id` ELSE NULL END) AS REAL) / COUNT(CASE WHEN strftime('%Y', `CreationDate`) = '2011' THEN `Id` ELSE NULL END) FROM `votes`
SELECT DISTINCT T2.TagName FROM users AS T1 INNER JOIN posts AS T3 ON T1.Id = T3.OwnerUserId INNER JOIN tags AS T2 ON T3.Tags LIKE '%' || T2.TagName || '%' WHERE T1.DisplayName = 'John Stauffer' AND T3.Tags IS NOT NULL AND T3.Tags <> '' AND T2.TagName IS NOT NULL
SELECT COUNT(*) FROM `posts` AS T1 INNER JOIN `users` AS T2 ON T1.`OwnerUserId` = T2.`Id` WHERE T2.`DisplayName` = 'Daniel Vassallo'
SELECT COUNT(*) FROM `votes` AS T1 INNER JOIN `users` AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`DisplayName` = 'Harlan'
SELECT `posts`.`Id` FROM `posts` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` WHERE `users`.`DisplayName` = 'slashnick' ORDER BY `posts`.`AnswerCount` DESC LIMIT 1
SELECT T.`Title` FROM `posts` AS T INNER JOIN `users` AS U ON T.`OwnerUserId` = U.`Id` WHERE U.`DisplayName` IN ('Harvey Motulsky', 'Noah Snyder') ORDER BY T.`ViewCount` DESC LIMIT 1
SELECT COUNT(posts.`Id`) FROM posts JOIN users ON posts.`OwnerUserId` = users.`Id` JOIN votes ON posts.`Id` = votes.`PostId` WHERE users.`DisplayName` = 'Matt Parker' GROUP BY posts.`Id` HAVING COUNT(votes.`Id`) > 4;
SELECT COUNT(comments.`Id`) FROM comments INNER JOIN posts ON comments.`PostId` = posts.`Id` INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE comments.`Score` < 60 AND users.`DisplayName` = 'Neil McGuigan'
SELECT DISTINCT T2.TagName FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Tags LIKE '%' || T2.TagName || '%' WHERE T1.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Mark Meckes') AND T1.CommentCount = 0
SELECT users.`DisplayName` FROM badges INNER JOIN users ON badges.`UserId` = users.`Id` WHERE badges.`Name` = 'Organizer'
SELECT CAST(COUNT(CASE WHEN T2.TagName = 'r' THEN T1.Id END) AS REAL) * 100 / COUNT(T1.Id) AS percentage FROM `posts` AS T1 INNER JOIN `tags` AS T2 ON T1.Id = T2.ExcerptPostId WHERE T1.OwnerDisplayName = 'Community'
SELECT SUM(CASE WHEN u.`DisplayName` = 'Mornington' THEN p.`ViewCount` ELSE 0 END) - SUM(CASE WHEN u.`DisplayName` = 'Amos' THEN p.`ViewCount` ELSE 0 END) FROM `posts` p INNER JOIN `users` u ON p.`OwnerUserId` = u.`Id`
SELECT COUNT(DISTINCT badges.`UserId`) FROM badges WHERE badges.`Name` = 'commentator' AND strftime('%Y', badges.`Date`) = '2014'
SELECT COUNT(`Id`) FROM `posts` WHERE `CreaionDate` BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'
SELECT users.`DisplayName`, users.`Age` FROM users INNER JOIN posts ON users.`Id` = posts.`OwnerUserId` WHERE posts.`ViewCount` = (SELECT MAX(`ViewCount`) FROM posts)
SELECT `posts`.`LastEditDate`, `posts`.`LastEditorUserId` FROM `posts` WHERE `posts`.`Title` = 'Detecting a given face in a database of facial images'
SELECT COUNT(*) FROM `comments` WHERE `UserId` = 13 AND `Score` < 60
SELECT P.`Title`, C.`UserDisplayName` FROM `posts` AS P INNER JOIN `comments` AS C ON P.`Id` = C.`PostId` WHERE C.`Score` > 60
SELECT DISTINCT badges.`Name` FROM `badges` INNER JOIN `users` ON badges.`UserId` = users.`Id` WHERE strftime('%Y', badges.`Date`) = '2011' AND users.`Location` = 'North Pole'
SELECT users.`DisplayName`, users.`WebsiteUrl` FROM posts INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE posts.`FavoriteCount` > 150
SELECT COUNT(ph.`Id`) AS post_history_count, p.`LastEditDate` FROM `postHistory` AS ph INNER JOIN `posts` AS p ON ph.`PostId` = p.`Id` WHERE p.`Title` = 'What is the best introductory Bayesian statistics textbook?'
SELECT U.LastAccessDate, U.Location FROM `users` AS U INNER JOIN `badges` AS B ON U.Id = B.UserId WHERE B.Name = 'Outliers' AND U.Id IS NOT NULL
SELECT `Title` FROM `posts` WHERE `Body` LIKE '%monitoring%' AND `Body` LIKE '%value%' AND `Body` LIKE '%over time%'
SELECT posts.`Id`, badges.`Name` FROM badges INNER JOIN users ON badges.`UserId` = users.`Id` INNER JOIN posts ON users.`Id` = posts.`OwnerUserId` WHERE users.`DisplayName` = 'Samuel' AND strftime('%Y', posts.`CreaionDate`) = '2013' AND strftime('%Y', badges.`Date`) = '2013'
SELECT OwnerDisplayName FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts)
SELECT users.`DisplayName`, users.`Location` FROM tags INNER JOIN posts ON tags.`ExcerptPostId` = posts.`Id` INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE tags.`TagName` = 'hypothesis-testing'
SELECT posts.Title, postLinks.LinkTypeId FROM posts INNER JOIN postLinks ON posts.Id = postLinks.PostId WHERE posts.Title = 'What are principal component scores?'
SELECT u.`DisplayName` FROM `posts` AS p INNER JOIN `users` AS u ON p.`OwnerUserId` = u.`Id` WHERE p.`ParentId` IS NOT NULL AND p.`Score` = (SELECT MAX(`Score`) FROM `posts` WHERE `ParentId` IS NOT NULL)
SELECT users.`DisplayName`, users.`WebsiteUrl` FROM votes INNER JOIN users ON votes.`UserId` = users.`Id` WHERE votes.`VoteTypeId` = 8 AND votes.`BountyAmount` = (SELECT MAX(`BountyAmount`) FROM votes WHERE `VoteTypeId` = 8)
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5
SELECT COUNT(*) FROM `tags` WHERE `Count` BETWEEN 5000 AND 7000
SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)
SELECT `Age` FROM `users` WHERE `Reputation` = (SELECT MAX(`Reputation`) FROM `users`)
SELECT COUNT(DISTINCT posts.Id) FROM posts INNER JOIN votes ON posts.Id = votes.PostId WHERE strftime('%Y', posts.CreaionDate) = '2011' AND votes.BountyAmount = 50
SELECT `Id` FROM `users` WHERE `Age` = (SELECT MIN(`Age`) FROM `users` WHERE `Age` IS NOT NULL)
SELECT P.Score FROM posts AS P INNER JOIN tags AS T ON P.Tags LIKE '%' || T.TagName || '%' WHERE T.Count = (SELECT MAX(Count) FROM tags)
SELECT CAST(COUNT(`postLinks`.`Id`) AS REAL) / 12 FROM `postLinks` JOIN `posts` ON `postLinks`.`PostId` = `posts`.`Id` WHERE strftime('%Y', `postLinks`.`CreationDate`) = '2010' AND `posts`.`AnswerCount` <= 2
SELECT posts.`Id` FROM votes JOIN posts ON votes.`PostId` = posts.`Id` WHERE votes.`UserId` = 1465 ORDER BY posts.`FavoriteCount` DESC LIMIT 1
SELECT posts.Title FROM posts INNER JOIN postLinks ON posts.Id = postLinks.PostId WHERE postLinks.CreationDate = (SELECT MIN(CreationDate) FROM postLinks)
SELECT users.DisplayName FROM users INNER JOIN badges ON users.Id = badges.UserId GROUP BY users.Id ORDER BY COUNT(badges.Name) DESC LIMIT 1
SELECT MIN(votes.`CreationDate`) FROM votes INNER JOIN users ON votes.`UserId` = users.`Id` WHERE users.`DisplayName` = 'chl'
SELECT MIN(`posts`.`CreaionDate`) FROM `posts` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` WHERE `users`.`Age` = (SELECT MIN(`Age`) FROM `users` WHERE `Age` IS NOT NULL)
SELECT `users`.`DisplayName` FROM `badges` INNER JOIN `users` ON `badges`.`UserId` = `users`.`Id` WHERE `badges`.`Name` = 'Autobiographer' AND `badges`.`Date` = (SELECT MIN(`Date`) FROM `badges` WHERE `Name` = 'Autobiographer')
SELECT COUNT(DISTINCT users.`Id`) FROM `users` INNER JOIN `posts` ON users.`Id` = posts.`OwnerUserId` WHERE users.`Location` = 'United Kingdom' AND posts.`FavoriteCount` >= 4
SELECT AVG(T1.`PostId`) FROM votes AS T1 INNER JOIN users AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`Age` = (SELECT MAX(`Age`) FROM users)
SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)
SELECT COUNT(`Id`) FROM `users` WHERE `Reputation` > 2000 AND `Views` > 1000
SELECT `DisplayName` FROM `users` WHERE `Age` BETWEEN 19 AND 65
SELECT COUNT(`posts`.`Id`) FROM `posts` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` WHERE `users`.`DisplayName` = 'Jay Stevens' AND strftime('%Y', `posts`.`CreaionDate`) = '2010'
SELECT posts.`Id`, posts.`Title` FROM posts INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE users.`DisplayName` = 'Harvey Motulsky' ORDER BY posts.`ViewCount` DESC LIMIT 1
SELECT posts.Id, posts.Title FROM posts ORDER BY posts.Score DESC LIMIT 1;
SELECT AVG(posts.`Score`) FROM posts INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE users.`DisplayName` = 'Stephen Turner'
SELECT DISTINCT `users`.`DisplayName` FROM `posts` INNER JOIN `users` ON `posts`.`OwnerUserId` = `users`.`Id` WHERE `posts`.`ViewCount` > 20000 AND strftime('%Y', `posts`.`CreationDate`) = '2011'
SELECT `Id`, `OwnerDisplayName` FROM `posts` WHERE `FavoriteCount` = (SELECT MAX(`FavoriteCount`) FROM `posts` WHERE strftime('%Y', `CreationDate`) = '2010')
SELECT CAST(COUNT(CASE WHEN users.`CreationDate` BETWEEN '2011-01-01' AND '2011-12-31' AND users.`Reputation` > 1000 THEN posts.`Id` END) AS REAL) * 100 / COUNT(posts.`Id`) AS percentage FROM posts INNER JOIN users ON posts.`OwnerUserId` = users.`Id`
SELECT (COUNT(CASE WHEN `Age` BETWEEN 13 AND 19 THEN 1 END) * 100.0) / COUNT(`Id`) AS percentage FROM `users`
SELECT `posts`.`ViewCount`, `users`.`DisplayName` FROM `posts` INNER JOIN `users` ON `posts`.`LastEditorUserId` = `users`.`Id` WHERE `posts`.`Title` = 'Computer Game Datasets'
SELECT COUNT(*) AS total_posts FROM `posts` WHERE `ViewCount` > (SELECT AVG(`ViewCount`) FROM `posts`);
SELECT COUNT(*) FROM `comments` WHERE `PostId` = (SELECT `Id` FROM `posts` ORDER BY `Score` DESC LIMIT 1)
SELECT COUNT(*) FROM `posts` WHERE `ViewCount` > 35000 AND `CommentCount` = 0
SELECT U.DisplayName, U.Location FROM users AS U INNER JOIN posts AS P ON U.Id = P.LastEditorUserId WHERE P.Id = 183 AND P.LastEditDate = (SELECT MAX(LastEditDate) FROM posts WHERE Id = 183)
SELECT T1.`Name` FROM `badges` AS T1 INNER JOIN `users` AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`DisplayName` = 'Emmett' AND T1.`Date` = (SELECT MAX(`Date`) FROM `badges` WHERE `UserId` = T2.`Id`)
SELECT COUNT(`users`.`Id`) FROM `users` WHERE `users`.`Age` BETWEEN 19 AND 65 AND `users`.`UpVotes` > 5000
SELECT JULIANDAY(badges.`Date`) - JULIANDAY(users.`CreationDate`) AS days_taken FROM badges INNER JOIN users ON badges.`UserId` = users.`Id` WHERE users.`DisplayName` = 'Zolomon'
SELECT COUNT(DISTINCT posts.Id) AS post_count, COUNT(DISTINCT comments.Id) AS comment_count FROM users LEFT JOIN posts ON users.Id = posts.OwnerUserId LEFT JOIN comments ON comments.UserId = users.Id WHERE users.CreationDate = (SELECT MAX(CreationDate) FROM users)
SELECT comments.`Text`, users.`DisplayName` FROM comments INNER JOIN posts ON comments.`PostId` = posts.`Id` INNER JOIN users ON comments.`UserId` = users.`Id` WHERE posts.`Title` = 'Analysing wind data with R' AND comments.`CreationDate` = (SELECT MAX(`CreationDate`) FROM comments WHERE `PostId` = posts.`Id`);
SELECT COUNT(DISTINCT `UserId`) FROM `badges` WHERE `Name` = 'Citizen Patrol'
SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN tags AS T2 ON T1.Tags LIKE '%' || T2.TagName || '%' WHERE T2.TagName = 'careers'
SELECT users.Reputation, users.Views FROM users WHERE users.DisplayName = 'Jarrod Dixon'
SELECT COUNT(DISTINCT C.Id) AS CommentCount, COUNT(DISTINCT A.Id) AS AnswerCount FROM comments AS C LEFT JOIN posts AS P ON C.PostId = P.Id LEFT JOIN posts AS A ON P.Id = A.ParentId WHERE P.Title = 'Clustering 1D data'
SELECT `CreationDate` FROM `users` WHERE `DisplayName` = 'IrishStat'
SELECT COUNT(DISTINCT posts.`Id`) FROM posts INNER JOIN votes ON posts.`Id` = votes.`PostId` WHERE votes.`BountyAmount` >= 30
SELECT CAST(COUNT(CASE WHEN posts.`Score` >= 50 THEN 1 END) AS REAL) * 100 / COUNT(posts.`Id`) AS percentage FROM posts INNER JOIN users ON posts.`OwnerUserId` = users.`Id` WHERE users.`Reputation` = (SELECT MAX(`Reputation`) FROM users)
SELECT COUNT(*) FROM `posts` WHERE `Score` < 20
SELECT COUNT(tags.`Id`) FROM `tags` WHERE tags.`Id` < 15 AND tags.`Count` <= 20
SELECT `ExcerptPostId`, `WikiPostId` FROM `tags` WHERE `TagName` = 'sample'
SELECT users.`Reputation`, users.`UpVotes` FROM comments INNER JOIN users ON comments.`UserId` = users.`Id` WHERE comments.`Text` = 'fine, you win :)'
SELECT C.`Text` FROM `comments` AS C INNER JOIN `posts` AS P ON C.`PostId` = P.`Id` WHERE P.`Title` LIKE '%linear regression%';
SELECT comments.`Text` FROM comments INNER JOIN posts ON comments.`PostId` = posts.`Id` WHERE posts.`ViewCount` BETWEEN 100 AND 150 ORDER BY comments.`Score` DESC LIMIT 1
SELECT comments.`CreationDate`, users.`Age` FROM comments INNER JOIN users ON comments.`UserId` = users.`Id` WHERE comments.`Text` LIKE '%http://%'
SELECT COUNT(DISTINCT posts.`Id`) FROM comments INNER JOIN posts ON comments.`PostId` = posts.`Id` WHERE comments.`Score` = 0 AND posts.`ViewCount` < 5
SELECT COUNT(comments.`Id`) FROM `posts` INNER JOIN `comments` ON posts.`Id` = comments.`PostId` WHERE posts.`CommentCount` = 1 AND comments.`Score` = 0
SELECT COUNT(DISTINCT users.`Id`) FROM comments INNER JOIN users ON comments.`UserId` = users.`Id` WHERE comments.`Score` = 0 AND users.`Age` = 40
SELECT posts.`Id`, comments.`Text` FROM posts INNER JOIN comments ON posts.`Id` = comments.`PostId` WHERE posts.`Title` = 'Group differences on a five point Likert item'
SELECT users.`UpVotes` FROM comments INNER JOIN users ON comments.`UserId` = users.`Id` WHERE comments.`Text` = 'R is also lazy evaluated.'
SELECT comments.`Text` FROM comments JOIN users ON comments.`UserId` = users.`Id` WHERE users.`DisplayName` = 'Harvey Motulsky'
SELECT DISTINCT users.`DisplayName` FROM `comments` JOIN `users` ON comments.`UserId` = users.`Id` WHERE comments.`Score` BETWEEN 1 AND 5 AND users.`DownVotes` = 0
SELECT CAST(COUNT(CASE WHEN users.UpVotes = 0 THEN 1 END) AS REAL) * 100 / COUNT(*) AS percentage FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score BETWEEN 5 AND 10;
SELECT superpower.`power_name` FROM superhero INNER JOIN hero_power ON superhero.`id` = hero_power.`hero_id` INNER JOIN superpower ON hero_power.`power_id` = superpower.`id` WHERE superhero.`superhero_name` = '3-D Man'
SELECT COUNT(DISTINCT T1.`id`) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN superpower AS T3 ON T2.`power_id` = T3.`id` WHERE T3.`power_name` = 'Super Strength'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200
SELECT `superhero`.`full_name` FROM `superhero` INNER JOIN `hero_power` ON `superhero`.`id` = `hero_power`.`hero_id` GROUP BY `superhero`.`full_name` HAVING COUNT(`hero_power`.`power_id`) > 15
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.skin_colour_id = C.id WHERE S.superhero_name = 'Apocalypse'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility'
SELECT T1.`superhero_name` FROM `superhero` AS T1 INNER JOIN `colour` AS T2 ON T1.`eye_colour_id` = T2.`id` INNER JOIN `colour` AS T3 ON T1.`hair_colour_id` = T3.`id` WHERE T2.`colour` = 'Blue' AND T3.`colour` = 'Blond'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue'
SELECT AVG(`superhero`.`height_cm`) FROM `superhero` INNER JOIN `publisher` ON `superhero`.`publisher_id` = `publisher`.`id` WHERE `publisher`.`publisher_name` = 'Marvel Comics'
SELECT CAST(SUM(CASE WHEN T3.power_name = 'Super Strength' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id INNER JOIN superpower AS T3 ON T4.power_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value ASC LIMIT 1
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'
SELECT COUNT(*) FROM `superhero` AS T1 INNER JOIN `colour` AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'
SELECT T1.`superhero_name`, T1.`full_name` FROM `superhero` AS T1 INNER JOIN `hero_attribute` AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN `attribute` AS T3 ON T2.`attribute_id` = T3.`id` WHERE T3.`attribute_name` = 'Intelligence' AND T2.`attribute_value` = (SELECT MIN(`attribute_value`) FROM `hero_attribute` AS T4 INNER JOIN `attribute` AS T5 ON T4.`attribute_id` = T5.`id` WHERE T5.`attribute_name` = 'Intelligence')
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50
SELECT DISTINCT T1.`superhero_name` FROM `superhero` AS T1 INNER JOIN `hero_power` AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN `superpower` AS T3 ON T2.`power_id` = T3.`id` WHERE T3.`power_name` = 'Death Touch'
SELECT COUNT(DISTINCT T1.`id`) FROM `superhero` AS T1 INNER JOIN `gender` AS T2 ON T1.`gender_id` = T2.`id` INNER JOIN `hero_attribute` AS T3 ON T1.`id` = T3.`hero_id` INNER JOIN `attribute` AS T4 ON T3.`attribute_id` = T4.`id` WHERE T2.`gender` = 'Female' AND T4.`attribute_name` = 'Strength' AND T3.`attribute_value` = 100
SELECT T1.`superhero_name` FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.`id` = T2.`hero_id` GROUP BY T1.`superhero_name` ORDER BY COUNT(T2.`power_id`) DESC LIMIT 1
SELECT COUNT(`superhero`.`id`) FROM `superhero` INNER JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `race`.`race` = 'Vampire'
SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Bad' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) AS percentage, COUNT(CASE WHEN T3.alignment = 'Bad' AND T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS marvel_count FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id
SELECT COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE NULL END) AS difference FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id
SELECT id FROM publisher WHERE publisher_name = 'Star Trek'
SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id
SELECT COUNT(*) FROM `superhero` WHERE `full_name` IS NULL
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'
SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2
SELECT DISTINCT SP.`power_name` FROM `superhero` AS SH INNER JOIN `gender` AS G ON SH.`gender_id` = G.`id` INNER JOIN `hero_power` AS HP ON SH.`id` = HP.`hero_id` INNER JOIN `superpower` AS SP ON HP.`power_id` = SP.`id` WHERE G.`gender` = 'Male' LIMIT 5
SELECT T1.`superhero_name` FROM `superhero` AS T1 INNER JOIN `race` AS T2 ON T1.`race_id` = T2.`id` WHERE T2.`race` = 'Alien'
SELECT `superhero`.`superhero_name` FROM `superhero` WHERE `superhero`.`height_cm` BETWEEN 170 AND 190 AND `superhero`.`eye_colour_id` = 1
SELECT T2.`power_name` FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.`power_id` = T2.`id` WHERE T1.`hero_id` = 56
SELECT DISTINCT `superhero`.`full_name` FROM `superhero` INNER JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `race`.`race` = 'Demi-God' LIMIT 5
SELECT COUNT(*) FROM `superhero` WHERE `alignment_id` = 2
SELECT R.race FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id WHERE S.weight_kg = 169
SELECT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'
SELECT c.colour FROM superhero AS s INNER JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.weight_kg = (SELECT MAX(weight_kg) FROM superhero)
SELECT CAST(COUNT(CASE WHEN T1.height_cm BETWEEN 150 AND 180 AND T2.publisher_name = 'Marvel Comics' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id
SELECT superhero.full_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero);
SELECT T2.`power_name` FROM superpower AS T2 INNER JOIN hero_power AS T1 ON T2.`id` = T1.`power_id` GROUP BY T2.`power_name` ORDER BY COUNT(T1.`hero_id`) DESC LIMIT 1
SELECT HA.`attribute_value` FROM `superhero` AS S INNER JOIN `hero_attribute` AS HA ON S.`id` = HA.`hero_id` WHERE S.`superhero_name` = 'Abomination'
SELECT T2.`power_name` FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.`power_id` = T2.`id` WHERE T1.`hero_id` = 1
SELECT COUNT(DISTINCT T1.`id`) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN superpower AS T3 ON T2.`power_id` = T3.`id` WHERE T3.`power_name` = 'stealth'
SELECT T1.`full_name` FROM `superhero` AS T1 INNER JOIN `hero_attribute` AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN `attribute` AS T3 ON T2.`attribute_id` = T3.`id` WHERE T3.`attribute_name` = 'Strength' AND T2.`attribute_value` = (SELECT MAX(`attribute_value`) FROM `hero_attribute` AS T4 INNER JOIN `attribute` AS T5 ON T4.`attribute_id` = T5.`id` WHERE T5.`attribute_name` = 'Strength')
SELECT CAST(COUNT(`superhero`.`id`) AS REAL) / SUM(`superhero`.`skin_colour_id` = 1) AS average FROM `superhero`
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'
SELECT T1.`superhero_name` FROM `superhero` AS T1 INNER JOIN `hero_attribute` AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN `attribute` AS T3 ON T2.`attribute_id` = T3.`id` INNER JOIN `publisher` AS T4 ON T1.`publisher_id` = T4.`id` WHERE T3.`attribute_name` = 'Durability' AND T4.`publisher_name` = 'Dark Horse Comics' AND T2.`attribute_value` = (SELECT MAX(T5.`attribute_value`) FROM `hero_attribute` AS T5 INNER JOIN `superhero` AS T6 ON T5.`hero_id` = T6.`id` INNER JOIN `publisher` AS T7 ON T6.`publisher_id` = T7.`id` INNER JOIN `attribute` AS T8 ON T5.`attribute_id` = T8.`id` WHERE T8.`attribute_name` = 'Durability' AND T7.`publisher_name` = 'Dark Horse Comics')
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.full_name = 'Abraham Sapien'
SELECT T1.`superhero_name` FROM `superhero` AS T1 INNER JOIN `hero_power` AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN `superpower` AS T3 ON T2.`power_id` = T3.`id` WHERE T3.`power_name` = 'Flight'
SELECT C1.colour AS eye_colour, C2.colour AS hair_colour, C3.colour AS skin_colour FROM superhero AS S INNER JOIN colour AS C1 ON S.eye_colour_id = C1.id INNER JOIN colour AS C2 ON S.hair_colour_id = C2.id INNER JOIN colour AS C3 ON S.skin_colour_id = C3.id INNER JOIN gender AS G ON S.gender_id = G.id INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE G.gender = 'Female' AND P.publisher_name = 'Dark Horse Comics'
SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.hair_colour_id = T1.skin_colour_id
SELECT T2.`race` FROM `superhero` AS T1 INNER JOIN `race` AS T2 ON T1.`race_id` = T2.`id` WHERE T1.`superhero_name` = 'A-Bomb'
SELECT CAST(SUM(c.`colour` = 'Blue') AS REAL) * 100 / COUNT(s.`gender_id`) FROM `superhero` AS s INNER JOIN `gender` AS g ON s.`gender_id` = g.`id` INNER JOIN `colour` AS c ON s.`skin_colour_id` = c.`id` WHERE g.`gender` = 'Female'
SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'
SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'
SELECT `superhero`.`superhero_name` FROM `superhero` INNER JOIN `hero_power` ON `superhero`.`id` = `hero_power`.`hero_id` INNER JOIN `superpower` ON `hero_power`.`power_id` = `superpower`.`id` WHERE `superpower`.`power_name` = 'Adaptation'
SELECT COUNT(*) FROM `hero_power` AS T1 INNER JOIN `superhero` AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'
SELECT T2.`power_name` FROM `superhero` AS T1 INNER JOIN `hero_power` AS T3 ON T1.`id` = T3.`hero_id` INNER JOIN `superpower` AS T2 ON T3.`power_id` = T2.`id` WHERE T1.`full_name` = 'Hunter Zolomon'
SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'
SELECT `superhero`.`superhero_name` FROM `superhero` INNER JOIN `colour` AS `eye_colour` ON `superhero`.`eye_colour_id` = `eye_colour`.`id` INNER JOIN `colour` AS `hair_colour` ON `superhero`.`hair_colour_id` = `hair_colour`.`id` WHERE `eye_colour`.`colour` = 'Black' AND `hair_colour`.`colour` = 'Black'
SELECT DISTINCT T1.`eye_colour_id` FROM `superhero` AS T1 INNER JOIN `colour` AS T2 ON T1.`skin_colour_id` = T2.`id` WHERE T2.`colour` = 'Gold'
SELECT `superhero`.`full_name` FROM `superhero` INNER JOIN `race` ON `superhero`.`race_id` = `race`.`id` WHERE `race`.`race` = 'Vampire'
SELECT T1.`superhero_name` FROM `superhero` AS T1 INNER JOIN `alignment` AS T2 ON T1.`alignment_id` = T2.`id` WHERE T2.`alignment` = 'Neutral'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Strength')
SELECT R.`race`, A.`alignment` FROM `superhero` AS S INNER JOIN `race` AS R ON S.`race_id` = R.`id` INNER JOIN `alignment` AS A ON S.`alignment_id` = A.`id` WHERE S.`superhero_name` = 'Cameron Hicks'
SELECT CAST(COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) / COUNT(T1.id) * 100 AS percent FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T3.publisher_name = 'Marvel Comics'
SELECT AVG(superhero.weight_kg) FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE race.race = 'Alien'
SELECT SUM(CASE WHEN T1.full_name = 'Emil Blonsky' THEN T1.weight_kg ELSE 0 END) - SUM(CASE WHEN T1.full_name = 'Charles Chandler' THEN T1.weight_kg ELSE 0 END) FROM superhero AS T1
SELECT AVG(height_cm) FROM superhero
SELECT superpower.`power_name` FROM superhero JOIN hero_power ON superhero.`id` = hero_power.`hero_id` JOIN superpower ON hero_power.`power_id` = superpower.`id` WHERE superhero.`superhero_name` = 'Abomination'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.race_id = 21 AND T2.gender = 'Male'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T2.hero_id = T1.id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id WHERE T3.attribute_name = 'Speed' AND T2.attribute_value = (SELECT MAX(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T5.id = T4.attribute_id WHERE T5.attribute_name = 'Speed')
SELECT COUNT(*) FROM `superhero` AS T1 WHERE T1.`alignment_id` = 3
SELECT A.`attribute_name`, HA.`attribute_value` FROM `superhero` AS S INNER JOIN `hero_attribute` AS HA ON S.`id` = HA.`hero_id` INNER JOIN `attribute` AS A ON HA.`attribute_id` = A.`id` WHERE S.`superhero_name` = '3-D Man'
SELECT T1.`superhero_name` FROM `superhero` AS T1 WHERE T1.`eye_colour_id` = 7 AND T1.`hair_colour_id` = 9
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')
SELECT COUNT(*) FROM superhero WHERE publisher_id = 1
SELECT CAST(SUM(CASE WHEN `superhero`.`eye_colour_id` = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`superhero`.`superhero_name`) FROM `superhero`
SELECT CAST(SUM(CASE WHEN T1.gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN T1.gender_id = 2 THEN 1 ELSE 0 END), 0) AS RATIO FROM superhero AS T1
SELECT T1.superhero_name FROM superhero AS T1 ORDER BY T1.height_cm DESC LIMIT 1
SELECT `id` FROM `superpower` WHERE `power_name` = 'Cryokinesis'
SELECT `superhero_name` FROM `superhero` WHERE `id` = 294
SELECT `full_name` FROM `superhero` WHERE `weight_kg` = 0 OR `weight_kg` IS NULL
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'
SELECT T2.`power_name` FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.`id` = T3.`hero_id` INNER JOIN superpower AS T2 ON T3.`power_id` = T2.`id` WHERE T1.`full_name` = 'Helen Parr'
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38
SELECT R.race FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN race AS R ON S.race_id = R.id WHERE HA.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)
SELECT A.alignment, SP.power_name FROM superhero AS S INNER JOIN alignment AS A ON S.alignment_id = A.id INNER JOIN hero_power AS HP ON S.id = HP.hero_id INNER JOIN superpower AS SP ON HP.power_id = SP.id WHERE S.superhero_name = 'Atom IV'
SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5
SELECT AVG(HA.`attribute_value`) FROM `superhero` AS S INNER JOIN `hero_attribute` AS HA ON S.`id` = HA.`hero_id` WHERE S.`alignment_id` = 3
SELECT DISTINCT C.`colour` FROM `superhero` AS S INNER JOIN `hero_attribute` AS HA ON S.`id` = HA.`hero_id` INNER JOIN `colour` AS C ON S.`skin_colour_id` = C.`id` WHERE HA.`attribute_value` = 100
SELECT COUNT(*) FROM `superhero` AS T1 INNER JOIN `gender` AS T2 ON T1.`gender_id` = T2.`id` INNER JOIN `alignment` AS T3 ON T1.`alignment_id` = T3.`id` WHERE T2.`gender` = 'Female' AND T3.`alignment` = 'Good'
SELECT DISTINCT T1.`superhero_name` FROM `superhero` AS T1 INNER JOIN `hero_attribute` AS T2 ON T1.`id` = T2.`hero_id` WHERE T2.`attribute_value` BETWEEN 75 AND 80
SELECT T4.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id INNER JOIN race AS T4 ON T1.race_id = T4.id WHERE T2.colour = 'Blue' AND T3.gender = 'Male'
SELECT (CAST(SUM(CASE WHEN T3.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100.0 AS female_percentage FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.id = 2
SELECT COUNT(CASE WHEN T1.eye_colour_id = 7 THEN 1 END) - COUNT(CASE WHEN T1.eye_colour_id = 1 THEN 1 END) FROM superhero AS T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL
SELECT HA.attribute_value FROM hero_attribute AS HA INNER JOIN superhero AS S ON HA.hero_id = S.id INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE S.superhero_name = 'Hulk' AND A.attribute_name = 'Strength'
SELECT T2.power_name FROM superhero AS T1 INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T2 ON T3.power_id = T2.id WHERE T1.superhero_name = 'Ajax'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.colour = 'Green' AND T3.alignment = 'Bad'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Marvel Comics'
SELECT DISTINCT `superhero`.`superhero_name` FROM `superhero` INNER JOIN `hero_power` ON `superhero`.`id` = `hero_power`.`hero_id` INNER JOIN `superpower` ON `hero_power`.`power_id` = `superpower`.`id` WHERE `superpower`.`power_name` = 'Wind Control' ORDER BY `superhero`.`superhero_name` ASC;
SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = 'Phoenix Force'
SELECT `superhero`.`full_name` FROM `superhero` INNER JOIN `publisher` ON `superhero`.`publisher_id` = `publisher`.`id` WHERE `publisher`.`publisher_name` = 'DC Comics' ORDER BY `superhero`.`weight_kg` DESC LIMIT 1
SELECT AVG(`height_cm`) FROM `superhero` AS T1 INNER JOIN `publisher` AS T2 ON T1.`publisher_id` = T2.`id` INNER JOIN `race` AS T3 ON T1.`race_id` = T3.`id` WHERE T3.`race` <> 'Human' AND T2.`publisher_name` = 'Dark Horse Comics'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T2.attribute_value = 100 AND T3.attribute_name = 'Speed'
SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS difference FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id
SELECT T2.attribute_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = 'Black Panther' ORDER BY T1.attribute_value ASC LIMIT 1
SELECT colour.colour FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Abomination'
SELECT `superhero_name` FROM `superhero` WHERE `height_cm` = (SELECT MAX(`height_cm`) FROM `superhero`)
SELECT `superhero`.`superhero_name` FROM `superhero` WHERE `superhero`.`full_name` = 'Charles Chandler'
SELECT CAST(SUM(CASE WHEN T2.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(T1.publisher_id) AS percentage FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T3.publisher_name = 'George Lucas'
SELECT CAST(SUM(CASE WHEN T3.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.alignment) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'
SELECT hero_attribute.`hero_id` FROM hero_attribute ORDER BY hero_attribute.`attribute_value` ASC LIMIT 1
SELECT T1.`full_name` FROM `superhero` AS T1 INNER JOIN `race` AS T2 ON T1.`race_id` = T2.`id` WHERE T2.`race` = 'Alien'
SELECT `superhero`.`full_name` FROM `superhero` INNER JOIN `colour` ON `superhero`.`eye_colour_id` = `colour`.`id` WHERE `superhero`.`weight_kg` < 100 AND `colour`.`colour` = 'Brown'
SELECT HA.`attribute_value` FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.`id` = HA.`hero_id` WHERE S.`superhero_name` = 'Aquababy'
SELECT superhero.weight_kg, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id = 40
SELECT AVG(`height_cm`) FROM `superhero` WHERE `alignment_id` = (SELECT `id` FROM `alignment` WHERE `alignment` = 'Neutral')
SELECT T1.`id` FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN superpower AS T3 ON T2.`power_id` = T3.`id` WHERE T3.`power_name` = 'Intelligence'
SELECT C.`colour` FROM `superhero` AS S INNER JOIN `colour` AS C ON S.`eye_colour_id` = C.`id` WHERE S.`superhero_name` = 'Blackwulf'
SELECT DISTINCT SP.power_name FROM superhero AS SH INNER JOIN hero_power AS HP ON SH.id = HP.hero_id INNER JOIN superpower AS SP ON HP.power_id = SP.id WHERE SH.height_cm > (SELECT AVG(height_cm) FROM superhero) * 0.8
SELECT drivers.driverRef FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 18 AND qualifying.q1 IN (SELECT q1 FROM qualifying WHERE raceId = 18 ORDER BY q1 LIMIT 5)
SELECT T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 19 AND T2.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)
SELECT DISTINCT R.`year` FROM `races` AS R INNER JOIN `circuits` AS C ON R.`circuitId` = C.`circuitId` WHERE C.`location` = 'Shanghai'
SELECT races.`url` FROM races INNER JOIN circuits ON races.`circuitId` = circuits.`circuitId` WHERE circuits.`name` = 'Circuit de Barcelona-Catalunya'
SELECT DISTINCT T2.name FROM races AS T2 INNER JOIN circuits AS T1 ON T2.circuitId = T1.circuitId WHERE T1.country = 'Germany'
SELECT DISTINCT R.position FROM results AS R INNER JOIN constructors AS C ON R.constructorId = C.constructorId WHERE C.name = 'Renault'
SELECT COUNT(*) FROM `races` AS R INNER JOIN `circuits` AS C ON R.`circuitId` = C.`circuitId` WHERE R.`year` = 2010 AND R.`name` LIKE '%Grand Prix%' AND C.`country` NOT IN ('Malaysia', 'Bahrain', 'Japan', 'China', 'Singapore', 'India', 'South Korea', 'Vietnam', 'Australia', 'New Zealand', 'United Kingdom', 'Germany', 'France', 'Italy', 'Spain', 'Portugal', 'Netherlands', 'Belgium', 'Switzerland', 'Austria', 'Czech Republic', 'Hungary')
SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain'
SELECT C.`lat`, C.`lng` FROM circuits AS C INNER JOIN races AS R ON C.`circuitId` = R.`circuitId` WHERE R.`name` = 'Australian Grand Prix'
SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'
SELECT `races`.`time` FROM `races` JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `circuits`.`name` = 'Sepang International Circuit'
SELECT C.`lat`, C.`lng` FROM `races` AS R INNER JOIN `circuits` AS C ON R.`circuitId` = C.`circuitId` WHERE R.`name` = 'Abu Dhabi Grand Prix'
SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.points = 1 AND T1.raceId = 24
SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.forename = 'Bruno' AND drivers.surname = 'Senna' AND qualifying.raceId = 354
SELECT T2.nationality FROM drivers AS T2 INNER JOIN qualifying AS T1 ON T2.driverId = T1.driverId WHERE T1.q2 = '1:40.000' AND T1.raceId = 18
SELECT `drivers`.`number` FROM `qualifying` INNER JOIN `drivers` ON `qualifying`.`driverId` = `drivers`.`driverId` WHERE `qualifying`.`raceId` = 903 AND `qualifying`.`q3` = '1:54.000'
SELECT COUNT(DISTINCT results.`driverId`) FROM results INNER JOIN races ON results.`raceId` = races.`raceId` INNER JOIN status ON results.`statusId` = status.`statusId` WHERE races.`year` = 2007 AND races.`name` = 'Bahrain Grand Prix' AND status.`status` != 'Finished'
SELECT `seasons`.`url` FROM `races` INNER JOIN `seasons` ON `races`.`year` = `seasons`.`year` WHERE `races`.`raceId` = 901
SELECT COUNT(DISTINCT results.`driverId`) FROM results INNER JOIN races ON results.`raceId` = races.`raceId` WHERE races.`date` = '2015-11-29' AND results.`time` IS NOT NULL
SELECT `drivers`.`forename`, `drivers`.`surname`, `drivers`.`dob` FROM `drivers` INNER JOIN `results` ON `drivers`.`driverId` = `results`.`driverId` WHERE `results`.`raceId` = 592 AND `results`.`time` IS NOT NULL ORDER BY `drivers`.`dob` ASC LIMIT 1
SELECT T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 161 AND T1.time = '1:27.000'
SELECT drivers.nationality FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE results.raceId = 933 AND results.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933)
SELECT T1.`location`, T1.`lat`, T1.`lng` FROM `circuits` AS T1 INNER JOIN `races` AS T2 ON T1.`circuitId` = T2.`circuitId` WHERE T2.`name` = 'Malaysian Grand Prix'
SELECT T1.url FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 9 ORDER BY T2.points DESC LIMIT 1
SELECT qualifying.q1 FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND qualifying.raceId = 345
SELECT T2.nationality FROM drivers AS T2 INNER JOIN qualifying AS T1 ON T2.driverId = T1.driverId WHERE T1.q2 = '1:15.000' AND T1.raceId = 347
SELECT T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 45 AND T2.q3 = '1:33.000'
SELECT results.`time` FROM `results` INNER JOIN `drivers` ON results.`driverId` = drivers.`driverId` INNER JOIN `constructors` ON results.`constructorId` = constructors.`constructorId` WHERE drivers.`forename` = 'Bruce' AND drivers.`surname` = 'McLaren' AND results.`raceId` = 743
SELECT D.`forename`, D.`surname` FROM `results` AS R INNER JOIN `drivers` AS D ON R.`driverId` = D.`driverId` INNER JOIN `races` AS RA ON R.`raceId` = RA.`raceId` WHERE RA.`name` = 'San Marino Grand Prix' AND RA.`year` = 2006 AND R.`position` = 2
SELECT S.url FROM races AS R INNER JOIN seasons AS S ON R.year = S.year WHERE R.raceId = 901
SELECT COUNT(DISTINCT results.`driverId`) FROM results INNER JOIN races ON results.`raceId` = races.`raceId` WHERE races.`date` = '2015-11-29' AND results.`statusId` = (SELECT `statusId` FROM status WHERE `status` = 'Finished')
SELECT `drivers`.`forename`, `drivers`.`surname` FROM `drivers` INNER JOIN `results` ON `drivers`.`driverId` = `results`.`driverId` WHERE `results`.`raceId` = 872 AND `results`.`time` IS NOT NULL ORDER BY `drivers`.`dob` DESC LIMIT 1
SELECT D.forename, D.surname FROM drivers AS D INNER JOIN lapTimes AS L ON D.driverId = L.driverId WHERE L.raceId = 348 AND L.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348)
SELECT drivers.`nationality` FROM results INNER JOIN drivers ON results.`driverId` = drivers.`driverId` WHERE results.`fastestLapSpeed` = (SELECT MAX(`fastestLapSpeed`) FROM results)
SELECT CAST((SELECT fastestLapSpeed FROM results WHERE raceId = 853 AND driverId = (SELECT driverId FROM drivers WHERE driverRef = 'di_resta')) - (SELECT fastestLapSpeed FROM results WHERE raceId = 854 AND driverId = (SELECT driverId FROM drivers WHERE driverRef = 'di_resta')) AS REAL) * 100 / (SELECT fastestLapSpeed FROM results WHERE raceId = 854 AND driverId = (SELECT driverId FROM drivers WHERE driverRef = 'di_resta')) AS percentage
SELECT CAST(COUNT(CASE WHEN results.`time` IS NOT NULL THEN 1 END) AS REAL) * 100 / COUNT(results.`driverId`) AS completion_rate FROM results INNER JOIN races ON results.`raceId` = races.`raceId` WHERE races.`date` = '1983-07-16'
SELECT MIN(`races`.`year`) FROM `races` WHERE `races`.`name` = 'Singapore Grand Prix'
SELECT COUNT(*) AS race_count, GROUP_CONCAT(name ORDER BY name DESC) AS race_names FROM races WHERE year = 2005
SELECT T1.`name`, T1.`date` FROM `races` AS T1 WHERE T1.`date` = (SELECT MIN(`date`) FROM `races`) UNION SELECT T2.`name`, T2.`date` FROM `races` AS T2 WHERE strftime('%Y-%m', T2.`date`) = strftime('%Y-%m', (SELECT MIN(`date`) FROM `races`))
SELECT T1.`name`, T1.`date` FROM races AS T1 INNER JOIN seasons AS T2 ON T1.`year` = T2.`year` WHERE T2.`year` = 1999 AND T1.`round` = (SELECT MAX(`round`) FROM races WHERE `year` = 1999)
SELECT T1.year FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year GROUP BY T1.year ORDER BY COUNT(T2.round) DESC LIMIT 1
SELECT T1.`name` FROM `races` AS T1 WHERE T1.`year` = 2017 AND T1.`raceId` NOT IN (SELECT T2.`raceId` FROM `races` AS T2 WHERE T2.`year` = 2000)
SELECT T1.`country`, T1.`name`, T1.`location` FROM `circuits` AS T1 INNER JOIN `races` AS T2 ON T1.`circuitId` = T2.`circuitId` WHERE T2.`name` = 'European Grand Prix' AND T2.`year` = (SELECT MIN(`year`) FROM `races` WHERE `name` = 'European Grand Prix')
SELECT MAX(seasons.`year`) FROM seasons INNER JOIN races ON seasons.`year` = races.`year` INNER JOIN circuits ON races.`circuitId` = circuits.`circuitId` WHERE circuits.`name` = 'Brands Hatch' AND races.`name` = 'British Grand Prix'
SELECT COUNT(DISTINCT T1.year) FROM `races` AS T1 INNER JOIN `circuits` AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit' AND T1.name LIKE '%British Grand Prix%'
SELECT drivers.`driverId`, drivers.`forename`, drivers.`surname`, results.`position` FROM drivers INNER JOIN results ON drivers.`driverId` = results.`driverId` INNER JOIN races ON results.`raceId` = races.`raceId` WHERE races.`year` = 2010 AND races.`name` = 'Singapore Grand Prix' ORDER BY results.`position`
SELECT T1.forename, T1.surname, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY MAX(T2.points) DESC LIMIT 1
SELECT D.`forename`, D.`surname`, DS.`points` FROM `drivers` AS D INNER JOIN `results` AS R ON D.`driverId` = R.`driverId` INNER JOIN `races` AS RACE ON R.`raceId` = RACE.`raceId` INNER JOIN `driverStandings` AS DS ON R.`raceId` = DS.`raceId` AND R.`driverId` = DS.`driverId` WHERE RACE.`year` = 2017 AND RACE.`name` = 'Chinese Grand Prix' ORDER BY DS.`points` DESC LIMIT 3
SELECT T1.`forename`, T1.`surname`, T2.`name`, T2.`date`, MIN(T3.`time`) AS `best_lap_time` FROM `drivers` AS T1 INNER JOIN `lapTimes` AS T3 ON T1.`driverId` = T3.`driverId` INNER JOIN `races` AS T2 ON T3.`raceId` = T2.`raceId` GROUP BY T1.`driverId`, T2.`raceId` ORDER BY `best_lap_time` ASC LIMIT 1
SELECT AVG(lapTimes.`milliseconds`) FROM lapTimes INNER JOIN drivers ON lapTimes.`driverId` = drivers.`driverId` INNER JOIN races ON lapTimes.`raceId` = races.`raceId` WHERE drivers.`surname` = 'Vettel' AND races.`year` = 2009 AND races.`name` = 'Chinese Grand Prix'
SELECT CAST(COUNT(CASE WHEN results.`position` > 1 THEN 1 END) AS REAL) * 100 / COUNT(results.`raceId`) AS percentage FROM results INNER JOIN drivers ON results.`driverId` = drivers.`driverId` INNER JOIN races ON results.`raceId` = races.`raceId` WHERE drivers.`surname` = 'Hamilton' AND races.`year` >= 2010
SELECT T1.forename, T1.surname, T1.nationality, AVG(T2.points) AS average_points FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY T2.wins DESC LIMIT 1
SELECT drivers.forename, drivers.surname, (2022 - strftime('%Y', drivers.dob) + 1) AS age FROM drivers WHERE drivers.nationality = 'Japanese' ORDER BY drivers.dob DESC LIMIT 1
SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.year BETWEEN 1990 AND 2000 GROUP BY circuits.name HAVING COUNT(races.raceId) = 4
SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'USA' AND T2.year = 2006
SELECT R.`name` AS race_name, C.`name` AS circuit_name, C.`location` AS circuit_location FROM `races` AS R INNER JOIN `circuits` AS C ON R.`circuitId` = C.`circuitId` WHERE strftime('%Y', R.`date`) = '2005' AND strftime('%m', R.`date`) = '09'
SELECT R.`name` FROM races AS R INNER JOIN results AS Res ON R.`raceId` = Res.`raceId` INNER JOIN drivers AS D ON Res.`driverId` = D.`driverId` WHERE D.`forename` = 'Alex' AND D.`surname` = 'Yoong' AND Res.`grid` < 10
SELECT COUNT(*) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T2.surname = 'Schumacher' AND T4.circuitRef = 'sepang' AND T1.points = (SELECT MAX(points) FROM results WHERE raceId = T1.raceId)
SELECT R.`name`, R.`year` FROM races AS R INNER JOIN lapTimes AS L ON R.`raceId` = L.`raceId` INNER JOIN results AS Res ON L.`raceId` = Res.`raceId` AND L.`driverId` = Res.`driverId` WHERE Res.`driverId` = (SELECT `driverId` FROM drivers WHERE `forename` = 'Michael' AND `surname` = 'Schumacher') ORDER BY L.`milliseconds` ASC LIMIT 1
SELECT AVG(results.points) FROM results INNER JOIN drivers ON results.driverId = drivers.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.surname = 'Irvine' AND races.year = 2000
SELECT T2.`name`, T1.`points` FROM results AS T1 INNER JOIN races AS T2 ON T1.`raceId` = T2.`raceId` INNER JOIN drivers AS T3 ON T1.`driverId` = T3.`driverId` WHERE T3.`forename` = 'Lewis' AND T3.`surname` = 'Hamilton' AND T2.`year` = (SELECT MIN(T4.`year`) FROM results AS T5 INNER JOIN races AS T4 ON T5.`raceId` = T4.`raceId` WHERE T5.`driverId` = T3.`driverId`);
SELECT T1.name, T2.country FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2017 ORDER BY T1.date
SELECT MAX(r.laps) AS most_laps, r2.name AS race_name, r2.year AS race_year, c.location AS circuit_location FROM results AS r INNER JOIN races AS r2 ON r.raceId = r2.raceId INNER JOIN circuits AS c ON r2.circuitId = c.circuitId GROUP BY r2.raceId ORDER BY most_laps DESC LIMIT 1
SELECT CAST(SUM(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'European Grand Prix'
SELECT `lat`, `lng` FROM `circuits` WHERE `name` = 'Silverstone Circuit'
SELECT T1.`name` FROM `circuits` AS T1 WHERE T1.`name` IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY T1.`lat` DESC LIMIT 1
SELECT `circuitRef` FROM `circuits` WHERE `name` = 'Marina Bay Street Circuit'
SELECT `country` FROM `circuits` ORDER BY `alt` DESC LIMIT 1
SELECT COUNT(`driverId`) FROM `drivers` WHERE `code` IS NULL
SELECT T1.`nationality` FROM `drivers` AS T1 WHERE T1.`dob` = (SELECT MIN(`dob`) FROM `drivers`)
SELECT `surname` FROM `drivers` WHERE `nationality` = 'Italian'
SELECT `url` FROM `drivers` WHERE `forename` = 'Anthony' AND `surname` = 'Davidson'
SELECT drivers.driverRef FROM drivers WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'
SELECT circuits.name FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'
SELECT DISTINCT R.`year` FROM `races` AS R INNER JOIN `circuits` AS C ON R.`circuitId` = C.`circuitId` WHERE C.`name` = 'Silverstone Circuit'
SELECT R.* FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.name LIKE 'Silverstone Circuit'
SELECT R.`time` FROM `races` AS R INNER JOIN `circuits` AS C ON R.`circuitId` = C.`circuitId` WHERE C.`location` = 'Abu Dhabi' AND R.`year` BETWEEN 2010 AND 2019
SELECT COUNT(r.`raceId`) FROM `races` AS r INNER JOIN `circuits` AS c ON r.`circuitId` = c.`circuitId` WHERE c.`country` = 'Italy'
SELECT `races`.`date` FROM `races` INNER JOIN `circuits` ON `races`.`circuitId` = `circuits`.`circuitId` WHERE `circuits`.`name` = 'Circuit de Barcelona-Catalunya'
SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.year = 2009 AND T1.country = 'Spain'
SELECT MIN(results.`fastestLapTime`) FROM results INNER JOIN drivers ON results.`driverId` = drivers.`driverId` WHERE drivers.`forename` = 'Lewis' AND drivers.`surname` = 'Hamilton'
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1
SELECT T1.`driverRef` FROM `drivers` AS T1 INNER JOIN `results` AS T2 ON T1.`driverId` = T2.`driverId` INNER JOIN `races` AS T3 ON T2.`raceId` = T3.`raceId` WHERE T3.`name` = 'Australian Grand Prix' AND T3.`year` = 2008 AND T2.`position` = 1
SELECT T2.`name`, T2.`date`, T2.`time` FROM `drivers` AS T1 INNER JOIN `results` AS T3 ON T1.`driverId` = T3.`driverId` INNER JOIN `races` AS T2 ON T3.`raceId` = T2.`raceId` WHERE T1.`forename` = 'Lewis' AND T1.`surname` = 'Hamilton'
SELECT T3.`name` FROM `races` AS T3 INNER JOIN `results` AS T2 ON T3.`raceId` = T2.`raceId` INNER JOIN `drivers` AS T1 ON T2.`driverId` = T1.`driverId` WHERE T1.`forename` = 'Lewis' AND T1.`surname` = 'Hamilton' ORDER BY T2.`rank` ASC LIMIT 1
SELECT MAX(results.`fastestLapSpeed`) FROM results INNER JOIN races ON results.`raceId` = races.`raceId` WHERE races.`name` = 'Spanish Grand Prix' AND races.`year` = 2009
SELECT DISTINCT T2.year FROM races AS T2 INNER JOIN results AS T1 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'
SELECT results.`positionOrder` FROM results INNER JOIN races ON results.`raceId` = races.`raceId` INNER JOIN drivers ON results.`driverId` = drivers.`driverId` WHERE drivers.`forename` = 'Lewis' AND drivers.`surname` = 'Hamilton' AND races.`year` = 2008 AND races.`name` = 'Australian Grand Prix'
SELECT D.`forename`, D.`surname` FROM `drivers` AS D INNER JOIN `results` AS R ON D.`driverId` = R.`driverId` INNER JOIN `races` AS RA ON R.`raceId` = RA.`raceId` WHERE R.`grid` = 4 AND RA.`year` = 2008 AND RA.`name` = 'Australian Grand Prix'
SELECT COUNT(DISTINCT results.`driverId`) FROM results INNER JOIN races ON results.`raceId` = races.`raceId` INNER JOIN status ON results.`statusId` = status.`statusId` WHERE races.`year` = 2008 AND races.`name` = 'Australian Grand Prix' AND results.`time` IS NOT NULL
SELECT T1.fastestLapTime FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Australian Grand Prix' AND T2.year = 2008
SELECT results.`time` FROM results INNER JOIN races ON results.`raceId` = races.`raceId` WHERE results.`position` = 2 AND races.`year` = 2008 AND races.`name` = 'Australian Grand Prix'
SELECT T2.forename, T2.surname, T2.url FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T1.position = 1
SELECT COUNT(DISTINCT drivers.driverId) FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.nationality = 'American' AND races.year = 2008 AND races.name = 'Australian Grand Prix'
SELECT COUNT(DISTINCT drivers.`driverId`) FROM drivers INNER JOIN results ON drivers.`driverId` = results.`driverId` INNER JOIN races ON results.`raceId` = races.`raceId` WHERE races.`year` = 2008 AND races.`name` = 'Australian Grand Prix' AND results.`time` IS NOT NULL
SELECT SUM(points) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')
SELECT AVG(CAST(SUBSTR(T1.fastestLapTime, INSTR(T1.fastestLapTime, ':') - 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T1.fastestLapTime, INSTR(T1.fastestLapTime, ':') + 1) AS REAL)) AS avg_fastest_lap_time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'
SELECT CAST(COUNT(CASE WHEN Res.`time` IS NOT NULL THEN 1 END) AS REAL) / COUNT(Res.`raceId`) AS completion_rate FROM `results` AS Res INNER JOIN `races` AS R ON Res.`raceId` = R.`raceId` WHERE R.`year` = 2008 AND R.`name` = 'Australian Grand Prix'
SELECT (CAST((SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) * 60 + SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(T1.time, '.') - INSTR(T1.time, ':') - 1)) - (CAST(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) * 60 + SUBSTR(T2.time, INSTR(T2.time, ':') + 1, INSTR(T2.time, '.') - INSTR(T2.time, ':') - 1) AS REAL) + CAST(SUBSTR(T2.time, INSTR(T2.time, '.') + 1) AS REAL) AS REAL)) AS REAL) / (CAST(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) * 60 + SUBSTR(T2.time, INSTR(T2.time, ':') + 1, INSTR(T2.time, '.') - INSTR(T2.time, ':') - 1) AS REAL) + CAST(SUBSTR(T2.time, INSTR(T2.time, '.') + 1) AS REAL) AS REAL) * 100) AS REAL) AS percentage FROM results AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.position = 1 AND T2.position = (SELECT MAX(position) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2008-03-16'))
SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia'
SELECT `lat`, `lng` FROM `circuits` WHERE `country` = 'USA'
SELECT COUNT(*) FROM `drivers` WHERE `nationality` = 'British' AND `dob` > '1980-01-01'
SELECT AVG(T1.points) FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'
SELECT `constructors`.`name` FROM `constructors` INNER JOIN `constructorStandings` ON `constructors`.`constructorId` = `constructorStandings`.`constructorId` ORDER BY `constructorStandings`.`points` DESC LIMIT 1
SELECT C.`name` FROM constructors AS C LEFT JOIN results AS R ON C.constructorId = R.constructorId AND R.raceId = 291 WHERE R.points IS NULL OR R.points = 0
SELECT COUNT(DISTINCT T1.`constructorId`) FROM `constructors` AS T1 INNER JOIN `constructorResults` AS T2 ON T1.`constructorId` = T2.`constructorId` INNER JOIN `races` AS T3 ON T2.`raceId` = T3.`raceId` WHERE T1.`nationality` = 'Japanese' AND T2.`points` = 0 GROUP BY T1.`constructorId` HAVING COUNT(DISTINCT T3.`raceId`) = 2
SELECT DISTINCT constructors.name FROM constructors INNER JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructorStandings.position = 1
SELECT COUNT(DISTINCT constructors.`constructorId`) FROM constructors INNER JOIN constructorResults ON constructors.`constructorId` = constructorResults.`constructorId` INNER JOIN results ON constructorResults.`raceId` = results.`raceId` WHERE constructors.`nationality` = 'French' AND results.`laps` > 50
SELECT CAST(COUNT(DISTINCT T1.`driverId`) AS REAL) * 100 / (SELECT COUNT(DISTINCT T2.`driverId`) FROM `results` AS T2 INNER JOIN `races` AS T3 ON T2.`raceId` = T3.`raceId` WHERE T3.`year` BETWEEN 2007 AND 2009) FROM `results` AS T1 INNER JOIN `drivers` AS T4 ON T1.`driverId` = T4.`driverId` INNER JOIN `races` AS T3 ON T1.`raceId` = T3.`raceId` WHERE T4.`nationality` = 'Japanese' AND T1.`time` IS NOT NULL AND T3.`year` BETWEEN 2007 AND 2009
SELECT `races`.`year`, AVG(CAST(SUBSTR(`results`.`time`, 1, INSTR(`results`.`time`, ':') - 1) AS INTEGER) * 3600 + CAST(SUBSTR(`results`.`time`, INSTR(`results`.`time`, ':') + 1, INSTR(`results`.`time`, '.') - INSTR(`results`.`time`, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(`results`.`time`, INSTR(`results`.`time`, '.') + 1) AS INTEGER)) AS average_time_seconds FROM `results` INNER JOIN `races` ON `results`.`raceId` = `races`.`raceId` WHERE `results`.`time` IS NOT NULL AND `results`.`time` LIKE '%:%' GROUP BY `races`.`year`
SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN driverStandings ON drivers.driverId = driverStandings.driverId WHERE driverStandings.position = 2 AND drivers.dob > '1975-01-01'
SELECT COUNT(DISTINCT d.`driverId`) FROM `drivers` AS d INNER JOIN `results` AS r ON d.`driverId` = r.`driverId` WHERE d.`nationality` = 'Italian' AND r.`time` IS NULL
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLapTime ASC LIMIT 1
SELECT fastestLap FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.year = 2009 AND results.position = 1
SELECT AVG(results.`fastestLapSpeed`) FROM races INNER JOIN results ON races.`raceId` = results.`raceId` WHERE races.`name` = 'Spanish Grand Prix' AND races.`year` = 2009
SELECT `races`.`name`, `races`.`year` FROM `races` INNER JOIN `results` ON `races`.`raceId` = `results`.`raceId` WHERE `results`.`milliseconds` IS NOT NULL ORDER BY `results`.`milliseconds` ASC LIMIT 1
SELECT CAST(COUNT(CASE WHEN T1.dob < '1985-01-01' AND T2.laps > 50 THEN T1.driverId END) AS REAL) * 100 / COUNT(DISTINCT T2.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.year WHERE T3.year BETWEEN 2000 AND 2005
SELECT COUNT(*) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND T2.milliseconds < 120000
SELECT DISTINCT `drivers`.`code` FROM `drivers` WHERE `drivers`.`nationality` = 'American'
SELECT `raceId` FROM `races` WHERE `year` = 2009
SELECT COUNT(DISTINCT results.`driverId`) FROM `results` WHERE `raceId` = 18
SELECT DISTINCT `number` FROM `drivers` WHERE `nationality` = 'Dutch' ORDER BY `dob` DESC LIMIT 3
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'
SELECT COUNT(*) FROM `drivers` WHERE `nationality` = 'Australian' AND SUBSTR(`dob`, 1, 4) = '1980'
SELECT drivers.`forename`, drivers.`surname` FROM drivers INNER JOIN lapTimes ON drivers.`driverId` = lapTimes.`driverId` WHERE drivers.`dob` BETWEEN '1980-01-01' AND '1990-12-31' AND drivers.`nationality` = 'German' ORDER BY lapTimes.`time` ASC LIMIT 3
SELECT `drivers`.`driverRef` FROM `drivers` WHERE `drivers`.`nationality` = 'German' AND `drivers`.`dob` = (SELECT MIN(`dob`) FROM `drivers` WHERE `nationality` = 'German')
SELECT DISTINCT drivers.`driverId`, drivers.`code` FROM drivers INNER JOIN results ON drivers.`driverId` = results.`driverId` WHERE drivers.`dob` LIKE '1971%' AND results.`fastestLapTime` IS NOT NULL
SELECT d.`driverId`, d.`forename`, d.`surname`, MAX(lt.`time`) AS latestLapTime FROM `drivers` AS d INNER JOIN `lapTimes` AS lt ON d.`driverId` = lt.`driverId` WHERE d.`nationality` = 'Spanish' AND d.`dob` < '1982-01-01' GROUP BY d.`driverId`, d.`forename`, d.`surname` ORDER BY latestLapTime DESC LIMIT 10
SELECT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId ORDER BY T2.fastestLapTime LIMIT 1
SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId GROUP BY T2.year ORDER BY MAX(T1.time) ASC LIMIT 1
SELECT T1.`driverId` FROM `drivers` AS T1 INNER JOIN `lapTimes` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T2.`lap` = 1 ORDER BY T2.`time` ASC LIMIT 5
SELECT COUNT(*) FROM `results` AS T1 INNER JOIN `status` AS T2 ON T1.`statusId` = T2.`statusId` WHERE T1.`raceId` > 50 AND T1.`raceId` < 100 AND T1.`time` IS NOT NULL AND T2.`statusId` = 2
SELECT COUNT(races.`raceId`), circuits.`location`, circuits.`lat`, circuits.`lng` FROM `races` INNER JOIN `circuits` ON races.`circuitId` = circuits.`circuitId` WHERE circuits.`country` = 'Austria'
SELECT T1.`round` FROM `races` AS T1 INNER JOIN `results` AS T2 ON T1.`raceId` = T2.`raceId` WHERE T2.`time` IS NOT NULL GROUP BY T1.`round` ORDER BY COUNT(T2.`resultId`) DESC LIMIT 1
SELECT DISTINCT drivers.driverRef, drivers.nationality, drivers.dob FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 23 AND qualifying.q2 IS NOT NULL
SELECT R.`name`, R.`date`, R.`time` FROM `races` AS R INNER JOIN `qualifying` AS Q ON R.`raceId` = Q.`raceId` INNER JOIN `drivers` AS D ON Q.`driverId` = D.`driverId` WHERE D.`dob` = (SELECT MAX(`dob`) FROM `drivers`) LIMIT 1
SELECT COUNT(DISTINCT drivers.`driverId`) FROM drivers INNER JOIN results ON drivers.`driverId` = results.`driverId` INNER JOIN status ON results.`statusId` = status.`statusId` WHERE drivers.`nationality` = 'American' AND status.`statusId` = 2;
SELECT T1.name, T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1
SELECT c.`url` FROM `constructors` AS c INNER JOIN `constructorStandings` AS cs ON c.`constructorId` = cs.`constructorId` ORDER BY cs.`wins` DESC LIMIT 1
SELECT drivers.`driverId`, drivers.`driverRef`, drivers.`forename`, drivers.`surname`, lapTimes.`time` FROM lapTimes INNER JOIN races ON lapTimes.`raceId` = races.`raceId` INNER JOIN drivers ON lapTimes.`driverId` = drivers.`driverId` WHERE races.`name` = 'French Grand Prix' AND lapTimes.`lap` = 3 ORDER BY lapTimes.`time` DESC LIMIT 1
SELECT T1.`raceId`, MIN(T2.`milliseconds`) AS `fastestLapTime` FROM `races` AS T1 INNER JOIN `lapTimes` AS T2 ON T1.`raceId` = T2.`raceId` WHERE T2.`position` = 1 GROUP BY T1.`raceId` ORDER BY `fastestLapTime` ASC LIMIT 1
SELECT AVG(lapTimes.`milliseconds`) FROM lapTimes INNER JOIN results ON lapTimes.`raceId` = results.`raceId` INNER JOIN races ON lapTimes.`raceId` = races.`raceId` WHERE races.`year` = 2006 AND races.`name` = 'United States Grand Prix' AND results.`position` < 11
SELECT T1.`driverId`, T1.`driverRef`, T1.`forename`, T1.`surname` FROM `drivers` AS T1 INNER JOIN `pitStops` AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`nationality` = 'German' AND T1.`dob` > '1980-01-01' AND T1.`dob` < '1985-12-31' GROUP BY T1.`driverId` ORDER BY AVG(T2.`duration`) ASC LIMIT 5
SELECT T1.`driverId`, T2.`forename`, T2.`surname`, T1.`time` FROM `results` AS T1 INNER JOIN `drivers` AS T2 ON T1.`driverId` = T2.`driverId` INNER JOIN `races` AS T3 ON T1.`raceId` = T3.`raceId` WHERE T3.`name` = 'Canadian Grand Prix' AND T3.`year` = 2008 AND T1.`position` = 1
SELECT T1.constructorRef, T1.url FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Singapore Grand Prix' AND T3.year = 2009 AND T2.position = 1;
SELECT drivers.forename, drivers.surname, drivers.dob FROM drivers WHERE drivers.nationality = 'Austrian' AND strftime('%Y', drivers.dob) BETWEEN '1981' AND '1991'
SELECT drivers.`forename`, drivers.`surname`, drivers.`url`, drivers.`dob` FROM drivers WHERE drivers.`nationality` = 'German' AND strftime('%Y', drivers.`dob`) BETWEEN '1971' AND '1985' ORDER BY drivers.`dob` DESC
SELECT `location`, `country`, `lat`, `lng` FROM `circuits` WHERE `name` = 'Hungaroring'
SELECT T1.points, T2.name, T2.nationality FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 ORDER BY T1.points DESC LIMIT 1
SELECT AVG(results.points) FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Turkish Grand Prix'
SELECT AVG(number_of_races) AS annual_average FROM (SELECT COUNT(raceId) AS number_of_races FROM races WHERE year BETWEEN 2001 AND 2010 GROUP BY year)
SELECT drivers.`nationality` FROM drivers GROUP BY drivers.`nationality` ORDER BY COUNT(*) DESC LIMIT 1
SELECT driverStandings.wins FROM driverStandings WHERE driverStandings.position = 91
SELECT R.`name` FROM `races` AS R INNER JOIN `results` AS Res ON R.`raceId` = Res.`raceId` ORDER BY Res.`fastestLapTime` ASC LIMIT 1
SELECT T1.name, CONCAT(T1.location, ', ', T1.country) AS full_location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.date = (SELECT MAX(date) FROM races)
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T2.position = 1 AND T2.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = T2.raceId) AND T3.year = 2008 AND T4.name = 'Marina Bay Street Circuit'
SELECT CONCAT(drivers.`forename`, ' ', drivers.`surname`) AS full_name, drivers.`nationality`, races.`name` FROM drivers INNER JOIN results ON drivers.`driverId` = results.`driverId` INNER JOIN races ON results.`raceId` = races.`raceId` WHERE drivers.`dob` = (SELECT MAX(`dob`) FROM drivers) LIMIT 1
SELECT COUNT(results.`resultId`) FROM results INNER JOIN status ON results.`statusId` = status.`statusId` INNER JOIN races ON results.`raceId` = races.`raceId` WHERE status.`statusId` = 3 AND races.`name` = 'Canadian Grand Prix' AND results.`driverId` = (SELECT results.`driverId` FROM results INNER JOIN status ON results.`statusId` = status.`statusId` INNER JOIN races ON results.`raceId` = races.`raceId` WHERE status.`statusId` = 3 AND races.`name` = 'Canadian Grand Prix' GROUP BY results.`driverId` ORDER BY COUNT(results.`resultId`) DESC LIMIT 1)
SELECT CONCAT(T1.forename, ' ', T1.surname) AS full_name, T2.wins FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = (SELECT MIN(dob) FROM drivers)
SELECT MAX(duration) FROM pitStops
SELECT MIN(`lapTimes`.`milliseconds`) AS fastest_lap_time FROM `lapTimes`
SELECT MAX(pitStops.`duration`) FROM pitStops INNER JOIN drivers ON pitStops.`driverId` = drivers.`driverId` WHERE drivers.`forename` = 'Lewis' AND drivers.`surname` = 'Hamilton'
SELECT T1.lap FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Australian Grand Prix' AND T2.year = 2011
SELECT drivers.`driverId`, drivers.`forename`, drivers.`surname`, pitStops.`duration` FROM pitStops INNER JOIN drivers ON pitStops.`driverId` = drivers.`driverId` INNER JOIN races ON pitStops.`raceId` = races.`raceId` WHERE races.`year` = 2011 AND races.`name` = 'Australian Grand Prix'
SELECT MIN(lapTimes.`time`) AS `lap_record` FROM lapTimes INNER JOIN drivers ON lapTimes.`driverId` = drivers.`driverId` INNER JOIN results ON lapTimes.`raceId` = results.`raceId` WHERE drivers.`forename` = 'Lewis' AND drivers.`surname` = 'Hamilton'
SELECT CONCAT(drivers.`forename`, ' ', drivers.`surname`) AS fullName FROM lapTimes INNER JOIN drivers ON lapTimes.`driverId` = drivers.`driverId` ORDER BY lapTimes.`time` ASC LIMIT 1
SELECT T1.position FROM lapTimes AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId WHERE T2.driverId = (SELECT driverId FROM drivers WHERE driverRef = 'hamilton') AND T1.time = (SELECT MIN(time) FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE driverRef = 'hamilton'))
SELECT MIN(lapTimes.`time`) AS lap_record FROM lapTimes INNER JOIN races ON lapTimes.`raceId` = races.`raceId` INNER JOIN circuits ON races.`circuitId` = circuits.`circuitId` WHERE circuits.`name` = 'Austrian Grand Prix Circuit'
SELECT T1.`name` AS circuit_name, T2.`lap`, T2.`time` FROM circuits AS T1 INNER JOIN races AS T3 ON T1.`circuitId` = T3.`circuitId` INNER JOIN lapTimes AS T2 ON T3.`raceId` = T2.`raceId` WHERE T1.`country` = 'Italy' ORDER BY T2.`milliseconds` ASC
SELECT T1.raceId FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Austrian Grand Prix Circuit' AND T1.raceId = (SELECT lapTimes.raceId FROM lapTimes WHERE lapTimes.time = (SELECT MIN(lapTimes2.time) FROM lapTimes AS lapTimes2 INNER JOIN races AS T3 ON lapTimes2.raceId = T3.raceId WHERE T3.circuitId = T2.circuitId) LIMIT 1)
SELECT SUM(pitStops.`duration`) FROM pitStops INNER JOIN results ON pitStops.`raceId` = results.`raceId` INNER JOIN races ON results.`raceId` = races.`raceId` WHERE races.`name` = 'Austrian Grand Prix' AND results.`position` = 1
SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId WHERE T2.time = '1:29.488'
SELECT AVG(pitStops.`milliseconds`) FROM pitStops INNER JOIN drivers ON pitStops.`driverId` = drivers.`driverId` WHERE drivers.`forename` = 'Lewis' AND drivers.`surname` = 'Hamilton'
SELECT AVG(lapTimes.`milliseconds`) FROM lapTimes INNER JOIN races ON lapTimes.`raceId` = races.`raceId` INNER JOIN circuits ON races.`circuitId` = circuits.`circuitId` WHERE circuits.`country` = 'Italy'
SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);
SELECT `Player_Attributes`.`preferred_foot` FROM `Player_Attributes` WHERE `potential` = (SELECT MIN(`potential`) FROM `Player_Attributes`)
SELECT COUNT(T1.`id`) FROM `Player_Attributes` AS T1 WHERE T1.`overall_rating` >= 60 AND T1.`overall_rating` < 65 AND T1.`defensive_work_rate` = 'low'
SELECT Player.id FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.crossing DESC LIMIT 5
SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1
SELECT T.`team_long_name` FROM `Match` AS M INNER JOIN `Team` AS T ON M.`home_team_api_id` = T.`team_api_id` WHERE M.`season` = '2015/2016' AND (M.`home_team_goal` - M.`away_team_goal`) < 0 GROUP BY T.`team_long_name` ORDER BY COUNT(M.`id`) ASC LIMIT 1
SELECT DISTINCT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.penalties DESC LIMIT 10
SELECT T1.away_team_api_id FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Scotland Premier League' AND T1.season = '2009/2010' AND T1.away_team_goal > T1.home_team_goal GROUP BY T1.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T.team_long_name, TA.buildUpPlaySpeed FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_fifa_api_id = TA.team_fifa_api_id ORDER BY TA.buildUpPlaySpeed DESC LIMIT 4
SELECT L.name FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY L.id ORDER BY COUNT(CASE WHEN M.home_team_goal = M.away_team_goal THEN 1 END) DESC LIMIT 1;
SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', Player.birthday) AS age FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.sprint_speed >= 97 AND Player_Attributes.date >= '2013-01-01 00:00:00' AND Player_Attributes.date <= '2015-12-31 00:00:00'
SELECT L.`name`, COUNT(M.`id`) AS match_count FROM `League` AS L INNER JOIN `Match` AS M ON L.`id` = M.`league_id` GROUP BY L.`name` ORDER BY match_count DESC LIMIT 1
SELECT AVG(height) FROM `Player` WHERE `birthday` >= '1990-01-01 00:00:00' AND `birthday` < '1996-01-01 00:00:00'
SELECT DISTINCT `Player_Attributes`.`player_api_id` FROM `Player_Attributes` WHERE `overall_rating` = (SELECT MAX(`overall_rating`) FROM `Player_Attributes` WHERE substr(`date`,1,4) = '2010')
SELECT `Team`.`team_fifa_api_id` FROM `Team` JOIN `Team_Attributes` ON `Team`.`team_fifa_api_id` = `Team_Attributes`.`team_fifa_api_id` WHERE `Team_Attributes`.`buildUpPlaySpeed` BETWEEN 51 AND 59
SELECT T.`team_long_name` FROM `Team` AS T INNER JOIN `Team_Attributes` AS TA ON T.`team_fifa_api_id` = TA.`team_fifa_api_id` WHERE TA.`buildUpPlayPassing` > (SELECT AVG(`buildUpPlayPassing`) FROM `Team_Attributes` WHERE strftime('%Y', `date`) = '2012' AND `buildUpPlayPassing` IS NOT NULL) AND strftime('%Y', TA.`date`) = '2012'
SELECT CAST(SUM(CASE WHEN PA.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(P.player_fifa_api_id) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'
SELECT L.`name`, SUM(M.`home_team_goal` + M.`away_team_goal`) AS total_goals FROM `League` AS L INNER JOIN `Match` AS M ON L.`id` = M.`league_id` GROUP BY L.`id`, L.`name` ORDER BY total_goals ASC LIMIT 5
SELECT CAST(SUM(PA.`long_shots`) AS REAL) / COUNT(P.`player_fifa_api_id`) FROM `Player` AS P INNER JOIN `Player_Attributes` AS PA ON P.`player_api_id` = PA.`player_api_id` WHERE P.`player_name` = 'Ahmed Samir Farag'
SELECT Player.`player_name` FROM Player INNER JOIN Player_Attributes ON Player.`player_api_id` = Player_Attributes.`player_api_id` WHERE Player.`height` > 180 GROUP BY Player.`player_fifa_api_id` ORDER BY AVG(Player_Attributes.`heading_accuracy`) DESC LIMIT 10;
SELECT DISTINCT T3.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T3 ON T1.team_api_id = T3.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T1.date >= '2014-01-01 00:00:00' AND T1.date < '2014-02-01 00:00:00' AND T1.chanceCreationPassing < (SELECT AVG(T2.chanceCreationPassing) FROM Team_Attributes AS T2 WHERE T2.buildUpPlayDribblingClass = 'Normal' AND T2.date >= '2014-01-01 00:00:00' AND T2.date < '2014-02-01 00:00:00') ORDER BY T1.chanceCreationPassing DESC;
SELECT L.`name` FROM `League` AS L INNER JOIN `Match` AS M ON L.`id` = M.`league_id` WHERE M.`season` = '2009/2010' GROUP BY L.`name` HAVING AVG(M.`home_team_goal`) > AVG(M.`away_team_goal`);
SELECT Team.team_short_name FROM Team WHERE Team.team_long_name = 'Queens Park Rangers'
SELECT player_name FROM Player WHERE substr(birthday, 1, 4) = '1970' AND substr(birthday, 6, 2) = '10'
SELECT T2.attacking_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Franco Zennaro'
SELECT T2.`buildUpPlayPositioningClass` FROM `Team` AS T1 INNER JOIN `Team_Attributes` AS T2 ON T1.`team_fifa_api_id` = T2.`team_fifa_api_id` WHERE T1.`team_long_name` = 'ADO Den Haag'
SELECT Player_Attributes.heading_accuracy FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Francois Affolter' AND Player_Attributes.date = '2014-09-18 00:00:00'
SELECT T1.`overall_rating` FROM `Player_Attributes` AS T1 INNER JOIN `Player` AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`player_name` = 'Gabriel Tamas' AND strftime('%Y', T1.`date`) = '2011'
SELECT COUNT(M.`id`) FROM `Match` AS M INNER JOIN `League` AS L ON M.`league_id` = L.`id` WHERE L.`name` = 'Scotland Premier League' AND M.`season` = '2015/2016'
SELECT T1.preferred_foot FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.birthday DESC LIMIT 1
SELECT DISTINCT P.`player_name` FROM `Player` AS P INNER JOIN `Player_Attributes` AS PA ON P.`player_fifa_api_id` = PA.`player_fifa_api_id` WHERE PA.`potential` = (SELECT MAX(`potential`) FROM `Player_Attributes`);
SELECT COUNT(P.`player_api_id`) FROM `Player` AS P INNER JOIN `Player_Attributes` AS PA ON P.`player_api_id` = PA.`player_api_id` WHERE P.`weight` < 130 AND PA.`preferred_foot` = 'left'
SELECT DISTINCT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_fifa_api_id = TA.team_fifa_api_id WHERE TA.chanceCreationPassingClass = 'Risky'
SELECT T1.defensive_work_rate FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'David Wilson'
SELECT P.birthday FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT League.name FROM League INNER JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands'
SELECT AVG(M.home_team_goal) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id INNER JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Poland' AND M.season = '2010/2011'
SELECT P.`player_name` FROM `Player` AS P INNER JOIN `Player_Attributes` AS PA ON P.`player_api_id` = PA.`player_api_id` WHERE P.`height` = (SELECT MAX(`height`) FROM `Player`) OR P.`height` = (SELECT MIN(`height`) FROM `Player`) GROUP BY P.`player_name` ORDER BY AVG(PA.`finishing`) DESC LIMIT 1
SELECT `player_name` FROM `Player` WHERE `height` > 180
SELECT COUNT(id) FROM Player WHERE strftime('%Y', birthday) > '1990'
SELECT COUNT(*) FROM `Player` WHERE `player_name` LIKE 'Adam%' AND `weight` > 170
SELECT DISTINCT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating > 80 AND strftime('%Y', PA.date) BETWEEN '2008' AND '2010'
SELECT `Player_Attributes`.`potential` FROM `Player` INNER JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` WHERE `Player`.`player_name` = 'Aaron Doran'
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = 'left'
SELECT DISTINCT T1.team_long_name FROM `Team` AS T1 INNER JOIN `Team_Attributes` AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast'
SELECT Team_Attributes.buildUpPlayPassingClass FROM Team INNER JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team.team_short_name = 'CLB'
SELECT Team.team_short_name FROM Team INNER JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team_Attributes.buildUpPlayPassing > 70
SELECT AVG(T1.overall_rating) FROM `Player_Attributes` AS T1 INNER JOIN `Player` AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T1.date) BETWEEN '2010' AND '2015' AND T2.height > 170
SELECT player_name FROM Player ORDER BY height ASC LIMIT 1
SELECT C.`name` FROM `League` AS L INNER JOIN `Country` AS C ON L.`country_id` = C.`id` WHERE L.`name` = 'Italy Serie A'
SELECT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.buildUpPlaySpeed = 31 AND TA.buildUpPlayDribbling = 53 AND TA.buildUpPlayPassing = 32
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Doran'
SELECT COUNT(*) FROM `Match` AS M INNER JOIN `League` AS L ON M.league_id = L.id WHERE L.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', M.date) BETWEEN '2008-08' AND '2008-10'
SELECT T.team_short_name FROM Match AS M INNER JOIN Team AS T ON M.home_team_api_id = T.team_api_id WHERE M.home_team_goal = 10
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.potential = 61 AND Player_Attributes.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61)
SELECT ABS(AVG(CASE WHEN T1.player_name = 'Abdou Diallo' THEN T2.ball_control END) - AVG(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN T2.ball_control END)) AS difference FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id
SELECT T.team_long_name FROM Team AS T WHERE T.team_short_name = 'GEN'
SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1
SELECT `player_name` FROM `Player` WHERE `height` = (SELECT MAX(`height`) FROM `Player`)
SELECT COUNT(T1.`id`) FROM `Player_Attributes` AS T1 WHERE T1.`preferred_foot` = 'left' AND T1.`attacking_work_rate` = 'low'
SELECT Country.`name` FROM League INNER JOIN Country ON League.`country_id` = Country.`id` WHERE League.`name` = 'Belgium Jupiler League'
SELECT `League`.`name` FROM `League` INNER JOIN `Country` ON `League`.`country_id` = `Country`.`id` WHERE `Country`.`name` = 'Germany'
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT COUNT(Player.`id`) FROM Player JOIN Player_Attributes ON Player.`player_api_id` = Player_Attributes.`player_api_id` WHERE strftime('%Y', Player.`birthday`) < '1986' AND Player_Attributes.`defensive_work_rate` = 'high'
SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY PA.crossing DESC LIMIT 1
SELECT T1.heading_accuracy FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Ariel Borysiuk'
SELECT COUNT(DISTINCT P.`id`) FROM `Player` AS P INNER JOIN `Player_Attributes` AS PA ON P.`player_api_id` = PA.`player_api_id` WHERE P.`height` > 180 AND PA.`volleys` > 70
SELECT DISTINCT P.`player_name` FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.`player_api_id` = PA.`player_api_id` WHERE PA.`volleys` > 70 AND PA.`dribbling` > 70
SELECT COUNT(*) FROM `Match` WHERE `season` = '2008/2009' AND `country_id` = (SELECT `id` FROM `Country` WHERE `name` = 'Belgium')
SELECT PA.`long_passing` FROM `Player_Attributes` AS PA INNER JOIN `Player` AS P ON PA.`player_api_id` = P.`player_api_id` ORDER BY P.`birthday` ASC LIMIT 1
SELECT COUNT(*) FROM `Match` AS M INNER JOIN `League` AS L ON M.league_id = L.id WHERE L.name = 'Belgium Jupiler League' AND strftime('%Y', M.date) = '2009' AND strftime('%m', M.date) = '04'
SELECT L.`name` FROM `Match` AS M INNER JOIN `League` AS L ON M.`league_id` = L.`id` WHERE M.`season` = '2008/2009' GROUP BY M.`league_id` ORDER BY COUNT(M.`id`) DESC LIMIT 1
SELECT AVG(Player_Attributes.`overall_rating`) FROM Player_Attributes INNER JOIN Player ON Player_Attributes.`player_api_id` = Player.`player_api_id` WHERE strftime('%Y', Player.`birthday`) < '1986'
SELECT ((SELECT overall_rating FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Ariel Borysiuk') - (SELECT overall_rating FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Paulin Puel')) / (SELECT overall_rating FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Paulin Puel') * 100 AS percentage_difference;
SELECT AVG(TA.`buildUpPlaySpeed`) FROM `Team` AS T INNER JOIN `Team_Attributes` AS TA ON T.`team_api_id` = TA.`team_api_id` WHERE T.`team_long_name` = 'Heart of Midlothian'
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'
SELECT SUM(T1.crossing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox'
SELECT MAX(TA.chanceCreationPassing) AS highest_chance_creation_passing, TA.chanceCreationPassingClass FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_fifa_api_id = TA.team_fifa_api_id WHERE T.team_long_name = 'Ajax'
SELECT T2.preferred_foot FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_name = 'Abdou Diallo' WHERE T1.player_name = 'Abdou Diallo'
SELECT MAX(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon'
SELECT AVG(M.`away_team_goal`) FROM `Match` AS M INNER JOIN `Team` AS T ON M.`away_team_api_id` = T.`team_api_id` INNER JOIN `League` AS L ON M.`league_id` = L.`id` WHERE T.`team_long_name` = 'Parma' AND L.`name` LIKE '%Italy%'
SELECT `player_name` FROM `Player` INNER JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` WHERE `Player_Attributes`.`overall_rating` = 77 AND `Player_Attributes`.`date` = '2016-06-23' AND `Player`.`birthday` IS NOT NULL ORDER BY `Player`.`birthday` ASC LIMIT 1
SELECT T1.`overall_rating` FROM `Player_Attributes` AS T1 INNER JOIN `Player` AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`player_name` = 'Aaron Mooy' AND T1.`date` = '2016-02-04 00:00:00'
SELECT Player_Attributes.potential FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Francesco Parravicini' AND Player_Attributes.date = '2010-08-30 00:00:00'
SELECT `Player_Attributes`.`attacking_work_rate` FROM `Player` INNER JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` WHERE `Player`.`player_name` = 'Francesco Migliore' AND `Player_Attributes`.`date` = '2015-05-01 00:00:00'
SELECT Player_Attributes.defensive_work_rate FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Kevin Berigaud' AND Player_Attributes.date = '2013-02-22 00:00:00'
SELECT MIN(T1.`date`) FROM `Player_Attributes` AS T1 INNER JOIN `Player` AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`player_name` = 'Kevin Constant' AND T1.`crossing` = (SELECT MAX(T3.`crossing`) FROM `Player_Attributes` AS T3 INNER JOIN `Player` AS T4 ON T3.`player_api_id` = T4.`player_api_id` WHERE T4.`player_name` = 'Kevin Constant')
SELECT `buildUpPlaySpeedClass` FROM `Team_Attributes` AS T1 INNER JOIN `Team` AS T2 ON T1.`team_fifa_api_id` = T2.`team_fifa_api_id` WHERE T2.`team_long_name` = 'Willem II' AND T1.`date` = '2011-02-22 00:00:00'
SELECT T2.buildUpPlayDribblingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_short_name = 'LEI' AND T2.date = '2015-09-10 00:00:00'
SELECT T1.`buildUpPlayPassingClass` FROM `Team_Attributes` AS T1 INNER JOIN `Team` AS T2 ON T1.`team_fifa_api_id` = T2.`team_fifa_api_id` WHERE T2.`team_long_name` = 'FC Lorient' AND T1.`date` = '2010-02-22'
SELECT T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'PEC Zwolle' AND T2.date = '2013-09-20 00:00:00'
SELECT T2.chanceCreationCrossingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'Hull City' AND T2.date = '2010-02-22 00:00:00'
SELECT T2.`defenceAggressionClass` FROM `Team` AS T1 INNER JOIN `Team_Attributes` AS T2 ON T1.`team_fifa_api_id` = T2.`team_fifa_api_id` WHERE T1.`team_long_name` = 'Hannover 96' AND T2.`date` = '2015-09-10 00:00:00'
SELECT AVG(T1.`overall_rating`) AS average_rating FROM `Player_Attributes` AS T1 INNER JOIN `Player` AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`player_name` = 'Marko Arnautovic' AND T1.`date` BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'
SELECT CAST((SELECT overall_rating FROM Player AS P1 INNER JOIN Player_Attributes AS PA1 ON P1.player_api_id = PA1.player_api_id WHERE P1.player_name = 'Landon Donovan' AND PA1.date = '2013-07-12') - (SELECT overall_rating FROM Player AS P2 INNER JOIN Player_Attributes AS PA2 ON P2.player_api_id = PA2.player_api_id WHERE P2.player_name = 'Jordan Bowery' AND PA2.date = '2013-07-12') AS REAL) * 100 / (SELECT overall_rating FROM Player AS P1 INNER JOIN Player_Attributes AS PA1 ON P1.player_api_id = PA1.player_api_id WHERE P1.player_name = 'Landon Donovan' AND PA1.date = '2013-07-12') AS percentage
SELECT `player_name` FROM `Player` ORDER BY `height` DESC LIMIT 5
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10
SELECT player_name FROM Player WHERE strftime('%Y', 'now') - strftime('%Y', birthday) >= 35
SELECT SUM(M.home_team_goal) FROM Match AS M INNER JOIN Player AS P ON M.home_player_1 = P.player_api_id OR M.home_player_2 = P.player_api_id OR M.home_player_3 = P.player_api_id OR M.home_player_4 = P.player_api_id OR M.home_player_5 = P.player_api_id OR M.home_player_6 = P.player_api_id OR M.home_player_7 = P.player_api_id OR M.home_player_8 = P.player_api_id OR M.home_player_9 = P.player_api_id OR M.home_player_10 = P.player_api_id OR M.home_player_11 = P.player_api_id WHERE P.player_name = 'Aaron Lennon'
SELECT SUM(M.away_team_goal) FROM Match AS M INNER JOIN Player AS P ON P.player_api_id IN (M.away_player_1, M.away_player_2, M.away_player_3, M.away_player_4, M.away_player_5, M.away_player_6, M.away_player_7, M.away_player_8, M.away_player_9, M.away_player_10, M.away_player_11) WHERE P.player_name IN ('Daan Smith', 'Filipe Ferreira')
SELECT SUM(M.home_team_goal) FROM Match AS M INNER JOIN Player AS P ON M.home_player_1 = P.player_api_id OR M.home_player_2 = P.player_api_id OR M.home_player_3 = P.player_api_id OR M.home_player_4 = P.player_api_id OR M.home_player_5 = P.player_api_id OR M.home_player_6 = P.player_api_id OR M.home_player_7 = P.player_api_id OR M.home_player_8 = P.player_api_id OR M.home_player_9 = P.player_api_id OR M.home_player_10 = P.player_api_id OR M.home_player_11 = P.player_api_id WHERE (strftime('%Y', 'now') - strftime('%Y', P.birthday)) <= 30
SELECT DISTINCT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 10
SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes);
SELECT player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.attacking_work_rate = 'high'
SELECT `Player`.`player_name` FROM `Player` INNER JOIN `Player_Attributes` ON `Player`.`player_api_id` = `Player_Attributes`.`player_api_id` WHERE `Player_Attributes`.`finishing` = 1 ORDER BY `Player`.`birthday` LIMIT 1
SELECT T2.player_name FROM Player AS T2 INNER JOIN Player_Attributes AS T3 ON T2.player_api_id = T3.player_api_id INNER JOIN Country AS T1 ON T3.id = T1.id WHERE T1.name = 'Belgium'
SELECT T2.player_name FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.vision > 89
SELECT C.name FROM Country AS C INNER JOIN Player AS P ON C.id = P.id GROUP BY C.id ORDER BY AVG(P.weight) DESC LIMIT 1
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Slow'
SELECT DISTINCT T.`team_short_name` FROM `Team` AS T INNER JOIN `Team_Attributes` AS TA ON T.`team_api_id` = TA.`team_api_id` WHERE TA.`chanceCreationPassingClass` = 'Safe'
SELECT AVG(P.height) FROM Player AS P INNER JOIN Country AS C ON P.id = C.id WHERE C.name = 'Italy'
SELECT `player_name` FROM `Player` WHERE `height` > 180 ORDER BY `player_name` ASC LIMIT 3
SELECT COUNT(*) FROM `Player` WHERE `birthday` > '1990-12-31' AND `player_name` LIKE 'Aaron%'
SELECT ABS(T1.jumping - T2.jumping) AS jumping_difference FROM Player_Attributes AS T1, Player_Attributes AS T2 WHERE T1.id = 6 AND T2.id = 23
SELECT T1.id FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential = (SELECT MIN(potential) FROM Player_Attributes) AND T2.preferred_foot = 'right' LIMIT 3
SELECT COUNT(DISTINCT T1.player_api_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND T1.preferred_foot = 'left' AND T1.attacking_work_rate = 'high'
SELECT CAST(COUNT(CASE WHEN T1.strength > 80 AND T1.stamina > 80 THEN 1 END) AS REAL) * 100 / COUNT(T1.player_api_id) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id
SELECT T2.`name` FROM `League` AS T1 INNER JOIN `Country` AS T2 ON T1.`country_id` = T2.`id` WHERE T1.`name` = 'Poland Ekstraklasa'
SELECT Match.`home_team_goal`, Match.`away_team_goal` FROM Match INNER JOIN League ON Match.league_id = League.id WHERE Match.date LIKE '2008-09-24%' AND League.name = 'Belgium Jupiler League'
SELECT Player_Attributes.`sprint_speed`, Player_Attributes.`agility`, Player_Attributes.`acceleration` FROM Player INNER JOIN Player_Attributes ON Player.`player_api_id` = Player_Attributes.`player_api_id` WHERE Player.`player_name` = 'Alexis Blin'
SELECT T1.`team_long_name`, T2.`buildUpPlaySpeedClass` FROM `Team` AS T1 INNER JOIN `Team_Attributes` AS T2 ON T1.`team_api_id` = T2.`team_api_id` WHERE T1.`team_long_name` = 'KSV Cercle Brugge' AND T2.`buildUpPlaySpeedClass` IN ('Slow', 'Balanced', 'Fast')
SELECT COUNT(M.`id`) FROM `Match` AS M INNER JOIN `League` AS L ON M.`league_id` = L.`id` WHERE M.`season` = '2015/2016' AND L.`name` = 'Italian Serie A'
SELECT MAX(`home_team_goal`) FROM `Match` INNER JOIN `League` ON `Match`.`league_id` = `League`.`id` WHERE `League`.`name` = 'Netherlands Eredivisie'
SELECT PA.finishing, PA.curve FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.weight = (SELECT MAX(weight) FROM Player)
SELECT L.`name` FROM `Match` AS M INNER JOIN `League` AS L ON M.`league_id` = L.`id` WHERE M.`season` = '2015/2016' GROUP BY L.`name` ORDER BY COUNT(M.`id`) DESC LIMIT 1
SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id ORDER BY T1.away_team_goal DESC LIMIT 1
SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 1
SELECT CAST(COUNT(CASE WHEN P.height < 180 AND PA.overall_rating > 70 THEN 1 END) AS REAL) * 100 / COUNT(P.id) AS percentage FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id
WITH MaleCounts AS (SELECT COUNT(ID) AS InPatientCount FROM Patient WHERE SEX = 'M' AND Admission = '+'), OutPatientCounts AS (SELECT COUNT(ID) AS OutPatientCount FROM Patient WHERE SEX = 'M' AND Admission = '-') SELECT (InPatientCount - OutPatientCount) * 100.0 / NULLIF(OutPatientCount, 0) AS DeviationPercentage FROM MaleCounts, OutPatientCounts;
SELECT CAST(COUNT(CASE WHEN SEX = 'F' AND strftime('%Y', Birthday) > '1930' THEN 1 END) AS REAL) * 100 / COUNT(CASE WHEN SEX = 'F' THEN 1 END) AS percentage FROM Patient
SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31'
SELECT CAST(COUNT(CASE WHEN P.`Admission` = '-' THEN 1 END) AS REAL) / NULLIF(COUNT(CASE WHEN P.`Admission` = '+' THEN 1 END), 0) AS ratio FROM `Patient` AS P WHERE P.`Diagnosis` = 'SLE'
SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = '30609'
SELECT T1.`SEX`, T1.`Birthday`, T2.`Examination Date`, T2.`Symptoms` FROM `Patient` AS T1 LEFT JOIN `Examination` AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`ID` = '163109'
SELECT P.`ID`, P.`SEX`, P.`Birthday` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`LDH` > 500
SELECT T1.ID, (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) AS age FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'
SELECT P.`ID`, P.`SEX`, P.`Diagnosis` FROM `Patient` AS P INNER JOIN `Examination` AS E ON P.`ID` = E.`ID` WHERE E.`Thrombosis` = 2
SELECT DISTINCT P.* FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE strftime('%Y', P.`Birthday`) = '1937' AND L.`T-CHO` >= 250
SELECT P.`ID`, P.`SEX`, P.`Diagnosis` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`ALB` < 3.5
SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
SELECT AVG(`Examination`.`aCL IgG`) FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` WHERE `Patient`.`Admission` = '+' AND (strftime('%Y', 'now') - strftime('%Y', `Patient`.`Birthday`) >= 50)
SELECT COUNT(*) FROM `Patient` AS T1 WHERE T1.`SEX` = 'F' AND strftime('%Y', T1.`Description`) = '1997' AND T1.`Admission` = '-'
SELECT MIN(strftime('%Y', `First Date`) - strftime('%Y', `Birthday`)) FROM `Patient`
SELECT COUNT(DISTINCT P.ID) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Thrombosis = '1' AND strftime('%Y', E.`Examination Date`) = '1997' AND P.SEX = 'F'
SELECT MAX(strftime('%Y', Birthday)) - MIN(strftime('%Y', Birthday)) AS age_gap FROM Patient WHERE ID IN (SELECT DISTINCT ID FROM Laboratory WHERE TG >= 200)
SELECT E.Symptoms, E.Diagnosis FROM Examination AS E INNER JOIN Patient AS P ON E.Diagnosis = P.Diagnosis WHERE P.Birthday = (SELECT MIN(Birthday) FROM Patient)
SELECT COUNT(DISTINCT T1.ID) / 12.0 AS average_male_patients FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.Date BETWEEN '1998-01-01' AND '1998-12-31'
SELECT L.Date, strftime('%Y', P.Description) - strftime('%Y', P.Birthday) AS age FROM Patient AS P INNER JOIN Examination AS E ON P.Diagnosis = E.Diagnosis INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Diagnosis = 'MCTD' ORDER BY P.Birthday ASC LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.SEX = 'M' AND T2.UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(CASE WHEN T1.SEX = 'F' AND T2.UA <= 6.5 THEN 1 ELSE 0 END), 0) AS Ratio FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P LEFT JOIN Examination AS E ON P.ID = E.ID WHERE (strftime('%Y', E.`Examination Date`) - strftime('%Y', P.`First Date`)) >= 1 OR E.ID IS NULL
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Birthday > strftime('%Y', 'now', '-18 years') AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.`T-BIL` > 2.0
SELECT T1.`Diagnosis` FROM `Examination` AS T1 WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T1.`Diagnosis` ORDER BY COUNT(T1.`Diagnosis`) DESC LIMIT 1
SELECT AVG(STRFTIME('%Y', '1991-10-30') - STRFTIME('%Y', P.Birthday)) AS average_age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.Date BETWEEN '1991-10-01' AND '1991-10-30'
SELECT (strftime('%Y', E.`Examination Date`) - strftime('%Y', P.`Birthday`)) AS Age, P.`Diagnosis` FROM `Examination` AS E INNER JOIN `Patient` AS P ON E.`ID` = P.`ID` INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`HGB` = (SELECT MAX(`HGB`) FROM `Laboratory` WHERE `ID` = P.`ID`) LIMIT 1
SELECT T1.ANA FROM Examination AS T1 WHERE T1.ID IN (SELECT T2.ID FROM Patient AS T2 WHERE T2.ID = 3605340) AND T1.`Examination Date` = '1996-12-02'
SELECT CASE WHEN T1.`T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END AS `Cholesterol Status` FROM `Laboratory` AS T1 WHERE T1.`ID` = 2927464 AND T1.`Date` = '1995-09-04'
SELECT `SEX` FROM `Patient` WHERE `Diagnosis` = 'AORTITIS' LIMIT 1
SELECT T2.`aCL IgM` FROM `Patient` AS T1 INNER JOIN `Examination` AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Diagnosis` = 'SLE' AND T1.`Description` = '1994-02-19' AND T2.`Examination Date` = '1993-11-12'
SELECT T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT = '9' AND T2.Date = '1992-06-12'
SELECT strftime('%Y', '1991-10-21') - strftime('%Y', T2.Birthday) AS age FROM Patient AS T2 INNER JOIN Laboratory AS T1 ON T1.ID = T2.ID WHERE T1.UA = '8.4' AND T1.Date = '1991-10-21'
SELECT COUNT(Laboratory.`ID`) FROM Laboratory INNER JOIN Patient ON Laboratory.`ID` = Patient.`ID` WHERE Patient.`First Date` = '1991-06-13' AND Patient.`Diagnosis` = 'SJS' AND strftime('%Y', Laboratory.`Date`) = '1995'
SELECT T2.`Diagnosis` FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Diagnosis` = 'SLE' AND T1.`Examination Date` = '1997-01-27'
SELECT E.`Symptoms` FROM `Examination` AS E INNER JOIN `Patient` AS P ON E.`ID` = P.`ID` WHERE P.`Birthday` = '1959-03-01' AND E.`Examination Date` = '1993-09-27'
SELECT (SUM(CASE WHEN P.Birthday = '1959-02-18' AND L.Date LIKE '1981-11-%' THEN L.`T-CHO` ELSE 0 END) - SUM(CASE WHEN P.Birthday = '1959-02-18' AND L.Date LIKE '1981-12-%' THEN L.`T-CHO` ELSE 0 END)) AS decrease_rate FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday = '1959-02-18'
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'Behcet''s' AND T2.`Examination Date` >= '1970-01-01' AND T2.`Examination Date` <= '1997-12-31'
SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.Date BETWEEN '1987-07-06' AND '1996-01-31' AND L.GPT > 30 AND L.ALB < 4
SELECT `ID` FROM `Patient` WHERE `SEX` = 'F' AND strftime('%Y', `Birthday`) = '1964' AND `Admission` = '+'
SELECT COUNT(DISTINCT P.`ID`) FROM Patient AS P INNER JOIN Examination AS E ON P.`ID` = E.`ID` WHERE E.`Thrombosis` = 2 AND E.`ANA` = 'S' AND E.`aCL IgM` > (SELECT AVG(E2.`aCL IgM`) * 1.2 FROM Examination AS E2 WHERE E2.`ANA` = 'S' AND E2.`Thrombosis` = 2)
SELECT CAST(SUM(CASE WHEN Laboratory.`UA` <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN Laboratory.`U-PRO` > 0 AND Laboratory.`U-PRO` < 30 THEN 1 END) AS percentage FROM Patient INNER JOIN Laboratory ON Patient.`ID` = Laboratory.`ID` WHERE Laboratory.`U-PRO` > 0 AND Laboratory.`U-PRO` < 30
SELECT (SUM(CASE WHEN P.`Diagnosis` = 'BEHCET' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM `Patient` AS P WHERE P.`SEX` = 'M' AND strftime('%Y', P.`First Date`) = '1981'
SELECT DISTINCT T1.ID FROM `Patient` AS T1 INNER JOIN `Laboratory` AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.Date LIKE '1991-10%' AND T2.`T-BIL` < 2.0
SELECT COUNT(*) FROM `Patient` AS T1 INNER JOIN `Examination` AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'F' AND T1.`Birthday` BETWEEN '1980-01-01' AND '1989-12-31' AND T2.`ANA Pattern` != 'P'
SELECT P.`SEX` FROM `Patient` AS P INNER JOIN `Examination` AS E ON P.`ID` = E.`ID` INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE E.`Diagnosis` = 'PSS' AND L.`CRP` > 2 AND L.`CRE` = 1 AND L.`LDH` = 123
SELECT AVG(Laboratory.`ALB`) FROM Laboratory INNER JOIN Patient ON Laboratory.`ID` = Patient.`ID` WHERE Patient.`SEX` = 'F' AND Laboratory.`PLT` > 400 AND Patient.`Diagnosis` = 'SLE'
SELECT MAX(`Symptoms`) FROM `Examination` AS T1 INNER JOIN `Patient` AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`Diagnosis` = 'SLE'
SELECT T1.`First Date`, T1.`Diagnosis` FROM `Patient` AS T1 WHERE T1.`ID` = 48473
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 WHERE T1.SEX = 'F' AND T1.Diagnosis = 'APS'
SELECT COUNT(DISTINCT P.`ID`) FROM Patient AS P INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` INNER JOIN Examination AS E ON P.`ID` = E.`ID` WHERE strftime('%Y', E.`Examination Date`) = '1997' AND (L.`TP` < 6 OR L.`TP` > 8.5)
SELECT CAST(SUM(CASE WHEN P.Diagnosis LIKE '%ITP%' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(SUM(CASE WHEN P.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END), 0) AS proportion FROM Patient AS P
SELECT CAST(SUM(CASE WHEN P.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(P.SEX) AS percentage FROM Patient AS P WHERE strftime('%Y', P.Birthday) = '1980' AND P.Diagnosis = 'RA'
SELECT COUNT(DISTINCT T1.`ID`) FROM `Examination` AS T1 INNER JOIN `Patient` AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`SEX` = 'M' AND T1.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND T1.`Diagnosis` = 'BEHCET' AND T2.`Admission` = '-'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.WBC < 3.5
SELECT julianday(T1.`Examination Date`) - julianday(T2.`First Date`) AS `Days After Arrival` FROM `Examination` AS T1 INNER JOIN `Patient` AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`ID` = 821298
SELECT CASE WHEN L.UA > 8.0 AND P.SEX = 'M' THEN 'Yes' WHEN L.UA > 6.5 AND P.SEX = 'F' THEN 'Yes' ELSE 'No' END AS `Uric Acid Normal Range` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE P.`ID` = 57266
SELECT T2.`Date` FROM Laboratory AS T2 INNER JOIN Patient AS T1 ON T2.`ID` = T1.`ID` WHERE T1.`ID` = '48473' AND T2.`GOT` >= 60
SELECT P.`ID`, P.`SEX`, P.`Birthday` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`GOT` < 60 AND strftime('%Y', L.`Date`) = '1994'
SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GPT >= 60
SELECT DISTINCT P.`Diagnosis` FROM Patient AS P INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` WHERE L.`GPT` > 60 ORDER BY P.`Birthday` ASC
SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500
SELECT T1.`ID`, (strftime('%Y', 'now') - strftime('%Y', T1.`Birthday`)) AS age FROM `Patient` AS T1 INNER JOIN `Laboratory` AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`LDH` BETWEEN 600 AND 800
SELECT T1.`Admission`, COUNT(T1.`ID`) AS `Patient Count` FROM `Patient` AS T1 INNER JOIN `Laboratory` AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`ALP` < 300 GROUP BY T1.`Admission`
SELECT P.`ID` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE P.`Birthday` = '1982-04-01' AND L.`ALP` < 300
SELECT DISTINCT P.`ID`, P.`SEX`, P.`Birthday` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`TP` < 6.0
SELECT DISTINCT (L.TP - 8.5) AS Deviation FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.TP > 8.5
SELECT T1.* FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC
SELECT T1.ID, CASE WHEN T2.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range' ELSE 'Out of Normal Range' END AS Albumin_Status FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) = '1982'
SELECT CAST(SUM(CASE WHEN P.SEX = 'F' AND L.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F'
SELECT AVG(L.`UA`) FROM Laboratory AS L INNER JOIN Patient AS P ON L.`ID` = P.`ID` WHERE (P.`SEX` = 'M' AND L.`UA` < 8.0) OR (P.`SEX` = 'F' AND L.`UA` < 6.5) AND L.`Date` = (SELECT MAX(`Date`) FROM Laboratory WHERE `ID` = L.`ID`)
SELECT DISTINCT P.`ID`, P.`SEX`, P.`Birthday` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`UN` = 29
SELECT P.`ID`, P.`SEX`, P.`Birthday` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE P.`Diagnosis` = 'RA' AND L.`UN` < 30
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.CRE >= 1.5
SELECT CASE WHEN SUM(CASE WHEN P.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN P.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END AS Result FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CRE >= 1.5;
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory)
SELECT T1.SEX, COUNT(T1.ID) AS patient_count FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX
SELECT T1.ID, T2.`T-CHO` FROM `Patient` AS T1 INNER JOIN `Laboratory` AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Birthday` = (SELECT MIN(`Birthday`) FROM `Patient` WHERE `ID` IN (SELECT `ID` FROM `Laboratory` WHERE `T-CHO` IS NOT NULL AND `T-CHO` = (SELECT MAX(`T-CHO`) FROM `Laboratory`))) LIMIT 1
SELECT AVG(STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-CHO` >= 250
SELECT P.`ID`, P.`Diagnosis` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`TG` > 300
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG >= 200 AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 50
SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.CPK < 250
SELECT COUNT(DISTINCT P.`ID`) AS Male_Patients FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE P.`SEX` = 'M' AND P.`Birthday` BETWEEN '1936-01-01' AND '1956-12-31' AND L.`CPK` >= 250
SELECT DISTINCT P.`ID`, P.`SEX`, (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.`Birthday`)) AS age FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`GLU` >= 180 AND L.`T-CHO` < 250
SELECT DISTINCT P.ID, L.GLU FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.ID = L.ID WHERE L.GLU < 180 AND P.`First Date` >= '1991-01-01'
SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 ORDER BY strftime('%Y', 'now') - strftime('%Y', T1.Birthday) ASC, T1.SEX
SELECT T1.ID, strftime('%Y', 'now') - strftime('%Y', T1.Birthday) AS age, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5
SELECT DISTINCT P.`ID`, P.`Admission` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE P.`SEX` = 'F' AND (strftime('%Y', 'now') - strftime('%Y', P.`Birthday`)) >= 50 AND (L.`RBC` <= 3.5 OR L.`RBC` >= 6.0)
SELECT DISTINCT P.`ID`, P.`SEX` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE P.`Admission` = '-' AND L.`HGB` < 10
SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday LIMIT 1
SELECT P.ID, strftime('%Y', 'now') - strftime('%Y', P.Birthday) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.HCT >= 52 GROUP BY P.ID HAVING COUNT(L.ID) > 2
SELECT AVG(`HCT`) FROM `Laboratory` WHERE `HCT` < 29 AND `Date` LIKE '1991%'
SELECT COUNT(DISTINCT CASE WHEN Laboratory.PLT < 100 THEN Patient.ID END) AS lower_than_normal, COUNT(DISTINCT CASE WHEN Laboratory.PLT > 400 THEN Patient.ID END) AS higher_than_normal FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.PLT < 100 OR Laboratory.PLT > 400
SELECT DISTINCT P.ID, P.SEX, P.Birthday, P.Description, P."First Date" FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.Date LIKE '1984%' AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) < 50 AND L.PLT BETWEEN 100 AND 400
SELECT CAST(SUM(CASE WHEN P.SEX = 'F' AND L.PT >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN L.PT >= 14 THEN 1 ELSE 0 END) AS percentage FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 55
SELECT DISTINCT P.ID, P.SEX, P.Birthday, P.Description, P.`First Date`, P.Admission, P.Diagnosis FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.ID = L.ID WHERE P.`First Date` > '1992-01-01' AND L.`PT` < 14
SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` > '1997-01-01' AND T2.`APTT` IS NULL
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.APTT > 45 AND E.Thrombosis = 3
SELECT COUNT(DISTINCT P.`ID`) FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE P.`SEX` = 'M' AND L.`WBC` BETWEEN 3.5 AND 9.0 AND (L.`FG` <= 150 OR L.`FG` >= 450)
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND (L.FG < 150 OR L.FG > 450)
SELECT DISTINCT P.`Diagnosis` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`U-PRO` >= 30
SELECT T1.`ID` FROM `Patient` AS T1 INNER JOIN `Laboratory` AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Diagnosis` = 'SLE' AND T2.`U-PRO` > 0 AND T2.`U-PRO` < 30
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGG < 900 AND E.Symptoms = 'abortion'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T1.Diagnosis IS NOT NULL
SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGA = (SELECT MAX(IGA) FROM Laboratory WHERE IGA BETWEEN 80 AND 500)
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P WHERE P.ID IN (SELECT L.ID FROM Laboratory AS L WHERE L.IGA BETWEEN 80 AND 500) AND strftime('%Y', P.`First Date`) >= '1990'
SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP LIKE '+' OR T2.CRP LIKE '-' OR T2.CRP < 1.0) AND T1.Description IS NULL
SELECT COUNT(DISTINCT P.ID) FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.ID = L.ID WHERE L.CRP NOT IN ('+-', '-') AND L.CRP >= 1.0 AND (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) < 18
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.`KCT` = '+' AND E.`Diagnosis` = 'normal Rheumatoid Factor'
SELECT DISTINCT P.`Diagnosis` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE P.`Birthday` >= '1995-01-01' AND L.`RA` IN ('-', '+-')
SELECT DISTINCT P.`ID` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`RF` IS NULL AND (strftime('%Y', 'now') - strftime('%Y', P.`Birthday`)) > 60
SELECT COUNT(DISTINCT T1.`ID`) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`RF` < 20 AND T1.`ID` NOT IN (SELECT `ID` FROM Examination WHERE `Thrombosis` = '1')
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.C3 > 35 AND E.`ANA Pattern` = 'P'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.HCT < 29 OR T3.HCT > 52 ORDER BY T2.`aCL IgA` DESC LIMIT 1
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Thrombosis = 1 AND L.C4 > 10
SELECT COUNT(DISTINCT P.`ID`) FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`RNP` IN ('-', '+-') AND P.`Admission` = '+';
SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP NOT IN ('-', '+-') ORDER BY T1.Birthday DESC LIMIT 1
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.SM IN ('-', '+-') AND E.Thrombosis = 1
SELECT T1.`ID` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`SM` NOT IN ('-', '+-') ORDER BY T1.`Birthday` DESC LIMIT 3
SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E."Examination Date" >= '1997-01-01' AND L.SC170 IN ('-', '+-') AND E.ID IS NOT NULL AND L.Date IS NOT NULL
SELECT COUNT(DISTINCT P.`ID`) FROM Patient AS P INNER JOIN Examination AS E ON P.`ID` = E.`ID` INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` WHERE L.`SC170` IN ('-', '+-') AND P.`SEX` = 'M' AND E.`Symptoms` = 'vertigo'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('-', '+-') AND strftime('%Y', T1.`First Date`) < '1990'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA NOT IN ('-', '+-') AND T1.`First Date` = (SELECT MIN(`First Date`) FROM Patient WHERE `First Date` IS NOT NULL) AND T2.ID IN (SELECT DISTINCT T2.ID FROM Laboratory AS T2 WHERE T2.SSA NOT IN ('-', '+-'))
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.Diagnosis = E.Diagnosis WHERE E.`Diagnosis` = 'SLE' AND E.`aCL IgA` IS NULL
SELECT COUNT(DISTINCT P.`ID`) FROM `Patient` AS P INNER JOIN `Examination` AS E ON P.`ID` = E.`ID` INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`SSB` IN ('-', '+-') AND E.`Symptoms` IS NOT NULL
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA = '-' AND T2.SSB = '-' AND T1.SEX = 'M'
SELECT DISTINCT P.`Diagnosis` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`DNA` >= 8
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`DNA-II` >= 8 AND P.`Admission` = '+'
SELECT CAST(COUNT(CASE WHEN L.GOT >= 60 AND P.Diagnosis = 'SLE' THEN 1 END) AS REAL) * 100 / COUNT(CASE WHEN L.GOT >= 60 THEN 1 END) AS percentage FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID
SELECT COUNT(DISTINCT T1.`ID`) FROM `Patient` AS T1 INNER JOIN `Laboratory` AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'M' AND T2.`GOT` < 60
SELECT MAX(P.Birthday) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT >= 60
SELECT DISTINCT P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT < 60 ORDER BY L.GPT DESC LIMIT 3
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'
SELECT MIN(T1.`First Date`) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`LDH` < 500 AND T2.`LDH` = (SELECT MAX(`LDH`) FROM Laboratory WHERE `LDH` < 500)
SELECT MAX(L.Date) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.LDH >= 500 AND P.ID = (SELECT ID FROM Patient ORDER BY `First Date` DESC LIMIT 1)
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.ALP >= 300 AND P.Admission = '+'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.ALP < 300
SELECT DISTINCT P.`Diagnosis` FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`TP` < 6.0
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5
SELECT E.`Examination Date` FROM `Examination` AS E INNER JOIN `Laboratory` AS L ON E.`ID` = L.`ID` WHERE L.`ALB` = (SELECT MAX(L2.`ALB`) FROM `Laboratory` AS L2 WHERE L2.`ALB` > 3.5 AND L2.`ALB` < 5.5) AND L.`ID` = (SELECT L3.`ID` FROM `Laboratory` AS L3 WHERE L3.`ALB` = (SELECT MAX(L4.`ALB`) FROM `Laboratory` AS L4 WHERE L4.`ALB` > 3.5 AND L4.`ALB` < 5.5))
SELECT COUNT(DISTINCT P.`ID`) FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE P.`SEX` = 'M' AND L.`ALB` > 3.5 AND L.`ALB` < 5.5 AND L.`TP` BETWEEN 6.0 AND 8.5
SELECT T1.`aCL IgG`, T1.`aCL IgM`, T1.`aCL IgA` FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.`ID` = T2.`ID` INNER JOIN Laboratory AS T3 ON T1.`ID` = T3.`ID` WHERE T2.`SEX` = 'F' AND T3.`UA` = (SELECT MAX(`UA`) FROM Laboratory WHERE `UA` <= 6.50)
SELECT MAX(`Examination`.`ANA`) FROM `Examination` INNER JOIN `Patient` ON `Examination`.`ID` = `Patient`.`ID` INNER JOIN `Laboratory` ON `Patient`.`ID` = `Laboratory`.`ID` WHERE `Laboratory`.`CRE` < 1.5
SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.CRE < 1.5 AND E.`aCL IgA` = (SELECT MAX(`aCL IgA`) FROM Examination)
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-BIL` >= 2.0 AND E.`ANA Pattern` LIKE '%P%'
SELECT DISTINCT T1.ANA FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0 AND `T-BIL` IS NOT NULL) AND T2.`T-BIL` IS NOT NULL
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.`T-CHO` >= 250 AND E.`KCT` = '-'
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.`T-CHO` < 250 AND E.`ANA Pattern` = 'P'
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG < 200 AND P.Description IS NOT NULL
SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG < 200 ORDER BY L.TG DESC LIMIT 1
SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Thrombosis = 0 AND L.CPK < 250
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.Diagnosis = E.Diagnosis INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CPK < 250 AND (E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+')
SELECT MIN(P.Birthday) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU > 180
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU < 180 AND T1.ID NOT IN (SELECT ID FROM Examination WHERE Thrombosis = 1)
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND T2.WBC BETWEEN 3.5 AND 9.0
SELECT COUNT(DISTINCT P.ID) FROM `Patient` AS P INNER JOIN `Examination` AS E ON P.ID = E.ID INNER JOIN `Laboratory` AS L ON P.ID = L.ID WHERE P.`Diagnosis` = 'SLE' AND L.`WBC` BETWEEN 3.5 AND 9.0
SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.RBC <= 3.5 OR L.RBC >= 6.0) AND P.Admission = '-'
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.PLT > 100 AND L.PLT < 400 AND P.Diagnosis IS NOT NULL
SELECT Laboratory.`PLT` FROM Laboratory INNER JOIN Patient ON Laboratory.`ID` = Patient.`ID` WHERE Laboratory.`PLT` > 100 AND Laboratory.`PLT` < 400 AND Patient.`Diagnosis` = 'MCTD'
SELECT AVG(L.`PT`) FROM Laboratory AS L INNER JOIN Patient AS P ON L.`ID` = P.`ID` WHERE P.`SEX` = 'M' AND L.`PT` < 14
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Thrombosis IN (1, 2) AND T3.PT < 14
SELECT T1.`major_name` FROM `major` AS T1 INNER JOIN `member` AS T2 ON T1.`major_id` = T2.`link_to_major` WHERE T2.`first_name` = 'Angela' AND T2.`last_name` = 'Sanders'
SELECT COUNT(T1.`member_id`) FROM `member` AS T1 INNER JOIN `major` AS T2 ON T1.`link_to_major` = T2.`major_id` WHERE T2.`college` = 'College of Engineering'
SELECT T1.`first_name`, T1.`last_name` FROM `member` AS T1 INNER JOIN `major` AS T2 ON T1.`link_to_major` = T2.`major_id` WHERE T2.`department` = 'Art and Design Department'
SELECT COUNT(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women''s Soccer'
SELECT M.phone FROM member AS M INNER JOIN attendance AS A ON M.member_id = A.link_to_member INNER JOIN event AS E ON A.link_to_event = E.event_id WHERE E.event_name = 'Women''s Soccer'
SELECT COUNT(DISTINCT T3.`member_id`) FROM `attendance` AS T1 INNER JOIN `event` AS T2 ON T1.`link_to_event` = T2.`event_id` INNER JOIN `member` AS T3 ON T1.`link_to_member` = T3.`member_id` WHERE T2.`event_name` = 'Women''s Soccer' AND T3.`t_shirt_size` = 'Medium'
SELECT event.`event_name` FROM event INNER JOIN attendance ON event.`event_id` = attendance.`link_to_event` GROUP BY event.`event_id` ORDER BY COUNT(attendance.`link_to_member`) DESC LIMIT 1
SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'
SELECT COUNT(DISTINCT A.link_to_event) FROM `attendance` AS A INNER JOIN `member` AS M ON A.link_to_member = M.member_id INNER JOIN `event` AS E ON A.link_to_event = E.event_id WHERE M.first_name = 'Sacha' AND M.last_name = 'Harrison' AND strftime('%Y', E.event_date) = '2019'
SELECT COUNT(DISTINCT e.event_id) FROM event e INNER JOIN attendance a ON e.event_id = a.link_to_event WHERE e.type = 'Meeting' GROUP BY e.event_id HAVING COUNT(a.link_to_member) > 10
SELECT event.`event_name` FROM event INNER JOIN attendance ON event.`event_id` = attendance.`link_to_event` GROUP BY event.`event_id` HAVING COUNT(attendance.`link_to_event`) > 20
SELECT CAST(COUNT(DISTINCT attendance.`link_to_event`) AS REAL) / COUNT(DISTINCT event.`event_name`) AS average_attendance FROM `event` INNER JOIN `attendance` ON event.`event_id` = attendance.`link_to_event` WHERE event.`type` = 'Meeting' AND strftime('%Y', event.`event_date`) = '2020'
SELECT `expense`.`expense_description` FROM `expense` WHERE `cost` = (SELECT MAX(`cost`) FROM `expense`)
SELECT COUNT(*) FROM `member` AS T1 INNER JOIN `major` AS T2 ON T1.`link_to_major` = T2.`major_id` WHERE T2.`major_name` = 'Environmental Engineering'
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'
SELECT `member`.`last_name` FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`major_name` = 'Law and Constitutional Studies'
SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'
SELECT major.`college` FROM major INNER JOIN member ON major.`major_id` = member.`link_to_major` WHERE member.`first_name` = 'Tyler' AND member.`last_name` = 'Hewitt'
SELECT SUM(income.`amount`) FROM income INNER JOIN member ON income.`link_to_member` = member.`member_id` WHERE member.`position` = 'Vice President'
SELECT SUM(budget.`spent`) FROM budget AS budget INNER JOIN event AS event ON budget.`link_to_event` = event.`event_id` WHERE budget.`category` = 'Food' AND event.`event_name` = 'September Meeting'
SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'President'
SELECT member.`first_name`, member.`last_name` FROM member INNER JOIN zip_code ON member.`zip` = zip_code.`zip_code` WHERE zip_code.`state` = 'Illinois'
SELECT SUM(budget.`spent`) FROM budget AS budget INNER JOIN event AS event ON budget.`link_to_event` = event.`event_id` WHERE budget.`category` = 'Advertisement' AND event.`event_name` = 'September Meeting'
SELECT `major`.`department` FROM `member` AS T1 INNER JOIN `major` AS T2 ON T1.`link_to_major` = T2.`major_id` WHERE T1.`member_id` IN (SELECT `member_id` FROM `member` WHERE `first_name` IN ('Angela', 'Luisa'))
SELECT SUM(budget.amount) FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE event.event_name = 'October Speaker'
SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting' AND T3.event_date = '2019-10-08' AND T1.approved = 'true'
SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.link_to_member = (SELECT member_id FROM member WHERE first_name = 'Elijah' AND last_name = 'Allen') AND (STRFTIME('%m', T3.event_date) = '09' OR STRFTIME('%m', T3.event_date) = '10')
SELECT SUM(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2019' UNION ALL SELECT -SUM(budget.spent) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE strftime('%Y', event.event_date) = '2020';
SELECT `event`.`location` FROM `event` WHERE `event`.`event_name` = 'Spring Budget Review'
SELECT SUM(expense.`cost`) FROM expense INNER JOIN budget ON expense.`link_to_budget` = budget.`budget_id` INNER JOIN event ON budget.`link_to_event` = event.`event_id` WHERE expense.`expense_description` = 'Posters' AND event.`event_date` = '2019-09-04'
SELECT budget.`remaining` FROM budget WHERE budget.`amount` = (SELECT MAX(budget.`amount`) FROM budget WHERE budget.`category` = 'Food')
SELECT `income`.`notes` FROM `income` WHERE `income`.`source` = 'Fundraising' AND `income`.`date_received` = '2019-09-14'
SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT `phone` FROM `member` WHERE `first_name` = 'Carlo' AND `last_name` = 'Jacobs'
SELECT Z.`county` FROM `member` AS M INNER JOIN `zip_code` AS Z ON M.`zip` = Z.`zip_code` WHERE M.`first_name` = 'Adela' AND M.`last_name` = 'O''Gallagher'
SELECT COUNT(*) FROM budget AS B INNER JOIN event AS E ON B.link_to_event = E.event_id WHERE E.event_name = 'November Meeting' AND B.remaining < 0
SELECT SUM(budget.`amount`) FROM budget INNER JOIN event ON budget.`link_to_event` = event.`event_id` WHERE event.`event_name` = 'September Speaker'
SELECT DISTINCT E.status FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event INNER JOIN expense AS Ex ON B.budget_id = Ex.link_to_budget WHERE Ex.expense_description = 'Post Cards, Posters' AND Ex.expense_date = '2019-08-20'
SELECT major.`major_name` FROM member INNER JOIN major ON member.`link_to_major` = major.`major_id` WHERE member.`first_name` = 'Brent' AND member.`last_name` = 'Thomason'
SELECT COUNT(T.member_id) FROM member AS T INNER JOIN major AS M ON T.link_to_major = M.major_id WHERE M.major_name = 'Human Development and Family Studies' AND T.t_shirt_size = 'Large'
SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'
SELECT major.`major_name` FROM member INNER JOIN major ON member.`link_to_major` = major.`major_id` WHERE member.`position` = 'Vice President'
SELECT zip_code.`state` FROM member INNER JOIN zip_code ON member.`zip` = zip_code.`zip_code` WHERE member.`first_name` = 'Sacha' AND member.`last_name` = 'Harrison'
SELECT major.`department` FROM member INNER JOIN major ON member.`link_to_major` = major.`major_id` WHERE member.`position` = 'President'
SELECT `income`.`date_received` FROM `income` INNER JOIN `member` ON `income`.`link_to_member` = `member`.`member_id` WHERE `member`.`first_name` = 'Connor' AND `member`.`last_name` = 'Hilton' AND `income`.`source` = 'Dues'
SELECT member.first_name, member.last_name FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.source = 'Dues' ORDER BY income.date_received LIMIT 1
SELECT COUNT(*) FROM budget AS B1 INNER JOIN event AS E1 ON B1.link_to_event = E1.event_id WHERE B1.category = 'Advertisement' AND E1.event_name = 'Yearly Kickoff' AND B1.amount > (SELECT SUM(B2.amount) FROM budget AS B2 INNER JOIN event AS E2 ON B2.link_to_event = E2.event_id WHERE B2.category = 'Advertisement' AND E2.event_name = 'October Meeting')
SELECT (SUM(budget.amount) / (SELECT SUM(budget.amount) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'November Speaker')) * 100 AS percentage FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Parking' AND event.event_name = 'November Speaker'
SELECT SUM(expense.`cost`) FROM `expense` WHERE expense.`expense_description` = 'Pizza'
SELECT COUNT(DISTINCT T1.city) FROM zip_code AS T1 WHERE T1.county = 'Orange County' AND T1.state = 'Virginia'
SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT zip_code.city, zip_code.county, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.first_name = 'Amy' AND member.last_name = 'Firth'
SELECT expense.`expense_description` FROM `expense` INNER JOIN `budget` ON expense.`link_to_budget` = budget.`budget_id` WHERE budget.`remaining` = (SELECT MIN(`remaining`) FROM `budget`)
SELECT M.`member_id`, M.`first_name`, M.`last_name`, M.`email`, M.`position`, M.`phone` FROM `member` AS M INNER JOIN `attendance` AS A ON M.`member_id` = A.`link_to_member` INNER JOIN `event` AS E ON A.`link_to_event` = E.`event_id` WHERE E.`event_name` = 'October Meeting'
SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id GROUP BY major.college ORDER BY COUNT(member.member_id) DESC LIMIT 1
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'
SELECT E.event_name FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event ORDER BY B.amount DESC LIMIT 1
SELECT expense.`expense_id`, expense.`expense_description`, expense.`expense_date`, expense.`cost` FROM expense INNER JOIN member ON expense.`link_to_member` = member.`member_id` WHERE member.`position` = 'Vice President'
SELECT COUNT(DISTINCT attendance.link_to_member) FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event WHERE event.event_name = 'Women''s Soccer'
SELECT `income`.`date_received` FROM `income` INNER JOIN `member` ON `income`.`link_to_member` = `member`.`member_id` WHERE `member`.`first_name` = 'Casey' AND `member`.`last_name` = 'Mason'
SELECT COUNT(DISTINCT member.zip) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland'
SELECT COUNT(DISTINCT attendance.`link_to_event`) FROM attendance INNER JOIN member ON attendance.`link_to_member` = member.`member_id` WHERE member.`phone` = '954-555-6240'
SELECT T1.`first_name`, T1.`last_name` FROM `member` AS T1 INNER JOIN `major` AS T2 ON T1.`link_to_major` = T2.`major_id` WHERE T2.`department` = 'School of Applied Sciences, Technology and Education'
SELECT event.`event_name` FROM event INNER JOIN budget ON event.`event_id` = budget.`link_to_event` WHERE event.`status` = 'Closed' ORDER BY (budget.`spent` / budget.`amount`) DESC LIMIT 1
SELECT COUNT(*) FROM `member` WHERE `position` = 'President'
SELECT MAX(budget.`spent`) FROM budget
SELECT COUNT(`event_id`) FROM `event` WHERE `type` = 'Meeting' AND SUBSTR(`event_date`, 1, 4) = '2020'
SELECT SUM(T1.spent) FROM `budget` AS T1 WHERE T1.category = 'Food'
SELECT member.`first_name`, member.`last_name` FROM member INNER JOIN attendance ON member.`member_id` = attendance.`link_to_member` GROUP BY member.`member_id` HAVING COUNT(attendance.`link_to_event`) > 7
SELECT member.`first_name`, member.`last_name` FROM member INNER JOIN major ON member.`link_to_major` = major.`major_id` INNER JOIN attendance ON attendance.`link_to_member` = member.`member_id` INNER JOIN event ON attendance.`link_to_event` = event.`event_id` WHERE major.`major_name` = 'Interior Design' AND event.`event_name` = 'Community Theater'
SELECT `member`.`first_name`, `member`.`last_name` FROM `member` INNER JOIN `zip_code` ON `member`.`zip` = `zip_code`.`zip_code` WHERE `zip_code`.`city` = 'Georgetown' AND `zip_code`.`state` = 'South Carolina'
SELECT SUM(income.`amount`) FROM `income` INNER JOIN `member` ON income.`link_to_member` = member.`member_id` WHERE member.`first_name` = 'Grant' AND member.`last_name` = 'Gilmour'
SELECT member.`first_name`, member.`last_name` FROM income JOIN member ON income.`link_to_member` = member.`member_id` WHERE income.`amount` > 40
SELECT SUM(expense.`cost`) FROM expense INNER JOIN attendance ON expense.`link_to_budget` = attendance.`link_to_event` INNER JOIN event ON attendance.`link_to_event` = event.`event_id` WHERE event.`event_name` = 'Yearly Kickoff'
SELECT M.first_name FROM member AS M INNER JOIN attendance AS A ON M.member_id = A.link_to_member INNER JOIN event AS E ON A.link_to_event = E.event_id INNER JOIN budget AS B ON E.event_id = B.link_to_event WHERE E.event_name = 'Yearly Kickoff'
SELECT CONCAT(`first_name`, ' ', `last_name`) AS full_name, `source` FROM `member` AS M INNER JOIN `income` AS I ON M.`member_id` = I.`link_to_member` WHERE I.`amount` = (SELECT MAX(`amount`) FROM `income`) AND I.`link_to_member` IN (SELECT `link_to_member` FROM `income` WHERE `amount` = (SELECT MAX(`amount`) FROM `income`))
SELECT event.`event_name` FROM event INNER JOIN budget ON event.`event_id` = budget.`link_to_event` ORDER BY budget.`spent` LIMIT 1
SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T2.cost ELSE 0 END) AS REAL) * 100 / SUM(T2.cost) FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget
SELECT CAST(SUM(CASE WHEN major.`major_name` = 'Finance' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN major.`major_name` = 'Physics' THEN 1 ELSE 0 END), 0) AS ratio FROM member INNER JOIN major ON member.`link_to_major` = major.`major_id`
SELECT income.`source` FROM `income` WHERE income.`date_received` BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY income.`source` ORDER BY SUM(income.`amount`) DESC LIMIT 1
SELECT `member`.`first_name`, `member`.`last_name`, `member`.`email` FROM `member` WHERE `member`.`position` = 'Secretary'
SELECT COUNT(*) FROM `member` AS m INNER JOIN `major` AS j ON m.`link_to_major` = j.`major_id` WHERE j.`major_name` = 'Physics Teaching'
SELECT COUNT(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Community Theater' AND strftime('%Y', event.event_date) = '2019'
SELECT COUNT(T1.link_to_event) AS number_of_events_attended, T3.major_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN major AS T3 ON T2.link_to_major = T3.major_id WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'
SELECT AVG(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food' AND T2.status = 'Closed'
SELECT event.`event_name` FROM event INNER JOIN budget ON event.`event_id` = budget.`link_to_event` WHERE budget.`category` = 'Advertisement' AND budget.`spent` = (SELECT MAX(spent) FROM budget WHERE category = 'Advertisement')
SELECT COUNT(*) > 0 FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean' AND T2.event_name = 'Women''s Soccer'
SELECT CAST(SUM(CASE WHEN T1.type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.event_id) FROM `event` AS T1 WHERE T1.event_date BETWEEN '2019-01-01' AND '2019-12-31'
SELECT expense.`cost` FROM expense INNER JOIN budget ON expense.`link_to_budget` = budget.`budget_id` INNER JOIN event ON budget.`link_to_event` = event.`event_id` WHERE expense.`expense_description` = 'Posters' AND event.`event_name` = 'September Speaker'
SELECT `t_shirt_size` FROM `member` GROUP BY `t_shirt_size` ORDER BY COUNT(*) DESC LIMIT 1
SELECT event.`event_name` FROM event INNER JOIN budget ON event.`event_id` = budget.`link_to_event` WHERE event.`status` = 'Closed' AND budget.`remaining` < 0 ORDER BY budget.`remaining` LIMIT 1
SELECT expense.`expense_description`, SUM(expense.`cost`) AS total_value FROM expense INNER JOIN budget ON expense.`link_to_budget` = budget.`budget_id` INNER JOIN event ON budget.`link_to_event` = event.`event_id` WHERE event.`event_name` = 'October Meeting' AND expense.`approved` = 'true' GROUP BY expense.`expense_description`
SELECT budget.category, budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'April Speaker' ORDER BY budget.amount ASC
SELECT MAX(budget.`amount`) FROM budget WHERE budget.`category` = 'Food'
SELECT `budget`.`budget_id`, `budget`.`amount` FROM `budget` WHERE `budget`.`category` = 'Advertisement' ORDER BY `budget`.`amount` DESC LIMIT 3
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'
SELECT SUM(`cost`) FROM `expense` WHERE `expense_date` = '2019-08-20'
SELECT member.`first_name`, member.`last_name`, SUM(expense.`cost`) AS total_cost FROM member INNER JOIN expense ON member.`member_id` = expense.`link_to_member` WHERE member.`member_id` = 'rec4BLdZHS2Blfp4v' GROUP BY member.`first_name`, member.`last_name`
SELECT DISTINCT T1.`expense_description` FROM `expense` AS T1 INNER JOIN `member` AS T2 ON T1.`link_to_member` = T2.`member_id` WHERE T2.`first_name` = 'Sacha' AND T2.`last_name` = 'Harrison'
SELECT DISTINCT expense.`expense_description` FROM expense INNER JOIN member ON expense.`link_to_member` = member.`member_id` WHERE member.`t_shirt_size` = 'X-Large'
SELECT DISTINCT member.zip FROM member INNER JOIN expense ON member.member_id = expense.link_to_member WHERE expense.cost < 50
SELECT major.`major_name` FROM member INNER JOIN major ON member.`link_to_major` = major.`major_id` WHERE member.`first_name` = 'Phillip' AND member.`last_name` = 'Cullen'
SELECT `member`.`position` FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`major_name` = 'Business'
SELECT COUNT(member.`member_id`) FROM member INNER JOIN major ON member.`link_to_major` = major.`major_id` WHERE major.`major_name` = 'Business' AND member.`t_shirt_size` = 'Medium'
SELECT DISTINCT event.type FROM event INNER JOIN budget ON event.event_id = budget.link_to_event WHERE budget.remaining > 30
SELECT DISTINCT budget.`category` FROM `budget` INNER JOIN `event` ON budget.`link_to_event` = event.`event_id` WHERE event.`location` = 'MU 215'
SELECT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_date = '2020-03-24T12:00:00'
SELECT T2.`major_name` FROM `member` AS T1 INNER JOIN `major` AS T2 ON T1.`link_to_major` = T2.`major_id` WHERE T1.`position` = 'Vice President'
SELECT CAST(SUM(IIF(T2.major_name = 'Mathematics', 1, 0)) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 LEFT JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Member'
SELECT DISTINCT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215'
SELECT COUNT(*) FROM `income` WHERE `amount` = 50
SELECT COUNT(*) FROM `member` WHERE `position` = 'Member' AND `t_shirt_size` = 'X-Large'
SELECT COUNT(*) FROM `major` WHERE `college` = 'College of Agriculture and Applied Sciences' AND `department` = 'School of Applied Sciences, Technology and Education'
SELECT `member`.`last_name`, `major`.`department`, `major`.`college` FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`major_name` = 'Environmental Engineering'
SELECT DISTINCT budget.`category` FROM `event` INNER JOIN `budget` ON event.`event_id` = budget.`link_to_event` WHERE event.`location` = 'MU 215' AND event.`type` = 'Guest Speaker' AND budget.`spent` = 0
SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T3.department = 'Electrical and Computer Engineering' AND T1.position = 'Member'
SELECT event.`event_name` FROM event INNER JOIN attendance ON event.`event_id` = attendance.`link_to_event` INNER JOIN member ON attendance.`link_to_member` = member.`member_id` WHERE event.`type` = 'Social' AND member.`position` = 'Vice President' AND event.`location` = '900 E. Washington St.'
SELECT member.`last_name`, member.`position` FROM expense INNER JOIN member ON expense.`link_to_member` = member.`member_id` WHERE expense.`expense_description` = 'Pizza' AND expense.`expense_date` = '2019-09-10'
SELECT `member`.`last_name` FROM `member` INNER JOIN `attendance` ON `member`.`member_id` = `attendance`.`link_to_member` INNER JOIN `event` ON `attendance`.`link_to_event` = `event`.`event_id` WHERE `event`.`event_name` = 'Women''s Soccer' AND `member`.`position` = 'Member'
SELECT CAST(COUNT(CASE WHEN income.amount = 50 THEN 1 END) AS REAL) * 100 / COUNT(member.member_id) AS percentage FROM member LEFT JOIN income ON member.member_id = income.link_to_member WHERE member.t_shirt_size = 'Medium' AND member.position = 'Member'
SELECT DISTINCT `zip_code`.`state` FROM `zip_code` WHERE `zip_code`.`type` = 'PO Box'
SELECT `zip_code`.`zip_code` FROM `zip_code` WHERE `zip_code`.`type` = 'PO Box' AND `zip_code`.`county` = 'San Juan Municipio' AND `zip_code`.`state` = 'Puerto Rico'
SELECT DISTINCT event.event_name FROM event WHERE event.type = 'Game' AND event.status = 'Closed' AND event.event_date BETWEEN '2019-03-15' AND '2020-03-20'
SELECT DISTINCT attendance.link_to_event FROM attendance INNER JOIN expense ON attendance.link_to_member = expense.link_to_member WHERE expense.cost > 50
SELECT DISTINCT M.`member_id`, M.`first_name`, M.`last_name`, A.`link_to_event` FROM `member` AS M INNER JOIN `attendance` AS A ON M.`member_id` = A.`link_to_member` INNER JOIN `expense` AS E ON M.`member_id` = E.`link_to_member` WHERE E.`approved` = 'true' AND E.`expense_date` BETWEEN '2019-01-10' AND '2019-11-19'
SELECT major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Katy' AND member.link_to_major = 'rec1N0upiVLy5esTO'
SELECT `member`.`phone` FROM `member` INNER JOIN `major` ON `member`.`link_to_major` = `major`.`major_id` WHERE `major`.`college` = 'College of Agriculture and Applied Sciences' AND `major`.`major_name` = 'Business'
SELECT DISTINCT member.email FROM expense AS expense INNER JOIN member AS member ON expense.link_to_member = member.member_id WHERE expense.expense_date BETWEEN '2019-09-10' AND '2019-11-19' AND expense.cost > 20
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'education' AND T2.college = 'College of Education & Human Services'
SELECT CAST(SUM(CASE WHEN budget.`remaining` < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event.`event_id`) AS percentage_over_budget FROM event INNER JOIN budget ON event.`event_id` = budget.`link_to_event`
SELECT `event_id`, `location`, `status` FROM `event` WHERE `event_date` BETWEEN '2019-11-01' AND '2020-03-31'
SELECT E.`expense_id`, E.`expense_description`, E.`expense_date`, E.`cost`, E.`approved`, M.`first_name`, M.`last_name`, B.`budget_id`, B.`category`, B.`spent`, B.`remaining` FROM `expense` AS E INNER JOIN `member` AS M ON E.`link_to_member` = M.`member_id` INNER JOIN `budget` AS B ON E.`link_to_budget` = B.`budget_id` GROUP BY E.`link_to_member` HAVING AVG(E.`cost`) > 50
SELECT member.`first_name`, member.`last_name` FROM member WHERE member.`t_shirt_size` = 'X-Large'
SELECT CAST(SUM(CASE WHEN `zip_code`.`type` = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(`zip_code`.`zip_code`) FROM `zip_code`
SELECT event.`event_name`, event.`location` FROM `event` INNER JOIN `budget` ON event.`event_id` = budget.`link_to_event` WHERE budget.`remaining` > 0
SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T2.expense_description = 'Pizza' AND T2.cost BETWEEN 51 AND 99
SELECT member.`first_name`, member.`last_name`, major.`major_name` FROM member INNER JOIN expense ON member.`member_id` = expense.`link_to_member` INNER JOIN major ON member.`link_to_major` = major.`major_id` WHERE expense.`cost` > 100
SELECT z.city, z.county FROM event AS e JOIN attendance AS a ON e.event_id = a.link_to_event JOIN income AS i ON a.link_to_member = i.link_to_member JOIN member AS m ON a.link_to_member = m.member_id JOIN zip_code AS z ON m.zip = z.zip_code GROUP BY z.city, z.county HAVING COUNT(i.income_id) > 40
SELECT T1.`first_name`, T1.`last_name` FROM member AS T1 INNER JOIN expense AS T2 ON T1.`member_id` = T2.`link_to_member` INNER JOIN attendance AS T3 ON T2.`link_to_member` = T3.`link_to_member` GROUP BY T1.`member_id` HAVING COUNT(DISTINCT T3.`link_to_event`) > 1 ORDER BY SUM(T2.`cost`) DESC LIMIT 1
SELECT AVG(cost) AS avg_amount_paid FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'
SELECT DISTINCT T1.event_name FROM `event` AS T1 INNER JOIN `budget` AS T2 ON T1.event_id = T2.link_to_event INNER JOIN `expense` AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(T4.cost) FROM `expense` AS T4 INNER JOIN `budget` AS T5 ON T4.link_to_budget = T5.budget_id WHERE T5.category = 'Parking')
SELECT CAST(SUM(T4.cost) AS REAL) * 100 / COUNT(DISTINCT T1.event_id) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T4 ON T2.link_to_event = T4.link_to_budget WHERE T1.type = 'Game'
SELECT MAX(b.amount) FROM budget AS b INNER JOIN expense AS e ON b.budget_id = e.link_to_budget WHERE e.expense_description IN ('Water', 'chips', 'cookies')
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY SUM(T2.cost) DESC LIMIT 5
SELECT DISTINCT T1.first_name, T1.last_name, T1.phone FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > (SELECT AVG(cost) FROM expense)
SELECT CAST(SUM(CASE WHEN Z.state = 'Maine' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN M.position = 'Member' THEN 1 ELSE NULL END) - CAST(SUM(CASE WHEN Z.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN M.position = 'Member' THEN 1 ELSE NULL END) AS percentage_difference FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code
SELECT major.`major_name`, major.`department` FROM member INNER JOIN major ON member.`link_to_major` = major.`major_id` WHERE member.`first_name` = 'Garrett' AND member.`last_name` = 'Gerke'
SELECT CONCAT(`member`.`first_name`, ' ', `member`.`last_name`) AS full_name, SUM(`expense`.`cost`) AS total_cost FROM `expense` INNER JOIN `member` ON `expense`.`link_to_member` = `member`.`member_id` WHERE `expense`.`expense_description` IN ('Water', 'Veggie tray', 'supplies') GROUP BY `member`.`member_id` HAVING COUNT(*) = 3
SELECT member.last_name, member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Elementary Education'
SELECT budget.category, budget.amount FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.event_name = 'January Speaker'
SELECT DISTINCT event.`event_name` FROM event INNER JOIN budget ON event.`event_id` = budget.`link_to_event` WHERE budget.`category` = 'Food'
SELECT member.first_name, member.last_name, income.amount FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '2019-09-09'
SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'
SELECT member.`first_name` || ' ' || member.`last_name` AS full_name, major.`college` FROM member INNER JOIN major ON member.`link_to_major` = major.`major_id` WHERE member.`position` = 'Secretary'
SELECT SUM(budget.spent), event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Speaker Gifts'
SELECT `city` FROM `zip_code` WHERE `zip_code` = (SELECT `zip` FROM `member` WHERE `first_name` = 'Garrett' AND `last_name` = 'Girke' LIMIT 1)
SELECT member.first_name, member.last_name, member.position FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.city = 'Lincolnton' AND zip_code.state = 'North Carolina' AND zip_code.zip_code = 28092
SELECT COUNT(*) FROM `gasstations` WHERE `Country` = 'CZE' AND `Segment` = 'Premium'
SELECT CAST(COUNT(CASE WHEN `Currency` = 'EUR' THEN 1 END) AS REAL) / NULLIF(COUNT(CASE WHEN `Currency` = 'CZK' THEN 1 END), 0) AS ratio FROM `customers`
SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date BETWEEN 201201 AND 201212 ORDER BY T2.Consumption ASC LIMIT 1
SELECT AVG(`Consumption`) / 12 FROM `yearmonth` AS T1 INNER JOIN `customers` AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Date` BETWEEN 201301 AND 201312 AND T2.`Segment` = 'SME'
SELECT T1.CustomerID FROM ( SELECT CustomerID, SUM(Consumption) AS total_consumption FROM yearmonth WHERE Date BETWEEN '201101' AND '201112' GROUP BY CustomerID ) AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' ORDER BY T1.total_consumption DESC LIMIT 1
SELECT COUNT(DISTINCT customers.CustomerID) FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'KAM' AND yearmonth.Consumption < 30000 AND yearmonth.Date BETWEEN 201201 AND 201212
SELECT SUM(CASE WHEN C.Currency = 'CZK' THEN Y.Consumption ELSE 0 END) - SUM(CASE WHEN C.Currency = 'EUR' THEN Y.Consumption ELSE 0 END) AS ConsumptionDifference FROM customers AS C INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE Y.Date BETWEEN 201201 AND 201212
SELECT SUBSTR(yearmonth.`Date`, 1, 4) AS Year, SUM(yearmonth.`Consumption`) AS TotalConsumption FROM yearmonth INNER JOIN customers ON yearmonth.`CustomerID` = customers.`CustomerID` WHERE customers.`Currency` = 'EUR' GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1
SELECT T.Segment FROM ( SELECT Y.CustomerID, C.Segment, SUM(Y.Consumption) AS total_consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID GROUP BY C.Segment ) AS T ORDER BY T.total_consumption ASC LIMIT 1
SELECT SUBSTR(`Date`, 1, 4) AS `Year`, SUM(`Consumption`) AS `TotalConsumption` FROM `yearmonth` WHERE `CustomerID` IN (SELECT `CustomerID` FROM `customers` WHERE `Currency` = 'CZK') GROUP BY `Year` ORDER BY `TotalConsumption` DESC LIMIT 1
SELECT MAX(y.`Consumption`) AS PeakConsumption, y.`Date` FROM yearmonth AS y INNER JOIN customers AS c ON y.`CustomerID` = c.`CustomerID` WHERE c.`Segment` = 'SME' AND y.`Date` LIKE '2013%' GROUP BY y.`Date` ORDER BY PeakConsumption DESC LIMIT 1
SELECT (SELECT AVG(YM1.Consumption) FROM yearmonth AS YM1 INNER JOIN customers AS C1 ON YM1.CustomerID = C1.CustomerID WHERE C1.Segment = 'SME' AND YM1.Date BETWEEN '201301' AND '201312' GROUP BY C1.CustomerID ORDER BY SUM(YM1.Consumption) ASC LIMIT 1) - (SELECT AVG(YM2.Consumption) FROM yearmonth AS YM2 INNER JOIN customers AS C2 ON YM2.CustomerID = C2.CustomerID WHERE C2.Segment = 'LAM' AND YM2.Date BETWEEN '201301' AND '201312' GROUP BY C2.CustomerID ORDER BY SUM(YM2.Consumption) ASC LIMIT 1) AS SME_LAM_Difference, (SELECT AVG(YM2.Consumption) FROM yearmonth AS YM2 INNER JOIN customers AS C2 ON YM2.CustomerID = C2.CustomerID WHERE C2.Segment = 'LAM' AND YM2.Date BETWEEN '201301' AND '201312' GROUP BY C2.CustomerID ORDER BY SUM(YM2.Consumption) ASC LIMIT 1) - (SELECT AVG(YM3.Consumption) FROM yearmonth AS YM3 INNER JOIN customers AS C3 ON YM3.CustomerID = C3.CustomerID WHERE C3.Segment = 'KAM' AND YM3.Date BETWEEN '201301' AND '201312' GROUP BY C3.CustomerID ORDER BY SUM(YM3.Consumption) ASC LIMIT 1) AS LAM_KAM_Difference, (SELECT AVG(YM3.Consumption) FROM yearmonth AS YM3 INNER JOIN customers AS C3 ON YM3.CustomerID = C3.CustomerID WHERE C3.Segment = 'KAM' AND YM3.Date BETWEEN '201301' AND '201312' GROUP BY C3.CustomerID ORDER BY SUM(YM3.Consumption) ASC LIMIT 1) - (SELECT AVG(YM1.Consumption) FROM yearmonth AS YM1 INNER JOIN customers AS C1 ON YM1.CustomerID = C1.CustomerID WHERE C1.Segment = 'SME' AND YM1.Date BETWEEN '201301' AND '201312' GROUP BY C1.CustomerID ORDER BY SUM(YM1.Consumption) ASC LIMIT 1) AS KAM_SME_Difference;
SELECT Segment, ((SUM(CASE WHEN Date = 201303 THEN Consumption END) - SUM(CASE WHEN Date = 201207 THEN Consumption END)) * 100.0 / NULLIF(SUM(CASE WHEN Date = 201303 THEN Consumption END), 0)) AS PercentageIncrease FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE Segment IN ('SME', 'LAM', 'KAM') AND Currency = 'EUR' AND Date BETWEEN 201201 AND 201312 GROUP BY Segment ORDER BY PercentageIncrease DESC;
SELECT SUM(y.`Consumption`) FROM `yearmonth` AS y WHERE y.`CustomerID` = 6 AND y.`Date` BETWEEN 201308 AND 201311
SELECT (SELECT COUNT(*) FROM gasstations AS T1 WHERE T1.Country = 'CZE' AND T1.Segment = 'Discount') - (SELECT COUNT(*) FROM gasstations AS T2 WHERE T2.Country = 'SVK' AND T2.Segment = 'Discount') AS more_discount_gasstations
SELECT (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') - (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304') AS ConsumptionDifference
SELECT (SELECT COUNT(*) FROM customers AS T1 WHERE T1.Segment = 'SME' AND T1.Currency = 'CZK') - (SELECT COUNT(*) FROM customers AS T1 WHERE T1.Segment = 'SME' AND T1.Currency = 'EUR') AS Difference
SELECT customers.`CustomerID` FROM customers JOIN yearmonth ON customers.`CustomerID` = yearmonth.`CustomerID` WHERE customers.`Segment` = 'LAM' AND customers.`Currency` = 'EUR' AND yearmonth.`Date` = '201310' ORDER BY yearmonth.`Consumption` DESC LIMIT 1
SELECT T1.`CustomerID`, SUM(T2.`Consumption`) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Segment` = 'KAM' GROUP BY T1.`CustomerID` ORDER BY TotalConsumption DESC LIMIT 1
SELECT SUM(y.`Consumption`) FROM `yearmonth` AS y INNER JOIN `customers` AS c ON y.`CustomerID` = c.`CustomerID` WHERE c.`Segment` = 'KAM' AND y.`Date` = 201305
SELECT (COUNT(CASE WHEN Y.`Consumption` > 46.73 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM `customers` AS C LEFT JOIN `yearmonth` AS Y ON C.`CustomerID` = Y.`CustomerID` WHERE C.`Segment` = 'LAM'
SELECT `Country`, COUNT(*) AS `TotalValueForMoney` FROM `gasstations` WHERE `Segment` = 'Value for money' GROUP BY `Country`
SELECT CAST(SUM(IIF(T1.Segment = 'KAM' AND T1.Currency = 'EUR', 1, 0)) AS REAL) * 100 / COUNT(IIF(T1.Segment = 'KAM', 1, NULL)) FROM customers AS T1
SELECT CAST(SUM(IIF(y.`Consumption` > 528.3, 1, 0)) AS REAL) * 100 / COUNT(DISTINCT c.`CustomerID`) FROM `customers` AS c INNER JOIN `yearmonth` AS y ON c.`CustomerID` = y.`CustomerID` WHERE y.`Date` = '201202'
SELECT CAST(SUM(CASE WHEN T1.Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.GasStationID) FROM gasstations AS T1 WHERE T1.Country = 'SVK'
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1
SELECT T.Segment FROM ( SELECT C.Segment, SUM(Y.Consumption) AS total_consumption FROM customers AS C INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE Y.Date = '201309' GROUP BY C.Segment ) AS T ORDER BY T.total_consumption ASC LIMIT 1
SELECT C.`CustomerID` FROM customers AS C INNER JOIN yearmonth AS Y ON C.`CustomerID` = Y.`CustomerID` WHERE C.`Segment` = 'SME' AND Y.`Date` = '201206' ORDER BY Y.`Consumption` ASC LIMIT 1
SELECT MAX(`Consumption`) FROM `yearmonth` WHERE `Date` LIKE '2012%';
SELECT MAX(MonthlyConsumption) AS MaxMonthlyConsumption FROM (SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID)
SELECT DISTINCT P.`Description` FROM products AS P INNER JOIN transactions_1k AS T ON P.`ProductID` = T.`ProductID` INNER JOIN yearmonth AS Y ON T.`CustomerID` = Y.`CustomerID` WHERE Y.`Date` = '201309'
SELECT DISTINCT `gasstations`.`Country` FROM `gasstations` INNER JOIN `transactions_1k` ON `gasstations`.`GasStationID` = `transactions_1k`.`GasStationID` WHERE `transactions_1k`.`Date` BETWEEN '2013-06-01' AND '2013-06-30';
SELECT DISTINCT g.`ChainID` FROM gasstations AS g INNER JOIN transactions_1k AS t ON g.`GasStationID` = t.`GasStationID` INNER JOIN customers AS c ON t.`CustomerID` = c.`CustomerID` WHERE c.`Currency` = 'EUR'
SELECT DISTINCT P.`Description` FROM `products` AS P INNER JOIN `transactions_1k` AS T ON P.`ProductID` = T.`ProductID` INNER JOIN `customers` AS C ON T.`CustomerID` = C.`CustomerID` WHERE C.`Currency` = 'EUR'
SELECT AVG(Amount * Price) FROM transactions_1k WHERE Date LIKE '2012-01%'
SELECT COUNT(DISTINCT T1.`CustomerID`) FROM `customers` AS T1 INNER JOIN `yearmonth` AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Currency` = 'EUR' AND T2.`Consumption` > 1000
SELECT DISTINCT P.`Description` FROM transactions_1k AS T INNER JOIN products AS P ON T.`ProductID` = P.`ProductID` INNER JOIN gasstations AS G ON T.`GasStationID` = G.`GasStationID` WHERE G.`Country` = 'CZE'
SELECT DISTINCT T1.Time FROM `transactions_1k` AS T1 INNER JOIN `gasstations` AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11
SELECT COUNT(transactions_1k.`TransactionID`) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.`GasStationID` = gasstations.`GasStationID` WHERE gasstations.`Country` = 'CZE' AND (transactions_1k.`Amount` * transactions_1k.`Price`) > 1000
SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'
SELECT AVG(T1.`Amount` * T1.`Price`) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.`GasStationID` = T2.`GasStationID` WHERE T2.`Country` = 'CZE'
SELECT AVG(T2.Amount * T2.Price) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR'
SELECT T1.CustomerID FROM transactions_1k AS T1 WHERE T1.Date = '2012-08-25' ORDER BY T1.Amount DESC LIMIT 1
SELECT g.`Country` FROM gasstations AS g INNER JOIN transactions_1k AS t ON g.`GasStationID` = t.`GasStationID` WHERE t.`Date` = '2012-08-25' AND t.`Amount` > 0 ORDER BY t.`Time` ASC LIMIT 1
SELECT DISTINCT c.`Currency` FROM customers AS c INNER JOIN transactions_1k AS t ON c.`CustomerID` = t.`CustomerID` WHERE t.`Date` = '2012-08-24' AND t.`Time` = '16:25:00'
SELECT T2.`Segment` FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Date` = '2012-08-23' AND T1.`Time` = '21:20:00'
SELECT COUNT(`TransactionID`) FROM `transactions_1k` WHERE `Date` = '2012-08-26' AND `Time` < '13:00:00' AND `CustomerID` IN (SELECT `CustomerID` FROM `customers` WHERE `Currency` = 'EUR')
SELECT `Segment` FROM `customers` WHERE `CustomerID` = (SELECT MIN(`CustomerID`) FROM `customers`);
SELECT G.Country FROM transactions_1k AS T INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID WHERE T.Date = '2012-08-24' AND T.Time = '12:42:00'
SELECT T1.`ProductID` FROM `transactions_1k` AS T1 WHERE T1.`Date` = '2012-08-23' AND T1.`Time` = '21:20:00'
SELECT T1.Date, SUM(T1.Amount) FROM transactions_1k AS T1 WHERE T1.CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Amount = 124.05 AND Date = '2012-08-24' LIMIT 1) AND T1.Date >= '2012-01-01' AND T1.Date < '2012-02-01' GROUP BY T1.Date
SELECT COUNT(`TransactionID`) FROM `transactions_1k` WHERE `Date` = '2012-08-26' AND `Time` BETWEEN '08:00:00' AND '09:00:00' AND `GasStationID` IN (SELECT `GasStationID` FROM `gasstations` WHERE `Country` = 'CZE')
SELECT c.Currency FROM yearmonth AS ym INNER JOIN customers AS c ON ym.CustomerID = c.CustomerID WHERE ym.Consumption = 214582.17 AND ym.Date = '201306'
SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = 667467
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Amount * T1.Price = 548.4 AND T1.Date = '2012-08-24'
SELECT CAST(SUM(IIF(T1.Currency = 'EUR', 1, 0)) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25'
SELECT (SUM(CASE WHEN Y1.`Date` = '201207' THEN Y1.`Consumption` END) - SUM(CASE WHEN Y2.`Date` = '201307' THEN Y2.`Consumption` END)) * 1.0 / SUM(CASE WHEN Y1.`Date` = '201207' THEN Y1.`Consumption` END) AS consumption_decrease_rate FROM yearmonth AS Y1 INNER JOIN transactions_1k AS T ON Y1.`CustomerID` = T.`CustomerID` INNER JOIN yearmonth AS Y2 ON Y1.`CustomerID` = Y2.`CustomerID` WHERE T.`Price` = 634.8 AND T.`Date` = '2012-08-25'
SELECT T1.GasStationID FROM `transactions_1k` AS T1 GROUP BY T1.GasStationID ORDER BY SUM(T1.Price * T1.Amount) DESC LIMIT 1
SELECT CAST(COUNT(g.`Segment`) AS REAL) * 100 / (SELECT COUNT(*) FROM gasstations WHERE g.`Country` = 'SVK') FROM gasstations AS g WHERE g.`Segment` = 'Premium' AND g.`Country` = 'SVK'
SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = 38508 AND Date = '2012-01-01'
SELECT T1.`Description` FROM `products` AS T1 INNER JOIN `transactions_1k` AS T2 ON T1.`ProductID` = T2.`ProductID` GROUP BY T1.`Description` ORDER BY SUM(T2.`Amount`) DESC LIMIT 5
SELECT T1.`CustomerID`, AVG(T2.`Price` / T2.`Amount`) AS `AveragePricePerItem`, T1.`Currency` FROM `customers` AS T1 INNER JOIN `transactions_1k` AS T2 ON T1.`CustomerID` = T2.`CustomerID` GROUP BY T1.`CustomerID` ORDER BY SUM(T2.`Price`) DESC LIMIT 1
SELECT gasstations.`Country` FROM gasstations INNER JOIN transactions_1k ON gasstations.`GasStationID` = transactions_1k.`GasStationID` WHERE transactions_1k.`ProductID` = 2 ORDER BY transactions_1k.`Price` DESC LIMIT 1
SELECT DISTINCT Y.Consumption FROM yearmonth AS Y INNER JOIN transactions_1k AS T ON Y.CustomerID = T.CustomerID WHERE T.ProductID = 5 AND (T.Price / T.Amount) > 29.00 AND Y.Date = '201208'
