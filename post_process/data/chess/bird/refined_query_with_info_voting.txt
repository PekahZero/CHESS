SELECT MAX("Free Meal Count (K-12)" / "Enrollment (K-12)") FROM frpm WHERE "County Name" = 'Alameda'
SELECT (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS eligible_free_rate FROM frpm WHERE `School Type` = 'Continuation High Schools' ORDER BY eligible_free_rate ASC LIMIT 3
SELECT T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 AND T1.District = 'Fresno County Office of Education'
SELECT MailStreet FROM schools WHERE CDSCode = (SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1)
SELECT s.Phone FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE f.`Charter School (Y/N)` = 1 AND s.OpenDate > '2000-01-01'
SELECT COUNT(*) FROM satscores AS S INNER JOIN schools AS H ON S.cds = H.CDSCode WHERE S.AvgScrMath < 400 AND H.Virtual = 'F';
SELECT School FROM schools WHERE Magnet = 1 AND CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr > 500);
SELECT Phone FROM schools WHERE CDSCode = (SELECT cds FROM satscores ORDER BY NumGE1500 DESC LIMIT 1)
SELECT NumTstTakr FROM satscores WHERE cds IN (SELECT CDSCode FROM frpm WHERE "FRPM Count (K-12)" = (SELECT MAX("FRPM Count (K-12)") FROM frpm))
SELECT COUNT(*) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.FundingType = 'Directly funded'
SELECT `FRPM Count (Ages 5-17)` FROM frpm WHERE CDSCode = (SELECT cds FROM satscores ORDER BY AvgScrRead DESC LIMIT 1);
SELECT CDSCode FROM frpm WHERE `Enrollment (K-12)` + `Enrollment (Ages 5-17)` > 500
SELECT MAX("Free Meal Count (Ages 5-17)" / "Enrollment (Ages 5-17)") FROM satscores WHERE "NumGE1500" / "NumTstTakr" > 0.3
SELECT s.Phone FROM satscores AS ss INNER JOIN schools AS s ON ss.cds = s.CDSCode ORDER BY (ss.NumGE1500 * 1.0 / ss.NumTstTakr) DESC LIMIT 3
SELECT s.NCESSchool FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode ORDER BY f."Enrollment (Ages 5-17)" DESC LIMIT 5
SELECT T1.dname FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.StatusType = 'Active' ORDER BY T1.AvgScrRead DESC LIMIT 1
SELECT COUNT(*) FROM satscores WHERE dname = 'Alameda' AND NumTstTakr < 100;
SELECT S.CharterNum FROM satscores AS SS INNER JOIN schools AS S ON SS.cds = S.CDSCode WHERE SS.AvgScrWrite = 499
SELECT COUNT(*) FROM schools AS S INNER JOIN satscores AS SS ON S.CDSCode = SS.cds WHERE S.County = 'Contra Costa' AND S.FundingType = 'Directly funded' AND SS.NumTstTakr <= 250
SELECT Phone FROM schools WHERE CDSCode = (SELECT cds FROM satscores ORDER BY AvgScrMath DESC LIMIT 1)
SELECT COUNT(*) FROM schools WHERE County = 'Amador' AND "Low Grade" = 9 AND "High Grade" = 12;
SELECT COUNT(*) FROM frpm WHERE `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)` < 700 AND `County Name` = 'Los Angeles'
SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY NumTstTakr DESC LIMIT 1
SELECT s.School, s.MailStreet FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE ABS(f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > 30
SELECT T2.sname FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Percent (%) Eligible Free (K-12)` > 0.1 AND T2.NumGE1500 > 0
SELECT S.School, S.FundingType FROM schools AS S INNER JOIN satscores AS SS ON S.CDSCode = SS.cds WHERE S.County = 'Riverside' GROUP BY S.School, S.FundingType HAVING AVG(SS.AvgScrMath) > 400
SELECT T1.School, T1.Zip, T1.Street, T1.City, T1.State FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Monterey' AND T2.`FRPM Count (Ages 5-17)` > 800 AND T1.GSoffered LIKE '%High School%'
SELECT T2.School, AVG(T1.AvgScrWrite), T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.OpenDate > '1991-12-31' OR T2.ClosedDate < '2000-01-01' GROUP BY T2.School
SELECT "name", "DOCType" FROM schools WHERE ("Enrollment (K-12)" - "Enrollment (Ages 5-17)") > (SELECT AVG("Enrollment (K-12)" - "Enrollment (Ages 5-17)") FROM schools WHERE "FundingType" = 'Locally funded')
SELECT OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.GSserved = 'K-12' ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1
SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 5
SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` AS eligible_free_rate  FROM frpm  ORDER BY `Enrollment (K-12)` DESC  LIMIT 2 OFFSET 9
SELECT (`FRPM Count (K-12)` / `Enrollment (K-12)`) AS `Eligible Meal Rate` FROM `frpm` WHERE `School Type` = 'High Schools (Public)' ORDER BY `FRPM Count (K-12)` DESC LIMIT 5
SELECT s.Website, s.School FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE f."Free Meal Count (Ages 5-17)" BETWEEN 1900 AND 2000
SELECT (T1."Free Meal Count (Ages 5-17)" / T1."Enrollment (Ages 5-17)") FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Kacey'
SELECT AdmEmail1 FROM schools WHERE CDSCode = (SELECT CDSCode FROM frpm WHERE `Charter School (Y/N)` = 1 ORDER BY `Enrollment (K-12)` ASC LIMIT 1)
SELECT CONCAT(AdmFName1, ' ', AdmLName1) FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE NumGE1500 >= 1500 ORDER BY NumGE1500 DESC LIMIT 1)
SELECT S.Street, S.City, S.Zip, S.State  FROM satscores AS SS  INNER JOIN schools AS S ON SS.cds = S.CDSCode  ORDER BY (SS.NumGE1500 * 1.0 / SS.NumTstTakr) ASC  LIMIT 1
SELECT Website FROM schools WHERE CDSCode IN (SELECT cds FROM satscores WHERE NumTstTakr BETWEEN 2000 AND 3000 AND cname = 'Los Angeles')
SELECT AVG(ss.NumTstTakr) FROM schools AS s INNER JOIN satscores AS ss ON s.CDSCode = ss.cds WHERE STRFTIME('%Y', s.OpenDate) = '1980' AND s.County = 'Fresno'
SELECT Phone FROM schools WHERE CDSCode = (SELECT cds FROM satscores WHERE dname = 'Fresno Unified' ORDER BY AvgScrRead ASC LIMIT 1)
SELECT S.School FROM satscores AS T1 INNER JOIN schools AS S ON T1.cds = S.CDSCode WHERE S.Virtual = 'F' ORDER BY T1.AvgScrRead DESC LIMIT 5
SELECT "School Type" FROM "schools" WHERE "CDSCode" = (SELECT "cds" FROM "satscores" ORDER BY "AvgScrMath" DESC LIMIT 1)
SELECT S.AvgScrMath, Sch.County FROM satscores AS S INNER JOIN schools AS Sch ON S.cds = Sch.CDSCode WHERE (S.AvgScrMath + S.AvgScrRead + S.AvgScrWrite) = (SELECT MIN(AvgScrMath + AvgScrRead + AvgScrWrite) FROM satscores)
SELECT T1.AvgScrWrite, T2.City  FROM satscores AS T1  INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode  WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)
SELECT sname, AVG(AvgScrWrite) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE AdmFName1 = 'Ricci' AND AdmLName1 = 'Ulrich') GROUP BY sname
SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1."Enrollment (K-12)" DESC LIMIT 1
SELECT COUNT(*) / 12.0 AS monthly_average FROM schools WHERE DOC = 52 AND STRFTIME('%Y', OpenDate) = '1980'
SELECT (COUNT(CASE WHEN DOC = 54 THEN 1 END) * 1.0) / NULLIF(COUNT(CASE WHEN DOC = 52 THEN 1 END), 0) AS Ratio FROM schools WHERE County = 'Orange'
SELECT s.School, s.ClosedDate FROM schools AS s WHERE s.StatusType = 'Closed' AND s.County = (SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1)
SELECT MailStreet, School FROM schools WHERE CDSCode = (SELECT cds FROM satscores ORDER BY AvgScrMath DESC LIMIT 1 OFFSET 5)
SELECT T1.MailStreet, T2.sname FROM satscores AS T2 INNER JOIN schools AS T1 ON T1.CDSCode = T2.cds WHERE T2.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores)
SELECT COUNT(*) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE (AvgScrRead + AvgScrMath + AvgScrWrite) >= 1500 AND T2.City = 'Lakeport'
SELECT SUM(NumTstTakr) FROM satscores WHERE cds IN (SELECT CDSCode FROM schools WHERE MailCity = 'Fresno')
SELECT T1.School, T1.MailZip FROM schools AS T1 WHERE T1.AdmLName1 = 'Atoian'
SELECT (COUNT(CASE WHEN County = 'Colusa' THEN 1 END) * 1.0 / COUNT(CASE WHEN County = 'Humboldt' THEN 1 END)) AS ratio FROM schools WHERE State = 'CA'
SELECT COUNT(*) FROM schools WHERE State = 'CA' AND StatusType = 'Active' AND County = 'San Joaquin'
SELECT Phone, Ext FROM schools WHERE CDSCode = (SELECT cds FROM satscores ORDER BY AvgScrWrite DESC LIMIT 1 OFFSET 332)
SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704'
SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')
SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin'
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND DOC = 52 AND City = 'Hickman';
SELECT COUNT(*) FROM frpm WHERE `Charter School (Y/N)` = 0 AND `County Name` = 'Los Angeles' AND (`Free Meal Count (K-12)` * 100.0 / `Enrollment (K-12)`) < 0.18
SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'
SELECT COUNT(*) FROM schools WHERE City = 'Hickman' AND CharterNum = '00D4';
SELECT (COUNT(CASE WHEN FundingType = 'Locally funded' THEN 1 END) * 100.0) / COUNT(*) AS percentage FROM schools WHERE County = 'Santa Clara';
SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus'
SELECT COUNT(*) FROM schools WHERE DOCType = 'Community College District' AND City = 'San Francisco' AND STRFTIME('%Y', ClosedDate) = '1989'
SELECT County, COUNT(*) FROM schools WHERE ClosedDate BETWEEN '1980-01-01' AND '1989-12-31' AND SOC = 11 GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1
SELECT NCESSchool FROM schools WHERE SOC = 31;
SELECT COUNT(*) FROM schools WHERE School = 'District Community Day Schools' AND County = 'Alpine';
SELECT "District Code" FROM schools WHERE magnet = 0 AND City = 'Fresno'
SELECT SUM(`Enrollment (Ages 5-17)`) FROM `frpm` WHERE `District Type` = 'State Special Schools' AND `County Name` = 'Alameda' AND `Academic Year` = '2014-2015';
SELECT `FRPM Count (Ages 5-17)` FROM `frpm` INNER JOIN `schools` ON frpm.CDSCode = schools.CDSCode WHERE `School Type` = 'Youth Authority School' AND `MailStreet` = 'PO Box 1040'
SELECT `Low Grade` FROM `frpm` WHERE `CDSCode` = '613360'
SELECT s.EILName, s.School FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE f."NSLP Provision Status" = 'Breakfast Provision 2' AND f."County Code" = '37'
SELECT S.City FROM schools AS S INNER JOIN frpm AS F ON S.CDSCode = F.CDSCode WHERE S.EILCode = 'HS' AND F."NSLP Provision Status" = 'Lunch Provision 2' AND F."Low Grade" = '9' AND F."High Grade" = '12' AND S.County = 'Merced'
SELECT `School Name`, (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) * 100 AS `Percent Eligible FRPM` FROM `frpm` WHERE `Low Grade` = 'K' AND `High Grade` = '9' AND `County Name` = 'Los Angeles'
SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(*) DESC LIMIT 1
SELECT County, COUNT(*) FROM schools WHERE Virtual = 'F' AND County IN ('San Diego', 'Santa Barbara') GROUP BY County ORDER BY COUNT(*) DESC LIMIT 1
SELECT SOCType, School, Latitude FROM schools WHERE Latitude = (SELECT MAX(Latitude) FROM schools)
SELECT City, School, "Low Grade" FROM schools WHERE State = 'CA' AND Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'CA')
SELECT GSoffered FROM schools WHERE Longitude = (SELECT MAX(Longitude) FROM schools)
SELECT COUNT(*) AS MagnetSchoolsWithMultipleProvisionTypes, MailCity, COUNT(*) AS SchoolsCount  FROM schools  WHERE Magnet = 1 AND GSserved = 'K-8'  GROUP BY MailCity
SELECT AdmFName1, District, COUNT(AdmFName1) AS name_count FROM schools GROUP BY AdmFName1, District ORDER BY name_count DESC LIMIT 2
SELECT `District Code`, (`Free Meal Count (K-12)` / `Enrollment (K-12)` * 100) AS `Percent Eligible Free K-12` FROM `frpm` WHERE `CDSCode` IN (SELECT `CDSCode` FROM `schools` WHERE `AdmFName1` = 'Alusine')
SELECT AdmLName1, District, County, School FROM schools WHERE Charter = '40'
SELECT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = 62 OR DOC = 54)
SELECT S.AdmEmail1, S.School FROM schools AS S INNER JOIN satscores AS T ON S.CDSCode = T.cds WHERE T.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)
SELECT COUNT(*) FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id WHERE A.frequency = 'POPLATEK PO OBRATU' AND D.A3 = 'east Bohemia'
SELECT COUNT(DISTINCT A.account_id)  FROM account AS A  INNER JOIN district AS D ON A.district_id = D.district_id  WHERE D.A3 = 'Prague' AND A.account_id IN (SELECT account_id FROM loan)
SELECT AVG(A12) AS avg_1995, AVG(A13) AS avg_1996 FROM district
SELECT COUNT(DISTINCT D.district_id) FROM district AS D INNER JOIN client AS C ON D.district_id = C.district_id WHERE C.gender = 'F' GROUP BY D.district_id HAVING AVG(D.A11) > 6000 AND AVG(D.A11) < 10000
SELECT COUNT(*) FROM client AS C INNER JOIN district AS D ON C.district_id = D.district_id WHERE C.gender = 'M' AND D.A3 = 'north Bohemia' AND D.A11 > 8000
SELECT T2.account_id, (SELECT MAX(A11) FROM district) - (SELECT MIN(A11) FROM district) AS gap FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') AND T3.A11 = (SELECT MIN(A11) FROM district)
SELECT T1.client_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date = (SELECT MIN(birth_date) FROM client) AND T2.A11 = (SELECT MAX(A11) FROM district)
SELECT COUNT(DISTINCT T2.client_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'
SELECT DISTINCT T1.client_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK PO OBRATU' AND T1.type = 'DISPONENT'
SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = (SELECT MIN(amount) FROM loan WHERE date BETWEEN '1997-01-01' AND '1997-12-31') AND T2.frequency = 'POPLATEK TYDNE';
SELECT A.account_id FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.duration > 12 AND STRFTIME('%Y', A.date) = '1993' ORDER BY L.amount DESC LIMIT 1
SELECT COUNT(*) FROM client AS C INNER JOIN district AS D ON C.district_id = D.district_id WHERE C.gender = 'F' AND C.birth_date < '1950-01-01' AND D.A2 = 'Sokolov'
SELECT account_id FROM account WHERE date = (SELECT MIN(date) FROM account WHERE date LIKE '1995%')
SELECT DISTINCT A.account_id FROM account AS A INNER JOIN trans AS T ON A.account_id = T.account_id WHERE A.date < '1997-01-01' AND T.amount > 3000
SELECT D.client_id FROM card AS C INNER JOIN disp AS D ON C.disp_id = D.disp_id WHERE C.issued = '1994-03-03'
SELECT date FROM account WHERE account_id = (SELECT account_id FROM trans WHERE amount = 840 AND date = '1998-10-14')
SELECT district_id FROM account WHERE account_id = (SELECT account_id FROM loan WHERE date = '1994-08-25')
SELECT MAX(amount) FROM trans WHERE account_id = (SELECT account_id FROM card WHERE issued = '1996-10-21');
SELECT T1.gender FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id WHERE T2.district_id = (SELECT district_id FROM district ORDER BY A11 DESC LIMIT 1) ORDER BY T1.birth_date ASC LIMIT 1
SELECT amount FROM trans WHERE account_id = (SELECT account_id FROM loan ORDER BY amount DESC LIMIT 1) ORDER BY date ASC LIMIT 1
SELECT COUNT(*) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik')
SELECT T2.disp_id FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 5100 AND T1.date = '1998-09-02'
SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Litomerice') AND STRFTIME('%Y', date) = '1996'
SELECT T3.A2 FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'
SELECT c.birth_date  FROM loan l  INNER JOIN disp d ON l.account_id = d.account_id  INNER JOIN client c ON d.client_id = c.client_id  WHERE l.amount = 98832 AND l.date = '1996-01-03';
SELECT account_id FROM account WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'Prague') ORDER BY date ASC LIMIT 1
SELECT (COUNT(CASE WHEN T1.gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) FROM client AS T1 WHERE T1.district_id = (SELECT district_id FROM district WHERE A3 = 'south Bohemia' ORDER BY A4 DESC LIMIT 1)
SELECT      ((MAX(CASE WHEN date = '1998-12-27' THEN balance END) -        MAX(CASE WHEN date = '1993-03-22' THEN balance END)) /        MAX(CASE WHEN date = '1993-03-22' THEN balance END)) * 100 AS increase_rate FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05')  AND date IN ('1993-03-22', '1998-12-27')
SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0 / SUM(amount)) AS percentage FROM loan;
SELECT (SUM(CASE WHEN status = 'C' THEN amount ELSE 0 END) / SUM(amount)) * 100 AS percentage FROM loan WHERE amount < 100000
SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.date LIKE '1993%' AND T1.frequency = 'POPLATEK PO OBRATU'
SELECT account_id, frequency FROM account WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'east Bohemia') AND date BETWEEN '1995-01-01' AND '2000-12-31'
SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'
SELECT D.A2, D.A3 FROM district AS D INNER JOIN account AS A ON D.district_id = A.district_id INNER JOIN loan AS L ON A.account_id = L.account_id WHERE L.loan_id = '4990'
SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000
SELECT L.loan_id, D.A3, D.A11 FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id INNER JOIN district AS D ON A.district_id = D.district_id WHERE L.duration = 60
SELECT T3.A3, ((T3.A13 - T3.A12) / T3.A12) * 100 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'
SELECT (SUM(CASE WHEN district_id = (SELECT district_id FROM district WHERE A2 = 'Decin') THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS percentage FROM account WHERE STRFTIME('%Y', date) = '1993'
SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'
SELECT D.A2, COUNT(C.client_id) FROM client AS C INNER JOIN account AS A ON C.district_id = A.district_id INNER JOIN district AS D ON C.district_id = D.district_id WHERE C.gender = 'F' GROUP BY D.A2 ORDER BY COUNT(C.client_id) DESC LIMIT 10
SELECT T3.A2, SUM(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type = 'VYDAJ' AND T1.date LIKE '1996-01%' GROUP BY T3.A2 ORDER BY SUM(T1.amount) DESC LIMIT 10
SELECT COUNT(*) FROM account AS A1 WHERE A1.district_id IN (SELECT district_id FROM district WHERE A3 = 'South Bohemia') AND A1.account_id NOT IN (SELECT account_id FROM card)
SELECT T3.A3 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status IN ('C', 'D') GROUP BY T3.A3 ORDER BY SUM(T1.amount) DESC LIMIT 1
SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.gender = 'M'
SELECT T1.A2, T1.A13 FROM district AS T1 ORDER BY T1.A13 DESC LIMIT 1
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district ORDER BY A16 DESC LIMIT 1)
SELECT COUNT(DISTINCT A.account_id) FROM account AS A INNER JOIN trans AS T ON A.account_id = T.account_id WHERE T.balance < 0 AND T.operation = 'VYBER KARTOU' AND A.frequency = 'POPLATEK MESICNE'
SELECT COUNT(*) FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.amount >= 250000 AND L.date BETWEEN '1995-01-01' AND '1997-12-31' AND A.frequency = 'POPLATEK MESICNE'
SELECT COUNT(*) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status IN ('C', 'D') AND T2.district_id = 1
SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1) AND gender = 'M'
SELECT COUNT(*) FROM card AS C INNER JOIN disp AS D ON C.disp_id = D.disp_id WHERE C.type = 'gold' AND D.type = 'DISPONENT';
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Pisek')
SELECT DISTINCT A.district_id FROM account AS A INNER JOIN trans AS T ON A.account_id = T.account_id WHERE T.amount > 10000 AND STRFTIME('%Y', T.date) = '1997'
SELECT DISTINCT A.account_id FROM "order" AS O INNER JOIN account AS A ON O.account_id = A.account_id INNER JOIN district AS D ON A.district_id = D.district_id WHERE O.k_symbol = 'SIPO' AND D.A2 = 'Pisek'
SELECT disp_id FROM card WHERE type IN ('gold', 'junior') GROUP BY disp_id HAVING COUNT(DISTINCT type) = 2
SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU' AND date LIKE '2021%'
WITH monthly_spent AS (     SELECT account_id, SUM(amount) / COUNT(DISTINCT strftime('%m', date)) AS spent_per_month     FROM trans     WHERE operation = 'VYBER KARTOU' AND strftime('%Y', date) = '1998'     GROUP BY account_id ) SELECT account_id FROM monthly_spent WHERE spent_per_month < (SELECT AVG(spent_per_month) FROM monthly_spent);
SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T1.gender = 'F'
SELECT COUNT(*) FROM account AS A1 INNER JOIN client AS C1 ON A1.district_id = C1.district_id INNER JOIN district AS D1 ON C1.district_id = D1.district_id WHERE C1.gender = 'F' AND D1.A3 = 'south Bohemia'
SELECT A.account_id FROM account AS A INNER JOIN disp AS D ON A.account_id = D.account_id INNER JOIN district AS D2 ON A.district_id = D2.district_id WHERE D2.A2 = 'Tabor' AND D.type = 'OWNER'
SELECT DISTINCT A1.frequency FROM account AS A1 INNER JOIN district AS D ON A1.district_id = D.district_id WHERE A1.frequency != 'OWNER' AND D.A11 > 8000 AND D.A11 <= 9000
SELECT COUNT(DISTINCT A.account_id) FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id INNER JOIN trans AS T ON A.account_id = T.account_id WHERE D.A3 = 'North Bohemia' AND T.bank = 'AB'
SELECT DISTINCT T3.A2 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type = 'VYDAJ'
SELECT AVG(A15) FROM district WHERE A15 > 4000 AND district_id IN (SELECT district_id FROM account WHERE date >= '1997-01-01')
SELECT COUNT(*) FROM card AS C INNER JOIN disp AS D ON C.disp_id = D.disp_id WHERE C.type = 'classic' AND D.type = 'OWNER'
SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'
SELECT (COUNT(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 END) * 100.0) / COUNT(*) AS percentage FROM card;
SELECT client_id FROM disp WHERE account_id = (SELECT account_id FROM loan ORDER BY amount DESC LIMIT 1);
SELECT A15 FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532)
SELECT district_id FROM account WHERE account_id = (SELECT account_id FROM "order" WHERE order_id = 33333)
SELECT * FROM trans WHERE operation = 'VYBER' AND account_id IN (SELECT account_id FROM disp WHERE client_id = 3356);
SELECT COUNT(*) FROM account AS A INNER JOIN loan AS L ON A.account_id = L.account_id WHERE A.frequency = 'POPLATEK TYDNE' AND L.amount < 200000
SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 13539
SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541
SELECT A.district_id, COUNT(A.account_id) AS count FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.status = 'A' GROUP BY A.district_id ORDER BY count DESC LIMIT 1
SELECT client_id FROM disp WHERE account_id = (SELECT account_id FROM "order" WHERE order_id = 32423)
SELECT * FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 5
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Jesenik')
SELECT T1.client_id FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T2.type = 'junior' AND T2.issued >= '1997-01-01'
SELECT (COUNT(CASE WHEN C.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM client AS C  INNER JOIN account AS A ON C.district_id = A.district_id  INNER JOIN district AS D ON A.district_id = D.district_id  WHERE D.A11 > 10000
SELECT ((SUM(CASE WHEN STRFTIME('%Y', L.date) = '1997' THEN L.amount END) - SUM(CASE WHEN STRFTIME('%Y', L.date) = '1996' THEN L.amount END)) / SUM(CASE WHEN STRFTIME('%Y', L.date) = '1996' THEN L.amount END)) * 100 AS growth_rate FROM loan AS L INNER JOIN disp AS D ON L.account_id = D.account_id INNER JOIN client AS C ON D.client_id = C.client_id WHERE C.gender = 'M'
SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';
SELECT (SELECT SUM(A16) FROM district WHERE A3 = 'north Bohemia') - (SELECT SUM(A16) FROM district WHERE A3 = 'east Bohemia') AS difference
SELECT COUNT(*) FROM disp WHERE type IN ('OWNER', 'DISPONENT') AND account_id IN (1, 10)
SELECT (SELECT COUNT(*) FROM "order" WHERE account_id = 3 AND k_symbol = 'SLUZBY') AS request_count, (SELECT k_symbol FROM "order" WHERE amount = 3539) AS purpose_of_debiting
SELECT STRFTIME('%Y', birth_date) FROM client WHERE client_id = (SELECT client_id FROM disp WHERE account_id = 130)
SELECT COUNT(*) FROM account AS A INNER JOIN disp AS D ON A.account_id = D.account_id WHERE D.type = 'OWNER' AND A.frequency = 'POPLATEK PO OBRATU'
SELECT amount, status FROM loan WHERE account_id = (SELECT account_id FROM disp WHERE client_id = 992);
SELECT T1.balance, T2.gender  FROM trans AS T1  INNER JOIN disp AS T3 ON T1.account_id = T3.account_id  INNER JOIN client AS T2 ON T3.client_id = T2.client_id  WHERE T3.client_id = 4 AND T1.trans_id = 851
SELECT type FROM card WHERE disp_id = (SELECT disp_id FROM disp WHERE client_id = 9);
SELECT SUM(amount) FROM trans WHERE account_id IN (SELECT account_id FROM disp WHERE client_id = 617) AND STRFTIME('%Y', date) = '1998'
SELECT C.client_id FROM client AS C INNER JOIN account AS A ON C.district_id = A.district_id INNER JOIN district AS D ON A.district_id = D.district_id WHERE C.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND D.A3 = 'east Bohemia'
SELECT T1.client_id FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'F' ORDER BY T2.amount DESC LIMIT 3
SELECT COUNT(DISTINCT C.client_id) FROM client AS C INNER JOIN account AS A ON C.district_id = A.district_id INNER JOIN trans AS T ON A.account_id = T.account_id WHERE C.gender = 'M' AND C.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T.amount > 4000 AND T.k_symbol = 'SIPO'
SELECT COUNT(*) FROM account WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'Beroun') AND date > '1996-12-31'
SELECT COUNT(*) FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id INNER JOIN card AS K ON D.disp_id = K.disp_id WHERE C.gender = 'F' AND K.type = 'junior'
SELECT (COUNT(CASE WHEN T1.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS proportion FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.district_id IN (SELECT district_id FROM district WHERE A3 = 'Prague')
SELECT (COUNT(CASE WHEN T1.gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.frequency = 'POPLATEK TYDNE'
SELECT COUNT(DISTINCT T2.client_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'
SELECT A.account_id FROM account AS A INNER JOIN loan AS L ON A.account_id = L.account_id WHERE L.duration > 24 AND A.date < '1997-01-01' ORDER BY L.amount ASC LIMIT 1;
SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') AND T2.A11 = (SELECT MIN(A11) FROM district)
SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date LIKE '1920%' AND T2.A3 = 'east Bohemia'
SELECT COUNT(*) FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.duration = 24 AND A.frequency = 'POPLATEK TYDNE'
SELECT AVG(L.amount) FROM loan AS L INNER JOIN trans AS T ON L.account_id = T.account_id WHERE L.status IN ('C', 'D') AND T.k_symbol = 'POPLATEK PO OBRATU'
SELECT T1.client_id, T1.district_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.type = 'OWNER'
SELECT T2.client_id, STRFTIME('%Y', 'now') - STRFTIME('%Y', T2.birth_date) AS age FROM client AS T2 INNER JOIN disp AS T3 ON T2.client_id = T3.client_id INNER JOIN card AS T1 ON T3.disp_id = T1.disp_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.type = 'gold'
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.element = 'cl'
SELECT AVG(o_count) FROM (SELECT COUNT(*) AS o_count FROM atom AS A INNER JOIN bond AS B ON A.molecule_id = B.molecule_id WHERE B.bond_type = '-' AND A.element = 'o' GROUP BY A.molecule_id);
SELECT COUNT(CASE WHEN bond.bond_type = '-' THEN 1 END) * 1.0 / COUNT(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE molecule.label = '+'
SELECT COUNT(*) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'
SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '+'
SELECT SUM(CASE WHEN T1.element = 'c' THEN 1 ELSE 0 END) * 1.0 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = ' = ';
SELECT COUNT(*) FROM bond WHERE bond_type = '#';
SELECT COUNT(*) FROM atom WHERE element != 'br';
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+'
SELECT DISTINCT molecule_id FROM atom WHERE element = 'si'
SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR004_8_9'
SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '='
SELECT label FROM molecule WHERE molecule_id IN (SELECT DISTINCT molecule_id FROM atom WHERE element = 'h') GROUP BY label ORDER BY COUNT(label) DESC LIMIT 1
SELECT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'te'
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '-'
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.label = '-'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(*) ASC LIMIT 1
SELECT B.bond_type FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id WHERE C.atom_id = 'TR004_8' AND C.atom_id2 = 'TR004_20'
SELECT DISTINCT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn')
SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element IN ('i', 's') AND T3.bond_type = '-'
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'
SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR181'
SELECT (COUNT(T1.molecule_id) - SUM(T2.element = 'f')) * 100.0 / COUNT(T1.molecule_id) AS percent FROM molecule AS T1 LEFT JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT (COUNT(CASE WHEN T2.label = '+' THEN 1 END) * 100.0 / COUNT(T1.bond_id)) AS percent FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3
SELECT T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR001' AND T2.bond_id = 'TR001_2_6'
SELECT (SUM(label = '+') - SUM(label = '-')) AS difference FROM molecule
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR_000_2_5'
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'
SELECT DISTINCT T1.molecule_id FROM bond AS T1 WHERE T1.bond_type = ' = ' ORDER BY T1.molecule_id ASC LIMIT 5
SELECT (SUM(bond_type = ' = ') * 100.0 / COUNT(bond_id)) AS percent FROM bond WHERE molecule_id = 'TR008'
SELECT (SUM(label = '+') * 100.0 / COUNT(molecule_id)) AS percent FROM molecule
SELECT (SUM(element = 'h') * 100.0 / COUNT(atom_id)) AS percent FROM atom WHERE molecule_id = 'TR206'
SELECT bond_type FROM bond WHERE molecule_id = 'TR000'
SELECT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR060'
SELECT T1.bond_type, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR018' GROUP BY T1.bond_type ORDER BY COUNT(*) DESC LIMIT 1
SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.bond_type = '-' ORDER BY T1.molecule_id ASC LIMIT 3
SELECT bond_id FROM bond WHERE molecule_id = 'TR006' ORDER BY bond_id ASC LIMIT 2
SELECT COUNT(*) FROM bond AS B INNER JOIN connected AS C ON B.bond_id = C.bond_id WHERE B.molecule_id = 'TR009' AND (C.atom_id = 'TR009_12' OR C.atom_id2 = 'TR009_12')
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'br'
SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_6_9'
SELECT T2.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#'
SELECT COUNT(*) FROM connected WHERE atom_id LIKE 'TR%_19'
SELECT element FROM atom WHERE molecule_id = 'TR004'
SELECT COUNT(*) FROM molecule WHERE label = '-'
SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE SUBSTR(T1.atom_id, 7, 2) BETWEEN '21' AND '25' AND T3.label = '+'
SELECT T2.bond_id  FROM connected AS T2  INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id  WHERE T3.element IN ('p', 'n')  GROUP BY T2.bond_id  HAVING COUNT(DISTINCT T3.element) = 2
SELECT label FROM molecule WHERE molecule_id = (SELECT molecule_id FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id ORDER BY COUNT(bond_id) DESC LIMIT 1)
SELECT COUNT(T2.bond_id) * 1.0 / COUNT(T1.atom_id) FROM atom AS T1 LEFT JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'
SELECT T2.bond_type, T1.bond_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T1.atom_id, 7, 2) + 0 = 45
SELECT element FROM atom WHERE atom_id NOT IN (SELECT atom_id FROM connected)
SELECT DISTINCT T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.molecule_id = 'TR447' AND T2.bond_type = '#'
SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR144_8_19'
SELECT molecule_id, COUNT(bond_id) AS double_bond_count FROM bond WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') AND bond_type = '=' GROUP BY molecule_id ORDER BY double_bond_count DESC LIMIT 1
SELECT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1
SELECT atom_id2 FROM connected WHERE atom_id = (SELECT atom_id FROM atom WHERE element = 'pb')
SELECT T2.element FROM bond AS T1 INNER JOIN connected AS T3 ON T1.bond_id = T3.bond_id INNER JOIN atom AS T2 ON T3.atom_id = T2.atom_id WHERE T1.bond_type = '#'
SELECT (COUNT(bond_id) * 100.0 / (SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id GROUP BY T1.element ORDER BY COUNT(T1.atom_id) DESC LIMIT 1)) AS percentage FROM bond
SELECT SUM(CASE WHEN M.label = '+' THEN 1 ELSE 0 END) * 1.0 / COUNT(B.bond_id) FROM bond B INNER JOIN molecule M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '-'
SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h');
SELECT atom_id2 FROM connected WHERE atom_id IN (SELECT atom_id FROM atom WHERE element = 's')
SELECT DISTINCT B.bond_type FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE A.element = 'sn'
SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'
SELECT COUNT(*) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.element IN ('p', 'br')
SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'
SELECT SUM(CASE WHEN T3.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(T3.atom_id) AS percent FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '-'
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')
SELECT molecule_id FROM molecule WHERE label = '-'
SELECT COUNT(*) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR030'
SELECT bond_type FROM bond WHERE molecule_id BETWEEN 'TR000' AND 'TR050'
SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR001_10_11')
SELECT COUNT(DISTINCT C.bond_id) FROM connected AS C INNER JOIN atom AS A ON C.atom_id = A.atom_id WHERE A.element = 'i'
SELECT MAX(M.label) FROM molecule AS M INNER JOIN atom AS A ON M.molecule_id = A.molecule_id WHERE A.element = 'ca'
SELECT COUNT(DISTINCT T1.element) > 1 FROM connected AS T2 INNER JOIN atom AS T1 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND T1.element IN ('cl', 'c')
SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.element = 'c' AND T2.bond_type = '#' AND T1.label = '-' LIMIT 2
SELECT SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.molecule_id) AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT element FROM atom WHERE molecule_id = 'TR001'
SELECT DISTINCT molecule_id FROM bond WHERE bond_type = '='
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'
SELECT DISTINCT T1.element FROM connected AS T2 INNER JOIN atom AS T1 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR005_16_26'
SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'
SELECT label FROM molecule WHERE molecule_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_10_11')
SELECT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
SELECT T1.element, COUNT(*) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND substr(T1.atom_id, 7, 1) = '4' GROUP BY T1.element
SELECT SUM(T1.element = 'h') * 1.0 / COUNT(T1.element) AS ratio, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006'
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'
SELECT T4.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T4 ON T2.bond_id = T4.bond_id WHERE T1.element = 'te'
SELECT element FROM atom WHERE atom_id IN ('TR001_10', 'TR001_11');
SELECT (COUNT(DISTINCT T1.molecule_id) * 100.0 / (SELECT COUNT(*) FROM molecule)) AS percent_triple_bond FROM bond AS T1 WHERE T1.bond_type = '#'
SELECT (SUM(bond_type = ' = ') * 100.0 / COUNT(bond_id)) AS percent FROM bond WHERE molecule_id = 'TR047'
SELECT label FROM molecule WHERE molecule_id = (SELECT molecule_id FROM atom WHERE atom_id = 'TR001_1')
SELECT label FROM molecule WHERE molecule_id = 'TR151'
SELECT element FROM atom WHERE molecule_id = 'TR151'
SELECT COUNT(*) FROM molecule WHERE label = '+';
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE substr(T2.molecule_id, 3, 3) > '010' AND substr(T2.molecule_id, 3, 3) < '050' AND T1.element = 'c'
SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')
SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'
SELECT COUNT(*)  FROM atom AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.element = 'h' AND T2.label = '+'
SELECT T1.molecule_id FROM bond AS T1 WHERE T1.bond_id = 'TR00_1_2'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
SELECT (SUM(CASE WHEN T1.label = '+' AND T2.element = 'h' THEN 1 ELSE 0 END) * 100.0) / COUNT(T1.molecule_id) AS percentage FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT label FROM molecule WHERE molecule_id = 'TR124'
SELECT atom_id FROM atom WHERE molecule_id = 'TR186'
SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19'
SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR001_2_4')
SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006' AND T1.bond_type = ' = '
SELECT T1.molecule_id, T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT T1.bond_id, T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'
SELECT T2.molecule_id, GROUP_CONCAT(T2.element) AS elements FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' GROUP BY T2.molecule_id
SELECT element FROM atom WHERE atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR000_2_3')
SELECT COUNT(*) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'cl'
SELECT T1.atom_id, (SELECT COUNT(DISTINCT T2.bond_type) FROM bond AS T2 WHERE T2.molecule_id = 'TR346') FROM atom AS T1 WHERE T1.molecule_id = 'TR346';
SELECT COUNT(*) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = ' = ' AND T1.label = '+'
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 WHERE T1.molecule_id NOT IN (SELECT T3.molecule_id FROM atom AS T3 WHERE T3.element = 's') AND T1.molecule_id IN (SELECT T4.molecule_id FROM bond AS T4 WHERE T4.bond_type != ' = ')
SELECT label FROM molecule WHERE molecule_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_2_4')
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';
SELECT COUNT(*) FROM bond WHERE bond_type = '-';
SELECT T1.molecule_id FROM molecule AS T1 WHERE T1.label = '+' AND T1.molecule_id IN (SELECT T2.molecule_id FROM atom AS T2 WHERE T2.element = 'cl')
SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
SELECT (SUM(CASE WHEN T2.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.molecule_id)) AS percentage  FROM molecule AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.label = '+'
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'
SELECT COUNT(DISTINCT T2.element) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_3_4'
SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'
SELECT DISTINCT molecule_id FROM atom WHERE atom_id IN ('TR000_2', 'TR000_4')
SELECT element FROM atom WHERE atom_id = 'TR000_1'
SELECT label FROM molecule WHERE molecule_id = 'TR000'
SELECT (SUM(bond_type = '-') * 100.0 / COUNT(bond_id)) AS percentage FROM bond
SELECT COUNT(DISTINCT M.molecule_id) FROM molecule AS M INNER JOIN atom AS A ON M.molecule_id = A.molecule_id WHERE A.element = 'n' AND M.label = '+'
SELECT DISTINCT T4.molecule_id FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T4 ON T3.bond_id = T4.bond_id WHERE T1.element = 's' AND T4.bond_type = ' = '
SELECT M.molecule_id FROM molecule AS M INNER JOIN atom AS A ON M.molecule_id = A.molecule_id WHERE M.label = '-' GROUP BY M.molecule_id HAVING COUNT(A.atom_id) > 5
SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '=' AND T1.molecule_id = 'TR024'
SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T1.molecule_id ORDER BY COUNT(T2.atom_id) DESC LIMIT 1
SELECT (SUM(CASE WHEN T3.label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT T1.molecule_id)) AS percentage FROM bond AS T1 INNER JOIN atom AS T2 ON T1.bond_id = T2.molecule_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T2.element = 'h' AND T1.bond_type = '#'
SELECT COUNT(*) FROM molecule WHERE label = '+';
SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '-' AND molecule_id BETWEEN 'TR004' AND 'TR010'
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c'
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'
SELECT COUNT(DISTINCT T1.molecule_id)  FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.element = 'o' AND T1.bond_type = ' = '
SELECT COUNT(DISTINCT M.molecule_id) FROM bond AS B INNER JOIN molecule AS M ON B.molecule_id = M.molecule_id WHERE B.bond_type = '#' AND M.label = '-'
SELECT A.element, B.bond_type  FROM atom AS A  INNER JOIN connected AS C ON A.atom_id = C.atom_id  INNER JOIN bond AS B ON C.bond_id = B.bond_id  WHERE A.molecule_id = 'TR016'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.bond_type = ' = ' AND T2.molecule_id = 'TR012'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'o'
SELECT * FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT name FROM cards WHERE borderColor = 'borderless' AND cardKingdomId IS NULL
SELECT name FROM cards WHERE faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)
SELECT name FROM cards WHERE frameVersion = 2015 AND edhrecRank < 100;
SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'
SELECT L.status FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.types = 'Artifact' AND C.side IS NULL AND L.format = 'vintage'
SELECT C.id, C.artist  FROM cards AS C  INNER JOIN legalities AS L ON C.uuid = L.uuid  WHERE (C.power = '*' OR C.power IS NULL) AND L.format = 'commander' AND L.status = 'Legal'
SELECT R.text, C.hasContentWarning FROM cards AS C INNER JOIN rulings AS R ON C.uuid = R.uuid WHERE C.artist = 'Stephen Daniel' AND C.hasContentWarning = 1
SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Sublime Epiphany' AND number = '74s')
SELECT T2.name, T2.artist, T2.isPromo FROM cards AS T2 INNER JOIN rulings AS T1 ON T1.uuid = T2.uuid WHERE T2.isPromo = 1 GROUP BY T2.uuid ORDER BY COUNT(T1.uuid) DESC LIMIT 1
SELECT language FROM foreign_data WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'Annul' AND number = '29')
SELECT C.name FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE F.language = 'Japanese';
SELECT (COUNT(CASE WHEN language = 'Chinese Simplified' THEN 1 END) * 100.0 / COUNT(id)) AS percentage FROM foreign_data
SELECT S.name, S.totalSetSize  FROM set_translations AS ST  INNER JOIN sets AS S ON ST.setCode = S.code  WHERE ST.language = 'Italian'
SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd'
SELECT keywords FROM cards WHERE name = 'Angel of Mercy'
SELECT COUNT(*) FROM cards WHERE power = '*';
SELECT promoTypes FROM cards WHERE name = 'Duress'
SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'
SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'
SELECT DISTINCT T3.language FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T1.name = 'Angel of Mercy'
SELECT COUNT(*) FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE L.status = 'restricted' AND C.isTextless = 0
SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Condemn')
SELECT COUNT(*) FROM legalities AS L INNER JOIN cards AS C ON L.uuid = C.uuid WHERE L.status = 'restricted' AND C.isStarter = 1
SELECT status FROM legalities WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'Cloudchaser Eagle');
SELECT type FROM cards WHERE name = 'Benalish Knight'
SELECT format FROM legalities WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Benalish Knight')
SELECT DISTINCT C.artist FROM foreign_data AS F INNER JOIN cards AS C ON F.uuid = C.uuid WHERE F.language = 'Phyrexian'
SELECT (COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) * 100.0) / COUNT(*) AS percentage FROM cards
SELECT COUNT(*) FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE F.language = 'German' AND C.isReprint = 1;
SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'
SELECT (COUNT(CASE WHEN F.language = 'French' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards AS C JOIN foreign_data AS F ON C.uuid = F.uuid WHERE C.isStorySpotlight = 1
SELECT COUNT(*) FROM cards WHERE toughness = '99';
SELECT name FROM cards WHERE artist = 'Aaron Boyd'
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo'
SELECT id FROM cards WHERE convertedManaCost = 0
SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%'
SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel';
SELECT id FROM cards WHERE hasFoil = 1 AND cardKingdomId IS NOT NULL
SELECT id FROM cards WHERE duelDeck = 'a'
SELECT edhrecRank FROM cards WHERE frameVersion = '2015'
SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'
SELECT C.name FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE C.availability = 'paper' AND F.language = 'Japanese'
SELECT COUNT(*) FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE L.status = 'Banned' AND C.borderColor = 'white'
SELECT L.uuid, F.language FROM legalities AS L INNER JOIN foreign_data AS F ON L.uuid = F.uuid WHERE L.format = 'legacy'
SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Beacon of Immortality')
SELECT COUNT(T1.id), T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND T2.status = 'legal'
SELECT T1.name, T1.colors FROM cards AS T1 WHERE T1.setCode = 'OGW'
SELECT T2.name, T3.language FROM cards AS T2 INNER JOIN set_translations AS T3 ON T2.setCode = T3.setCode WHERE T2.setCode = '10E' AND T2.convertedManaCost = 5
SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'
SELECT colors FROM cards WHERE id BETWEEN 1 AND 20
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'
SELECT T2.name FROM cards AS T2 INNER JOIN rulings AS T1 ON T2.uuid = T1.uuid WHERE T2.rarity = 'uncommon' ORDER BY T1.date ASC LIMIT 3
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NULL
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1
SELECT manaCost FROM cards WHERE frameVersion = '2003' AND borderColor = 'black' AND availability IN ('paper', 'mtgo');
SELECT SUM(manaCost) FROM cards WHERE artist = 'Rob Alexander';
SELECT DISTINCT types FROM cards WHERE availability = 'arena'
SELECT setCode FROM set_translations WHERE language = 'Spanish'
SELECT (COUNT(CASE WHEN hand = '+3' THEN 1 END) * 100.0 / COUNT(id)) FROM cards WHERE frameEffects = 'legendary'
SELECT (COUNT(CASE WHEN isTextless = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE isStorySpotlight = 1
SELECT C.name, (SUM(CASE WHEN F.language = 'Spanish' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM cards AS C LEFT JOIN foreign_data AS F ON C.uuid = F.uuid GROUP BY C.name
SELECT language FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE baseSetSize = 309)
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Portuguese (Brazil)'
SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T1.types LIKE '%Creature%'
SELECT DISTINCT subtypes FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'German') AND subtypes IS NOT NULL  UNION  SELECT DISTINCT supertypes FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'German') AND supertypes IS NOT NULL
SELECT COUNT(*) FROM cards WHERE power IS NULL AND text LIKE '%triggered ability%'
SELECT COUNT(*) FROM cards AS C INNER JOIN rulings AS R ON C.uuid = R.uuid WHERE R.text = 'This is a triggered mana ability' AND C.side IS NULL
SELECT id FROM cards WHERE artist = 'Erica Yang' AND uuid IN (SELECT uuid FROM legalities WHERE format = 'pauper') AND availability = 'paper'
SELECT artist FROM cards WHERE text LIKE 'Das perfekte Gegenmittel zu einer dichten Formation'
SELECT fd.name FROM foreign_data AS fd INNER JOIN cards AS c ON fd.uuid = c.uuid WHERE fd.language = 'French' AND c.type LIKE '%Creature%' AND c.layout = 'normal' AND c.borderColor = 'black' AND c.artist = 'Matthew D. Wilson'
SELECT COUNT(*) FROM cards AS C INNER JOIN rulings AS R ON C.uuid = R.uuid WHERE C.rarity = 'rare' AND R.date = '2009-01-10'
SELECT ST.language FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.baseSetSize = 180
SELECT (COUNT(CASE WHEN T1.hasContentWarning = 0 THEN 1 END) * 100.0) / COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'legal'
SELECT (COUNT(CASE WHEN F.language = 'French' THEN 1 END) * 100.0 / COUNT(*)) FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid WHERE C.power IS NULL OR C.power = '*'
SELECT (COUNT(CASE WHEN T2.type = 'expansion' THEN 1 END) * 100.0) / COUNT(*)  FROM set_translations AS T1  INNER JOIN sets AS T2 ON T1.setCode = T2.code  WHERE T1.language = 'Japanese'
SELECT availability FROM cards WHERE artist = 'Daren Bader'
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name ASC LIMIT 3
SELECT language FROM foreign_data WHERE multiverseid = 149934
SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId ASC LIMIT 3
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isTextless = 1)) AS proportion FROM cards WHERE isTextless = 1 AND layout = 'normal'
SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%'
SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3
SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T1.code = 'ARC'
SELECT S.name, ST.translation FROM sets AS S LEFT JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.id = 5
SELECT ST.language, S.type FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.id = 206
SELECT T1.id, T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.block = 'Shadowmoor' ORDER BY T1.name ASC LIMIT 2
SELECT S.id FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.isForeignOnly = 0 AND S.isFoilOnly = 1 AND ST.language = 'Japanese'
SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' ORDER BY T1.baseSetSize DESC LIMIT 1
SELECT (COUNT(*) * 1.0 / (SELECT COUNT(*) FROM cards)) * 100 FROM cards AS C JOIN foreign_data AS F ON C.uuid = F.uuid WHERE F.language = 'Chinese Simplified' AND C.isOnlineOnly = 1
SELECT COUNT(*) FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE language = 'Japanese') AND (mtgoCode IS NULL OR mtgoCode = '')
SELECT COUNT(*), id FROM cards WHERE borderColor = 'black' GROUP BY id;
SELECT id FROM cards WHERE frameEffects = 'extendedart'
SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1
SELECT language FROM set_translations WHERE setCode = '174'
SELECT name FROM sets WHERE code = 'ALL'
SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar'
SELECT code FROM sets WHERE releaseDate = '2007-07-13'
SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage')
SELECT code FROM sets WHERE type = 'expansion'
SELECT FD.name, C.type FROM foreign_data AS FD INNER JOIN cards AS C ON FD.uuid = C.uuid WHERE C.watermark = 'boros'
SELECT F.language, F.flavorText, C.type  FROM cards AS C  INNER JOIN foreign_data AS F ON C.uuid = F.uuid  WHERE C.watermark = 'colorpie'
SELECT (COUNT(CASE WHEN convertedManaCost = 10 THEN 1 END) * 100.0) / COUNT(*) FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE name = 'Abyssal Horror')
SELECT code FROM sets WHERE type = 'commander'
SELECT F.name, C.type FROM foreign_data AS F INNER JOIN cards AS C ON F.uuid = C.uuid WHERE C.watermark = 'abzan'
SELECT FD.language, C.type FROM cards AS C INNER JOIN foreign_data AS FD ON C.uuid = FD.uuid WHERE C.watermark = 'azorius'
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'
SELECT name FROM cards WHERE isTextless = 0
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor''s Chosen'
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power IS NULL OR power = '*')
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL
SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'
SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle'
SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%'
SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3
SELECT T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN cards AS T3 ON T2.code = T3.setCode WHERE T1.language = 'Italian' AND T3.name = 'Ancestor''s Chosen'
SELECT COUNT(*) FROM set_translations WHERE setCode IN (SELECT setCode FROM cards WHERE name = 'Angel of Mercy')
SELECT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'
SELECT EXISTS (SELECT 1 FROM foreign_data WHERE name = 'Ancestor''s Chosen' AND language = 'Korean')
SELECT COUNT(*) FROM cards WHERE setCode IN (SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition') AND artist = 'Adam Rex'
SELECT baseSetSize FROM sets WHERE code IN (SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition')
SELECT translation FROM set_translations WHERE language = 'Chinese Simplified' AND setCode = (SELECT code FROM sets WHERE name = 'Eighth Edition')
SELECT EXISTS(SELECT 1 FROM cards WHERE name = 'Angel of Mercy' AND mtgoId IS NOT NULL);
SELECT releaseDate FROM sets WHERE code IN (SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen')
SELECT T1.type FROM sets AS T1 WHERE code = (SELECT setCode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition')
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian'
SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Adarkar Valkyrie' AND T2.isForeignOnly = 1
SELECT COUNT(*) FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.language = 'Italian' AND S.baseSetSize < 10
SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.borderColor = 'black'
SELECT name FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'Coldsnap'))
SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')
SELECT C.* FROM cards AS C INNER JOIN sets AS S ON C.setCode = S.code WHERE S.name = 'Coldsnap' AND C.number = '4'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.convertedManaCost > 5 AND T2.name = 'Coldsnap' AND (T1.power IS NULL OR T1.power = '*')
SELECT flavorText FROM foreign_data WHERE language = 'Italian' AND uuid IN (SELECT uuid FROM cards WHERE name = 'Ancestor''s Chosen')
SELECT DISTINCT language FROM foreign_data WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'Ancestor''s Chosen') AND flavorText IS NOT NULL
SELECT type FROM foreign_data WHERE language = 'German' AND uuid IN (SELECT uuid FROM cards WHERE name = 'Ancestor''s Chosen')
SELECT F.text FROM foreign_data AS F INNER JOIN cards AS C ON F.uuid = C.uuid INNER JOIN sets AS S ON C.setCode = S.code WHERE S.name = 'Coldsnap' AND F.language = 'Italian'
SELECT T3.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.name = 'Coldsnap' AND T3.language = 'Italian' AND T1.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = T2.code)
SELECT T1.date FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Reminisce'
SELECT (SUM(CASE WHEN C.convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM cards AS C INNER JOIN sets AS S ON C.setCode = S.code WHERE S.name = 'Coldsnap'
SELECT (SUM(CASE WHEN cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) * 100.0) / COUNT(*) FROM cards WHERE setCode IN (SELECT code FROM sets WHERE name = 'Coldsnap')
SELECT code FROM sets WHERE releaseDate = '2017-07-14'
SELECT keyruneCode FROM sets WHERE code = 'PKHC'
SELECT mcmId FROM sets WHERE code = 'SS2'
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'
SELECT type FROM sets WHERE name = 'From the Vault: Lore'
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'
SELECT T2.text, CASE WHEN T1.hasContentWarning = 1 THEN 'Yes' ELSE 'No' END AS MissingOrDegraded FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Jim Pavelec'
SELECT S.releaseDate FROM sets AS S INNER JOIN cards AS C ON S.code = C.setCode WHERE C.name = 'Evacuation'
SELECT baseSetSize FROM sets WHERE code = (SELECT setCode FROM set_translations WHERE translation = 'Rinascita di Alara')
SELECT S.type FROM set_translations ST INNER JOIN sets S ON ST.setCode = S.code WHERE ST.translation = 'Huitième édition'
SELECT T3.name FROM sets AS T3 INNER JOIN set_translations AS T1 ON T3.code = T1.setCode WHERE T1.language = 'French' AND T1.translation = 'Tendo Ice Bridge'
SELECT COUNT(*) FROM set_translations WHERE translation IS NOT NULL AND setCode IN (SELECT code FROM sets WHERE name = 'Salvat 2011')
SELECT ST.translation FROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code INNER JOIN cards AS C ON S.code = C.setCode WHERE C.name = 'Fellwar Stone' AND ST.language = 'Japanese'
SELECT T2.name FROM cards AS T2 INNER JOIN sets AS T1 ON T2.setCode = T1.code WHERE T1.name = 'Journey into Nyx Hero''s Path' ORDER BY T2.convertedManaCost DESC LIMIT 1
SELECT releaseDate FROM sets WHERE code = (SELECT setCode FROM set_translations WHERE translation = 'Ola de frío')
SELECT T1.type FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Samite Pilgrim'
SELECT COUNT(*) FROM cards WHERE setCode = (SELECT code FROM sets WHERE name = 'World Championship Decks 2004') AND convertedManaCost = 3
SELECT ST.translation FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.name = 'Mirrodin' AND ST.language = 'Chinese Simplified'
SELECT (SUM(T2.isNonFoilOnly = 1) * 100.0) / COUNT(*) AS percentage_non_foil FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Japanese'
SELECT (SUM(CASE WHEN C.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM foreign_data AS F INNER JOIN cards AS C ON F.uuid = C.uuid WHERE F.language = 'Portuguese (Brazil)'
SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1
SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1
SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a';
SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1
SELECT C.name, C.manaCost FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE L.format = 'duel' ORDER BY C.manaCost DESC LIMIT 10
SELECT MIN(c.originalReleaseDate), l.format  FROM cards AS c  INNER JOIN legalities AS l ON c.uuid = l.uuid  WHERE c.rarity = 'mythic' AND l.status = 'legal'
SELECT COUNT(*) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'Volkan Baga' AND T1.language = 'French'
SELECT COUNT(*) FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid WHERE C.rarity = 'rare' AND C.types = 'Enchantment' AND C.name = 'Abundance' AND L.status = 'Legal'
SELECT format FROM legalities WHERE status = 'banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1
SELECT language FROM set_translations WHERE setCode = (SELECT code FROM sets WHERE name = 'Battlebond')
SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = (SELECT artist FROM cards GROUP BY artist ORDER BY COUNT(*) LIMIT 1)
SELECT L.status  FROM cards AS C  INNER JOIN legalities AS L ON C.uuid = L.uuid  WHERE C.frameVersion = '1997'  AND C.artist = 'D. Alexander Gregory'  AND C.hasContentWarning = 1  AND L.format = 'legacy';
SELECT T1.name, T2.format FROM cards AS T1 LEFT JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'banned'
SELECT AVG(set_count) AS average_sets, language AS common_language FROM ( SELECT COUNT(id) AS set_count, STRFTIME('%Y', releaseDate) AS year FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY year ) AS yearly_sets CROSS JOIN ( SELECT language FROM foreign_data GROUP BY language ORDER BY COUNT(language) DESC LIMIT 1 ) AS common_lang
SELECT DISTINCT artist FROM cards WHERE BorderColor = 'black' AND availability = 'arena'
SELECT uuid FROM legalities WHERE format = 'oldschool' AND status IN ('Banned', 'Restricted');
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';
SELECT R.text FROM rulings AS R INNER JOIN cards AS C ON R.uuid = C.uuid WHERE C.artist = 'Kev Walker' ORDER BY R.date DESC
SELECT T1.name, T3.format FROM cards AS T1 INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid INNER JOIN sets AS T2 ON T2.code = T3.uuid WHERE T2.name = 'Hour of Devastation' AND T3.status = 'legal'
SELECT T1.name FROM sets AS T1 LEFT JOIN set_translations AS T2 ON T1.code = T2.setCode GROUP BY T1.name HAVING SUM(T2.language = 'Korean') > 0 AND SUM(T2.language = 'Japanese') = 0
SELECT DISTINCT T1.frameVersion, T1.uuid FROM cards AS T1 LEFT JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams' AND T2.status = 'banned'
SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1
SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2014'
SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1
SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;
SELECT COUNT(*) FROM users WHERE Views > 10 AND STRFTIME('%Y', CreationDate) > 2013
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT T1.Title FROM posts AS T1 WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT U.DisplayName FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.Title = 'Eliciting priors from experts'
SELECT Title FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') ORDER BY ViewCount DESC LIMIT 1
SELECT DisplayName FROM users WHERE Id = (SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1)
SELECT SUM(CommentCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT MAX(AnswerCount) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT DisplayName FROM users WHERE Id = (SELECT LastEditorUserId FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation')
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND ParentId IS NULL
SELECT DISTINCT U.DisplayName FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.ClosedDate IS NOT NULL
SELECT COUNT(*) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE Age > 65) AND Score >= 20
SELECT Location FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts')
SELECT Body FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags WHERE TagName = 'bayesian')
SELECT Body FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags WHERE Count = (SELECT MAX(Count) FROM tags))
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT T1.Name FROM badges AS T1 WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT COUNT(*) FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie') AND STRFTIME('%Y', Date) = '2011'
SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1)
SELECT AVG(Score) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie')
SELECT (COUNT(T1.Id) * 1.0 / COUNT(DISTINCT T2.DisplayName)) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200
SELECT (COUNT(CASE WHEN U.Age > 65 THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.Score > 20
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'
SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1
SELECT COUNT(*) FROM badges WHERE Name = 'Revival';
SELECT Title FROM posts WHERE Id = (SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1)
SELECT CommentCount FROM posts WHERE ViewCount = 1910;
SELECT FavoriteCount FROM posts WHERE Id = (SELECT PostId FROM comments WHERE UserId = 3025 AND CreationDate = '2014-04-23 20:29:39')
SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE ParentId = 107829 AND CommentCount = 1)
SELECT CASE WHEN T2.ClosedDate IS NOT NULL THEN 'Well-finished' ELSE 'Not well-finished' END FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'
SELECT Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 65041)
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Tiago Pasqualini')
SELECT u.DisplayName FROM users AS u INNER JOIN votes AS v ON u.Id = v.UserId WHERE v.Id = 6347
SELECT COUNT(V.Id) FROM votes AS V INNER JOIN posts AS P ON V.PostId = P.Id WHERE P.Title LIKE '%data visualization%'
SELECT B.Name FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE U.DisplayName = 'DatEpicCoderGuyWhoPrograms'
SELECT (COUNT(P.Id) / NULLIF(COUNT(V.Id), 0)) AS ratio FROM posts AS P LEFT JOIN votes AS V ON P.Id = V.PostId WHERE P.OwnerUserId = 24
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'
SELECT Text FROM comments WHERE Score = 17;
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'
SELECT B.Name FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE U.DisplayName = 'SilentGhost'
SELECT U.DisplayName FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Text = 'thank you user93!'
SELECT Text FROM comments WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'A Lion')
SELECT U.DisplayName, U.Reputation FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.Title = 'Understanding what Dassault iSight is doing?'
SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'How does gentle boosting differ from AdaBoost?')
SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10
SELECT LastEditorDisplayName FROM posts WHERE LOWER(Title) = LOWER('Open source tools for visualizing multi-dimensional data')
SELECT Title FROM posts WHERE LastEditorUserId = (SELECT Id FROM users WHERE DisplayName = 'Vebjorn Ljosa')
SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny'
SELECT C.Text FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE P.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'
SELECT SUM(BountyAmount) FROM votes WHERE PostId IN (SELECT Id FROM posts WHERE Title LIKE '%data%')
SELECT U.DisplayName FROM votes AS V INNER JOIN posts AS P ON V.PostId = P.Id INNER JOIN users AS U ON V.UserId = U.Id WHERE V.BountyAmount = 50 AND P.Title LIKE '%variance%'
SELECT AVG(P.ViewCount) AS AverageViewCount, P.Title, C.Text, P.Score FROM posts AS P INNER JOIN tags AS T ON P.Id = T.ExcerptPostId LEFT JOIN comments AS C ON P.Id = C.PostId WHERE T.TagName = 'humor' GROUP BY P.Id, C.Text
SELECT COUNT(*) FROM comments WHERE UserId = 13;
SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1;
SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users)
SELECT COUNT(*) FROM badges WHERE Name = 'Supporter' AND STRFTIME('%Y', Date) = '2011'
SELECT COUNT(*) FROM (SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5)
SELECT COUNT(DISTINCT U.Id) FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId WHERE U.Location = 'New York' AND B.Name IN ('Supporter', 'Teacher') GROUP BY U.Id HAVING COUNT(DISTINCT B.Name) = 2
SELECT T2.Id, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1
SELECT T1.UserId FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount >= 1000 GROUP BY T1.PostId HAVING COUNT(T1.PostId) = 1
SELECT T2.Name FROM badges AS T2 INNER JOIN (SELECT UserId, COUNT(Id) AS CommentCount FROM comments GROUP BY UserId ORDER BY CommentCount DESC LIMIT 1) AS T1 ON T2.UserId = T1.UserId
SELECT COUNT(*) FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId WHERE U.Location = 'India' AND B.Name = 'Teacher'
SELECT (COUNT(CASE WHEN strftime('%Y', Date) = '2010' THEN 1 END) * 100.0 / COUNT(Name)) - (COUNT(CASE WHEN strftime('%Y', Date) = '2011' THEN 1 END) * 100.0 / COUNT(Name)) AS percentage_difference FROM badges WHERE Name = 'Student'
SELECT PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS UniqueUserCount FROM postHistory WHERE PostId = 3720;
SELECT T1.Id, T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.RelatedPostId WHERE T2.PostId = 61217
SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Id = 395
SELECT Id, OwnerUserId FROM posts WHERE Score > 60;
SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND STRFTIME('%Y', CreaionDate) = '2011'
SELECT AVG(UpVotes), AVG(Age) FROM users WHERE Id IN (SELECT OwnerUserId FROM posts GROUP BY OwnerUserId HAVING COUNT(*) > 10);
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer'
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08'
SELECT COUNT(*) FROM comments WHERE Score > 60;
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47.0'
SELECT COUNT(*) FROM posts WHERE Score = 10;
SELECT DISTINCT b.Name FROM badges AS b INNER JOIN users AS u ON b.UserId = u.Id WHERE u.Reputation = (SELECT MAX(Reputation) FROM users)
SELECT u.Reputation FROM users u INNER JOIN badges b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0'
SELECT B.Name FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE U.DisplayName = 'Pierre'
SELECT B.Date FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE U.Location = 'Rochester, NY'
SELECT (SELECT COUNT(*) FROM badges WHERE Name = 'Teacher') * 100.0 / (SELECT COUNT(*) FROM users) AS percentage
SELECT (SUM(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Organizer');
SELECT Score FROM comments WHERE PostId = (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:19:56.0')
SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:37:33.0')
SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'
SELECT COUNT(*) FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'Supporter') AND Age BETWEEN 19 AND 65;
SELECT SUM(u.Views) FROM users AS u INNER JOIN badges AS b ON u.Id = b.UserId WHERE b.Date = '2010-07-19 19:39:08.0'
SELECT DISTINCT B.Name FROM badges AS B INNER JOIN users AS U ON B.UserId = U.Id WHERE U.Reputation = (SELECT MIN(Reputation) FROM users)
SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Sharpie')
SELECT COUNT(*) FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId WHERE U.Age > 65 AND B.Name = 'Supporter'
SELECT DisplayName FROM users WHERE Id = 30
SELECT COUNT(*) FROM users WHERE Location = 'New York';
SELECT COUNT(*) FROM votes WHERE CreationDate LIKE '2010%'
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)
SELECT (COUNT(CASE WHEN STRFTIME('%Y', CreationDate) = '2010' THEN Id END) * 1.0 / COUNT(CASE WHEN STRFTIME('%Y', CreationDate) = '2011' THEN Id END)) FROM votes
SELECT T3.TagName FROM tags AS T3 INNER JOIN posts AS T2 ON T3.ExcerptPostId = T2.Id INNER JOIN users AS T1 ON T2.OwnerUserId = T1.Id WHERE T1.DisplayName = 'John Stauffer'
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Daniel Vassallo')
SELECT COUNT(*) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Harlan')
SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1
SELECT T2.DisplayName, SUM(T1.ViewCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY T2.DisplayName ORDER BY SUM(T1.ViewCount) DESC LIMIT 1
SELECT COUNT(*) FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id INNER JOIN votes AS V ON P.Id = V.PostId WHERE U.DisplayName = 'Matt Parker' GROUP BY P.Id HAVING COUNT(V.PostId) > 4
SELECT COUNT(C.Id) FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE C.Score < 60 AND U.DisplayName = 'Neil McGuigan'
SELECT DISTINCT T3.TagName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN tags AS T3 ON T2.Id = T3.ExcerptPostId WHERE T1.DisplayName = 'Mark Meckes' AND T2.CommentCount = 0
SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Organizer'
SELECT (COUNT(T1.Id) * 100.0 / COUNT(T2.Id)) AS percentage FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id WHERE T2.OwnerDisplayName = 'Community' AND T1.TagName = 'r'
SELECT SUM(CASE WHEN U.DisplayName = 'mornington' THEN P.ViewCount ELSE 0 END) - SUM(CASE WHEN U.DisplayName = 'Amos' THEN P.ViewCount ELSE 0 END)  FROM posts AS P  INNER JOIN users AS U ON P.OwnerUserId = U.Id
SELECT COUNT(*) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'
SELECT COUNT(*) FROM posts WHERE CreaionDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'
SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users)
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'
SELECT COUNT(*) FROM comments WHERE Score < 60 AND UserId = 13;
SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score > 60
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'North Pole' AND STRFTIME('%Y', T1.Date) = '2011'
SELECT U.DisplayName, U.WebsiteUrl  FROM posts AS P  INNER JOIN users AS U ON P.OwnerUserId = U.Id  WHERE P.FavoriteCount > 150
SELECT COUNT(PH.Id), P.LastEditDate FROM posts AS P INNER JOIN postHistory AS PH ON P.Id = PH.PostId WHERE P.Title = 'What is the best introductory Bayesian statistics textbook?'
SELECT LastAccessDate, Location FROM users WHERE Id IN (SELECT UserId FROM badges WHERE Name = 'outliers')
SELECT Title FROM posts WHERE Id IN (SELECT RelatedPostId FROM postLinks WHERE PostId = (SELECT Id FROM posts WHERE Title = 'How to tell if something happened in a data set which monitors a value over time'))
SELECT T1.Id, T2.Name FROM posts AS T1 INNER JOIN users AS T3 ON T1.OwnerUserId = T3.Id INNER JOIN badges AS T2 ON T3.Id = T2.UserId WHERE T3.DisplayName = 'Samuel' AND strftime('%Y', T1.CreaionDate) = '2013' AND strftime('%Y', T2.Date) = '2013'
SELECT OwnerDisplayName FROM posts WHERE ViewCount = (SELECT MAX(ViewCount) FROM posts)
SELECT U.DisplayName, U.Location  FROM tags AS T  INNER JOIN posts AS P ON T.ExcerptPostId = P.Id  INNER JOIN users AS U ON P.OwnerUserId = U.Id  WHERE T.TagName = 'hypothesis-testing'
SELECT T2.Title, T1.LinkTypeId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?')
SELECT OwnerDisplayName FROM posts WHERE Id = (SELECT ParentId FROM posts WHERE Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL))
SELECT U.DisplayName, U.WebsiteUrl  FROM votes V  INNER JOIN users U ON V.UserId = U.Id  WHERE V.VoteTypeId = 8 AND V.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8)
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5
SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;
SELECT OwnerUserId FROM posts ORDER BY FavoriteCount DESC LIMIT 1;
SELECT Age FROM users ORDER BY Reputation DESC LIMIT 1;
SELECT COUNT(*) FROM posts AS P INNER JOIN votes AS V ON P.Id = V.PostId WHERE strftime('%Y', P.CreaionDate) = '2011' AND V.BountyAmount = 50
SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users)
SELECT Score FROM posts WHERE Id = (SELECT WikiPostId FROM tags WHERE Count = (SELECT MAX(Count) FROM tags))
SELECT COUNT(T1.Id) / 12.0 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate LIKE '2010%' AND T2.AnswerCount <= 2
SELECT T1.id FROM posts AS T1 INNER JOIN votes AS T2 ON T1.id = T2.PostId WHERE T2.UserId = 1465 ORDER BY T1.FavoriteCount DESC LIMIT 1
SELECT T2.Title FROM posts AS T2 WHERE T2.Id = (SELECT T1.PostId FROM postLinks AS T1 ORDER BY T1.CreationDate ASC LIMIT 1)
SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Name) DESC LIMIT 1)
SELECT MIN(CreationDate) FROM votes WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'chl')
SELECT MIN(CreaionDate) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users))
SELECT U.DisplayName  FROM badges AS B  JOIN users AS U ON B.UserId = U.Id  WHERE B.Name = 'Autobiographer'  AND B.Date = (SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer')
SELECT COUNT(DISTINCT U.Id)  FROM users AS U  INNER JOIN posts AS P ON U.Id = P.OwnerUserId  WHERE U.Location = 'United Kingdom' AND P.FavoriteCount >= 4
SELECT AVG(PostId) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users))
SELECT DisplayName FROM users ORDER BY Reputation DESC LIMIT 1
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65
SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Jay Stevens') AND STRFTIME('%Y', CreaionDate) = '2010'
SELECT T1.Id, T1.Title  FROM posts AS T1  INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id  WHERE T2.DisplayName = 'Harvey Motulsky'  ORDER BY T1.ViewCount DESC  LIMIT 1
SELECT Id, Title FROM posts ORDER BY Score DESC LIMIT 1
SELECT AVG(p.Score) FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'Stephen Turner'
SELECT DISTINCT U.DisplayName  FROM posts AS P  INNER JOIN users AS U ON P.OwnerUserId = U.Id  WHERE P.ViewCount > 20000 AND STRFTIME('%Y', P.CreaionDate) = '2011'
SELECT T1.Id, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreaionDate) = '2010' AND T1.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE STRFTIME('%Y', CreaionDate) = '2010')
SELECT (COUNT(CASE WHEN T2.Reputation > 1000 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreaionDate) = '2011'
SELECT (COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 END) * 100.0) / COUNT(Id) AS percentage FROM users
SELECT T1.ViewCount, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Computer Game Datasets'
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)
SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts ORDER BY Score DESC LIMIT 1)
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;
SELECT U.DisplayName, U.Location FROM users AS U JOIN posts AS P ON U.Id = P.LastEditorUserId WHERE P.Id = 183
SELECT T1.Name FROM badges AS T1 WHERE T1.Date = (SELECT MAX(T2.Date) FROM badges AS T2 WHERE T2.UserId = (SELECT Id FROM users WHERE DisplayName = 'Emmett'))
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;
SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'
SELECT COUNT(P.Id), COUNT(C.Id) FROM users AS U LEFT JOIN posts AS P ON U.Id = P.OwnerUserId LEFT JOIN comments AS C ON U.Id = C.UserId WHERE U.Id = (SELECT Id FROM users WHERE CreationDate = (SELECT MAX(CreationDate) FROM users))
SELECT C.Text, U.DisplayName FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id INNER JOIN users AS U ON C.UserId = U.Id WHERE P.Title = 'Analysing wind data with R' AND C.CreationDate = (SELECT MAX(CreationDate) FROM comments WHERE PostId = P.Id)
SELECT COUNT(*) FROM badges WHERE Name = 'Citizen Patrol';
SELECT COUNT(*) FROM tags WHERE TagName = 'careers'
SELECT reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'
SELECT COUNT(c.Id) + p.AnswerCount  FROM posts p  LEFT JOIN comments c ON p.Id = c.PostId  WHERE p.Title = 'Clustering 1D data'
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'
SELECT COUNT(*) FROM votes WHERE BountyAmount > 30;
SELECT (COUNT(CASE WHEN P.Score >= 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM posts AS P WHERE P.OwnerUserId = (SELECT U.Id FROM users AS U ORDER BY U.Reputation DESC LIMIT 1)
SELECT COUNT(*) FROM posts WHERE Score < 20;
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'
SELECT U.Reputation, U.UpVotes FROM users AS U INNER JOIN comments AS C ON U.Id = C.UserId WHERE C.Text = 'fine, you win :)'
SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'linear regression')
SELECT Text FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150) ORDER BY Score DESC LIMIT 1
SELECT U.CreationDate, U.Age FROM users AS U INNER JOIN comments AS C ON U.Id = C.UserId WHERE C.Text LIKE '%http://%'
SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score = 0 AND T1.ViewCount < 5
SELECT COUNT(*) FROM comments WHERE Score = 0 AND PostId IN (SELECT Id FROM posts WHERE CommentCount = 1)
SELECT COUNT(DISTINCT U.Id) FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Score = 0 AND U.Age = 40
SELECT T1.Id, T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Group differences on a five point Likert item'
SELECT UpVotes FROM users WHERE Id = (SELECT UserId FROM comments WHERE Text = 'R is also lazy evaluated.');
SELECT C.Text FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE U.DisplayName = 'Harvey Motulsky'
SELECT DISTINCT U.DisplayName FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Score BETWEEN 1 AND 5 AND U.DownVotes = 0
SELECT (COUNT(CASE WHEN U.UpVotes = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Score BETWEEN 5 AND 10
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'
SELECT COUNT(DISTINCT hero_id) FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength')
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T2.power_id = (SELECT id FROM superpower WHERE power_name = 'Super Strength') AND T1.height_cm > 200
SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15
SELECT COUNT(*) FROM superhero WHERE eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue')
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.skin_colour_id = C.id WHERE S.superhero_name = 'Apocalypse'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T1.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') AND T2.power_id = (SELECT id FROM superpower WHERE power_name = 'Agility')
SELECT T1.superhero_name  FROM superhero AS T1  INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id  INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id  INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id  INNER JOIN superpower AS T5 ON T4.power_id = T5.id  WHERE T2.colour = 'Blue' AND T3.colour = 'Blond' AND T5.power_name = 'Agility'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT T2.full_name FROM superhero AS T2 INNER JOIN publisher AS T1 ON T2.publisher_id = T1.id WHERE T2.height_cm = (SELECT MAX(T3.height_cm) FROM superhero AS T3 INNER JOIN publisher AS T1 ON T3.publisher_id = T1.id WHERE T1.publisher_name = 'Marvel Comics')
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' AND T1.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue')
SELECT AVG(height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT (COUNT(T3.hero_id) * 100.0 / COUNT(T1.id)) AS percentage FROM superhero AS T1 JOIN publisher AS T2 ON T1.publisher_id = T2.id LEFT JOIN hero_power AS T3 ON T1.id = T3.hero_id WHERE T2.publisher_name = 'Marvel Comics' AND T3.power_id IN (SELECT id FROM superpower WHERE power_name = 'Super Strength')
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'
SELECT P.publisher_name FROM publisher AS P INNER JOIN superhero AS S ON P.id = S.publisher_id WHERE S.id = (SELECT H.hero_id FROM hero_attribute AS H INNER JOIN attribute AS A ON H.attribute_id = A.id WHERE A.attribute_name = 'Speed' ORDER BY H.attribute_value ASC LIMIT 1)
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'
SELECT T3.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T1.superhero_name = 'Blue Beetle II'
SELECT COUNT(*) FROM superhero WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond')
SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Intelligence') AND T1.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Intelligence'))
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'
SELECT COUNT(DISTINCT hero_id) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Durability') AND attribute_value < 50
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T2.gender = 'Female' AND T3.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND T3.attribute_value = 100
SELECT superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY superhero_name HAVING COUNT(T2.power_id) = (SELECT MAX(power_count) FROM (SELECT COUNT(power_id) AS power_count FROM hero_power GROUP BY hero_id))
SELECT COUNT(*) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Vampire')
SELECT (COUNT(CASE WHEN T2.alignment = 'Bad' THEN 1 END) * 100.0) / COUNT(T1.id) AS percentage, COUNT(CASE WHEN T2.alignment = 'Bad' AND T3.publisher_name = 'Marvel Comics' THEN T1.id END) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id
SELECT ABS(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id
SELECT id FROM publisher WHERE publisher_name = 'Star Trek'
SELECT AVG(attribute_value) FROM hero_attribute
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'
SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2
SELECT DISTINCT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.gender_id = (SELECT id FROM gender WHERE gender = 'Male') LIMIT 5
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'
SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1
SELECT T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id WHERE T2.hero_id = 56
SELECT T2.full_name FROM superhero AS T2 INNER JOIN race AS T1 ON T2.race_id = T1.id WHERE T1.race = 'Demi-God' LIMIT 5
SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')
SELECT R.race FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id WHERE S.weight_kg = 169
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.hair_colour_id = C.id INNER JOIN race AS R ON S.race_id = R.id WHERE S.height_cm = 185 AND R.race = 'Human'
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.weight_kg = (SELECT MAX(weight_kg) FROM superhero)
SELECT (SUM(publisher_id = 13) * 100.0 / COUNT(*)) AS percentage FROM superhero WHERE height_cm BETWEEN 150 AND 180
SELECT full_name FROM superhero WHERE gender_id = 1 AND weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)
SELECT power_name FROM superpower WHERE id = (SELECT power_id FROM hero_power GROUP BY power_id ORDER BY COUNT(power_id) DESC LIMIT 1)
SELECT HA.attribute_value FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id WHERE S.superhero_name = 'Abomination'
SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1
SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'stealth'
SELECT T2.full_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_value = (SELECT MAX(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength')
SELECT COUNT(T1.id) * 1.0 / SUM(T1.skin_colour_id = 1) FROM superhero AS T1
SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics');
SELECT T2.superhero_name FROM superhero AS T2 INNER JOIN hero_attribute AS T1 ON T2.id = T1.hero_id INNER JOIN attribute AS T3 ON T1.attribute_id = T3.id INNER JOIN publisher AS T4 ON T2.publisher_id = T4.id WHERE T3.attribute_name = 'durability' AND T4.publisher_name = 'Dark Horse Comics' ORDER BY T1.attribute_value DESC LIMIT 1
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.full_name = 'Abraham Sapien'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'
SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Dark Horse Comics'
SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id
SELECT R.race FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id WHERE S.superhero_name = 'A-Bomb'
SELECT (COUNT(CASE WHEN C.colour = 'Blue' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM superhero AS S INNER JOIN gender AS G ON S.gender_id = G.id INNER JOIN colour AS C ON S.skin_colour_id = C.id WHERE G.gender = 'Female'
SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'
SELECT G.gender FROM superhero AS S INNER JOIN gender AS G ON S.gender_id = G.id WHERE S.superhero_name = 'Agent 13';
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T2.power_id = (SELECT id FROM superpower WHERE power_name = 'Adaptation')
SELECT COUNT(*) FROM hero_power WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Amazo')
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'
SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Gold')
SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'
SELECT COUNT(*) FROM hero_attribute WHERE attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'))
SELECT R.race, A.alignment  FROM superhero AS S  INNER JOIN race AS R ON S.race_id = R.id  INNER JOIN alignment AS A ON S.alignment_id = A.id  WHERE S.superhero_name = 'Cameron Hicks'
SELECT (COUNT(CASE WHEN T1.gender_id = 1 THEN 1 END) * 100.0 / COUNT(*)) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT AVG(weight_kg) FROM superhero WHERE race_id = (SELECT id FROM race WHERE race = 'Alien')
SELECT (SUM(weight_kg) FILTER (WHERE full_name = 'Emil Blonsky') - SUM(weight_kg) FILTER (WHERE full_name = 'Charles Chandler')) AS weight_difference FROM superhero
SELECT AVG(height_cm) FROM superhero
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'
SELECT COUNT(*) FROM superhero WHERE race_id = 21 AND gender_id = 1;
SELECT T3.superhero_name  FROM hero_attribute AS T1  INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id  INNER JOIN superhero AS T3 ON T1.hero_id = T3.id  WHERE T2.attribute_name = 'Speed'  AND T1.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = T2.id)
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;
SELECT A.attribute_name, HA.attribute_value FROM hero_attribute AS HA INNER JOIN superhero AS S ON HA.hero_id = S.id INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE S.superhero_name = '3-D Man'
SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')
SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL OR publisher_id <> 1;
SELECT (COUNT(CASE WHEN eye_colour_id = 7 THEN 1 END) * 100.0) / COUNT(*) AS percentage FROM superhero
SELECT (SUM(gender_id = 1) * 1.0 / SUM(gender_id = 2)) AS ratio FROM superhero
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)
SELECT id FROM superpower WHERE power_name = 'Cryokinesis'
SELECT superhero_name FROM superhero WHERE id = 294
SELECT full_name FROM superhero WHERE weight_kg IS NULL OR weight_kg = 0
SELECT C.colour FROM colour AS C INNER JOIN superhero AS S ON C.id = S.eye_colour_id WHERE S.full_name = 'Karen Beecher-Duncan'
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'
SELECT T3.race FROM superhero AS T1 INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38
SELECT R.race FROM superhero AS S INNER JOIN hero_attribute AS H ON S.id = H.hero_id INNER JOIN race AS R ON S.race_id = R.id WHERE H.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)
SELECT T3.alignment, T4.power_name FROM superhero AS T1 INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T4 ON T2.power_id = T4.id WHERE T1.superhero_name = 'Atom IV'
SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5
SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.alignment_id = 3
SELECT C.colour FROM superhero AS S INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id INNER JOIN colour AS C ON S.skin_colour_id = C.id WHERE HA.attribute_value = 100
SELECT COUNT(*) FROM superhero WHERE alignment_id = 1 AND gender_id = 2;
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80
SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.colour = 'blue' AND T1.gender_id = (SELECT id FROM gender WHERE gender = 'Male')
SELECT (SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM superhero WHERE alignment_id = 2
SELECT (SUM(T1.eye_colour_id = 7) - SUM(T1.eye_colour_id = 1)) AS difference FROM superhero AS T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL
SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength') AND T2.superhero_name = 'Hulk'
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'
SELECT COUNT(T1.id) FROM superhero AS T1 WHERE T1.skin_colour_id = (SELECT id FROM colour WHERE colour = 'Green') AND T1.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND T2.publisher_name = 'Marvel Comics'
SELECT T2.superhero_name FROM superhero AS T2 INNER JOIN hero_power AS T1 ON T2.id = T1.hero_id WHERE T1.power_id = (SELECT id FROM superpower WHERE power_name = 'Wind Control') ORDER BY T2.superhero_name ASC
SELECT T3.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.power_id = (SELECT id FROM superpower WHERE power_name = 'Phoenix Force')
SELECT T2.superhero_name FROM superhero AS T2 INNER JOIN publisher AS T1 ON T2.publisher_id = T1.id WHERE T1.publisher_name = 'DC Comics' ORDER BY T2.weight_kg DESC LIMIT 1
SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.race_id IN (SELECT id FROM race WHERE race <> 'Human') AND T2.publisher_name = 'Dark Horse Comics'
SELECT COUNT(*) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100
SELECT COUNT(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 END) - COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id;
SELECT T2.attribute_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T1.hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Black Panther') ORDER BY T1.attribute_value ASC LIMIT 1
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.eye_colour_id = C.id WHERE S.superhero_name = 'Abomination'
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'
SELECT (COUNT(CASE WHEN T3.gender = 'Female' THEN 1 END) * 100.0) / COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'
SELECT (SUM(CASE WHEN T1.alignment_id = 1 THEN 1 ELSE 0 END) * 100.0) / COUNT(*) AS good_percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'
SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute)
SELECT full_name FROM superhero WHERE superhero_name = 'Alien'
SELECT full_name FROM superhero WHERE weight_kg < 100 AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'Brown')
SELECT attribute_value FROM hero_attribute WHERE hero_id = (SELECT id FROM superhero WHERE superhero_name = 'Aquababy')
SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40
SELECT AVG(height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'
SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'
SELECT SP.power_name FROM superhero AS S INNER JOIN hero_power AS HP ON S.id = HP.hero_id INNER JOIN superpower AS SP ON HP.power_id = SP.id WHERE S.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero)
SELECT driverRef FROM drivers WHERE driverId IN (SELECT driverId FROM qualifying WHERE raceId = 18 ORDER BY q1 DESC LIMIT 5);
SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 19 AND T1.q2 IS NOT NULL ORDER BY T1.q2 ASC LIMIT 1
SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai'
SELECT url FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya')
SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany'
SELECT T3.position FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId INNER JOIN results AS T3 ON T2.raceId = T3.raceId WHERE T1.name = 'Renault'
SELECT COUNT(*) FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2010 AND C.country NOT IN ('Asia', 'Europe')
SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain'
SELECT lat, lng FROM circuits WHERE circuitId IN (SELECT circuitId FROM races WHERE name = 'Australian Grand Prix')
SELECT url FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Sepang International Circuit')
SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'
SELECT lat, lng FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE name = 'Abu Dhabi Grand Prix')
SELECT C.nationality FROM constructorResults AS CR INNER JOIN constructors AS C ON CR.constructorId = C.constructorId WHERE CR.raceId = 24 AND CR.points = 1
SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'Senna' AND T1.raceId = 354
SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q2 = '1:40' AND T1.raceId = 355
SELECT driverId FROM qualifying WHERE raceId = 903 AND q3 = '1:54'
SELECT COUNT(*) FROM results WHERE time IS NULL AND raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007)
SELECT url FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901)
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 592 AND T1.time IS NOT NULL ORDER BY T2.dob ASC LIMIT 1
SELECT url FROM drivers WHERE driverId IN (SELECT driverId FROM lapTimes WHERE raceId = 161 AND time = '1:27.000')
SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE raceId = 933 AND fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933))
SELECT lat, lng FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE name = 'Malaysian Grand Prix')
SELECT url FROM constructors WHERE constructorId = (SELECT constructorId FROM constructorResults WHERE raceId = 9 ORDER BY points DESC LIMIT 1)
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi') AND raceId = 345
SELECT T3.nationality FROM qualifying AS T1 INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.q2 = '1:15' AND T1.raceId = 347
SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q3 = '1:33' AND T1.raceId = 45
SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'McLaren' AND T1.raceId = 743
SELECT T3.forename, T3.surname FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.position = 2 AND T2.name = 'San Marino Grand Prix' AND T2.year = 2006
SELECT url FROM seasons WHERE year = (SELECT year FROM races WHERE raceId = 901)
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE date = '2015-11-29') AND time IS NOT NULL;
SELECT MAX(dob) FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE raceId = 872 AND time IS NOT NULL)
SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 348 AND T1.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348)
SELECT nationality FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results))
SELECT (((SELECT fastestLapSpeed FROM results WHERE raceId = 853) - (SELECT fastestLapSpeed FROM results WHERE raceId = 854)) / (SELECT fastestLapSpeed FROM results WHERE raceId = 853)) * 100 AS percentage
SELECT (COUNT(CASE WHEN time IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS completion_rate  FROM results  WHERE raceId = (SELECT raceId FROM races WHERE date = '1983-07-16')
SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix'
SELECT COUNT(*) AS race_count, name FROM races WHERE year = 2005 GROUP BY name ORDER BY name DESC
SELECT name FROM races WHERE STRFTIME('%Y-%m', date) = (SELECT STRFTIME('%Y-%m', MIN(date)) FROM races)
SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999)
SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1
SELECT name FROM races WHERE year = 2017 AND year NOT IN (2000);
SELECT T2.country, T2.name AS circuit_name, T2.location  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T1.name = 'European Grand Prix'  ORDER BY T1.year ASC  LIMIT 1
SELECT MAX(year) FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Brands Hatch') AND name = 'British Grand Prix'
SELECT COUNT(DISTINCT R.year) FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.name = 'British Grand Prix' AND C.name = 'Silverstone Circuit'
SELECT D.forename, D.surname, R.position FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE RA.year = 2010 AND RA.name = 'Singapore Grand Prix' ORDER BY R.position
SELECT T2.forename, T2.surname, T1.points FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.points = (SELECT MAX(points) FROM driverStandings)
SELECT T2.forename, T2.surname, T1.points FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2017) ORDER BY T1.points DESC LIMIT 3
SELECT T1.driverId, T1.raceId, T1.time FROM lapTimes AS T1 WHERE T1.time = (SELECT MIN(time) FROM lapTimes);
SELECT AVG(time) FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Vettel' AND forename = 'Sebastian') AND raceId = (SELECT raceId FROM races WHERE name = 'Chinese Grand Prix' AND year = 2009)
SELECT (COUNT(CASE WHEN R.position > 1 THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM results AS R  INNER JOIN drivers AS D ON R.driverId = D.driverId  WHERE D.surname = 'Hamilton' AND R.raceId IN (SELECT raceId FROM races WHERE year >= 2010)
SELECT D.forename, D.surname, D.nationality, AVG(DS.points)  FROM drivers AS D  INNER JOIN driverStandings AS DS ON D.driverId = DS.driverId  GROUP BY D.driverId  HAVING COUNT(DS.wins) = (SELECT MAX(total_wins) FROM (SELECT COUNT(wins) AS total_wins FROM driverStandings GROUP BY driverId))
SELECT forename, surname, 2022 - STRFTIME('%Y', dob) + 1 AS age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1
SELECT C.name FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId WHERE R.year BETWEEN 1990 AND 2000 GROUP BY C.circuitId HAVING COUNT(R.raceId) = 4
SELECT C.name, C.location, R.name FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId WHERE R.year = 2006 AND C.country = 'USA'
SELECT T1.name, T2.name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE STRFTIME('%m', T1.date) = '09' AND STRFTIME('%Y', T1.date) = '2005'
SELECT T3.name FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Alex' AND T2.surname = 'Yoong' AND T1.position < 10
SELECT COUNT(*) FROM constructorResults AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId INNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId WHERE T3.name = 'Michael Schumacher' AND T4.name = 'Sepang International Circuit' AND T1.points > 0
SELECT T3.name, T3.year FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.surname = 'Schumacher' AND T1.milliseconds = (SELECT MIN(milliseconds) FROM results WHERE driverId = T1.driverId)
SELECT AVG(T1.points) FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.surname = 'Irvine' AND T2.year = 2000
SELECT T1.name, T2.points FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T2.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')  AND T1.year = (SELECT MIN(year) FROM races WHERE raceId IN (SELECT raceId FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')))
SELECT R.name, C.country FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.year = 2017 ORDER BY R.date
SELECT R.name, R.year, C.location  FROM results AS Res  INNER JOIN races AS R ON Res.raceId = R.raceId  INNER JOIN circuits AS C ON R.circuitId = C.circuitId  WHERE Res.laps = (SELECT MAX(laps) FROM results)
SELECT (COUNT(CASE WHEN C.country = 'Germany' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM races R JOIN circuits C ON R.circuitId = C.circuitId WHERE R.name = 'European Grand Prix';
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'
SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'
SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits)
SELECT COUNT(*) FROM drivers WHERE code IS NULL;
SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers)
SELECT surname FROM drivers WHERE nationality = 'Italian'
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'
SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix'
SELECT DISTINCT year FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Silverstone Circuit')
SELECT url FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Silverstone Circuit')
SELECT time FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE location = 'Abu Dhabi') AND year BETWEEN 2010 AND 2019
SELECT COUNT(*) FROM races WHERE circuitId IN (SELECT circuitId FROM circuits WHERE country = 'Italy');
SELECT date FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya')
SELECT url FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009)
SELECT MIN(T1.fastestLapTime)  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T2.surname = 'Hamilton'
SELECT T1.forename, T1.surname  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  ORDER BY T2.fastestLapSpeed DESC  LIMIT 1
SELECT driverRef FROM drivers WHERE driverId = (SELECT driverId FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND positionOrder = 1)
SELECT R.name FROM races AS R INNER JOIN results AS Res ON R.raceId = Res.raceId INNER JOIN drivers AS D ON Res.driverId = D.driverId WHERE D.surname = 'Hamilton'
SELECT raceId FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton' OR forename = 'Lewis') ORDER BY rank ASC LIMIT 1
SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Spanish Grand Prix')
SELECT DISTINCT year FROM races WHERE raceId IN (SELECT R.raceId FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton')
SELECT positionOrder  FROM results  WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')  AND raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix');
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.grid = 4 AND T2.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)
SELECT COUNT(*) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL
SELECT fastestLapTime FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton' AND forename = 'Lewis') AND raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)
SELECT time FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND position = 2
SELECT T3.forename, T3.surname, T3.url FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.position = 1 AND T2.year = 2008 AND T2.name = 'Australian Grand Prix'
SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'American' AND T1.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)
SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 WHERE T1.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND T1.time IS NOT NULL
SELECT SUM(T2.points) FROM driverStandings AS T2 INNER JOIN drivers AS T1 ON T2.driverId = T1.driverId WHERE T1.surname = 'Hamilton'
SELECT AVG(CAST(SUBSTR(fastestLapTime, 1, INSTR(fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(fastestLapTime, INSTR(fastestLapTime, ':') + 1) AS REAL)) FROM results WHERE driverId IN (SELECT driverId FROM drivers WHERE surname = 'Hamilton')
SELECT (COUNT(CASE WHEN time IS NOT NULL THEN 1 END) * 1.0 / COUNT(*)) AS rate  FROM results  WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix');
SELECT      (strftime('%s', last_driver_time) - strftime('%s', champion_time)) * 100.0 / strftime('%s', last_driver_time) AS percentage FROM      (SELECT MIN(time) AS champion_time, MAX(time) AS last_driver_time       FROM results       WHERE raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008) AND time IS NOT NULL)
SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';
SELECT lat, lng FROM circuits WHERE country = 'USA'
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-01-01';
SELECT AVG(CS.points) FROM constructors AS C INNER JOIN constructorStandings AS CS ON C.constructorId = CS.constructorId WHERE C.nationality = 'British'
SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.points = (SELECT MAX(points) FROM constructorStandings)
SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 291 AND T2.points = 0
SELECT COUNT(DISTINCT constructorId) FROM constructorResults WHERE points = 0 AND constructorId IN (SELECT constructorId FROM constructors WHERE nationality = 'Japanese') GROUP BY constructorId HAVING COUNT(raceId) = 2
SELECT T2.name FROM constructors AS T2 WHERE T2.constructorId IN (SELECT T1.constructorId FROM constructorStandings AS T1 WHERE T1.position = 1)
SELECT COUNT(DISTINCT T1.constructorId) FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'French' AND T2.laps > 50
SELECT (COUNT(CASE WHEN R.time IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS completion_percentage FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE D.nationality = 'Japanese' AND RA.year BETWEEN 2007 AND 2009
SELECT T2.year, AVG(CAST(SUBSTR(T1.time, 1, 2) AS INTEGER) * 3600 + CAST(SUBSTR(T1.time, 4, 2) AS INTEGER) * 60 + CAST(SUBSTR(T1.time, 7, 2) AS INTEGER)) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL GROUP BY T2.year
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.dob > '1975-12-31' AND T2.position = 2
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Italian' AND T2.time IS NULL
SELECT T1.forename, T1.surname  FROM drivers AS T1  INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId  ORDER BY T2.milliseconds ASC  LIMIT 1
SELECT fastestLap FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2009) AND positionOrder = 1
SELECT AVG(fastestLapSpeed) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009)
SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds ASC LIMIT 1
SELECT (COUNT(T1.driverId) * 100.0 / COUNT(T2.driverId)) AS percentage FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.dob < '1985-01-01' AND T2.laps > 50 AND T3.year BETWEEN 2000 AND 2005;
SELECT COUNT(DISTINCT T1.driverId) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.milliseconds < 120000 AND T2.nationality = 'French'
SELECT code FROM drivers WHERE nationality = 'American'
SELECT raceId FROM races WHERE year = 2009
SELECT COUNT(driverId) FROM results WHERE raceId = 18;
WITH YoungestDrivers AS (SELECT code, nationality FROM drivers ORDER BY dob DESC LIMIT 3) SELECT code, (SELECT COUNT(*) FROM YoungestDrivers WHERE nationality = 'Dutch') AS Netherlandic_Count FROM YoungestDrivers;
SELECT driverRef FROM drivers WHERE surname = 'Kubica';
SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND STRFTIME('%Y', dob) = '1980';
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1990' ORDER BY T2.time ASC LIMIT 3
SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1
SELECT T1.driverId, T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.dob LIKE '1971%' AND T2.fastestLapTime IS NOT NULL
SELECT T1.driverId, T1.forename, T1.surname, MAX(T2.time) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Spanish' AND T1.dob < '1982-01-01' GROUP BY T1.driverId ORDER BY MAX(T2.time) DESC LIMIT 10
SELECT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results)
SELECT R.year FROM races R INNER JOIN lapTimes L ON R.raceId = L.raceId WHERE L.time = (SELECT MAX(time) FROM lapTimes)
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time ASC LIMIT 5
SELECT COUNT(*) FROM results WHERE statusId = 2 AND time IS NOT NULL AND raceId > 50 AND raceId < 100;
SELECT COUNT(*), location, lat, lng FROM circuits WHERE country = 'Austria' GROUP BY location, lat, lng
SELECT raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(*) DESC LIMIT 1
SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q2 IS NOT NULL AND T1.raceId = 23
SELECT R.name, Q.raceId, R.date, Q.q1 FROM qualifying AS Q INNER JOIN drivers AS D ON Q.driverId = D.driverId INNER JOIN races AS R ON Q.raceId = R.raceId WHERE D.dob = (SELECT MIN(dob) FROM drivers) ORDER BY Q.raceId LIMIT 1
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'American' AND T2.statusId = 2
SELECT T1.url FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1
SELECT url FROM constructors WHERE constructorId = (SELECT constructorId FROM constructorStandings GROUP BY constructorId ORDER BY SUM(wins) DESC LIMIT 1)
SELECT driverId, MAX(time) as slowest_time FROM lapTimes WHERE lap = 3 AND raceId IN (SELECT raceId FROM races WHERE name = 'French Grand Prix') GROUP BY driverId ORDER BY slowest_time DESC LIMIT 1
SELECT raceId, MIN(milliseconds) FROM lapTimes WHERE lap = 1 GROUP BY raceId ORDER BY MIN(milliseconds) LIMIT 1
SELECT AVG(fastestLapTime) FROM results WHERE rank < 11 AND raceId = (SELECT raceId FROM races WHERE year = 2006 AND name = 'United States Grand Prix')
SELECT T1.forename, T1.surname, AVG(T2.duration) AS avg_duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.dob BETWEEN '1980-01-01' AND '1985-12-31' AND T1.nationality = 'German' GROUP BY T1.driverId ORDER BY avg_duration ASC LIMIT 5
SELECT T2.forename, T2.surname, T1.time  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.position = 1 AND T1.raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix' AND year = 2008);
SELECT T3.constructorRef, T3.url  FROM results AS T1  INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId  WHERE T1.time = (SELECT MIN(time) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2009 AND name = 'Singapore Grand Prix'))
SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31'
SELECT forename || ' ' || surname AS full_name, url, dob FROM drivers WHERE nationality = 'German' AND dob BETWEEN '1971-01-01' AND '1985-12-31' ORDER BY dob DESC
SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring'
SELECT SUM(T1.points) AS total_points, T3.name, T3.nationality FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.name = 'Monaco Grand Prix' AND T2.year BETWEEN 1980 AND 2010 GROUP BY T3.constructorId ORDER BY total_points DESC LIMIT 1
SELECT AVG(points) FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND raceId IN (SELECT raceId FROM races WHERE name = 'Turkish Grand Prix')
SELECT COUNT(*) / 11.0 AS average_races FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'
SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT wins FROM driverStandings WHERE position = 91
SELECT T2.name FROM races AS T2 INNER JOIN lapTimes AS T1 ON T1.raceId = T2.raceId WHERE T1.milliseconds = (SELECT MIN(milliseconds) FROM lapTimes)
SELECT T2.location || ', ' || T2.country FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.date = (SELECT MAX(date) FROM races)
SELECT T3.forename, T3.surname FROM qualifying AS T1 INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.position = 1 AND T2.year = 2008 AND T2.circuitId = (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit')
SELECT D.forename || ' ' || D.surname, D.nationality, (SELECT RA.name FROM results AS R INNER JOIN races AS RA ON R.raceId = RA.raceId WHERE R.driverId = D.driverId ORDER BY RA.date ASC LIMIT 1) FROM drivers AS D WHERE D.dob = (SELECT MAX(dob) FROM drivers)
SELECT COUNT(*) FROM results WHERE driverId = (SELECT driverId FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Canadian Grand Prix') AND statusId = 3 GROUP BY driverId ORDER BY COUNT(*) DESC LIMIT 1) AND statusId = 3
SELECT T1.forename, T1.surname, T2.wins FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = (SELECT MIN(dob) FROM drivers)
SELECT MAX(duration) FROM pitStops
SELECT MIN(time) FROM lapTimes
SELECT MAX(duration) FROM pitStops WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton')
SELECT lap FROM pitStops WHERE raceId = (SELECT raceId FROM races WHERE year = 2011 AND name = 'Australian Grand Prix') AND driverId = (SELECT driverId FROM drivers WHERE surname = 'Hamilton')
SELECT T1.driverId, T1.duration FROM pitStops AS T1 WHERE T1.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2011)
SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'Hamilton'
SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.time ASC LIMIT 1
SELECT position FROM results WHERE time = (SELECT MIN(T1.time) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton')
SELECT MIN(fastestLapTime) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix')
SELECT T3.name, MIN(T1.time) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' GROUP BY T3.name
SELECT T2.name FROM races AS T2 INNER JOIN lapTimes AS T1 ON T2.raceId = T1.raceId WHERE T2.circuitId = (SELECT circuitId FROM circuits WHERE name = 'Austrian Grand Prix') ORDER BY T1.time LIMIT 1
SELECT duration FROM pitStops WHERE raceId = (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix') AND driverId = (SELECT driverId FROM lapTimes WHERE raceId = (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix') ORDER BY CAST(time AS REAL) ASC LIMIT 1)
SELECT C.lat, C.lng FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId INNER JOIN lapTimes AS L ON R.raceId = L.raceId WHERE L.time = '1:29.488'
SELECT AVG(T1.milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'Hamilton'
SELECT AVG(milliseconds) FROM lapTimes WHERE raceId IN (SELECT T1.raceId FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Italy')
SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1;
SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player)
SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes)
SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low'
SELECT player_api_id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5
SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1
SELECT home_team_api_id FROM Match WHERE home_team_goal < away_team_goal AND season = '2015/2016' GROUP BY home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT P.player_name  FROM Player P  INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id  ORDER BY PA.penalties DESC  LIMIT 10;
SELECT away_team_api_id FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Scotland Premier League') AND season = '2009/2010' AND away_team_goal > home_team_goal GROUP BY away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT buildUpPlaySpeed FROM Team_Attributes ORDER BY buildUpPlaySpeed DESC LIMIT 4
SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2015/2016' GROUP BY L.name ORDER BY SUM(M.home_team_goal = M.away_team_goal) DESC LIMIT 1
SELECT DATETIME('now') - T1.birthday FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND T2.date BETWEEN '2013-01-01 00:00:00' AND '2015-12-31 00:00:00'
SELECT T1.name, COUNT(T2.league_id) FROM League AS T1 INNER JOIN Match AS T2 ON T1.id = T2.league_id GROUP BY T1.name ORDER BY COUNT(T2.league_id) DESC LIMIT 1
SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'
SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE substr(date,1,4) = '2010') AND substr(date,1,4) = '2010'
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59
SELECT T1.team_long_name  FROM Team AS T1  INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id  WHERE T2.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE strftime('%Y', date) = '2012')  AND strftime('%Y', T2.date) = '2012'
SELECT 0 AS percentage_left_foot FROM Player WHERE birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'
SELECT T2.name, SUM(home_team_goal + away_team_goal) AS total_goals FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id GROUP BY T2.name ORDER BY total_goals ASC LIMIT 5
SELECT AVG(long_shots) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ahmed Samir Farag')
SELECT T1.player_name, AVG(T2.heading_accuracy) AS avg_heading_accuracy FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 GROUP BY T1.player_name ORDER BY avg_heading_accuracy DESC LIMIT 10
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayDribblingClass = 'Normal' AND T2.date >= '2014-01-01 00:00:00' AND T2.date <= '2014-01-31 00:00:00' AND T2.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes) ORDER BY T2.chanceCreationPassing DESC;
SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'
SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 4) = '1970' AND SUBSTR(birthday, 6, 2) = '10'
SELECT attacking_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Franco Zennaro')
SELECT T2.buildUpPlayPositioningClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'ADO Den Haag'
SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francois Affolter') AND date = '2014-09-18 00:00:00'
SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011'
SELECT COUNT(id) FROM Match WHERE league_id IN (SELECT id FROM League WHERE name = 'Scotland Premier League') AND season = '2015/2016'
SELECT PA.preferred_foot FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_fifa_api_id = PA.player_fifa_api_id ORDER BY P.birthday DESC LIMIT 1
SELECT P.player_name  FROM Player P  JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id  WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes);
SELECT COUNT(*) FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.weight < 130 AND PA.preferred_foot = 'left';
SELECT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.chanceCreationPassingClass = 'Risky';
SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'David Wilson')
SELECT birthday FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes))
SELECT name FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Netherlands')
SELECT AVG(home_team_goal) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Poland' AND M.season = '2010/2011';
SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height BETWEEN (SELECT MIN(height) FROM Player) AND (SELECT MAX(height) FROM Player) GROUP BY P.player_name ORDER BY AVG(PA.finishing) DESC LIMIT 1
SELECT player_name FROM Player WHERE height > 180
SELECT COUNT(*) FROM Player WHERE STRFTIME('%Y', birthday) > '1990';
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > 80 AND STRFTIME('%Y', T2.date) BETWEEN '2008' AND '2010'
SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran')
SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.preferred_foot = 'left'
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast'
SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'CLB'
SELECT T2.team_short_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayPassing > 70
SELECT AVG(PA.overall_rating) FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.height > 170 AND strftime('%Y', PA.date) BETWEEN '2010' AND '2015'
SELECT player_name FROM Player WHERE height = (SELECT MIN(height) FROM Player)
SELECT name FROM Country WHERE id = (SELECT country_id FROM League WHERE name = 'Italy Serie A')
SELECT T.team_short_name FROM Team_Attributes AS TA INNER JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlaySpeed = 31 AND TA.buildUpPlayDribbling = 53 AND TA.buildUpPlayPassing = 32
SELECT AVG(overall_rating) FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Aaron Doran')
SELECT COUNT(*) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Germany 1. Bundesliga') AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10'
SELECT T2.team_short_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.home_team_goal = 10
SELECT P.player_name FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61) AND PA.potential = 61
SELECT AVG(CASE WHEN T2.player_name = 'Abdou Diallo' THEN T1.ball_control END) - AVG(CASE WHEN T2.player_name = 'Aaron Appindangoye' THEN T1.ball_control END)  FROM Player_Attributes AS T1  INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';
SELECT player_name, birthday FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday LIMIT 1;
SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player)
SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';
SELECT C.name FROM League L INNER JOIN Country C ON L.country_id = C.id WHERE L.name = 'Belgium Jupiler League'
SELECT name FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Germany')
SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes))
SELECT COUNT(*) FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE STRFTIME('%Y', P.birthday) < '1986' AND PA.defensive_work_rate = 'high';
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY T2.crossing DESC LIMIT 1
SELECT heading_accuracy FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Ariel Borysiuk')
SELECT COUNT(*) FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 AND PA.volleys > 70;
SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.volleys > 70 AND PA.dribbling > 70
SELECT COUNT(*) FROM Match AS M INNER JOIN Country AS C ON M.country_id = C.id WHERE M.season = '2008/2009' AND C.name = 'Belgium'
SELECT long_passing FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player ORDER BY birthday ASC LIMIT 1)
SELECT COUNT(id) FROM Match WHERE league_id IN (SELECT id FROM League WHERE name = 'Belgium Jupiler League') AND strftime('%Y', date) = '2009' AND strftime('%m', date) = '04'
SELECT league_id FROM Match WHERE season = '2008/2009' GROUP BY league_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT AVG(PA.overall_rating) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE STRFTIME('%Y', P.birthday) < '1986'
SELECT (A.overall_rating - P.overall_rating) / P.overall_rating * 100 AS percentage_difference FROM Player_Attributes AS A JOIN Player AS PA ON A.player_api_id = PA.player_api_id JOIN Player_Attributes AS P ON P.player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel') WHERE PA.player_name = 'Ariel Borysiuk'
SELECT AVG(TA.buildUpPlaySpeed) FROM Team_Attributes AS TA INNER JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE T.team_long_name = 'Heart of Midlothian'
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Pietro Marino'
SELECT SUM(T1.crossing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox'
SELECT MAX(TA.chanceCreationPassing), TA.chanceCreationPassingClass FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE T.team_long_name = 'Ajax'
SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo')
SELECT MAX(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon'
SELECT AVG(M.away_team_goal) FROM Match AS M INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id WHERE T.team_long_name = 'Parma'
SELECT player_name FROM Player WHERE player_fifa_api_id IN (SELECT player_fifa_api_id FROM Player_Attributes WHERE overall_rating = 77 AND date = '2016-06-23') ORDER BY birthday LIMIT 1
SELECT T2.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Mooy' AND T2.date = '2016-02-04 00:00:00'
SELECT potential FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francesco Parravicini') AND date = '2010-08-30 00:00:00'
SELECT attacking_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Francesco Migliore') AND date = '2015-05-01 00:00:00';
SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Berigaud') AND date = '2013-02-22 00:00:00'
SELECT MIN(T1.date) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Kevin Constant' AND T1.crossing = (SELECT MAX(crossing) FROM Player_Attributes WHERE player_api_id = T2.player_api_id)
SELECT T3.buildUpPlaySpeedClass FROM Team_Attributes AS T3 INNER JOIN Team AS T2 ON T3.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Willem II' AND DATE(T3.date) = '2012-02-22'
SELECT buildUpPlayDribblingClass FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_short_name = 'LEI') AND date = '2015-09-10 00:00:00'
SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'FC Lorient' AND T2.date = '2010-02-22'
SELECT chanceCreationPassingClass FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'PEC Zwolle') AND date = '2013-09-20 00:00:00'
SELECT chanceCreationCrossingClass FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Hull City') AND date = '2010-02-22 00:00:00'
SELECT defenceAggressionClass FROM Team_Attributes WHERE team_api_id = (SELECT team_api_id FROM Team WHERE team_long_name = 'Hannover 96') AND date = '2015-09-10 00:00:00'
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Marko Arnautovic' AND T1.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'
SELECT ( (LD.overall_rating - JB.overall_rating) / LD.overall_rating * 100 ) AS percentage FROM Player AS P1 JOIN Player_Attributes AS LD ON P1.player_api_id = LD.player_fifa_api_id JOIN Player AS P2 ON P2.player_name = 'Jordan Bowery' JOIN Player_Attributes AS JB ON P2.player_api_id = JB.player_fifa_api_id WHERE P1.player_name = 'Landon Donovan' AND LD.date = '2013-07-12' AND JB.date = '2013-07-12'
SELECT player_name FROM Player ORDER BY height DESC LIMIT 5
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10
SELECT player_name FROM Player WHERE strftime('%Y', 'now') - strftime('%Y', birthday) >= 35
SELECT COUNT(M.home_team_goal) FROM Match AS M INNER JOIN Player AS P ON P.player_api_id IN (M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5, M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10, M.home_player_11) WHERE P.player_name = 'Aaron Lennon'
SELECT SUM(M.away_team_goal) FROM Match AS M INNER JOIN Player AS P ON P.player_api_id IN (M.away_player_1, M.away_player_2, M.away_player_3, M.away_player_4, M.away_player_5, M.away_player_6, M.away_player_7, M.away_player_8, M.away_player_9, M.away_player_10, M.away_player_11) WHERE P.player_name IN ('Daan Smith', 'Filipe Ferreira')
SELECT SUM(M.home_team_goal) FROM Match AS M INNER JOIN Player AS P ON P.player_api_id IN (M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5, M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10, M.home_player_11) WHERE (strftime('%Y', 'now') - strftime('%Y', P.birthday)) < 31
SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 10)
SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE potential = (SELECT MAX(potential) FROM Player_Attributes))
SELECT P.player_name FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.attacking_work_rate = 'high';
SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.finishing = 1 ORDER BY P.birthday ASC LIMIT 1
SELECT P.player_name FROM Player AS P INNER JOIN Country AS C ON P.player_fifa_api_id = C.id WHERE C.name = 'Belgium'
SELECT T1.player_name, T2.name AS country_name FROM Player AS T1 INNER JOIN Player_Attributes AS T3 ON T1.player_api_id = T3.player_api_id INNER JOIN Team AS T4 ON T1.player_api_id = T4.team_api_id INNER JOIN League AS T2 ON T4.team_api_id = T2.country_id WHERE T3.vision > 89
SELECT L.country_id, AVG(P.weight) AS avg_weight FROM Player AS P INNER JOIN Team AS T ON P.player_api_id = T.team_api_id INNER JOIN League AS L ON T.team_fifa_api_id = L.id GROUP BY L.country_id ORDER BY avg_weight DESC LIMIT 1;
SELECT T.team_long_name FROM Team_Attributes AS TA INNER JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.buildUpPlaySpeedClass = 'Slow';
SELECT T.team_short_name FROM Team AS T INNER JOIN Team_Attributes AS TA ON T.team_api_id = TA.team_api_id WHERE TA.chanceCreationPassingClass = 'Safe';
SELECT AVG(P.height) FROM Player AS P INNER JOIN Team AS T ON P.player_api_id = T.team_api_id INNER JOIN Country AS C ON T.team_fifa_api_id = C.id WHERE C.name = 'Italy'
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'
SELECT (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) - (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS score_difference
SELECT T1.player_api_id  FROM Player_Attributes AS T1  WHERE T1.potential = (SELECT MIN(potential) FROM Player_Attributes)  AND T1.preferred_foot = 'right'  LIMIT 3
SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND preferred_foot = 'left'
SELECT (COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM Player_Attributes
SELECT name FROM Country WHERE id = (SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa')
SELECT home_team_goal, away_team_goal FROM Match WHERE date LIKE '2008-09-24%' AND league_id = (SELECT id FROM League WHERE name = 'Belgian Jupiler League')
SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin')
SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge'
SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Italy Serie A')
SELECT MAX(home_team_goal) FROM Match WHERE league_id = (SELECT id FROM League WHERE name = 'Netherlands Eredivisie')
SELECT PA.finishing, PA.curve  FROM Player P  INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id  WHERE P.weight = (SELECT MAX(weight) FROM Player)
SELECT T2.team_long_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.season = '2015/2016' GROUP BY T2.team_long_name ORDER BY COUNT(T1.id) DESC LIMIT 1
SELECT T2.team_long_name  FROM Match AS T1  INNER JOIN Team AS T2 ON T1.away_team_api_id = T2.team_api_id  ORDER BY T1.away_team_goal DESC  LIMIT 1
SELECT player_name FROM Player WHERE player_api_id = (SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1)
SELECT (COUNT(CASE WHEN P.height < 180 AND PA.overall_rating > 70 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id
SELECT COUNT(CASE WHEN Admission = '+' THEN 1 END) AS Male_In_Patients, COUNT(CASE WHEN Admission = '-' THEN 1 END) AS Male_Out_Patients, (COUNT(CASE WHEN Admission = '+' THEN 1 END) - COUNT(CASE WHEN Admission = '-' THEN 1 END)) * 100.0 / NULLIF(COUNT(CASE WHEN Admission = '-' THEN 1 END), 0) AS Deviation_Percentage FROM Patient WHERE SEX = 'M'
SELECT (COUNT(CASE WHEN strftime('%Y', Birthday) > '1930' THEN ID END) * 100.0) / COUNT(ID) AS percentage_female_born_after_1930 FROM Patient WHERE SEX = 'F'
SELECT (COUNT(*) FILTER (WHERE Admission = '+') * 100.0 / COUNT(*)) AS percentage FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31'
SELECT (COUNT(CASE WHEN Admission = '-' THEN ID END) * 1.0) / COUNT(CASE WHEN Admission = '+' THEN ID END) AS ratio FROM Patient WHERE Diagnosis = 'SLE'
SELECT P.Diagnosis, L.Date FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.ID = 30609
SELECT P.SEX, P.Birthday, E.`Examination Date`, E.Symptoms FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.ID = '163109'
SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH > 500
SELECT P.ID, STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday) AS age FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.RVVT = '+'
SELECT P.ID, P.SEX, P.Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 2
SELECT P.ID, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', P.Birthday) = '1937' AND L.`T-CHO` >= 250
SELECT P.ID, P.SEX, P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.ALB < 3.5
SELECT (COUNT(CASE WHEN L.TP < 6.0 OR L.TP > 8.5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F'
SELECT AVG(E.`aCL IgG`) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Admission = '+' AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) >= 50
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND STRFTIME('%Y', Description) = '1997' AND Admission = '-'
SELECT MIN(strftime('%Y', `First Date`) - strftime('%Y', Birthday)) FROM Patient WHERE Birthday IS NOT NULL AND `First Date` IS NOT NULL
SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 1 AND E.`Examination Date` LIKE '1997%' AND P.SEX = 'F'
SELECT MAX(strftime('%Y', Birthday)) - MIN(strftime('%Y', Birthday)) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG >= 200
SELECT E.Symptoms, E.Diagnosis FROM Examination E JOIN Patient P ON E.ID = P.ID WHERE P.Birthday = (SELECT MIN(Birthday) FROM Patient)
SELECT COUNT(T1.ID) / 12.0 FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1998-01-01' AND '1998-12-31' AND T2.SEX = 'M'
SELECT T1."Date", (STRFTIME('%Y', T2."First Date") - STRFTIME('%Y', T2.Birthday)) AS Age FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = (SELECT MAX(Birthday) FROM Patient WHERE Diagnosis = 'SJS')
SELECT (SUM(CASE WHEN UA <= '8.0' AND SEX = 'M' THEN 1 ELSE 0 END) * 1.0) / (SUM(CASE WHEN UA <= '6.5' AND SEX = 'F' THEN 1 ELSE 0 END)) AS ratio FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID;
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P LEFT JOIN Examination AS E ON P.ID = E.ID WHERE E."Examination Date" IS NULL OR E."Examination Date" >= DATE(P."First Date", '+1 year')
SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE STRFTIME('%Y', P.Birthday) > 2005 AND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-BIL` > 2.0
SELECT Diagnosis FROM Examination WHERE "Examination Date" BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1
SELECT AVG(1991 - STRFTIME('%Y', T2.Birthday)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-30'
SELECT STRFTIME('%Y', E.`Examination Date`) - STRFTIME('%Y', P.Birthday) AS Age, E.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.HGB = (SELECT MAX(HGB) FROM Laboratory)
SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'
SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM `Laboratory` WHERE `ID` = 2927464 AND `Date` = '1995-09-04'
SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY `First Date` LIMIT 1
SELECT "aCL IgM" FROM Examination WHERE ID IN (SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19') AND "Examination Date" = '1993-11-12'
SELECT P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT = 9 AND L.Date = '1992-06-12'
SELECT (1991 - STRFTIME('%Y', Birthday)) FROM Patient WHERE ID = (SELECT ID FROM Laboratory WHERE UA = 8.4 AND Date = '1991-10-21')
SELECT COUNT(ID) FROM Laboratory WHERE ID = (SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS') AND STRFTIME('%Y', Date) = '1995'
SELECT P.Diagnosis FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Diagnosis = 'SLE' AND E.`Examination Date` = '1997-01-27'
SELECT Symptoms FROM Examination WHERE ID = (SELECT ID FROM Patient WHERE Birthday = '1959-03-01') AND `Examination Date` = '1993-09-27'
SELECT (SUM(CASE WHEN Date LIKE '1981-11-%' THEN `T-CHO` END) - SUM(CASE WHEN Date LIKE '1981-12-%' THEN `T-CHO` END)) AS decrease_rate FROM Laboratory WHERE ID IN (SELECT ID FROM Patient WHERE Birthday = '1959-02-18')
SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Diagnosis = 'Behcet' AND E.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31'
SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4
SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+'
SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND ANA = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) FROM Examination) * 1.2
SELECT (COUNT(CASE WHEN UA <= 6.5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30
SELECT (SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM Patient WHERE `First Date` LIKE '1981-%' AND SEX = 'M'
SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.Date LIKE '1991-10%' AND L.`T-BIL` < 2.0
SELECT COUNT(*) FROM Patient P INNER JOIN Examination E ON P.ID = E.ID WHERE E.`ANA Pattern` != 'P' AND P.SEX = 'F' AND P.Birthday BETWEEN '1980-01-01' AND '1989-12-31'
SELECT P.SEX FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE E.Diagnosis = 'PSS' AND L.CRP > 2 AND L.CRE = 1 AND L.LDH = 123
SELECT AVG(L.ALB) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'F' AND L.PLT > 400 AND P.Diagnosis = 'SLE'
SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1
SELECT Description, Diagnosis FROM Patient WHERE ID = 48473
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';
SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE substr(Date, 1, 4) = '1997' AND (TP <= 6 OR TP >= 8.5);
SELECT (SUM(CASE WHEN P.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS proportion FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Symptoms LIKE '%thrombocytopenia%'
SELECT (COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100.0 / COUNT(*)) FROM Patient WHERE strftime('%Y', Birthday) = '1980' AND Diagnosis = 'RA'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.SEX = 'M' AND E.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND P.Diagnosis = 'BEHCET' AND P.Admission = '-'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.WBC < 3.5
SELECT julianday(E.`Examination Date`) - julianday(P.`First Date`) FROM `Examination` AS E INNER JOIN `Patient` AS P ON E.ID = P.ID WHERE P.ID = 821298
SELECT CASE WHEN (T1.UA > 8.0 AND T2.SEX = 'M') OR (T1.UA > 6.5 AND T2.SEX = 'F') THEN 'Yes' ELSE 'No' END AS Status FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266
SELECT Date FROM Laboratory WHERE GOT > 60 AND ID = 48473
SELECT P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT < 60 AND STRFTIME('%Y', L.Date) = '1994'
SELECT L.ID FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.SEX = 'M' AND L.GPT >= 60
SELECT P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GPT > 60 ORDER BY P.Birthday ASC
SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500
SELECT P.ID, (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH BETWEEN 600 AND 800
SELECT P.Admission, COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.ALP < 300 GROUP BY P.Admission
SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday = '1982-04-01' AND L.ALP < 300
SELECT P.ID, P.SEX, P.Birthday FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.TP < 6.0
SELECT (T1.TP - 8.5) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.TP > 8.5
SELECT P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND (L.ALB <= 3.5 OR L.ALB >= 5.5) ORDER BY P.Birthday DESC
SELECT P.ID, CASE WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range' ELSE 'Out of Normal Range' END AS Albumin_Status FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', P.Birthday) = '1982';
SELECT (COUNT(CASE WHEN L.UA > 6.5 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F'
SELECT AVG(L.UA)  FROM Laboratory L  INNER JOIN Patient P ON L.ID = P.ID  WHERE (L.UA < 8.0 AND P.SEX = 'M') OR (L.UA < 6.5 AND P.SEX = 'F')  AND L.Date = (SELECT MAX(Date) FROM Laboratory WHERE ID = L.ID)
SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.UN = 29
SELECT P.ID, P.SEX, P.Birthday  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE P.Diagnosis = 'RA' AND L.UN < 30
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5
SELECT (SUM(P.SEX = 'M') > SUM(P.SEX = 'F')) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CRE >= 1.5
SELECT P.ID, P.SEX, P.Birthday  FROM Laboratory L  INNER JOIN Patient P ON L.ID = P.ID  WHERE L.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory)
SELECT P.SEX, COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L."T-BIL" >= 2.0 GROUP BY P.SEX
SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory) ORDER BY T1.Birthday ASC LIMIT 1
SELECT AVG(STRFTIME('%Y', 'now') - STRFTIME('%Y', birthday)) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-CHO` >= 250
SELECT P.ID, P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG > 300
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG >= 200 AND STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday) > 50
SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.CPK < 250
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', P.Birthday) BETWEEN '1936' AND '1956' AND P.SEX = 'M' AND L.CPK >= 250
SELECT P.ID, P.SEX, STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.`T-CHO` < 250
SELECT L.ID, L.GLU FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GLU < 180 AND STRFTIME('%Y', P.Description) >= 1991;
SELECT P.ID, P.SEX, P.Birthday  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE L.WBC <= 3.5 OR L.WBC >= 9.0  ORDER BY P.Birthday ASC
SELECT P.ID, (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) AS age, P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.RBC < 3.5
SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T1.Birthday <= DATE('now', '-50 years') AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0)
SELECT DISTINCT P.ID, P.SEX  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE P.Admission = '-' AND L.HGB < 10
SELECT P.ID, P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.HGB > 10 AND L.HGB < 17 ORDER BY P.Birthday ASC LIMIT 1
SELECT P.ID, strftime('%Y', 'now') - strftime('%Y', P.Birthday) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.HCT >= 52 GROUP BY P.ID HAVING COUNT(L.ID) > 2
SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29
SELECT      SUM(PLT < 100) AS lower_than_normal,     SUM(PLT > 400) AS higher_than_normal,     (SUM(PLT < 100) - SUM(PLT > 400)) AS difference FROM Laboratory WHERE PLT < 100 OR PLT > 400;
SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.Date LIKE '1984%' AND L.PLT BETWEEN 100 AND 400 AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday)) < 50
SELECT (SUM(L.PT >= 14 AND P.SEX = 'F') * 1.0 / SUM(L.PT >= 14)) * 100 AS percentage FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 55
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` > '1992-12-31' AND T2.PT < 14
SELECT COUNT(*) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE E.`Examination Date` > '1997-01-01' AND L.APTT < 45
SELECT COUNT(DISTINCT L.ID) FROM Laboratory AS L INNER JOIN Examination AS E ON L.ID = E.ID WHERE L.APTT > 45 AND E.Thrombosis = 3
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.WBC BETWEEN 3.5 AND 9.0 AND (L.FG <= 150 OR L.FG >= 450)
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday > '1980-01-01' AND (L.FG < 150 OR L.FG > 450)
SELECT DISTINCT P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.`U-PRO` >= 30
SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE 0 < L."U-PRO" AND L."U-PRO" < 30 AND P.Diagnosis = 'SLE'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.`aCL IgG` < 900 AND E.Symptoms = 'abortion'
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.IGG BETWEEN 900 AND 2000 AND T2.Symptoms IS NOT NULL
SELECT P.Diagnosis  FROM Patient P  JOIN Laboratory L ON P.ID = L.ID  WHERE L.IGA = (SELECT MAX(IGA) FROM Laboratory WHERE IGA BETWEEN 80 AND 500)
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGA BETWEEN 80 AND 500 AND P.`First Date` >= '1990-01-01'
SELECT Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGM NOT BETWEEN 40 AND 400 GROUP BY Diagnosis ORDER BY COUNT(Diagnosis) DESC LIMIT 1
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.CRP LIKE '+' OR L.CRP LIKE '-' OR L.CRP < 1.0) AND P.Description IS NULL
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP NOT IN ('+-', '-') AND T2.CRP >= 1.0 AND T1.Birthday > DATE('now', '-18 years')
SELECT COUNT(DISTINCT L.ID) FROM Laboratory AS L INNER JOIN Examination AS E ON L.ID = E.ID WHERE L.RA IN ('-', '+-') AND E.KCT = '+'
SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday >= '1995-01-01' AND L.RA IN ('-', '+-')
SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RF < 20 AND STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday) > 60
SELECT COUNT(DISTINCT L.ID)  FROM Laboratory AS L  INNER JOIN Examination AS E ON L.ID = E.ID  WHERE L.RF < 20 AND E.Thrombosis = '0'
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.C3 > 35 AND T2.`ANA Pattern` = 'P'
SELECT E.ID FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.HCT <= 29 OR L.HCT >= 52 ORDER BY E."aCL IgA" DESC LIMIT 1
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'APS' AND L.C4 > 10
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.RNP IN ('-', '+-') AND P.Admission = '+'
SELECT MAX(P.Birthday) FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.RNP NOT IN ('-', '+-')
SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('-', '+-') AND T1.Thrombosis = 1
SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SM NOT IN ('-', '+-') ORDER BY P.Birthday DESC LIMIT 3
SELECT E.ID FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE E.`Examination Date` >= '1997-01-01' AND L.SC170 IN ('-', '+-')
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SC170 IN ('-', '+-') AND P.SEX = 'M' AND E.Symptoms = 'vertigo'
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.`First Date` < '1990-01-01' AND L.SSA IN ('-', '+-')
SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA NOT IN ('-', '+-') ORDER BY P.`First Date` ASC LIMIT 1
SELECT COUNT(DISTINCT E.ID) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.SSB IN ('-', '0') AND E.Diagnosis = 'SLE';
SELECT COUNT(DISTINCT L.ID)  FROM Laboratory AS L  INNER JOIN Examination AS E ON L.ID = E.ID  WHERE L.SSB IN ('-', '+-') AND E.Symptoms IS NOT NULL
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CENTROMEA IN ('-', '+-') AND L.SSB IN ('-', '+-') AND P.SEX = 'M'
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8
SELECT COUNT(DISTINCT P.ID)  FROM Laboratory L  INNER JOIN Patient P ON L.ID = P.ID  WHERE L.`DNA` < 8 AND P.Description IS NULL
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L."DNA-II" >= 8 AND P.Admission = '+'
SELECT (COUNT(CASE WHEN P.Diagnosis = 'SLE' THEN 1 END) * 1.0 / COUNT(*)) * 100 AS percentage FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.GOT >= 60
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.GOT < 60
SELECT MAX(Birthday) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE GOT >= 60);
SELECT P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT < 60 ORDER BY L.GPT DESC LIMIT 3
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT < 60 AND P.SEX = 'M'
SELECT MIN(P.`First Date`) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500)
SELECT MAX(`First Date`) FROM `Patient` WHERE `ID` IN (SELECT `ID` FROM `Laboratory` WHERE `LDH` >= 500)
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.ALP >= 300 AND P.Admission = '+'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.ALP < 300
SELECT P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.TP < 6.0
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SJS' AND L.TP > 6.0 AND L.TP < 8.5
SELECT E.`Examination Date` FROM Laboratory AS L INNER JOIN Examination AS E ON L.ID = E.ID WHERE L.ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5)
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.ALB > 3.5 AND L.ALB < 5.5 AND L.TP BETWEEN 6.0 AND 8.5
SELECT E.`aCL IgG`, E.`aCL IgM`, E.`aCL IgA` FROM `Examination` AS E JOIN `Patient` AS P ON E.`ID` = P.`ID` JOIN `Laboratory` AS L ON E.`ID` = L.`ID` WHERE P.`SEX` = 'F' AND L.`UA` = (SELECT MAX(`UA`) FROM `Laboratory` WHERE `UA` > 6.50)
SELECT MAX(E.ANA) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.CRE < 1.5
SELECT T1.ID FROM Laboratory AS T1 WHERE T1.CRE < 1.5 AND T1.ID IN (SELECT ID FROM Examination WHERE `aCL IgA` = (SELECT MAX(`aCL IgA`) FROM Examination))
SELECT COUNT(DISTINCT L.ID) FROM Laboratory AS L INNER JOIN Examination AS E ON L.ID = E.ID WHERE L.`T-BIL` >= 2.0 AND E.`ANA Pattern` LIKE '%P%'
SELECT ANA FROM Examination WHERE ID = (SELECT ID FROM Laboratory WHERE `T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` < 2.0))
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.`T-CHO` >= 250 AND T2.KCT = '-'
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.`T-CHO` < 250 AND T2.`ANA Pattern` = 'P'
SELECT COUNT(DISTINCT E.ID) FROM Laboratory AS L INNER JOIN Examination AS E ON L.ID = E.ID WHERE L.TG < 200 AND E.Symptoms IS NOT NULL
SELECT P.Diagnosis FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG = (SELECT MAX(TG) FROM Laboratory WHERE TG < 200)
SELECT E.ID FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE E.Thrombosis = 0 AND L.CPK < 250
SELECT COUNT(DISTINCT L.ID)  FROM Laboratory AS L  INNER JOIN Examination AS E ON L.ID = E.ID  WHERE L.CPK < 250 AND (E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+')
SELECT MIN(Birthday) FROM Patient WHERE ID IN (SELECT ID FROM Laboratory WHERE GLU > 180);
SELECT COUNT(*) FROM Laboratory L INNER JOIN Examination E ON L.ID = E.ID WHERE L.GLU < 180 AND E.Thrombosis = 0;
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '+' AND L.WBC BETWEEN 3.5 AND 9.0
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'SLE' AND L.WBC BETWEEN 3.5 AND 9.0
SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.RBC <= 3.5 OR L.RBC >= 6.0) AND P.Admission = '-'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.PLT > 100 AND L.PLT < 400 AND P.Diagnosis IS NOT NULL
SELECT L.PLT FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.PLT > 100 AND L.PLT < 400 AND P.Diagnosis = 'MCTD'
SELECT AVG(L.PT) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.PT < 14
SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis IN (1, 2) AND T2.PT < 14
SELECT major_name FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Angela' AND last_name = 'Sanders')
SELECT COUNT(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE college = 'College of Engineering');
SELECT first_name, last_name FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE department = 'Art and Design Department')
SELECT COUNT(DISTINCT link_to_member) FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women''s Soccer')
SELECT T3.phone FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer'
SELECT COUNT(*) FROM member AS M INNER JOIN attendance AS A ON M.member_id = A.link_to_member INNER JOIN event AS E ON A.link_to_event = E.event_id WHERE E.event_name = 'Women''s Soccer' AND M.t_shirt_size = 'Medium'
SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(link_to_event) DESC LIMIT 1
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT T3.event_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean'
SELECT COUNT(*) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison' AND T3.event_date LIKE '2019%'
SELECT COUNT(DISTINCT T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 10
SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM attendance GROUP BY link_to_event HAVING COUNT(link_to_member) > 20)
SELECT COUNT(event_id) * 1.0 / COUNT(DISTINCT event_name) FROM event WHERE type = 'Meeting' AND STRFTIME('%Y', event_date) = '2020'
SELECT MAX(cost) FROM expense WHERE expense_description IS NOT NULL
SELECT COUNT(*) FROM member WHERE link_to_major = (SELECT major_id FROM major WHERE major_name = 'Environmental Engineering')
SELECT M.first_name, M.last_name FROM member AS M INNER JOIN attendance AS A ON M.member_id = A.link_to_member INNER JOIN event AS E ON A.link_to_event = E.event_id WHERE E.event_name = 'Laugh Out Loud'
SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'
SELECT county FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE first_name = 'Sherri' AND last_name = 'Ramsey')
SELECT college FROM major WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Tyler' AND last_name = 'Hewitt')
SELECT SUM(amount) FROM income WHERE link_to_member IN (SELECT member_id FROM member WHERE position = 'Vice President')
SELECT SUM(spent) FROM budget WHERE category = 'Food' AND link_to_event IN (SELECT event_id FROM event WHERE event_name = 'September Meeting')
SELECT city, state FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE position = 'President')
SELECT first_name, last_name FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE state = 'Illinois')
SELECT SUM(spent) FROM budget WHERE category = 'Advertisement' AND link_to_event = (SELECT event_id FROM event WHERE event_name = 'September Meeting')
SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name IN ('Pierce', 'Guidi')
SELECT SUM(amount) FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'October Speaker')
SELECT NOT EXISTS (SELECT * FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T2.event_name = 'October Meeting' AND T2.event_date = '2019-10-08' AND T1.approved = 'false')
SELECT AVG(cost) FROM expense WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Elijah' AND last_name = 'Allen') AND STRFTIME('%m', expense_date) IN ('09', '10')
SELECT      SUM(CASE WHEN STRFTIME('%Y', E.event_date) = '2019' THEN B.spent ELSE 0 END) -      SUM(CASE WHEN STRFTIME('%Y', E.event_date) = '2020' THEN B.spent ELSE 0 END) AS difference  FROM budget AS B  INNER JOIN event AS E ON B.link_to_event = E.event_id
SELECT location FROM event WHERE event_name = 'Spring Budget Review'
SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'
SELECT remaining FROM budget WHERE amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food')
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'
SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'
SELECT county FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE first_name = 'Adela' AND last_name = 'O''Gallagher')
SELECT COUNT(*) FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'November Meeting') AND remaining < 0
SELECT SUM(amount) FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'September Speaker')
SELECT B.event_status  FROM expense AS E  INNER JOIN budget AS B ON E.link_to_budget = B.budget_id  WHERE E.expense_description = 'Post Cards, Posters' AND E.expense_date = '2019-08-20'
SELECT T2.major_name FROM major AS T2 WHERE major_id = (SELECT link_to_major FROM member WHERE first_name = 'Brent' AND last_name = 'Thomason')
SELECT COUNT(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE major_name = 'Human Development and Family Studies') AND t_shirt_size = 'Large'
SELECT type FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE first_name = 'Christof' AND last_name = 'Nielson')
SELECT M.major_name FROM member AS T1 INNER JOIN major AS M ON T1.link_to_major = M.major_id WHERE T1.position = 'Vice President'
SELECT Z.state FROM zip_code AS Z INNER JOIN member AS M ON Z.zip_code = M.zip WHERE M.first_name = 'Sacha' AND M.last_name = 'Harrison'
SELECT J.department FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE M.position = 'President';
SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton') AND source = 'Dues'
SELECT T1.first_name, T1.last_name FROM member AS T1 WHERE T1.member_id = (SELECT link_to_member FROM income WHERE source = 'Dues' ORDER BY date_received ASC LIMIT 1)
SELECT (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) / NULLIF(SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END), 0)) AS ratio FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE b.category = 'Advertisement';
SELECT (SUM(CASE WHEN category = 'Parking' THEN amount END) / SUM(amount)) * 100 AS percentage FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'November Speaker')
SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza';
SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'
SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT city, county, state FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE first_name = 'Amy' AND last_name = 'Firth')
SELECT expense_description FROM expense WHERE link_to_budget = (SELECT budget_id FROM budget ORDER BY remaining ASC LIMIT 1)
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting'
SELECT college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major GROUP BY T1.college ORDER BY COUNT(T2.member_id) DESC LIMIT 1
SELECT J.major_name FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE M.phone = '809-555-3360'
SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1
SELECT T1.expense_description FROM expense AS T1 WHERE link_to_member IN (SELECT member_id FROM member WHERE position = 'Vice President')
SELECT COUNT(DISTINCT link_to_member) FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women''s Soccer')
SELECT date_received FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Casey' AND last_name = 'Mason')
SELECT COUNT(*) FROM member WHERE zip IN (SELECT zip_code FROM zip_code WHERE state = 'Maryland')
SELECT COUNT(*) FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE phone = '954-555-6240')
SELECT M.first_name, M.last_name FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.department = 'School of Applied Sciences, Technology and Education'
SELECT T2.event_name, (T1.spent / T1.amount) AS spend_to_budget_ratio FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY spend_to_budget_ratio DESC LIMIT 1
SELECT COUNT(*) FROM member WHERE position = 'President';
SELECT MAX(spent) FROM budget
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND STRFTIME('%Y', event_date) = '2020'
SELECT SUM(spent) FROM budget WHERE category = 'Food'
SELECT first_name, last_name FROM member AS M INNER JOIN attendance AS A ON M.member_id = A.link_to_member GROUP BY M.member_id HAVING COUNT(A.link_to_event) > 7
SELECT T2.first_name, T2.last_name FROM member AS T2 INNER JOIN major AS T1 ON T2.link_to_major = T1.major_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T1.major_name = 'Interior Design' AND T4.event_name = 'Community Theater'
SELECT T1.first_name || ' ' || T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'
SELECT SUM(amount) FROM income WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Grant' AND last_name = 'Gilmour')
SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40
SELECT SUM(cost) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Yearly Kickoff'))
SELECT M.first_name, M.last_name  FROM member AS M  INNER JOIN attendance AS A ON M.member_id = A.link_to_member  INNER JOIN budget AS B ON A.link_to_event = B.link_to_event  INNER JOIN event AS E ON B.link_to_event = E.event_id  WHERE E.event_name = 'Yearly Kickoff';
SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount = (SELECT MAX(amount) FROM income)
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.cost = (SELECT MIN(cost) FROM expense)
SELECT (SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.spent ELSE 0 END) / SUM(T1.spent)) * 100 AS percentage FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id
SELECT (SUM(major_name = 'Finance') * 1.0 / NULLIF(SUM(major_name = 'Physics'), 0)) AS ratio FROM major
SELECT MAX(source) FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30'
SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'
SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Physics Teaching'
SELECT COUNT(T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Community Theater' AND T2.event_date LIKE '2019%'
SELECT COUNT(T1.link_to_event), T3.major_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN major AS T3 ON T2.link_to_major = T3.major_id WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'
SELECT AVG(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'
SELECT E.event_name  FROM event AS E  INNER JOIN budget AS B ON E.event_id = B.link_to_event  WHERE B.category = 'Advertisement'  ORDER BY B.spent DESC  LIMIT 1;
SELECT COUNT(*) FROM attendance WHERE link_to_member = (SELECT member_id FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean') AND link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women''s Soccer')
SELECT (SUM(type = 'Community Service') * 100.0 / COUNT(event_id)) AS percentage_share  FROM event  WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'
SELECT T1.cost FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters' AND T2.link_to_event = (SELECT event_id FROM event WHERE event_name = 'September Speaker')
SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1
SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining ASC LIMIT 1
SELECT expense_description, SUM(cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting' GROUP BY expense_description
SELECT category, amount FROM budget WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'April Speaker') ORDER BY amount ASC
SELECT MAX(amount) FROM budget WHERE category = 'Food'
SELECT * FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'
SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20';
SELECT T1.first_name || ' ' || T1.last_name AS full_name, SUM(T2.cost) AS total_cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'
SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Sacha' AND T2.last_name = 'Harrison'
SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'X-Large'
SELECT M.zip FROM member AS M INNER JOIN expense AS E ON M.member_id = E.link_to_member WHERE E.cost < 50
SELECT M.major_name FROM member AS T1 INNER JOIN major AS M ON T1.link_to_major = M.major_id WHERE T1.first_name = 'Phillip' AND T1.last_name = 'Cullen'
SELECT T1.position FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business'
SELECT COUNT(*) FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.major_name = 'Business' AND M.t_shirt_size = 'Medium'
SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30
SELECT type FROM event WHERE location = 'MU 215'
SELECT type FROM event WHERE event_date = '2020-03-24T12:00:00'
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT (SUM(CASE WHEN T2.major_name = 'Mathematics' THEN 1 ELSE 0 END) / COUNT(T1.member_id)) * 100 AS percentage FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id
SELECT type FROM event WHERE location = 'MU 215'
SELECT COUNT(*) FROM income WHERE amount = 50;
SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';
SELECT COUNT(*) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'
SELECT T1.last_name, T2.department, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T1.type = 'Guest Speaker' AND T2.spent = 0
SELECT Z.city, Z.state FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.department = 'Electrical and Computer Engineering Department' AND M.position = 'Member'
SELECT T1.event_name FROM event AS T1 WHERE T1.type = 'Social' AND T1.location = '900 E. Washington St.' AND T1.event_id IN (SELECT link_to_event FROM attendance WHERE link_to_member IN (SELECT member_id FROM member WHERE position = 'Vice President'))
SELECT T2.last_name, T2.position FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Pizza' AND T1.expense_date = '2019-09-10'
SELECT T2.last_name FROM member AS T2 INNER JOIN attendance AS T1 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.position = 'Member' AND T3.event_name = 'Women''s Soccer'
SELECT (COUNT(T2.amount) * 1.0 / COUNT(T1.member_id)) * 100 AS percentage FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium' AND T1.position = 'Member'
SELECT DISTINCT state FROM zip_code WHERE type = 'PO Box'
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'
SELECT T2.link_to_event FROM expense AS T1 INNER JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member WHERE T1.cost > 50
SELECT DISTINCT M.first_name, M.last_name, A.link_to_event  FROM expense AS E  INNER JOIN member AS M ON E.link_to_member = M.member_id  INNER JOIN attendance AS A ON M.member_id = A.link_to_member  WHERE E.approved = 'true' AND E.expense_date BETWEEN '2019-01-10' AND '2019-11-19'
SELECT J.college FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE M.first_name = 'Katy' AND M.link_to_major = 'rec1N0upiVLy5esTO'
SELECT M.phone FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.major_name = 'Business' AND J.college = 'College of Agriculture and Applied Sciences'
SELECT T2.email FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 20 AND T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19'
SELECT COUNT(*) FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE M.position = 'Member' AND J.major_name = 'education'
SELECT (SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM budget
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'
SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50
SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'
SELECT (SUM(type = 'PO Box') * 100.0 / COUNT(zip_code)) AS percentage_po_box FROM zip_code
SELECT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0
SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100
SELECT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T3.cost > 100
SELECT Z.city, Z.state FROM zip_code AS Z INNER JOIN member AS M ON Z.zip_code = M.zip INNER JOIN income AS I ON M.member_id = I.link_to_member GROUP BY Z.city, Z.state HAVING COUNT(I.income_id) > 40
SELECT link_to_member, MAX(cost) FROM expense GROUP BY link_to_member HAVING COUNT(DISTINCT link_to_budget) > 1
SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'
SELECT E.event_name FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event WHERE B.category = 'Parking' AND B.amount < (SELECT AVG(amount) FROM budget WHERE category = 'Parking')
SELECT (SUM(T1.cost) / COUNT(T2.event_id)) * 100 FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T2.type = 'Game'
SELECT MAX(cost) FROM expense WHERE expense_description = 'Water, chips, cookies'
SELECT T2.first_name, T2.last_name FROM member AS T2 INNER JOIN expense AS T1 ON T1.link_to_member = T2.member_id GROUP BY T2.member_id ORDER BY SUM(T1.cost) DESC LIMIT 5
SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 WHERE T1.member_id IN (SELECT link_to_member FROM expense WHERE cost > (SELECT AVG(cost) FROM expense))
SELECT (SUM(CASE WHEN z.state = 'Maine' THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) - (SUM(CASE WHEN z.state = 'Vermont' THEN 1 ELSE 0 END) * 1.0 / COUNT(*)) AS percentage_difference FROM member m JOIN zip_code z ON m.zip = z.zip_code
SELECT M.major_name, M.department FROM member AS T1 INNER JOIN major AS M ON T1.link_to_major = M.major_id WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'
SELECT T1.first_name, T1.last_name, T2.cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Water, Veggie tray, supplies'
SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Elementary Education'
SELECT category, amount FROM budget WHERE link_to_event IN (SELECT event_id FROM event WHERE event_name = 'January Speaker')
SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food'
SELECT T1.first_name, T1.last_name, T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.date_received = '2019-09-09'
SELECT B.category FROM expense AS E INNER JOIN budget AS B ON E.link_to_budget = B.budget_id WHERE E.expense_description = 'Posters'
SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Secretary'
SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name
SELECT city FROM zip_code WHERE zip_code = (SELECT zip FROM member WHERE first_name = 'Garrett' AND last_name = 'Girke')
SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 WHERE T1.zip = (SELECT zip_code FROM zip_code WHERE city = 'Lincolnton' AND state = 'North Carolina' AND zip_code = 28092)
SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'
SELECT COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 1.0 / COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) FROM customers
SELECT T2.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212' AND T2.Segment = 'LAM' GROUP BY T2.CustomerID ORDER BY SUM(T1.Consumption) ASC LIMIT 1
SELECT AVG(Y.Consumption) / 12 FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE Y.Date BETWEEN '201301' AND '201312' AND C.Segment = 'SME'
SELECT Y.CustomerID, SUM(Y.Consumption) FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE Y.Date BETWEEN '201101' AND '201112' AND C.Currency = 'CZK' GROUP BY Y.CustomerID ORDER BY SUM(Y.Consumption) DESC;
SELECT COUNT(DISTINCT C.CustomerID) FROM customers AS C INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE C.Segment = 'KAM' AND Y.Consumption < 30000 AND Y.Date BETWEEN '201201' AND '201212'
SELECT SUM(CASE WHEN C.Currency = 'CZK' THEN Y.Consumption ELSE 0 END) - SUM(CASE WHEN C.Currency = 'EUR' THEN Y.Consumption ELSE 0 END) AS ConsumptionDifference FROM yearmonth Y JOIN customers C ON Y.CustomerID = C.CustomerID WHERE Y.Date BETWEEN '201201' AND '201212'
SELECT STRFTIME('%Y', Y.Date) AS Year, SUM(Y.Consumption) AS TotalConsumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Currency = 'EUR' GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1
SELECT Segment, SUM(Consumption) FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID GROUP BY Segment ORDER BY SUM(Consumption) ASC LIMIT 1
SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK') GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1
SELECT SUBSTR(Date, 5, 2) AS Month, SUM(Consumption) AS TotalConsumption  FROM yearmonth  WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'SME')  AND Date LIKE '2013%'  GROUP BY Month  ORDER BY TotalConsumption DESC  LIMIT 1
WITH Consumption AS (SELECT C.Segment, Y.CustomerID, SUM(Y.Consumption) AS TotalConsumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE Y.Date BETWEEN '201301' AND '201312' GROUP BY C.Segment, Y.CustomerID), MinConsumption AS (SELECT Segment, MIN(TotalConsumption) AS MinConsumption FROM Consumption GROUP BY Segment), AnnualAverage AS (SELECT M.Segment, SUM(C.TotalConsumption) / COUNT(DISTINCT C.CustomerID) AS AnnualAverage FROM Consumption AS C INNER JOIN MinConsumption AS M ON C.Segment = M.Segment AND C.TotalConsumption = M.MinConsumption GROUP BY M.Segment) SELECT (SELECT AnnualAverage FROM AnnualAverage WHERE Segment = 'SME') - (SELECT AnnualAverage FROM AnnualAverage WHERE Segment = 'LAM') AS SME_LAM_Difference, (SELECT AnnualAverage FROM AnnualAverage WHERE Segment = 'LAM') - (SELECT AnnualAverage FROM AnnualAverage WHERE Segment = 'KAM') AS LAM_KAM_Difference, (SELECT AnnualAverage FROM AnnualAverage WHERE Segment = 'KAM') - (SELECT AnnualAverage FROM AnnualAverage WHERE Segment = 'SME') AS KAM_SME_Difference
SELECT Segment,         (SUM(CASE WHEN Date BETWEEN '201301' AND '201312' THEN Consumption ELSE 0 END) -          SUM(CASE WHEN Date BETWEEN '201201' AND '201212' THEN Consumption ELSE 0 END)) * 100.0 /         SUM(CASE WHEN Date BETWEEN '201301' AND '201312' THEN Consumption ELSE 0 END) AS PercentageIncrease FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment IN ('SME', 'LAM', 'KAM') GROUP BY Segment
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'
SELECT (COUNT(CASE WHEN Country = 'CZE' THEN 1 END) - COUNT(CASE WHEN Country = 'SVK' THEN 1 END)) AS more_discount FROM gasstations WHERE Segment = 'Discount'
SELECT (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') - (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304')
SELECT (COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) - COUNT(CASE WHEN Currency = 'EUR' THEN 1 END)) AS Difference FROM customers WHERE Segment = 'SME'
SELECT Y.CustomerID FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Currency = 'EUR' AND C.Segment = 'LAM' AND Y.Date = '201310' ORDER BY Y.Consumption DESC LIMIT 1
SELECT CustomerID, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = 'KAM') GROUP BY CustomerID ORDER BY TotalConsumption DESC LIMIT 1
SELECT SUM(Y.Consumption) FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'KAM' AND Y.Date = '201305'
SELECT (COUNT(CASE WHEN Y.Consumption > 46.73 THEN 1 END) * 100.0 / COUNT(*))  FROM customers AS C  INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID  WHERE C.Segment = 'LAM'
SELECT Country, COUNT(*) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country
SELECT (COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM customers WHERE Segment = 'KAM'
SELECT (COUNT(CASE WHEN Consumption > 528.3 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM yearmonth WHERE Date = '201202'
SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM gasstations WHERE Country = 'SVK'
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1
SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1
SELECT C.CustomerID FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE Y.Date = '201206' AND C.Segment = 'SME' ORDER BY Y.Consumption ASC LIMIT 1
SELECT MAX(Consumption) FROM yearmonth WHERE Date LIKE '2012%'
SELECT MAX(total_consumption) FROM (SELECT SUM(T1.Consumption) / 12 AS total_consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY T1.CustomerID)
SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Date LIKE '2013-09-%'
SELECT DISTINCT G.Country FROM transactions_1k AS T INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID WHERE T.Date LIKE '2013-06%'
SELECT DISTINCT GS.ChainID FROM transactions_1k AS T JOIN customers AS C ON T.CustomerID = C.CustomerID JOIN gasstations AS GS ON T.GasStationID = GS.GasStationID WHERE C.Currency = 'EUR'
SELECT DISTINCT P.Description FROM products AS P INNER JOIN transactions_1k AS T ON P.ProductID = T.ProductID INNER JOIN customers AS C ON T.CustomerID = C.CustomerID WHERE C.Currency = 'EUR'
SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%'
SELECT COUNT(DISTINCT C.CustomerID) FROM customers AS C INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE C.Currency = 'EUR' AND Y.Consumption > 1000
SELECT P.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS G ON T1.GasStationID = G.GasStationID INNER JOIN products AS P ON T1.ProductID = P.ProductID WHERE G.Country = 'CZE'
SELECT DISTINCT Time FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE ChainID = 11)
SELECT COUNT(TransactionID) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE') AND Price > 1000
SELECT COUNT(*) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE') AND Date > '2012-01-01'
SELECT AVG(Price) FROM transactions_1k WHERE GasStationID IN (SELECT GasStationID FROM gasstations WHERE Country = 'CZE')
SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'
SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' ORDER BY Price DESC LIMIT 1
SELECT G.Country FROM gasstations AS G INNER JOIN transactions_1k AS T ON G.GasStationID = T.GasStationID WHERE T.Date = '2012-08-25' ORDER BY T.Time ASC LIMIT 1
SELECT Currency FROM customers WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Time = '16:25:00')
SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
SELECT COUNT(*) FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'EUR') AND Date = '2012-08-26' AND Time < '13:00:00'
SELECT Segment FROM customers ORDER BY CustomerID ASC LIMIT 1
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'
SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00'
SELECT Date, Consumption FROM yearmonth WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Price = 124.05) AND Date = '201201'
SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time LIKE '08:%' AND T2.Country = 'CZE'
SELECT C.Currency FROM customers AS C INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE Y.Date LIKE '201306%' AND Y.Consumption = 214582.17
SELECT G.Country FROM transactions_1k AS T INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID WHERE T.CardID = 667467
SELECT C.Segment FROM customers AS C INNER JOIN transactions_1k AS T ON C.CustomerID = T.CustomerID WHERE T.Amount = 548.4 AND T.Date = '2012-08-24'
SELECT (COUNT(DISTINCT T1.CustomerID) * 100.0 / (SELECT COUNT(*) FROM customers)) AS percentage FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.Currency = 'EUR' AND T1.Date = '2012-08-25'
SELECT (T2.Consumption - T3.Consumption) / T2.Consumption AS decrease_rate FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Price = 634.8 AND T1.Date = '2012-08-25' AND T2.Date = '201201' AND T3.Date = '201301'
SELECT GasStationID, SUM(Amount * Price) AS Revenue FROM transactions_1k GROUP BY GasStationID ORDER BY Revenue DESC LIMIT 1
SELECT (COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM gasstations WHERE Country = 'SVK'
SELECT SUM(Amount) AS TotalSpent, SUM(CASE WHEN Date = '201201' THEN Amount ELSE 0 END) AS January2012Spent FROM transactions_1k WHERE CustomerID = 38508
SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.ProductID ORDER BY SUM(T1.Amount) DESC LIMIT 5
SELECT T2.CustomerID, AVG(T1.Price / T1.Amount) AS AveragePrice, T2.Currency FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T1.Price) DESC LIMIT 1
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1
SELECT Y.Consumption FROM yearmonth AS Y INNER JOIN transactions_1k AS T ON Y.CustomerID = T.CustomerID WHERE (T.Price / T.Amount > 29.00 AND T.ProductID = 5) AND Y.Date LIKE '201208%'
