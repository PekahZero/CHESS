SELECT MAX(`Free Meal Count (K-12)` / `Enrollment (K-12)`) AS HighestEligibleFreeRate  FROM frpm AS T1  INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode  WHERE T2.County = 'Alameda' AND `Enrollment (K-12)` > 0
SELECT (T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)`) AS eligible_free_rate  FROM frpm AS T1  INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode  WHERE T2.SOCType = 'Continuation High Schools'  AND T1.`Free Meal Count (Ages 5-17)` IS NOT NULL  AND T1.`Enrollment (Ages 5-17)` IS NOT NULL  ORDER BY eligible_free_rate ASC  LIMIT 3
SELECT T1.Zip FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Charter School (Y/N)` = 1 AND T2.`District Name` = 'Fresno County Office of Education'
SELECT T1.MailStreet FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2."FRPM Count (K-12)" = (SELECT MAX("FRPM Count (K-12)") FROM frpm)
SELECT S.Phone  FROM frpm AS F  INNER JOIN schools AS S ON F.CDSCode = S.CDSCode  WHERE F.`Charter School (Y/N)` = 1 AND S.OpenDate > '2000-01-01'
SELECT COUNT(*) FROM schools AS S INNER JOIN satscores AS SS ON S.CDSCode = SS.cds WHERE SS.AvgScrMath < 400 AND S.Virtual = 'F'
SELECT DISTINCT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr > 500 AND T2.Magnet = 1
SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores WHERE NumGE1500 > 0)
SELECT SUM(s.NumTstTakr)  FROM satscores AS s  INNER JOIN frpm AS f ON s.cds = f.CDSCode  WHERE f.`FRPM Count (K-12)` = (SELECT MAX(`FRPM Count (K-12)`) FROM frpm)
SELECT COUNT(*) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.`Charter Funding Type` = 'Directly funded'
SELECT F.`FRPM Count (Ages 5-17)`  FROM frpm AS F  INNER JOIN (SELECT sname FROM satscores ORDER BY AvgScrRead DESC LIMIT 1) AS S  ON F.`School Name` = S.sname
SELECT CDSCode FROM frpm WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500
SELECT MAX(`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) FROM `frpm` AS F JOIN `satscores` AS S ON F.CDSCode = S.cds WHERE (S.NumGE1500 * 1.0) / S.NumTstTakr > 0.3
WITH ExcellenceRates AS (SELECT cds, NumGE1500, NumTstTakr, (NumGE1500 * 1.0 / NumTstTakr) AS ExcellenceRate FROM satscores WHERE NumTstTakr > 0) SELECT Phone FROM schools INNER JOIN ExcellenceRates ON schools.CDSCode = ExcellenceRates.cds ORDER BY ExcellenceRate DESC LIMIT 3
SELECT s.NCESSchool FROM schools AS s INNER JOIN frpm AS f ON s.CDSCode = f.CDSCode ORDER BY f."Enrollment (Ages 5-17)" DESC LIMIT 5
SELECT T2.District, AVG(T1.AvgScrRead) AS AvgReadingScore FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.StatusType = 'Active' GROUP BY T2.District ORDER BY AvgReadingScore DESC LIMIT 1
SELECT COUNT(*) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.District = 'merged Alameda' AND T2.NumTstTakr < 100
SELECT frpm.`Charter School Number` FROM frpm INNER JOIN satscores ON frpm.`CDSCode` = satscores.`cds` WHERE satscores.`AvgScrWrite` = 499
SELECT COUNT(*) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.County = 'Contra Costa' AND T1.FundingType = 'Directly funded' AND T2.NumTstTakr <= 250
SELECT s.Phone FROM schools s JOIN satscores ss ON s.CDSCode = ss.cds ORDER BY ss.AvgScrMath DESC LIMIT 1
SELECT COUNT(*) FROM schools WHERE County = 'Amador' AND "Low Grade" = '9' AND "High Grade" = '12';
SELECT COUNT(*) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Free Meal Count (K-12)` > 500 AND T2.`FRPM Count (K-12)` < 700 AND T1.City = 'Los Angeles'
SELECT sname FROM satscores WHERE cname = 'Contra Costa' ORDER BY NumTstTakr DESC LIMIT 1
SELECT T2.School, T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE ABS(T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > 30
SELECT T1.`School Name`  FROM frpm AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds  WHERE T1.`Percent (%) Eligible Free (K-12)` > 0.1 AND T2.NumGE1500 > 0
SELECT S.School, S.FundingType FROM schools AS S INNER JOIN satscores AS SS ON S.CDSCode = SS.cds WHERE S.County = 'Riverside' GROUP BY S.School, S.FundingType HAVING AVG(SS.AvgScrMath) > 400
SELECT T1."School Name", T2.Zip, T2.Street, T2.City, T2.State FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1."School Type" = 'High Schools (Public)' AND T2.County = 'Monterey' AND T1."Free Meal Count (Ages 5-17)" > 800
SELECT T2.School, AVG(T1.AvgScrWrite), T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.OpenDate > '1991-12-31' OR T2.ClosedDate < '2000-01-01' GROUP BY T2.School, T2.Phone
SELECT s.School, s.DOCType FROM schools AS s JOIN frpm AS f ON s.CDSCode = f.CDSCode WHERE f.`Charter Funding Type` = 'Locally funded' AND (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) > (SELECT AVG(f2.`Enrollment (K-12)` - f2.`Enrollment (Ages 5-17)`) FROM frpm AS f2 WHERE f2.`Charter Funding Type` = 'Locally funded')
SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`School Type` = 'K-12 Schools (Public)' AND T1.`Enrollment (K-12)` = (SELECT MAX(`Enrollment (K-12)`) FROM frpm WHERE `School Type` = 'K-12 Schools (Public)')
SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 5
SELECT (frpm.`FRPM Count (K-12)` / frpm.`Enrollment (K-12)`) AS EligibleFreeRate FROM satscores AS s INNER JOIN frpm ON s.cds = frpm.CDSCode WHERE s.enroll12 > 0 ORDER BY frpm.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9;
SELECT (f.`FRPM Count (K-12)` / f.`Enrollment (K-12)`) AS `Eligible Rate` FROM `frpm` AS f INNER JOIN `schools` AS s ON f.CDSCode = s.CDSCode WHERE s.`SOC` = 66 AND f.`Enrollment (K-12)` > 0 ORDER BY f.`FRPM Count (K-12)` DESC LIMIT 5
SELECT DISTINCT s.`Website`, f.`School Name`  FROM frpm AS f  INNER JOIN schools AS s ON f.CDSCode = s.CDSCode  WHERE f.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000
SELECT (T1."Free Meal Count (Ages 5-17)" / T1."Enrollment (Ages 5-17)") FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Kacey' AND T2.AdmLName1 = 'Gibson' AND T1."Free Meal Count (Ages 5-17)" IS NOT NULL AND T1."Enrollment (Ages 5-17)" IS NOT NULL
SELECT AdmEmail1 FROM schools WHERE CDSCode = (SELECT CDSCode FROM frpm WHERE `Charter School (Y/N)` = 1 ORDER BY `Enrollment (K-12)` ASC LIMIT 1)
SELECT      T1.AdmFName1 || ' ' || T1.AdmLName1 AS FullName  FROM      schools AS T1  INNER JOIN      satscores AS T2 ON T1.CDSCode = T2.cds  WHERE      T2.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)  LIMIT 1
SELECT S.Street, S.City, S.Zip, S.State  FROM satscores AS SS  INNER JOIN schools AS S ON SS.cds = S.CDSCode  ORDER BY (SS.NumGE1500 * 1.0 / SS.NumTstTakr) ASC  LIMIT 1
SELECT DISTINCT T2.Website  FROM satscores AS T1  INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode  WHERE T2.County = 'Los Angeles' AND T1.NumTstTakr BETWEEN 2000 AND 3000
SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND T2.County = 'Fresno'
SELECT S.Phone FROM schools AS S INNER JOIN satscores AS SS ON S.CDSCode = SS.cds WHERE S.District = 'Fresno Unified' ORDER BY SS.AvgScrRead ASC LIMIT 1
SELECT T1.sname FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ORDER BY T1.AvgScrRead DESC LIMIT 5
SELECT frpm.`Educational Option Type` FROM frpm INNER JOIN satscores ON frpm.`School Name` = satscores.sname WHERE satscores.AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores)
SELECT T1.AvgScrMath, T1.cname  FROM satscores AS T1  WHERE (T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite) = (     SELECT MIN(T2.AvgScrMath + T2.AvgScrRead + T2.AvgScrWrite)      FROM satscores AS T2      WHERE T2.AvgScrMath IS NOT NULL AND T2.AvgScrRead IS NOT NULL AND T2.AvgScrWrite IS NOT NULL )
SELECT AVG(T1.AvgScrWrite), T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores)
SELECT T1.sname, AVG(T1.AvgScrWrite) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich' GROUP BY T1.sname
SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1."Enrollment (K-12)" DESC LIMIT 1
SELECT COUNT(*) / 12.0 AS monthly_average FROM schools WHERE DOC = 52 AND STRFTIME('%Y', OpenDate) = '1980' AND County = 'Alameda'
SELECT (SUM(CASE WHEN DOC = 54 AND StatusType = 'Merged' THEN 1 ELSE 0 END) * 1.0) / (SUM(CASE WHEN DOC = 52 AND StatusType = 'Merged' THEN 1 ELSE 0 END)) AS ratio FROM schools WHERE County = 'Orange'
WITH ClosedSchools AS (     SELECT County, COUNT(*) AS ClosedCount     FROM schools     WHERE StatusType = 'Closed'     GROUP BY County ), MaxClosed AS (     SELECT County     FROM ClosedSchools     ORDER BY ClosedCount DESC     LIMIT 1 ) SELECT s.County, s.School, s.ClosedDate FROM schools AS s WHERE s.StatusType = 'Closed' AND s.County = (SELECT County FROM MaxClosed)
SELECT T2.MailStreet, T1.sname FROM (SELECT cds, sname, AvgScrMath, ROW_NUMBER() OVER (ORDER BY AvgScrMath DESC) AS rank FROM satscores) AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.rank = 6
SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead = (SELECT MIN(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL)
SELECT COUNT(*) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite >= 1500 AND T2.MailCity = 'Lakeport'
SELECT SUM(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'
SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'
SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND MailState = 'CA') * 1.0 / NULLIF((SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND MailState = 'CA'), 0) AS ratio
SELECT COUNT(*) FROM schools WHERE State = 'CA' AND County = 'San Joaquin' AND StatusType = 'Active';
SELECT T2.Phone, T2.Ext FROM schools AS T2 WHERE T2.CDSCode = (SELECT T1.cds FROM satscores AS T1 ORDER BY T1.AvgScrWrite DESC LIMIT 1 OFFSET 332)
SELECT School, Phone, Ext FROM schools WHERE Zip = '95203-3704';
SELECT DISTINCT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')
SELECT Website FROM schools WHERE Virtual = 'P' AND Charter = 1 AND County = 'San Joaquin'
SELECT COUNT(*) FROM schools WHERE Charter = 1 AND DOC = 52 AND City = 'Hickman';
SELECT COUNT(*) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Charter = 0 AND T1.County = 'Los Angeles' AND (T2.`Free Meal Count (K-12)` * 100 / T2.`Enrollment (K-12)`) < 0.18
SELECT CONCAT_WS(' ', AdmFName1, AdmLName1, AdmFName2, AdmLName2, AdmFName3, AdmLName3) AS FullName, School, City FROM schools WHERE CharterNum = '00D2' AND Charter = 1
SELECT COUNT(*) FROM schools WHERE City = 'Hickman' AND CharterNum = '00D4';
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM schools WHERE County = 'Santa Clara')) AS ratio_percentage FROM schools WHERE FundingType = 'Locally funded' AND County = 'Santa Clara'
SELECT COUNT(*) FROM schools WHERE FundingType = 'Directly funded' AND OpenDate BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus';
SELECT COUNT(*) FROM schools WHERE STRFTIME('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District';
SELECT County, COUNT(*) AS ClosureCount  FROM schools  WHERE SOC = 11 AND STRFTIME('%Y', ClosedDate) BETWEEN '1980' AND '1989'  GROUP BY County  ORDER BY ClosureCount DESC  LIMIT 1
SELECT NCESDist FROM schools WHERE SOC = 31;
SELECT COUNT(*) FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.County = 'Alpine' AND T2."School Type" = 'District Community Day Schools' AND T1.StatusType IN ('Active', 'Closed')
SELECT DISTINCT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0
SELECT SUM(`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` = '2014-2015'
SELECT T1.`FRPM Count (Ages 5-17)` FROM `frpm` AS T1 INNER JOIN `schools` AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`EdOpsName` = 'Youth Authority School' AND T2.`MailStreet` = 'PO Box 1040'
SELECT `Low Grade` FROM `frpm` WHERE `CDSCode` = '613360'
SELECT T1.EILName, T1.School FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2."NSLP Provision Status" = 'Breakfast Provision 2' AND T2."County Code" = '37'
SELECT S.City FROM schools AS S INNER JOIN frpm AS F ON S.CDSCode = F.CDSCode WHERE S.EILCode = 'HS' AND F."NSLP Provision Status" = 'Lunch Provision 2' AND F."Low Grade" = '9' AND F."High Grade" = '12' AND S.County = 'Merced'
SELECT T1.School, (T2."Free Meal Count (Ages 5-17)" / T2."Enrollment (Ages 5-17)" * 100) AS "Percent Eligible FRPM (Ages 5-17)" FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.GSserved = 'K-9' AND T1.County = 'Los Angeles'
SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(*) DESC LIMIT 1
SELECT County, COUNT(*) AS SchoolCount FROM schools WHERE Virtual = 'F' AND County IN ('San Diego', 'Santa Barbara') GROUP BY County ORDER BY SchoolCount DESC LIMIT 1
SELECT School, Latitude, SOCType FROM schools WHERE Latitude = (SELECT MAX(Latitude) FROM schools)
SELECT T2.City, T2.School, T1.`Low Grade` FROM schools AS T2 INNER JOIN frpm AS T1 ON T2.CDSCode = T1.CDSCode WHERE T2.Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'CA') AND T2.State = 'CA'
SELECT GSoffered FROM schools WHERE Longitude = (SELECT MAX(Longitude) FROM schools)
SELECT COUNT(DISTINCT T1.CDSCode) AS SchoolsWithMultipleTypes, COUNT(DISTINCT T1.City) AS CitiesWithK8, COUNT(T1.CDSCode) AS SchoolsCount FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.Magnet = 1 AND T1.GSserved = 'K-8' AND T2."NSLP Provision Status" = 'Multiple Provision Types' GROUP BY T1.City
SELECT T1.District, first_name FROM (     SELECT District, AdmFName1 AS first_name FROM schools WHERE AdmFName1 IS NOT NULL     UNION ALL     SELECT District, AdmFName2 FROM schools WHERE AdmFName2 IS NOT NULL     UNION ALL     SELECT District, AdmFName3 FROM schools WHERE AdmFName3 IS NOT NULL ) AS T1 GROUP BY first_name, District ORDER BY COUNT(first_name) DESC LIMIT 2
SELECT T1.`District Code`, (T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)` * 100) AS `Percent Eligible Free` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'
SELECT T1.AdmLName1, T1.District, T1.County, T1.School FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2."Charter School Number" = '40'
SELECT AdmEmail1 FROM schools WHERE County = 'San Bernardino' AND District = 'San Bernardino City Unified' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31' AND (SOC = 62 OR DOC = 54)
SELECT T2.AdmEmail1, T1.sname FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr = (SELECT MAX(NumTstTakr) FROM satscores WHERE NumGE1500 >= 1)
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.A3 = 'east Bohemia'
SELECT COUNT(DISTINCT T1.account_id)  FROM account AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  INNER JOIN loan AS T3 ON T1.account_id = T3.account_id  WHERE T2.A3 = 'Prague'
SELECT AVG(A12) AS avg_1995, AVG(A13) AS avg_1996, CASE WHEN AVG(A12) > AVG(A13) THEN '1995 has higher unemployment rate' WHEN AVG(A12) < AVG(A13) THEN '1996 has higher unemployment rate' ELSE 'Both years have the same unemployment rate' END AS comparison FROM district
SELECT COUNT(DISTINCT D.district_id) FROM district AS D INNER JOIN client AS C ON D.district_id = C.district_id WHERE C.gender = 'F' AND D.A11 > 6000 AND D.A11 < 10000
SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000
WITH OldestFemale AS (SELECT `client_id`, `district_id` FROM `client` WHERE `gender` = 'F' ORDER BY `birth_date` ASC LIMIT 1), LowestAvgSalary AS (SELECT `A11` FROM `district` WHERE `district_id` = (SELECT `district_id` FROM OldestFemale)), HighestAvgSalary AS (SELECT MAX(`A11`) AS max_salary FROM `district`) SELECT `account_id`, (SELECT max_salary FROM HighestAvgSalary) - (SELECT `A11` FROM LowestAvgSalary) AS gap FROM `account` WHERE `account_id` IN (SELECT `account_id` FROM `disp` WHERE `client_id` IN (SELECT `client_id` FROM OldestFemale));
SELECT T1.client_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date = (SELECT MAX(birth_date) FROM client) AND T2.A11 = (SELECT MAX(A11) FROM district);
SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'
SELECT DISTINCT T3.client_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.frequency = 'POPLATEK PO OBRATU' AND T1.type = 'DISPONENT'
SELECT DISTINCT A.account_id FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.date LIKE '1997%' AND A.frequency = 'POPLATEK TYDNE' AND L.amount = (SELECT MIN(L2.amount) FROM loan AS L2 INNER JOIN account AS A2 ON L2.account_id = A2.account_id WHERE L2.date LIKE '1997%' AND A2.frequency = 'POPLATEK TYDNE')
SELECT A.account_id FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.duration > 12 AND STRFTIME('%Y', A.date) = '1993' ORDER BY L.amount DESC LIMIT 1
SELECT COUNT(*) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T2.district_id = (SELECT district_id FROM district WHERE A2 = 'Sokolov')
SELECT account_id FROM account WHERE date = (SELECT MIN(date) FROM account WHERE date BETWEEN '1995-01-01' AND '1995-12-31');
SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.amount > 3000
SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.issued = '1994-03-03'
SELECT T2.date FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 840 AND T1.date = '1998-10-14'
SELECT district_id FROM account WHERE account_id = (SELECT account_id FROM loan WHERE date = '1994-08-25')
SELECT MAX(t.amount) FROM trans t JOIN card c ON t.account_id = c.account_id WHERE c.issued = '1996-10-21'
SELECT T1.gender  FROM client AS T1  INNER JOIN account AS T2 ON T1.district_id = T2.district_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T3.district_id = (SELECT district_id FROM district ORDER BY A11 DESC LIMIT 1)  ORDER BY T1.birth_date ASC  LIMIT 1
SELECT T3.amount  FROM trans AS T3  WHERE T3.account_id = (     SELECT T2.account_id      FROM loan AS T1      INNER JOIN account AS T2 ON T1.account_id = T2.account_id      ORDER BY T1.amount DESC      LIMIT 1 )  ORDER BY T3.date ASC  LIMIT 1
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'
SELECT T2.disp_id FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 5100 AND T1.date = '1998-09-02'
SELECT COUNT(A.account_id) FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id WHERE D.A2 = 'Litomerice' AND STRFTIME('%Y', A.date) = '1996'
SELECT T4.A2 FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN account AS T3 ON T2.account_id = T3.account_id  INNER JOIN district AS T4 ON T3.district_id = T4.district_id  WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29'
SELECT c.birth_date  FROM client AS c  INNER JOIN disp AS d ON c.client_id = d.client_id  INNER JOIN loan AS l ON d.account_id = l.account_id  WHERE l.amount = 98832 AND l.date = '1996-01-03';
SELECT T2.account_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.district_id = (SELECT district_id FROM district WHERE A3 = 'Prague') ORDER BY T2.date ASC LIMIT 1
SELECT (COUNT(CASE WHEN gender = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM client WHERE district_id = (SELECT district_id FROM district WHERE A3 = 'south Bohemia' ORDER BY A4 DESC LIMIT 1)
WITH client_data AS (     SELECT account_id FROM loan WHERE date = '1993-07-05' ), balances AS (     SELECT          (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM client_data) AND date = '1998-12-27') AS balance_A,         (SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM client_data) AND date = '1993-03-22') AS balance_B ) SELECT      ((balance_A - balance_B) / balance_B) * 100 AS increase_rate FROM balances;
SELECT (SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) * 100.0 / NULLIF(SUM(amount), 0)) AS percentage_fully_paid FROM loan;
SELECT ( (SELECT COUNT(*) FROM loan WHERE amount < 100000 AND status = 'C') * 100.0 / (SELECT COUNT(*) FROM loan WHERE amount < 100000) ) AS percentage
SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) = '1993' AND T1.frequency = 'POPLATEK PO OBRATU'
SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND T1.date BETWEEN '1995-01-01' AND '2000-12-31'
SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'
SELECT T3.A2, T3.A3 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.loan_id = '4990'
SELECT T1.account_id, T3.A2 AS district, T3.A3 AS region FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.amount > 300000
SELECT T1.loan_id, T3.A3 AS district, T3.A11 AS average_salary FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.duration = 60
SELECT T3.A3 AS district, ((T3.A13 - T3.A12) / T3.A12) * 100 AS unemployment_increment FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'
SELECT (COUNT(CASE WHEN T1.district_id IN (SELECT district_id FROM district WHERE A2 = 'Decin') THEN 1 END) * 100.0) / COUNT(*) AS percentage FROM account AS T1 WHERE STRFTIME('%Y', T1.date) = '1993'
SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE';
SELECT D.A2, COUNT(C.client_id) AS female_count FROM client AS C INNER JOIN account AS A ON C.district_id = A.district_id INNER JOIN district AS D ON C.district_id = D.district_id WHERE C.gender = 'F' GROUP BY D.district_id ORDER BY female_count DESC LIMIT 10
SELECT T3.A2, SUM(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type = 'VYDAJ' AND T1.date LIKE '1996-01%' GROUP BY T3.A2 ORDER BY SUM(T1.amount) DESC LIMIT 10
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 LEFT JOIN disp AS T2 ON T1.account_id = T2.account_id LEFT JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.district_id IN (SELECT district_id FROM district WHERE A3 = 'South Bohemia') AND T3.card_id IS NULL
SELECT T2.A3, SUM(T1.amount) AS total_active_loans  FROM loan AS T1  INNER JOIN account AS T3 ON T1.account_id = T3.account_id  INNER JOIN district AS T2 ON T3.district_id = T2.district_id  WHERE T1.status IN ('C', 'D')  GROUP BY T2.A3  ORDER BY total_active_loans DESC  LIMIT 1
SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.gender = 'M'
SELECT T1.A2, T1.A3 FROM district AS T1 WHERE T1.A13 = (SELECT MAX(A13) FROM district);
SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district ORDER BY A16 DESC LIMIT 1);
SELECT COUNT(DISTINCT T2.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.operation = 'VYBER KARTOU' AND T1.balance < 0 AND T2.frequency = 'POPLATEK MESICNE'
SELECT COUNT(*) FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.amount >= 250000 AND L.date BETWEEN '1995-01-01' AND '1997-12-31' AND A.frequency = 'POPLATEK MESICNE'
SELECT COUNT(DISTINCT A.account_id) FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id WHERE L.status IN ('C', 'D') AND A.district_id = 1
SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1) AND gender = 'M'
SELECT COUNT(*) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'DISPONENT'
SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'
SELECT DISTINCT T3.district_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.amount > 10000 AND STRFTIME('%Y', T1.date) = '1997'
SELECT DISTINCT T1.account_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'
SELECT D.account_id FROM card C INNER JOIN disp D ON C.disp_id = D.disp_id WHERE C.type IN ('gold', 'junior') GROUP BY D.account_id HAVING COUNT(DISTINCT C.type) = 2
SELECT AVG(monthly_total) FROM (SELECT SUM(amount) AS monthly_total FROM trans WHERE operation = 'VYBER KARTOU' AND STRFTIME('%Y', date) = '2021' GROUP BY STRFTIME('%m', date))
WITH monthly_spent AS (     SELECT account_id, SUM(amount) / COUNT(DISTINCT strftime('%m', date)) AS spent_per_month     FROM trans     WHERE operation = 'VYBER KARTOU' AND strftime('%Y', date) = '1998'     GROUP BY account_id ) SELECT account_id FROM monthly_spent WHERE spent_per_month < (SELECT AVG(spent_per_month) FROM monthly_spent);
SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T1.gender = 'F'
SELECT COUNT(DISTINCT T2.account_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T1.gender = 'F' AND T3.A3 = 'south Bohemia'
SELECT DISTINCT T1.account_id  FROM account AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T1.district_id = T3.district_id  WHERE T3.A2 = 'Tabor' AND T2.type = 'OWNER'
SELECT DISTINCT A1.frequency FROM account AS A1 INNER JOIN district AS D ON A1.district_id = D.district_id WHERE A1.frequency != 'OWNER' AND D.A11 > 8000 AND D.A11 <= 9000
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'North Bohemia' AND T2.bank = 'AB'
SELECT DISTINCT T3.A2 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type = 'VYDAJ'
SELECT AVG(T1.A15) FROM district AS T1 WHERE T1.A15 > 4000 AND T1.district_id IN (SELECT T2.district_id FROM account AS T2 WHERE T2.date >= '1997-01-01')
SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'
SELECT (COUNT(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 END) * 100.0 / COUNT(*)) AS percent_gold FROM card
SELECT T2.client_id FROM disp AS T2 INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T1 ON T3.account_id = T1.account_id WHERE T1.amount = (SELECT MAX(amount) FROM loan)
SELECT A15 FROM district WHERE district_id = (SELECT district_id FROM account WHERE account_id = 532)
SELECT district_id FROM account WHERE account_id = (SELECT account_id FROM "order" WHERE order_id = 33333);
SELECT * FROM trans WHERE operation = 'VYBER' AND account_id IN (SELECT disp.account_id FROM disp INNER JOIN client ON disp.client_id = client.client_id WHERE client.client_id = 3356)
SELECT COUNT(*) FROM account AS A INNER JOIN loan AS L ON A.account_id = L.account_id WHERE A.frequency = 'POPLATEK TYDNE' AND L.amount < 200000
SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 13539
SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541
SELECT T3.A3, COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'A' GROUP BY T3.district_id ORDER BY COUNT(T1.account_id) DESC LIMIT 1
SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.order_id = 32423
SELECT * FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 5
SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik'
SELECT DISTINCT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'
SELECT (COUNT(CASE WHEN T1.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T2.A11 > 10000
SELECT (SUM(CASE WHEN STRFTIME('%Y', L.date) = '1997' THEN L.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', L.date) = '1996' THEN L.amount ELSE 0 END)) * 100.0 / NULLIF(SUM(CASE WHEN STRFTIME('%Y', L.date) = '1996' THEN L.amount ELSE 0 END), 0) AS growth_rate FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id INNER JOIN disp AS D ON A.account_id = D.account_id INNER JOIN client AS C ON D.client_id = C.client_id WHERE C.gender = 'M';
SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';
SELECT      (SUM(CASE WHEN A3 = 'north Bohemia' THEN A16 ELSE 0 END) -       SUM(CASE WHEN A3 = 'east Bohemia' THEN A16 ELSE 0 END)) AS crime_difference FROM district
SELECT COUNT(*) FROM disp WHERE account_id IN (1, 10) AND type IN ('OWNER', 'DISPONENT');
SELECT      (SELECT COUNT(*) FROM `order` WHERE `account_id` = 3 AND `k_symbol` = 'SIPO') AS request_frequency,      (SELECT `k_symbol` FROM `trans` WHERE `account_id` = 3 AND `amount` = 3539) AS debit_purpose
SELECT STRFTIME('%Y', C.birth_date) FROM client AS C INNER JOIN disp AS D ON C.client_id = D.client_id WHERE D.account_id = 130
SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'
SELECT SUM(amount) AS total_debt, status FROM loan WHERE account_id IN (SELECT account_id FROM disp WHERE client_id = 992) GROUP BY status
SELECT SUM(T1.amount), T2.gender  FROM trans AS T1  INNER JOIN disp AS T3 ON T1.account_id = T3.account_id  INNER JOIN client AS T2 ON T3.client_id = T2.client_id  WHERE T3.client_id = 4 AND T1.trans_id = 851;
SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 9
SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 617 AND STRFTIME('%Y', T1.date) = '1998'
SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND T3.district_id IN (SELECT district_id FROM district WHERE A3 = 'east Bohemia')
SELECT T1.client_id FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'F' ORDER BY T2.amount DESC LIMIT 3
SELECT COUNT(DISTINCT C.client_id) FROM client AS C INNER JOIN account AS A ON C.district_id = A.district_id INNER JOIN trans AS T ON A.account_id = T.account_id WHERE C.gender = 'M' AND C.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T.amount > 4000 AND T.k_symbol = 'SIPO'
SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Beroun' AND T1.date > '1996-12-31'
SELECT COUNT(*) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'
SELECT (COUNT(CASE WHEN T1.gender = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS female_percentage FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'
SELECT (SELECT COUNT(*) FROM client AS C INNER JOIN account AS A ON C.district_id = A.district_id WHERE C.gender = 'M' AND A.frequency = 'POPLATEK TYDNE') * 100.0 / (SELECT COUNT(*) FROM client AS C INNER JOIN account AS A ON C.district_id = A.district_id WHERE A.frequency = 'POPLATEK TYDNE') AS percentage
SELECT COUNT(DISTINCT C.client_id) FROM account AS A INNER JOIN disp AS D ON A.account_id = D.account_id INNER JOIN client AS C ON D.client_id = C.client_id WHERE A.frequency = 'POPLATEK TYDNE' AND D.type = 'OWNER'
SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND T2.date < '1997-01-01' AND T1.amount = (SELECT MIN(T1.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND T2.date < '1997-01-01')
SELECT A.account_id FROM account AS A INNER JOIN client AS C ON A.district_id = C.district_id WHERE C.gender = 'F' AND C.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F' AND district_id = A.district_id) AND A.district_id = (SELECT district_id FROM district ORDER BY A11 ASC LIMIT 1)
SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'
SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE'
SELECT AVG(L.amount) FROM loan AS L INNER JOIN trans AS T ON L.account_id = T.account_id WHERE L.status IN ('C', 'D') AND T.k_symbol = 'POPLATEK PO OBRATU'
SELECT T1.client_id, T1.district_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.type = 'OWNER'
SELECT DISTINCT T1.client_id, STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.birth_date) AS age  FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id  INNER JOIN loan AS T4 ON T2.account_id = T4.account_id  WHERE T3.type = 'gold'
SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.element = 'cl'
SELECT AVG(count_of_oxygen) FROM (SELECT COUNT(*) AS count_of_oxygen FROM atom WHERE element = 'o' AND molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '-') GROUP BY molecule_id)
SELECT (COUNT(T1.bond_id) * 1.0 / COUNT(DISTINCT T2.molecule_id)) AS average_single_bonded FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '-'
SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'
SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '+'
SELECT (SUM(CASE WHEN T4.element = 'c' THEN 1 ELSE 0 END) * 1.0 / COUNT(T4.atom_id)) * 100 AS percentage_of_carbon FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T4 ON T2.atom_id = T4.atom_id WHERE T1.bond_type = '='
SELECT COUNT(bond_id) FROM bond WHERE bond_type = '#';
SELECT COUNT(atom_id) FROM atom WHERE element != 'br';
SELECT COUNT(*) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND label = '+';
SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'si'
SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id WHERE T1.bond_id = 'TR004_8_9'
SELECT DISTINCT T1.element FROM bond AS T2 INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id INNER JOIN atom AS T1 ON T3.atom_id = T1.atom_id WHERE T2.bond_type = '='
SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'h' GROUP BY T1.label ORDER BY COUNT(T1.label) DESC LIMIT 1
SELECT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'te'
SELECT DISTINCT T1.atom_id, T1.atom_id2  FROM connected AS T1  INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id  WHERE T2.bond_type = '-'
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.label = '-'
SELECT T1.element, COUNT(*) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(*) ASC LIMIT 1
SELECT B.bond_type FROM connected AS C INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE C.atom_id = 'TR004_8' AND C.atom_id2 = 'TR004_20'
SELECT DISTINCT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'sn')
SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element IN ('i', 's') AND T3.bond_type = '-'
SELECT T1.atom_id, T1.atom_id2  FROM connected AS T1  INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id  WHERE T2.bond_type = '#'
SELECT DISTINCT T2.atom_id2  FROM connected AS T2  INNER JOIN atom AS T1 ON T2.atom_id = T1.atom_id  WHERE T1.molecule_id = 'TR181'
SELECT (COUNT(T1.molecule_id) - SUM(T2.element = 'f')) * 100.0 / COUNT(T1.molecule_id) AS percent FROM molecule AS T1 LEFT JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT (SUM(CASE WHEN bond.bond_type = '#' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond.bond_id)) AS percent FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label = '+'
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3
SELECT T3.atom_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.molecule_id = 'TR001' AND T1.bond_id = 'TR001_2_6'
SELECT (COUNT(CASE WHEN label = '+' THEN 1 END) - COUNT(CASE WHEN label = '-' THEN 1 END)) AS difference FROM molecule;
SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR_000_2_5'
SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'
SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE TRIM(T1.bond_type) = '=' ORDER BY T2.molecule_id ASC LIMIT 5
SELECT (SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) AS percent FROM bond WHERE molecule_id = 'TR008'
SELECT (SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) * 100.0 / COUNT(molecule_id)) AS percent FROM molecule
SELECT (SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) * 100.0 / COUNT(atom_id)) AS percent FROM atom WHERE molecule_id = 'TR206'
SELECT DISTINCT bond_type FROM bond WHERE molecule_id = 'TR000'
SELECT T1.label, T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR060'
SELECT      (SELECT bond_type       FROM bond       WHERE molecule_id = 'TR018'       GROUP BY bond_type       ORDER BY COUNT(bond_type) DESC LIMIT 1) AS majority_bond_type,     (SELECT label       FROM molecule       WHERE molecule_id = 'TR018') AS carcinogenic_status
SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.bond_type = '-' ORDER BY T1.molecule_id ASC LIMIT 3
SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR006' ORDER BY T1.bond_id ASC LIMIT 2
SELECT COUNT(*) FROM connected AS C INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE (C.atom_id = 'TR009_12' OR C.atom_id2 = 'TR009_12') AND B.bond_id LIKE 'TR009_%'
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'br'
SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_6_9'
SELECT T2.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'
SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = '#';
SELECT COUNT(bond_id) FROM connected WHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19';
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR004'
SELECT COUNT(molecule_id) FROM molecule WHERE label = '-';
SELECT DISTINCT T4.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE SUBSTRING(T1.atom_id, 7, 2) BETWEEN '21' AND '25' AND T4.label = '+'
SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id INNER JOIN atom AS T4 ON T2.atom_id2 = T4.atom_id WHERE T3.element = 'p' AND T4.element = 'n'
SELECT CASE WHEN M.label = '+' THEN 'Yes' ELSE 'No' END AS Is_Carcinogenic FROM (     SELECT B.molecule_id     FROM bond AS B     WHERE B.bond_type = '='     GROUP BY B.molecule_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) AS MaxDoubleBondMolecule INNER JOIN molecule AS M ON MaxDoubleBondMolecule.molecule_id = M.molecule_id
SELECT COUNT(T2.bond_id) * 1.0 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'
SELECT T1.bond_id, T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) + 0 = 45
SELECT DISTINCT T1.element FROM atom AS T1 LEFT JOIN (SELECT atom_id FROM connected UNION SELECT atom_id2 FROM connected) AS T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id IS NULL
SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR447' AND T1.bond_type = '#'
SELECT DISTINCT T3.element  FROM bond AS T1  INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id  INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id  WHERE T1.bond_id = 'TR144_8_19'
SELECT T1.molecule_id, COUNT(T2.bond_id) AS double_bond_count FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.bond_type = '=' GROUP BY T1.molecule_id ORDER BY double_bond_count DESC LIMIT 1
SELECT T2.element  FROM molecule AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.label = '+'  GROUP BY T2.element  ORDER BY COUNT(*) ASC  LIMIT 1
SELECT DISTINCT T2.atom_id FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id2 = T2.atom_id WHERE T1.atom_id = (SELECT atom_id FROM atom WHERE element = 'pb')
SELECT DISTINCT T2.element FROM bond AS T1 INNER JOIN connected AS T3 ON T1.bond_id = T3.bond_id INNER JOIN atom AS T2 ON T3.atom_id = T2.atom_id WHERE T1.bond_type = '#'
SELECT (COUNT(T1.bond_id) * 100.0 / (SELECT MAX(count_combination) FROM (SELECT COUNT(*) AS count_combination FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id GROUP BY T3.element))) AS percentage FROM bond AS T1
SELECT SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) * 1.0 / COUNT(bond.bond_id) FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-'
SELECT COUNT(*) FROM atom WHERE element IN ('c', 'h');
SELECT DISTINCT c.atom_id2 FROM connected AS c INNER JOIN atom AS a ON c.atom_id = a.atom_id WHERE a.element = 's'
SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'sn'
SELECT COUNT(DISTINCT T4.element) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.bond_id = T3.bond_id INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T1.bond_type = '-'
SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T3.molecule_id = T4.molecule_id WHERE T3.bond_type = '#' AND (T1.element = 'p' OR T1.element = 'br')
SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'
SELECT (SUM(CASE WHEN T3.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(T3.atom_id)) AS percent FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id WHERE T1.bond_type = '-'
SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')
SELECT molecule_id FROM molecule WHERE label = '-'
SELECT COUNT(molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+'
SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id BETWEEN 'TR000' AND 'TR050'
SELECT DISTINCT T3.element  FROM connected AS T1  INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id  INNER JOIN atom AS T3 ON T1.atom_id = T3.atom_id  WHERE T2.bond_id = 'TR001_10_11'
SELECT COUNT(DISTINCT T1.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'i'
SELECT label, COUNT(*) as count FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'ca' GROUP BY label ORDER BY count DESC LIMIT 1
SELECT COUNT(DISTINCT T3.element) = 2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_id = 'TR001_1_8' AND T3.element IN ('cl', 'c')
SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN atom AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.element = 'c' AND T2.bond_type = '#' AND T1.label = '-' LIMIT 2
SELECT SUM(CASE WHEN T1.element = 'cl' THEN 1 ELSE 0 END) * 100.0 / COUNT(T2.molecule_id) AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR001'
SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='
SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'
SELECT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_id = 'TR005_16_26'
SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'
SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'
SELECT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'
SELECT T2.element, COUNT(*) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND SUBSTR(T2.atom_id, 7, 1) = '4' GROUP BY T2.element
SELECT SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS ratio, m.label  FROM atom AS a  INNER JOIN molecule AS m ON a.molecule_id = m.molecule_id  WHERE a.molecule_id = 'TR006'
SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'
SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T1.element = 'te'
SELECT element FROM atom WHERE molecule_id = SUBSTR('TR001_10_11', 1, 5) AND (atom_id = 'TR001_10' OR atom_id = 'TR001_11')
SELECT (COUNT(DISTINCT T1.molecule_id) * 100.0 / (SELECT COUNT(DISTINCT T2.molecule_id) FROM molecule AS T2)) AS percent FROM bond AS T1 WHERE T1.bond_type = '#'
SELECT (SUM(CASE WHEN T1.bond_type = ' = ' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.bond_id)) AS percent FROM bond AS T1 WHERE T1.molecule_id = 'TR047'
SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS IsCarcinogenic FROM molecule WHERE molecule_id = 'TR151';
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR151'
SELECT COUNT(DISTINCT molecule_id) FROM molecule WHERE label = '+';
SELECT T1.atom_id  FROM atom AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T1.element = 'c'  AND CAST(SUBSTR(T2.molecule_id, 3, 3) AS INTEGER) > 10  AND CAST(SUBSTR(T2.molecule_id, 3, 3) AS INTEGER) < 50
SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'
SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'
SELECT COUNT(T3.atom_id) FROM molecule AS T1 INNER JOIN atom AS T3 ON T1.molecule_id = T3.molecule_id WHERE T1.label = '+' AND T3.element = 'h'
SELECT T3.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_id = 'TR00_1_2' AND T3.atom_id = 'TR00_1'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'
SELECT (COUNT(DISTINCT CASE WHEN T1.label = '+' AND T2.element = 'h' THEN T1.molecule_id END) * 100.0) / COUNT(DISTINCT CASE WHEN T1.label = '+' THEN T1.molecule_id END) AS percentage FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule WHERE molecule_id = 'TR124'
SELECT atom_id FROM atom WHERE molecule_id = 'TR186';
SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19';
SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_id = 'TR001_2_4'
SELECT COUNT(T1.bond_id) AS double_bond_count, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006' AND T1.bond_type = '=' GROUP BY T2.label
SELECT T1.molecule_id, T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'
SELECT T1.bond_id, T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'
SELECT T2.molecule_id, T3.element  FROM bond AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  INNER JOIN connected AS T4 ON T1.bond_id = T4.bond_id  INNER JOIN atom AS T3 ON T4.atom_id = T3.atom_id  WHERE T1.bond_type = '#'
SELECT DISTINCT T3.element FROM connected AS T1 INNER JOIN atom AS T3 ON T1.atom_id = T3.atom_id WHERE T1.bond_id = 'TR000_2_3' UNION SELECT DISTINCT T3.element FROM connected AS T1 INNER JOIN atom AS T3 ON T1.atom_id2 = T3.atom_id WHERE T1.bond_id = 'TR000_2_3'
SELECT COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id WHERE T3.element = 'cl'
WITH AtomIDs AS (SELECT atom_id FROM atom WHERE molecule_id = 'TR346') SELECT atom_id, (SELECT COUNT(DISTINCT bond_type) FROM bond WHERE molecule_id = 'TR346') AS bond_type_count FROM AtomIDs;
SELECT COUNT(DISTINCT T1.molecule_id) AS total_double_bonds,         SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS carcinogenic_count FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='
SELECT COUNT(DISTINCT T1.molecule_id)  FROM molecule AS T1  LEFT JOIN atom AS T3 ON T1.molecule_id = T3.molecule_id AND T3.element = 's'  LEFT JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id AND T2.bond_type = ' = '  WHERE T3.atom_id IS NULL AND T2.bond_id IS NULL
SELECT label FROM molecule WHERE molecule_id = (SELECT molecule_id FROM bond WHERE bond_id = 'TR001_2_4')
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR005';
SELECT COUNT(bond_id) FROM bond WHERE bond_type = '-';
SELECT T1.molecule_id FROM molecule AS T1 WHERE T1.label = '+' AND T1.molecule_id IN (SELECT T2.molecule_id FROM atom AS T2 WHERE T2.element = 'cl')
SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.element = 'c'
SELECT SUM(CASE WHEN T1.label = '+' AND T2.element = 'cl' THEN 1 ELSE 0 END) * 1.0 / COUNT(DISTINCT T1.molecule_id) AS percentage FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id
SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7';
SELECT COUNT(DISTINCT T3.element) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T1.bond_id = 'TR001_3_4'
SELECT bond_type FROM bond WHERE bond_id IN (SELECT bond_id FROM connected WHERE atom_id = 'TR000_1' AND atom_id2 = 'TR000_2' OR atom_id = 'TR000_2' AND atom_id2 = 'TR000_1')
SELECT T2.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id IN ('TR000_2', 'TR000_4') GROUP BY T2.molecule_id HAVING COUNT(DISTINCT T1.atom_id) = 2
SELECT element FROM atom WHERE atom_id = 'TR000_1';
SELECT label FROM molecule WHERE molecule_id = 'TR000';
SELECT (SUM(CASE WHEN bond_type = '-' THEN 1 ELSE 0 END) * 100.0 / COUNT(bond_id)) AS percentage FROM bond
SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'n'
SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T3.bond_type = '='
SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5
SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '=' AND T1.molecule_id = 'TR024'
SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) = (SELECT MAX(atom_count) FROM (SELECT COUNT(T2.atom_id) AS atom_count FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T1.molecule_id))
SELECT (SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) * 100.0) / COUNT(T2.molecule_id) AS percentage FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T2.element = 'h' AND T3.bond_type = '#';
SELECT COUNT(molecule_id) FROM molecule WHERE label = '+';
SELECT COUNT(DISTINCT T1.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.molecule_id BETWEEN 'TR004' AND 'TR010'
SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR008' AND element = 'c';
SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'
SELECT COUNT(DISTINCT M.molecule_id) FROM molecule AS M INNER JOIN bond AS B ON M.molecule_id = B.molecule_id INNER JOIN connected AS C ON B.bond_id = C.bond_id INNER JOIN atom AS A ON C.atom_id = A.atom_id WHERE A.element = 'o' AND B.bond_type = '='
SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN connected AS T3 ON T1.bond_id = T3.bond_id INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '-'
SELECT DISTINCT T1.element, T3.bond_type  FROM atom AS T1  INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id  INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id  WHERE T1.molecule_id = 'TR016'
SELECT T1.atom_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.bond_type = ' = ' AND T2.molecule_id = 'TR012'
SELECT DISTINCT T1.atom_id  FROM atom AS T1  INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.label = '+' AND T1.element = 'o'
SELECT uuid FROM cards WHERE cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT name FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL)
SELECT T1.name FROM cards AS T1 WHERE T1.faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost) FROM cards)
SELECT name FROM cards WHERE frameVersion = '2015' AND edhrecRank < 100;
SELECT T1.uuid FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'
SELECT T2.status FROM legalities AS T2 INNER JOIN cards AS T1 ON T1.uuid = T2.uuid WHERE T1.types = 'Artifact' AND T1.side IS NULL AND T2.format = 'vintage'
SELECT T1.id, T1.artist  FROM cards AS T1  INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid  WHERE (T1.power = '*' OR T1.power IS NULL) AND T2.format = 'commander' AND T2.status = 'Legal'
SELECT T1.name, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE LOWER(T1.artist) = LOWER('Stephen Daniele') AND T1.hasContentWarning = 1
SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Sublime Epiphany' AND number = '74s')
SELECT T1.name, T1.artist, T1.isPromo  FROM cards AS T1  INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid  WHERE T1.isPromo = 1  GROUP BY T1.uuid  HAVING COUNT(T2.uuid) = (SELECT MAX(ruling_count) FROM (SELECT COUNT(T2.uuid) AS ruling_count FROM rulings AS T2 GROUP BY T2.uuid))
SELECT T4.language FROM foreign_data AS T4 INNER JOIN cards AS T3 ON T4.uuid = T3.uuid WHERE T3.name = 'Annul' AND T3.number = '29'
SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'
SELECT (COUNT(T1.uuid) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage  FROM foreign_data AS T1  WHERE T1.language = 'Chinese Simplified';
SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'
SELECT COUNT(DISTINCT type) FROM cards WHERE artist = 'Aaron Boyd';
SELECT keywords FROM cards WHERE name = 'Angel of Mercy';
SELECT COUNT(*) FROM cards WHERE power = '*';
SELECT T1.promoTypes FROM cards AS T1 WHERE T1.name = 'Duress'
SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';
SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'
SELECT DISTINCT T3.language FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setCode WHERE T1.name = 'Angel of Mercy'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'restricted' AND T1.isTextless = 0
SELECT text FROM rulings WHERE uuid = (SELECT uuid FROM cards WHERE name = 'Condemn')
SELECT COUNT(T1.uuid) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'restricted' AND T2.isStarter = 1
SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'
SELECT type FROM cards WHERE name = 'Benalish Knight';
SELECT T2.format FROM legalities AS T2 WHERE T2.uuid = (SELECT T1.uuid FROM cards AS T1 WHERE T1.name = 'Benalish Knight')
SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'
SELECT (SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) * 100.0 / COUNT(id)) AS percentage FROM cards
SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1
SELECT COUNT(T1.uuid) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'
SELECT (COUNT(CASE WHEN language = 'French' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards WHERE isStorySpotlight = 1;
SELECT COUNT(*) FROM cards WHERE toughness = '99';
SELECT name FROM cards WHERE artist = 'Aaron Boyd';
SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND availability = 'mtgo';
SELECT id FROM cards WHERE convertedManaCost = 0;
SELECT DISTINCT layout FROM cards WHERE keywords LIKE '%flying%'
SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes IS NOT NULL AND subtypes != 'Angel';
SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT id FROM cards WHERE duelDeck = 'a';
SELECT edhrecRank FROM cards WHERE frameVersion = '2015'
SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'
SELECT COUNT(*) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'Banned' AND T2.borderColor = 'white'
SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'
SELECT T2.text FROM rulings AS T2 INNER JOIN cards AS T1 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'
SELECT COUNT(T1.uuid), T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future' AND LOWER(T2.status) = 'legal' GROUP BY T2.status
SELECT T1.name, T1.colors FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.code = 'OGW'
SELECT T1.name, T2.translation, T2.language FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.setCode = '10E' AND T1.convertedManaCost = 5
SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'
SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B' AND T2.language IS NOT NULL
SELECT T2.name FROM cards AS T2 INNER JOIN rulings AS T1 ON T2.uuid = T1.uuid WHERE T2.rarity = 'uncommon' ORDER BY T1.date ASC LIMIT 3
SELECT COUNT(*) FROM cards WHERE artist = 'John Avon' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NULL;
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE artist = 'UDON' AND availability = 'mtgo' AND hand = -1;
SELECT COUNT(*) FROM cards WHERE frameVersion = '1993' AND availability = 'paper' AND hasContentWarning = 1;
SELECT manaCost FROM cards WHERE layout = 'normal' AND frameVersion = '2003' AND borderColor = 'black' AND availability IN ('paper', 'mtgo')
SELECT SUM(manaCost) FROM cards WHERE artist = 'Rob Alexander';
SELECT DISTINCT types FROM cards WHERE availability = 'arena' UNION SELECT DISTINCT supertypes FROM cards WHERE availability = 'arena';
SELECT setCode FROM set_translations WHERE language = 'Spanish'
SELECT (COUNT(CASE WHEN hand = '+3' THEN 1 END) * 100.0 / COUNT(id)) AS percentage FROM cards WHERE frameEffects = 'legendary'
SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1)) AS percentage FROM cards WHERE isStorySpotlight = 1 AND isTextless = 0;
SELECT C.name, (SUM(CASE WHEN F.language = 'Spanish' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM cards AS C LEFT JOIN foreign_data AS F ON C.uuid = F.uuid GROUP BY C.name;
SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.baseSetSize = 309
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Commander' AND T2.language = 'Portuguese (Brazil)'
SELECT T1.uuid FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE LOWER(T2.status) = 'legal' AND LOWER(T1.types) LIKE '%creature%'
SELECT DISTINCT types FROM cards  WHERE uuid IN (SELECT uuid FROM foreign_data WHERE language = 'German')  AND subtypes IS NOT NULL  AND supertypes IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE power IS NULL AND (text LIKE '%triggered ability%' OR flavorText LIKE '%triggered ability%')
SELECT COUNT(*) FROM cards AS C INNER JOIN legalities AS L ON C.uuid = L.uuid INNER JOIN rulings AS R ON C.uuid = R.uuid WHERE L.format = 'premodern' AND R.text = 'This is a triggered mana ability' AND C.side IS NULL
SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'
SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE LOWER(T2.text) = LOWER("Das perfekte Gegenmittel zu einer dichten Formation")
SELECT T4.name FROM foreign_data AS T4 INNER JOIN cards AS T1 ON T4.uuid = T1.uuid WHERE T4.language = 'French' AND T1.type LIKE 'Creature%' AND T1.layout = 'normal' AND T1.borderColor = 'black' AND T1.artist = 'Matthew D. Wilson'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10'
SELECT DISTINCT T2.language  FROM sets AS T1  INNER JOIN set_translations AS T2 ON T1.code = T2.setCode  WHERE T1.baseSetSize = 180 AND T1.block = 'Ravnica'
SELECT (COUNT(CASE WHEN T1.hasContentWarning = 0 THEN 1 END) * 100.0 / COUNT(T1.id)) AS percentage FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'
SELECT (SUM(CASE WHEN FD.language = 'French' AND (C.power IS NULL OR C.power = '*') THEN 1 ELSE 0 END) * 100.0) / NULLIF(SUM(CASE WHEN C.power IS NULL OR C.power = '*' THEN 1 ELSE 0 END), 0) AS percentage FROM cards AS C INNER JOIN foreign_data AS FD ON C.uuid = FD.uuid;
SELECT (COUNT(CASE WHEN T2.type = 'expansion' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Japanese'
SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'
SELECT COUNT(*) FROM cards WHERE borderColor = 'borderless' AND edhrecRank > 12000;
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1;
SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes = 'arenaleague' ORDER BY name ASC LIMIT 3
SELECT language FROM foreign_data WHERE multiverseid = 149934;
SELECT T1.cardKingdomFoilId, T1.cardKingdomId FROM cards AS T1 WHERE T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL ORDER BY T1.cardKingdomFoilId ASC LIMIT 3
SELECT (COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) * 100.0 / COUNT(CASE WHEN isTextless = 1 THEN 1 END)) AS proportion FROM cards
SELECT number FROM cards WHERE isAlternative = 0 AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%'
SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3
SELECT DISTINCT ST.language  FROM set_translations AS ST  INNER JOIN sets AS S ON ST.setCode = S.code  WHERE S.mcmName = 'Archenemy' AND ST.setCode = 'ARC'
SELECT T1.name, T2.translation FROM sets AS T1 LEFT JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 5
SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 206
SELECT T2.id, T2.name  FROM set_translations AS T1  INNER JOIN sets AS T2 ON T1.setCode = T2.code  WHERE T1.language = 'Italian' AND T2.block = 'Shadowmoor'  GROUP BY T2.id, T2.name  ORDER BY T2.name  LIMIT 2
SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.isForeignOnly = 0 AND T1.isFoilOnly = 1 AND T2.language = 'Japanese'
SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' ORDER BY T1.baseSetSize DESC LIMIT 1
SELECT (COUNT(*) * 1.0 / (SELECT COUNT(*) FROM cards)) * 100 FROM cards AS C JOIN foreign_data AS F ON C.uuid = F.uuid WHERE F.language = 'Chinese Simplified' AND C.isOnlineOnly = 1
SELECT COUNT(DISTINCT T1.code) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')
SELECT COUNT(id), id FROM cards WHERE borderColor = 'black' GROUP BY id;
SELECT id FROM cards WHERE frameEffects = 'extendedart'
SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1;
SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.id = 174
SELECT name FROM sets WHERE code = 'ALL';
SELECT DISTINCT T1.language FROM foreign_data AS T1 WHERE T1.name = 'A Pedra Fellwar'
SELECT code FROM sets WHERE releaseDate = '2007-07-13'
SELECT baseSetSize, code FROM sets WHERE block IN ('Masques', 'Mirage');
SELECT code FROM sets WHERE type = 'expansion';
SELECT FD.name, C.type FROM foreign_data AS FD INNER JOIN cards AS C ON FD.uuid = C.uuid WHERE C.watermark = 'boros'
SELECT DISTINCT FD.language, FD.flavorText, C.type  FROM cards AS C  INNER JOIN foreign_data AS FD ON C.uuid = FD.uuid  WHERE C.watermark = 'colorpie'
SELECT (COUNT(CASE WHEN C.convertedManaCost = 10 THEN 1 END) * 100.0 / COUNT(*)) AS percentage  FROM cards AS C  INNER JOIN sets AS S ON C.setCode = S.code  WHERE S.name = 'Abyssal Horror'
SELECT code FROM sets WHERE type = 'commander'
SELECT T1.name, T2.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'abzan'
SELECT T1.language, T2.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'azorius'
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'
SELECT name FROM cards WHERE isTextless = 0
SELECT convertedManaCost FROM cards WHERE name = 'Ancestor''s Chosen'
SELECT COUNT(*) FROM cards WHERE borderColor = 'white' AND (power = '*' OR power IS NULL);
SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL;
SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer';
SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle';
SELECT COUNT(DISTINCT artist) FROM cards WHERE borderColor = 'black' AND availability LIKE '%arena,mtgo%'
SELECT name, convertedManaCost FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1
SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'
SELECT name FROM cards WHERE frameVersion = '2003' ORDER BY convertedManaCost DESC LIMIT 3
SELECT T3.translation FROM set_translations AS T3 INNER JOIN sets AS T2 ON T3.setCode = T2.code INNER JOIN cards AS T1 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen' AND T3.language = 'Italian';
SELECT COUNT(T3.id) FROM set_translations AS T3 INNER JOIN sets AS S ON T3.setCode = S.code WHERE S.id IN (SELECT T1.id FROM cards AS T1 WHERE T1.name = 'Angel of Mercy')
SELECT T2.name FROM cards AS T2 INNER JOIN sets AS T1 ON T1.code = T2.setCode INNER JOIN set_translations AS T3 ON T3.setCode = T1.code WHERE T3.translation = 'Hauptset Zehnte Edition'
SELECT EXISTS (SELECT 1 FROM foreign_data WHERE language = 'Korean' AND uuid IN (SELECT uuid FROM cards WHERE name = 'Ancestor''s Chosen'))
SELECT COUNT(*) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'
SELECT baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'
SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'
SELECT EXISTS (SELECT 1 FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Angel of Mercy' AND T2.mtgoCode IS NOT NULL)
SELECT T1.releaseDate FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Ancestor''s Chosen'
SELECT T2.type FROM sets AS T2 INNER JOIN set_translations AS T1 ON T2.code = T1.setCode WHERE T1.translation = 'Hauptset Zehnte Edition'
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian'
SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Adarkar Valkyrie' AND T1.isForeignOnly = 1
SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian' AND T1.baseSetSize < 10
SELECT COUNT(*) FROM `cards` AS T1 INNER JOIN `sets` AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.borderColor = 'black'
SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost = (SELECT MAX(T3.convertedManaCost) FROM cards AS T3 INNER JOIN sets AS T4 ON T3.setCode = T4.code WHERE T4.name = 'Coldsnap')
SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')
SELECT T1.* FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.number = '4'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.convertedManaCost > 5 AND T2.name = 'Coldsnap' AND (T1.power IS NULL OR T1.power = '*')
SELECT T1.flavorText FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Italian' AND T2.name = 'Ancestor''s Chosen'
SELECT DISTINCT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.flavorText IS NOT NULL
SELECT T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'
SELECT R.text  FROM sets AS S  INNER JOIN cards AS C ON S.code = C.setCode  INNER JOIN foreign_data AS FD ON C.uuid = FD.uuid  INNER JOIN rulings AS R ON C.uuid = R.uuid  WHERE S.name = 'Coldsnap' AND FD.language = 'Italian'
SELECT T3.name  FROM cards AS T1  INNER JOIN sets AS T2 ON T1.setCode = T2.code  INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid  WHERE T2.name = 'Coldsnap' AND T3.language = 'Italian' AND T1.convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = T2.code)
SELECT T1.date FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Reminisce'
SELECT (SUM(CASE WHEN C.convertedManaCost = 7 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM cards AS C INNER JOIN sets AS S ON C.setCode = S.code WHERE S.name = 'Coldsnap'
SELECT (COUNT(CASE WHEN T1.cardKingdomFoilId = T1.cardKingdomId AND T1.cardKingdomId IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap'
SELECT code FROM sets WHERE releaseDate = '2017-07-14';
SELECT keyruneCode FROM sets WHERE code = 'PKHC'
SELECT mcmId FROM sets WHERE code = 'SS2';
SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'
SELECT type FROM sets WHERE name LIKE '%From the Vault: Lore%'
SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized';
SELECT T1.text, CASE WHEN T2.hasContentWarning = 1 THEN 'Has missing or degraded properties' ELSE 'Does not have missing or degraded properties' END FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'Jim Pavelec'
SELECT T1.releaseDate FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Evacuation'
SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Rinascita di Alara'
SELECT T2.type FROM sets AS T2 INNER JOIN set_translations AS T1 ON T1.setCode = T2.code WHERE T1.translation = 'Huitième édition'
SELECT T3.name FROM set_translations AS T1 INNER JOIN cards AS T2 ON T1.setCode = T2.setCode INNER JOIN sets AS T3 ON T2.setCode = T3.code WHERE T1.language = 'French' AND T2.name = 'Tendo Ice Bridge'
SELECT COUNT(T1.translation) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Salvat 2011' AND T1.translation IS NOT NULL
SELECT T2.translation FROM set_translations AS T2 INNER JOIN sets AS T3 ON T2.setCode = T3.code INNER JOIN cards AS T1 ON T3.code = T1.setCode WHERE T2.language = 'Japanese' AND T1.name = 'Fellwar Stone'
SELECT T2.name FROM cards AS T2 INNER JOIN sets AS T1 ON T2.setCode = T1.code WHERE T1.name = 'Journey into Nyx Hero''s Path' ORDER BY T2.convertedManaCost DESC LIMIT 1
SELECT releaseDate FROM sets WHERE code = (SELECT setCode FROM set_translations WHERE translation = 'Ola de frío')
SELECT T1.type FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setCode WHERE T2.name = 'Samite Pilgrim'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'World Championship Decks 2004' AND T1.convertedManaCost = 3
SELECT T1.translation FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Chinese Simplified' AND T2.name = 'Mirrodin'
SELECT (SUM(CASE WHEN S.isNonFoilOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(ST.language)) AS percentage_non_foil FROM set_translations AS ST INNER JOIN sets AS S ON ST.setCode = S.code INNER JOIN cards AS C ON S.code = C.setCode WHERE ST.language = 'Japanese'
SELECT (SUM(CASE WHEN c.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / NULLIF(SUM(CASE WHEN st.language = 'Portuguese (Brazil)' THEN 1 ELSE 0 END), 0)) AS percentage  FROM cards AS c  INNER JOIN set_translations AS st ON c.uuid = st.setCode  WHERE st.language = 'Portuguese (Brazil)';
SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1;
SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1
SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1;
SELECT MAX(frameEffects) FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL;
SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND hasFoil = 0 AND duelDeck = 'a';
SELECT id FROM sets WHERE type = 'commander' AND totalSetSize = (SELECT MAX(totalSetSize) FROM sets WHERE type = 'commander')
SELECT T1.name, T1.manaCost FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'duel' ORDER BY T1.manaCost DESC LIMIT 10
SELECT MIN(T1.originalReleaseDate) AS oldest_release_date, T4.format  FROM cards AS T1  INNER JOIN legalities AS T4 ON T1.uuid = T4.uuid  WHERE T1.rarity = 'mythic' AND T4.status = 'Legal' GROUP BY T4.format;
SELECT COUNT(*) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'Volkan Baga' AND T1.language = 'French'
SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'
SELECT T1.format, T2.name  FROM legalities AS T1  INNER JOIN cards AS T2 ON T1.uuid = T2.uuid  WHERE T1.status = 'Banned'  GROUP BY T1.format  ORDER BY COUNT(*) DESC  LIMIT 1
SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE LOWER(T2.name) = 'battlebond'
SELECT DISTINCT L.format FROM legalities AS L INNER JOIN cards AS C ON L.uuid = C.uuid WHERE C.artist IN (SELECT C2.artist FROM cards AS C2 GROUP BY C2.artist HAVING COUNT(*) = (SELECT MIN(artist_count) FROM (SELECT COUNT(*) AS artist_count FROM cards GROUP BY artist)))
SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = '1997' AND T1.artist = 'D. Alexander Gregory' AND T1.hasContentWarning = 1 AND T2.format = 'legacy'
SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'
SELECT AVG(set_count) AS annual_average, common_language  FROM (      SELECT COUNT(s.id) AS set_count,             (SELECT language FROM foreign_data WHERE uuid IN (SELECT uuid FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31') GROUP BY language ORDER BY COUNT(language) DESC LIMIT 1) AS common_language      FROM sets AS s      WHERE s.releaseDate BETWEEN '2012-01-01' AND '2015-12-31'      GROUP BY strftime('%Y', s.releaseDate)  )
SELECT DISTINCT artist FROM cards WHERE borderColor = 'black' AND availability = 'arena';
SELECT T1.uuid FROM legalities AS T1 WHERE UPPER(T1.format) = 'OLDSCHOOL' AND (UPPER(T1.status) = 'BANNED' OR UPPER(T1.status) = 'RESTRICTED')
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper';
SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'Kev Walker' ORDER BY T1.date DESC
SELECT T1.name, T3.format FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T2.name = 'Hour of Devastation' AND T3.status = 'Legal'
SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Korean' GROUP BY T1.name HAVING SUM(T2.language LIKE '%Japanese%') = 0
SELECT DISTINCT frameVersion FROM cards WHERE artist = 'Allen Williams' UNION SELECT c.frameVersion FROM cards AS c INNER JOIN legalities AS l ON c.uuid = l.uuid WHERE l.status = 'banned'
SELECT DisplayName, MAX(Reputation) as Reputation FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') GROUP BY DisplayName ORDER BY Reputation DESC LIMIT 1
SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2014';
SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01 00:00:00';
SELECT DisplayName FROM users ORDER BY Views DESC LIMIT 1;
SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1;
SELECT COUNT(*) FROM users WHERE Views > 10 AND STRFTIME('%Y', CreationDate) > 2013;
SELECT COUNT(T2.Id) FROM posts AS T2 INNER JOIN users AS T1 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'csgillespie'
SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'
SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1
SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts)
SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT DisplayName FROM users WHERE Id = (SELECT LastEditorUserId FROM posts WHERE Title = 'Examples for teaching: Correlation does not mean causation')
SELECT COUNT(*) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL
SELECT DISTINCT T2.DisplayName FROM users AS T2 INNER JOIN posts AS T1 ON T2.Id = T1.OwnerUserId WHERE T1.ClosedDate IS NOT NULL
SELECT COUNT(*) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Age > 65 AND T1.Score >= 20
SELECT Location FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Title = 'Eliciting priors from experts')
SELECT P.Body FROM tags AS T INNER JOIN posts AS P ON T.ExcerptPostId = P.Id WHERE T.TagName = 'bayesian'
SELECT Body FROM posts WHERE Id = (SELECT ExcerptPostId FROM tags WHERE Count = (SELECT MAX(Count) FROM tags))
SELECT COUNT(*) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT COUNT(*) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND STRFTIME('%Y', T1.Date) = '2011'
SELECT T2.DisplayName FROM users AS T2 WHERE T2.Id = (SELECT UserId FROM badges GROUP BY UserId ORDER BY COUNT(Id) DESC LIMIT 1)
SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'
SELECT (COUNT(T1.Id) * 1.0 / COUNT(DISTINCT T2.DisplayName)) AS AverageBadges FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200
SELECT (COUNT(CASE WHEN T2.Age > 65 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 20
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19';
SELECT CreationDate FROM votes GROUP BY CreationDate HAVING COUNT(Id) = (SELECT MAX(vote_count) FROM (SELECT COUNT(Id) AS vote_count FROM votes GROUP BY CreationDate))
SELECT COUNT(Id) FROM badges WHERE Name = 'Revival';
SELECT T1.Title FROM posts AS T1 INNER JOIN (SELECT PostId FROM comments WHERE Score = (SELECT MAX(Score) FROM comments)) AS T2 ON T1.Id = T2.PostId
SELECT COUNT(C.Id) FROM comments AS C WHERE C.PostId = (SELECT P.Id FROM posts AS P WHERE P.ViewCount = 1910);
SELECT T2.FavoriteCount FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 3025 AND T1.CreationDate = '2014-04-23 20:29:39.0'
SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ParentId = 107829 AND T2.CommentCount = 1 LIMIT 1
SELECT P.ClosedDate IS NOT NULL FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE C.UserId = 23853 AND C.CreationDate = '2013-07-12 09:08:18.0'
SELECT Reputation FROM users WHERE Id = (SELECT OwnerUserId FROM posts WHERE Id = 65041)
SELECT COUNT(T2.Id) FROM posts AS T2 INNER JOIN users AS T1 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'
SELECT T2.DisplayName FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Id = 6347
SELECT COUNT(T1.Id) FROM votes AS T1 WHERE T1.PostId IN (SELECT T2.Id FROM posts AS T2 WHERE T2.Title LIKE '%data visualization%')
SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'
SELECT COUNT(p.Id) * 1.0 / NULLIF(COUNT(v.Id), 0) AS post_to_votes_ratio  FROM posts AS p  LEFT JOIN votes AS v ON p.Id = v.PostId  WHERE p.OwnerUserId = 24
SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';
SELECT Text FROM comments WHERE Score = 17;
SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com';
SELECT T2.Name FROM badges AS T2 INNER JOIN users AS T1 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'
SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'thank you user93!'
SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'A Lion'
SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Understanding what Dassault iSight is doing?'
SELECT C.Text FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE P.Title = 'How does gentle boosting differ from AdaBoost?'
SELECT DISTINCT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Necromancer' LIMIT 10
SELECT U.DisplayName FROM posts AS P INNER JOIN users AS U ON P.LastEditorUserId = U.Id WHERE P.Title = 'Open source tools for visualizing multi-dimensional data?'
SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'
SELECT SUM(T1.Score) AS TotalScore, T2.WebsiteUrl  FROM posts AS T1  INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id  WHERE T2.DisplayName = 'Yevgeny'
SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'
SELECT SUM(T1.BountyAmount) FROM votes AS T1 WHERE T1.PostId IN (SELECT T2.Id FROM posts AS T2 WHERE T2.Title LIKE '%data%')
SELECT T3.DisplayName FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T1.UserId = T3.Id WHERE T1.BountyAmount = 50 AND T2.Title LIKE '%variance%'
SELECT AVG(P.ViewCount), P.Title, C.Text, C.Score FROM posts AS P INNER JOIN comments AS C ON P.Id = C.PostId WHERE P.Tags LIKE '%humor%' GROUP BY P.Id
SELECT COUNT(*) FROM comments WHERE UserId = 13;
SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT Id FROM users WHERE Views = (SELECT MIN(Views) FROM users);
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Supporter' AND STRFTIME('%Y', Date) = '2011';
SELECT COUNT(*) FROM (SELECT UserId, COUNT(Name) AS badge_count FROM badges GROUP BY UserId HAVING badge_count > 5)
SELECT COUNT(DISTINCT T1.Id)  FROM users AS T1  INNER JOIN badges AS T2 ON T1.Id = T2.UserId  WHERE T1.Location = 'New York'  AND T2.Name IN ('Teacher', 'Supporter')  GROUP BY T1.Id  HAVING COUNT(DISTINCT T2.Name) = 2
SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1
SELECT DISTINCT U.Id  FROM users AS U  JOIN posts AS P ON U.Id = P.OwnerUserId  JOIN postHistory AS PH ON P.Id = PH.PostId  WHERE U.Views >= 1000  GROUP BY PH.UserId, PH.PostId  HAVING COUNT(PH.Id) = 1
WITH CommentCounts AS (     SELECT UserId, COUNT(Id) AS CommentCount      FROM comments      GROUP BY UserId ), MaxComments AS (     SELECT MAX(CommentCount) AS MaxCount      FROM CommentCounts ) SELECT T2.Name  FROM badges AS T2  JOIN CommentCounts AS CC ON T2.UserId = CC.UserId  WHERE CC.CommentCount = (SELECT MaxCount FROM MaxComments);
SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'
SELECT      (          (COUNT(CASE WHEN strftime('%Y', Date) = '2010' AND Name = 'Students' THEN 1 END) * 100.0 / COUNT(Name)) -          (COUNT(CASE WHEN strftime('%Y', Date) = '2011' AND Name = 'Students' THEN 1 END) * 100.0 / COUNT(Name))     ) AS percentage_difference FROM badges
SELECT DISTINCT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS UniqueUserCount FROM postHistory AS T1 WHERE T1.PostId = 3720
SELECT T1.Id, T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.RelatedPostId WHERE T2.PostId = 61217
SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Id = 395
SELECT T1.Id AS PostId, T1.OwnerUserId AS UserId FROM posts AS T1 WHERE T1.Score > 60
SELECT SUM(p.FavoriteCount) FROM posts AS p INNER JOIN votes AS v ON p.Id = v.PostId WHERE p.OwnerUserId = 686 AND STRFTIME('%Y', p.CreaionDate) = '2011'
SELECT AVG(T1.UpVotes) AS AverageUpVotes, AVG(T1.Age) AS AverageAge  FROM users AS T1  INNER JOIN (SELECT OwnerUserId              FROM posts              GROUP BY OwnerUserId              HAVING COUNT(OwnerUserId) > 10) AS T2  ON T1.Id = T2.OwnerUserId
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Announcer';
SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08'
SELECT COUNT(*) FROM comments WHERE Score > 60;
SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'
SELECT COUNT(Id) FROM posts WHERE Score = 10;
SELECT DISTINCT T1.Name  FROM badges AS T1  INNER JOIN users AS T2 ON T1.UserId = T2.Id  WHERE T2.Reputation = (SELECT MAX(Reputation) FROM users)
SELECT T2.Reputation FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0'
SELECT T2.Name FROM badges AS T2 INNER JOIN users AS T1 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'
SELECT T1.Date FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'Rochester, NY'
SELECT (COUNT(DISTINCT T1.UserId) * 100.0 / (SELECT COUNT(*) FROM users)) AS percentage FROM badges AS T1 WHERE T1.Name = 'Teacher'
SELECT (COUNT(CASE WHEN U.Age BETWEEN 13 AND 18 THEN 1 END) * 100.0) / COUNT(*) AS percentage  FROM users AS U  WHERE U.Id IN (SELECT B.UserId FROM badges AS B WHERE B.Name = 'Organizer')
SELECT Score FROM comments WHERE PostId = (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:19:56.0')
SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE CreationDate = '2010-07-19 19:37:33.0')
SELECT DISTINCT T1.Age  FROM users AS T1  INNER JOIN badges AS T2 ON T1.Id = T2.UserId  WHERE T1.Location = 'Vienna, Austria'
SELECT COUNT(*) FROM users AS U INNER JOIN badges AS B ON U.Id = B.UserId WHERE U.Age BETWEEN 19 AND 65 AND B.Name = 'Supporter'
SELECT T2.Views FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Date = '2010-07-19 19:39:08.0'
SELECT DISTINCT T2.Name FROM badges AS T2 INNER JOIN users AS T1 ON T2.UserId = T1.Id WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)
SELECT Name FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Sharpie')
SELECT COUNT(DISTINCT T1.UserId) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Supporter' AND T2.Age > 65
SELECT DisplayName FROM users WHERE Id = 30;
SELECT COUNT(Id) FROM users WHERE Location = 'New York';
SELECT COUNT(Id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65;
SELECT DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)
SELECT      COUNT(CASE WHEN STRFTIME('%Y', CreationDate) = '2010' THEN Id END) * 1.0 /     COUNT(CASE WHEN STRFTIME('%Y', CreationDate) = '2011' THEN Id END) AS ratio FROM votes
SELECT DISTINCT T3.TagName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN tags AS T3 ON T2.Id = T3.WikiPostId WHERE LOWER(T1.DisplayName) = LOWER('John Stauffer')
SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Daniel Vassallo'
SELECT COUNT(*) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harlan'
SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'slashnick' ORDER BY T1.AnswerCount DESC LIMIT 1
SELECT T1.DisplayName, SUM(T2.ViewCount) AS TotalViewCount FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY T1.DisplayName ORDER BY TotalViewCount DESC LIMIT 1;
SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN (SELECT PostId FROM votes GROUP BY PostId HAVING COUNT(Id) > 4) AS T3 ON T1.Id = T3.PostId WHERE T2.DisplayName = 'Matt Parker'
SELECT COUNT(*) FROM comments WHERE Score < 60 AND PostId IN (SELECT T1.Id FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Neil McGuigan')
SELECT DISTINCT T3.TagName FROM tags AS T3 INNER JOIN posts AS T2 ON T3.ExcerptPostId = T2.Id INNER JOIN users AS T1 ON T2.OwnerUserId = T1.Id LEFT JOIN comments AS C ON T2.Id = C.PostId WHERE T1.DisplayName = 'Mark Meckes' AND C.PostId IS NULL
SELECT DISTINCT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Organizer'
SELECT (COUNT(CASE WHEN T.TagName = 'r' THEN P.Id END) * 100.0 / COUNT(CASE WHEN U.DisplayName = 'Community' THEN P.Id END)) AS percentage  FROM posts AS P  INNER JOIN tags AS T ON P.Id = T.ExcerptPostId  INNER JOIN users AS U ON P.OwnerUserId = U.Id
SELECT      SUM(CASE WHEN T2.DisplayName = 'mornington' THEN T1.ViewCount ELSE 0 END) -      SUM(CASE WHEN T2.DisplayName = 'Amos' THEN T1.ViewCount ELSE 0 END) AS ViewCountDifference FROM posts AS T1  INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id;
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'
SELECT COUNT(Id) FROM posts WHERE CreaionDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'
SELECT DisplayName, Age FROM users WHERE Views = (SELECT MAX(Views) FROM users);
SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'
SELECT COUNT(*) FROM comments WHERE Score < 60 AND UserId = 13;
SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score > 60
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'North Pole' AND STRFTIME('%Y', T1.Date) = '2011'
SELECT T2.DisplayName, T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.FavoriteCount > 150
SELECT COUNT(PH.Id) AS post_history_count, P.LastEditDate  FROM posts AS P  LEFT JOIN postHistory AS PH ON P.Id = PH.PostId  WHERE P.Title = 'What is the best introductory Bayesian statistics textbook?'
SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'
SELECT T2.Title FROM posts AS T1 INNER JOIN postLinks AS T3 ON T1.Id = T3.PostId INNER JOIN posts AS T2 ON T3.RelatedPostId = T2.Id WHERE T1.Title = 'How to tell if something happened in a data set which monitors a value over time'
SELECT T1.Id AS PostId, T2.Name AS BadgeName FROM posts AS T1 INNER JOIN badges AS T2 ON T1.OwnerUserId = T2.UserId WHERE T1.OwnerDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreaionDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'
SELECT U.DisplayName FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.ViewCount = (SELECT MAX(ViewCount) FROM posts);
SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T1.TagName = 'hypothesis-testing'
SELECT T2.Title, T1.LinkTypeId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = (SELECT Id FROM posts WHERE Title = 'What are principal component scores?')
SELECT T2.DisplayName  FROM posts AS T1  INNER JOIN posts AS T3 ON T1.ParentId = T3.Id  INNER JOIN users AS T2 ON T3.OwnerUserId = T2.Id  WHERE T1.Score = (SELECT MAX(Score) FROM posts WHERE ParentId IS NOT NULL)
SELECT T2.DisplayName, T2.WebsiteUrl FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.VoteTypeId = 8 AND T1.BountyAmount = (SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8)
SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5
SELECT COUNT(*) FROM tags WHERE Count BETWEEN 5000 AND 7000;
SELECT OwnerUserId FROM posts WHERE FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts);
SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(*) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE STRFTIME('%Y', T1.CreaionDate) = '2011' AND T2.BountyAmount = 50
SELECT id FROM users WHERE Age = (SELECT MIN(Age) FROM users);
SELECT p.Score  FROM posts AS p  INNER JOIN postLinks AS pl ON p.Id = pl.PostId  INNER JOIN tags AS t ON pl.RelatedPostId = t.Id  ORDER BY t.Count DESC  LIMIT 1
SELECT COUNT(T1.Id) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE STRFTIME('%Y', T1.CreationDate) = '2010' AND T2.AnswerCount <= 2
SELECT T1.id FROM posts AS T1 INNER JOIN votes AS T2 ON T1.id = T2.PostId WHERE T2.UserId = 1465 ORDER BY T1.FavoriteCount DESC LIMIT 1
SELECT T2.Title FROM posts AS T2 WHERE T2.Id = (SELECT T1.PostId FROM postLinks AS T1 ORDER BY T1.CreationDate ASC LIMIT 1)
SELECT u.DisplayName  FROM users AS u  INNER JOIN badges AS b ON u.Id = b.UserId  GROUP BY u.Id  HAVING COUNT(b.Name) = (SELECT MAX(badge_count) FROM (SELECT COUNT(Name) AS badge_count FROM badges GROUP BY UserId))
SELECT MIN(T1.CreationDate) FROM votes AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'chl'
SELECT MIN(CreaionDate) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users WHERE Age IS NOT NULL))
SELECT DisplayName FROM users WHERE Id = (SELECT UserId FROM badges WHERE Name = 'Autobiographer' ORDER BY Date ASC LIMIT 1);
SELECT COUNT(DISTINCT U.Id)  FROM users AS U  INNER JOIN posts AS P ON U.Id = P.OwnerUserId  WHERE U.Location = 'United Kingdom' AND P.FavoriteCount >= 4
SELECT AVG(PostId) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users));
SELECT DisplayName FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users);
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000;
SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65;
SELECT COUNT(T2.Id) FROM posts AS T2 INNER JOIN users AS T1 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Jay Stevens' AND STRFTIME('%Y', T2.CreaionDate) = '2010'
SELECT T1.Id, T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky' AND T1.ViewCount = (SELECT MAX(T3.ViewCount) FROM posts AS T3 INNER JOIN users AS T4 ON T3.OwnerUserId = T4.Id WHERE T4.DisplayName = 'Harvey Motulsky')
SELECT T1.Id, T1.Title FROM posts AS T1 WHERE T1.Score = (SELECT MAX(Score) FROM posts);
SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Stephen Turner'
SELECT DISTINCT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ViewCount > 20000 AND STRFTIME('%Y', T1.CreaionDate) = '2011'
SELECT T1.Id, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreationDate) = '2010' AND T1.FavoriteCount = (SELECT MAX(FavoriteCount) FROM posts WHERE STRFTIME('%Y', CreationDate) = '2010')
SELECT (COUNT(CASE WHEN T2.Reputation > 1000 THEN T1.Id END) * 100.0 / COUNT(T1.Id)) AS percentage FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE STRFTIME('%Y', T1.CreaionDate) = '2011'
SELECT (SUM(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 ELSE 0 END) * 100.0 / COUNT(Id)) AS percentage FROM users
SELECT P.ViewCount, U.DisplayName FROM posts AS P INNER JOIN users AS U ON P.LastEditorUserId = U.Id WHERE LOWER(P.Title) = LOWER('Computer Game Datasets')
SELECT COUNT(*) FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts);
SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Score = (SELECT MAX(Score) FROM posts))
SELECT COUNT(*) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0;
SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Id = 183 AND T1.LastEditDate = (SELECT MAX(LastEditDate) FROM posts WHERE Id = 183)
SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' AND T1.Date = (SELECT MAX(Date) FROM badges WHERE UserId = T2.Id)
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000;
SELECT JULIANDAY(T1.Date) - JULIANDAY(T2.CreationDate) AS DaysTaken FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'
SELECT COUNT(P.Id), COUNT(C.Id) FROM users AS U LEFT JOIN posts AS P ON U.Id = P.OwnerUserId LEFT JOIN comments AS C ON U.Id = C.UserId WHERE U.Id = (SELECT Id FROM users WHERE CreationDate = (SELECT MAX(CreationDate) FROM users))
WITH PostInfo AS (SELECT Id FROM posts WHERE Title = 'Analysing wind data with R')  SELECT T1.Text, T2.DisplayName  FROM comments AS T1  INNER JOIN users AS T2 ON T1.UserId = T2.Id  WHERE T1.PostId = (SELECT Id FROM PostInfo)  AND T1.CreationDate = (SELECT MAX(CreationDate) FROM comments WHERE PostId = (SELECT Id FROM PostInfo))
SELECT COUNT(DISTINCT UserId) FROM badges WHERE Name = 'Citizen Patrol';
SELECT COUNT(DISTINCT T2.Id) FROM tags AS T1 INNER JOIN posts AS T2 ON T1.WikiPostId = T2.Id WHERE T1.TagName = 'careers'
SELECT reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'
SELECT (SELECT COUNT(*) FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data')) +         (SELECT COUNT(*) FROM posts WHERE ParentId = (SELECT Id FROM posts WHERE Title = 'Clustering 1D data') AND PostTypeId = 2) AS TotalCount
SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat';
SELECT COUNT(*) FROM votes WHERE BountyAmount >= 30;
WITH MaxReputation AS (SELECT MAX(Reputation) AS MaxRep FROM users),  UserPosts AS (SELECT COUNT(T1.Id) AS TotalPosts,                        COUNT(CASE WHEN T1.Score >= 50 THEN 1 END) AS PostsAbove50                 FROM posts AS T1                 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id                 WHERE T2.Reputation = (SELECT MaxRep FROM MaxReputation)) SELECT (PostsAbove50 * 100.0 / TotalPosts) AS percentage  FROM UserPosts;
SELECT COUNT(Id) FROM posts WHERE Score < 20;
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20;
SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';
SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'
SELECT C.Text FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE LOWER(P.Title) = LOWER('How can I adapt ANOVA for binary data?')
SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount BETWEEN 100 AND 150 AND T1.Score = (SELECT MAX(T3.Score) FROM comments AS T3 INNER JOIN posts AS T4 ON T3.PostId = T4.Id WHERE T4.ViewCount BETWEEN 100 AND 150)
SELECT T1.CreationDate, T1.Age FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text LIKE '%http://%'
SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.Score = 0 AND T1.ViewCount < 5
SELECT COUNT(C.Id) FROM comments AS C INNER JOIN posts AS P ON C.PostId = P.Id WHERE P.CommentCount = 1 AND C.Score = 0
SELECT COUNT(DISTINCT U.Id) FROM comments AS C INNER JOIN users AS U ON C.UserId = U.Id WHERE C.Score = 0 AND U.Age = 40
SELECT T1.Id, T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Group differences on a five point Likert item'
SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'
SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'
SELECT DISTINCT U.DisplayName  FROM comments AS C  INNER JOIN users AS U ON C.UserId = U.Id  WHERE C.Score BETWEEN 1 AND 5 AND U.DownVotes = 0
SELECT (COUNT(CASE WHEN T2.UpVotes = 0 THEN 1 END) * 100.0 / COUNT(T1.UserId)) AS percentage  FROM comments AS T1  INNER JOIN users AS T2 ON T1.UserId = T2.Id  WHERE T1.Score BETWEEN 5 AND 10
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'
SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200
SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.skin_colour_id = C.id WHERE S.superhero_name = 'Apocalypse'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN hero_power AS T3 ON T1.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.colour = 'Blue' AND T4.power_name = 'Agility'
SELECT DISTINCT T1.superhero_name  FROM superhero AS T1  INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id  INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id  INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id  WHERE T2.colour = 'Blue' AND T3.colour = 'Blond' AND T4.power_id IN (SELECT id FROM superpower WHERE power_name = 'Agility')
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' AND T1.height_cm = (SELECT MAX(T3.height_cm) FROM superhero AS T3 INNER JOIN publisher AS T4 ON T3.publisher_id = T4.id WHERE T4.publisher_name = 'Marvel Comics')
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue'
SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT SUM(CASE WHEN T3.power_name = 'Super Strength' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = (SELECT T1.hero_id FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Speed' ORDER BY T1.attribute_value ASC LIMIT 1)
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = (SELECT T3.id FROM colour AS T3 WHERE T3.colour = 'Gold') AND T2.publisher_name = 'Marvel Comics'
SELECT T3.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T1.superhero_name = 'Blue Beetle II'
SELECT COUNT(*) FROM superhero WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'Blond')
SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Intelligence') ORDER BY T1.attribute_value ASC LIMIT 1
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'
SELECT COUNT(DISTINCT T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T2.gender = 'Female' AND T4.attribute_name = 'Strength' AND T3.attribute_value = 100
WITH PowerCounts AS (     SELECT T1.superhero_name, COUNT(T2.power_id) AS power_count     FROM superhero AS T1     INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id     GROUP BY T1.superhero_name ) SELECT superhero_name FROM PowerCounts WHERE power_count = (SELECT MAX(power_count) FROM PowerCounts);
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
SELECT (SUM(CASE WHEN T3.alignment = 'Bad' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.id)) AS percentage, COUNT(CASE WHEN T3.alignment = 'Bad' AND T2.publisher_name = 'Marvel Comics' THEN 1 END) AS marvel_count FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id
SELECT ABS(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END))  FROM superhero AS T1  INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id  WHERE T2.publisher_name IN ('DC Comics', 'Marvel Comics')
SELECT id FROM publisher WHERE publisher_name = 'Star Trek';
SELECT AVG(attribute_value) FROM hero_attribute WHERE attribute_value IS NOT NULL;
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL;
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'
SELECT AVG(weight_kg) FROM superhero WHERE gender_id = 2;
SELECT DISTINCT T3.power_name  FROM superhero AS T1  INNER JOIN gender AS T2 ON T1.gender_id = T2.id  INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id  INNER JOIN superpower AS T3 ON T4.power_id = T3.id  WHERE T2.gender = 'Male'  LIMIT 5
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'
SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.height_cm BETWEEN 170 AND 190 AND T1.eye_colour_id = 1
SELECT T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id WHERE T2.hero_id = 56
SELECT T2.full_name FROM superhero AS T2 INNER JOIN race AS T1 ON T2.race_id = T1.id WHERE T1.race = 'Demi-God' LIMIT 5
SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad');
SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.hair_colour_id = C.id INNER JOIN race AS R ON S.race_id = R.id WHERE S.height_cm = 185 AND R.race = 'Human'
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = (SELECT MAX(weight_kg) FROM superhero)
SELECT (SUM(publisher_id = 13) * 100.0 / COUNT(*)) AS percentage FROM superhero WHERE height_cm BETWEEN 150 AND 180
SELECT T1.full_name FROM superhero AS T1 WHERE T1.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero) AND T1.gender_id = (SELECT id FROM gender WHERE gender = 'Male')
SELECT T1.power_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id GROUP BY T1.power_name ORDER BY COUNT(T2.power_id) DESC LIMIT 1
SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Abomination'
SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1
SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'stealth'
SELECT T3.full_name  FROM superhero AS T3  INNER JOIN hero_attribute AS T2 ON T3.id = T2.hero_id  INNER JOIN attribute AS T1 ON T2.attribute_id = T1.id  WHERE T1.attribute_name = 'Strength'  AND T2.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = T2.attribute_id)  LIMIT 1
SELECT COUNT(T1.id) * 1.0 / NULLIF(SUM(CASE WHEN T1.skin_colour_id = 1 THEN 1 ELSE 0 END), 0) AS average_no_skin_colour  FROM superhero AS T1
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'
SELECT T1.superhero_name  FROM superhero AS T1  INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id  INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id  INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id  WHERE T3.attribute_name = 'Durability' AND T4.publisher_name = 'Dark Horse Comics'  ORDER BY T2.attribute_value DESC  LIMIT 1
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'
SELECT T3.colour AS eye_colour, T4.colour AS hair_colour, T5.colour AS skin_colour  FROM superhero AS T1  INNER JOIN gender AS T2 ON T1.gender_id = T2.id  INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id  INNER JOIN colour AS T4 ON T1.hair_colour_id = T4.id  INNER JOIN colour AS T5 ON T1.skin_colour_id = T5.id  INNER JOIN publisher AS T6 ON T1.publisher_id = T6.id  WHERE T2.gender = 'Female' AND T6.publisher_name = 'Dark Horse Comics'
SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id
SELECT T3.race FROM superhero AS T1 INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T1.superhero_name = 'A-Bomb'
SELECT (SUM(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage  FROM superhero AS T1  INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id  WHERE T1.gender_id = (SELECT id FROM gender WHERE gender = 'Female')
SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'
SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'
SELECT T2.superhero_name FROM superhero AS T2 INNER JOIN hero_power AS T1 ON T2.id = T1.hero_id INNER JOIN superpower AS T3 ON T1.power_id = T3.id WHERE T3.power_name = 'Adaptation'
SELECT COUNT(T3.power_id) FROM hero_power AS T3 WHERE T3.hero_id = (SELECT T1.id FROM superhero AS T1 WHERE T1.superhero_name = 'Amazo');
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'
SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'
SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.eye_colour_id = (SELECT T2.id FROM colour AS T2 WHERE T2.colour = 'Black') AND T1.hair_colour_id = (SELECT T3.id FROM colour AS T3 WHERE T3.colour = 'Black')
SELECT T3.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.colour = 'Gold'
SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'
SELECT COUNT(*) FROM hero_attribute WHERE attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute AS HA INNER JOIN attribute AS A ON HA.attribute_id = A.id WHERE A.attribute_name = 'Strength')
SELECT T3.race, T4.alignment FROM superhero AS T1 INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Cameron Hicks'
SELECT (SUM(CASE WHEN T3.gender = 'Female' THEN 1 ELSE 0 END) * 100.0 / COUNT(T4.publisher_name)) FROM superhero AS T1 INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T4.publisher_name = 'Marvel Comics';
SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'
SELECT (SUM(CASE WHEN full_name = 'Emil Blonsky' THEN weight_kg ELSE 0 END) - SUM(CASE WHEN full_name = 'Charles Chandler' THEN weight_kg ELSE 0 END)) AS weight_difference FROM superhero;
SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero GROUP BY superhero_name
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'
SELECT COUNT(T1.id) FROM superhero AS T1 WHERE T1.race_id = 21 AND T1.gender_id = 1
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Speed') ORDER BY T2.attribute_value DESC LIMIT 1
SELECT COUNT(*) FROM superhero WHERE alignment_id = 3;
SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'
SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.eye_colour_id = 7 AND T1.hair_colour_id = 9
SELECT DISTINCT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')
SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL;
SELECT (COUNT(CASE WHEN eye_colour_id = 7 THEN 1 END) * 100.0) / COUNT(*) AS percentage FROM superhero
SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS FLOAT) / NULLIF(SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END), 0) AS ratio FROM superhero;
SELECT T1.superhero_name FROM superhero AS T1 WHERE T1.height_cm = (SELECT MAX(height_cm) FROM superhero);
SELECT id FROM superpower WHERE LOWER(power_name) = 'cryokinesis';
SELECT superhero_name FROM superhero WHERE id = 294;
SELECT T1.full_name FROM superhero AS T1 WHERE T1.weight_kg IS NULL OR T1.weight_kg = 0
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'
SELECT T3.race FROM superhero AS T1 INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188
SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38;
SELECT R.race FROM superhero AS S INNER JOIN race AS R ON S.race_id = R.id WHERE S.id = (SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute))
SELECT T3.alignment, T4.power_name FROM superhero AS T1 INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T4 ON T2.power_id = T4.id WHERE T1.superhero_name = 'Atom IV'
SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5
SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.alignment_id = 3
SELECT DISTINCT C.colour  FROM superhero AS S  INNER JOIN hero_attribute AS HA ON S.id = HA.hero_id  INNER JOIN colour AS C ON S.skin_colour_id = C.id  WHERE HA.attribute_value = 100
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.id = 1 AND T3.id = 2
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80
SELECT T4.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id INNER JOIN race AS T4 ON T1.race_id = T4.id WHERE T2.colour = 'blue' AND T3.gender = 'male'
SELECT (SUM(CASE WHEN T3.id = 2 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.id = 2
SELECT (SUM(CASE WHEN T1.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = 1 THEN 1 ELSE 0 END)) FROM superhero AS T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL
SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength';
SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Green' AND T2.alignment = 'Bad'
SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.gender_id IN (SELECT id FROM gender WHERE gender = 'Female') AND T2.publisher_name = 'Marvel Comics'
SELECT T2.superhero_name FROM superhero AS T2 INNER JOIN hero_power AS T1 ON T2.id = T1.hero_id WHERE T1.power_id = (SELECT id FROM superpower WHERE power_name = 'Wind Control') ORDER BY T2.superhero_name ASC
SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'
SELECT T2.superhero_name FROM superhero AS T2 INNER JOIN publisher AS T1 ON T2.publisher_id = T1.id WHERE T1.publisher_name = 'DC Comics' ORDER BY T2.weight_kg DESC LIMIT 1
SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.race_id IN (SELECT id FROM race WHERE race <> 'Human') AND T2.publisher_name = 'Dark Horse Comics'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' AND T2.attribute_value = 100
SELECT (COUNT(CASE WHEN publisher_name = 'DC Comics' THEN 1 END) - COUNT(CASE WHEN publisher_name = 'Marvel Comics' THEN 1 END)) AS difference FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id;
SELECT T3.attribute_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN attribute AS T3 ON T1.attribute_id = T3.id WHERE T2.superhero_name = 'Black Panther' ORDER BY T1.attribute_value ASC LIMIT 1
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'
SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)
SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler';
SELECT (SUM(CASE WHEN T2.gender = 'Female' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.id)) AS percentage FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T3.publisher_name = 'George Lucas'
SELECT (SUM(CASE WHEN T1.alignment_id IN (SELECT id FROM alignment WHERE alignment = 'Good') THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.id)) AS percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'
SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1
SELECT full_name FROM superhero WHERE superhero_name = 'Alien';
SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'
SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Aquababy'
SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40
SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'
SELECT T1.id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id WHERE T2.power_id = (SELECT id FROM superpower WHERE power_name = 'Intelligence')
SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'
SELECT DISTINCT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero)
SELECT T1.driverRef FROM drivers AS T1 WHERE T1.driverId IN (SELECT T2.driverId FROM qualifying AS T2 WHERE T2.raceId = 18 ORDER BY T2.q1 ASC LIMIT 5)
SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 19 AND T1.q2 = (SELECT MIN(q2) FROM qualifying WHERE raceId = 19)
SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai'
SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'
SELECT DISTINCT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany'
SELECT T2.position FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.name = 'Renault'
SELECT COUNT(*) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2010 AND T2.country NOT IN ('Japan', 'China', 'India', 'Malaysia', 'Singapore', 'South Korea', 'Vietnam', 'Thailand', 'Philippines', 'Indonesia', 'Australia', 'New Zealand', 'Germany', 'France', 'Italy', 'United Kingdom', 'Spain', 'Netherlands', 'Belgium', 'Switzerland', 'Austria', 'Portugal', 'Russia', 'Finland', 'Sweden', 'Norway', 'Denmark')
SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain'
SELECT lat, lng FROM circuits WHERE circuitId IN (SELECT circuitId FROM races WHERE name = 'Australian Grand Prix')
SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'
SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'
SELECT C.lat, C.lng FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId WHERE R.name = 'Abu Dhabi Grand Prix'
SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 24 AND T1.points = 1
SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'Senna' AND T2.forename = 'Bruno' AND T1.raceId = 354
SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q2 = '1:40' AND T1.raceId = 355
SELECT T1.number FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 903 AND T2.q3 = '0:01:54';
SELECT COUNT(*) FROM results WHERE time IS NULL AND raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007);
SELECT S.url FROM races AS R INNER JOIN seasons AS S ON R.year = S.year WHERE R.raceId = 901
SELECT COUNT(DISTINCT R.driverId) FROM results AS R INNER JOIN races AS R2 ON R.raceId = R2.raceId WHERE R2.date = '2015-11-29' AND R.time IS NOT NULL
SELECT T2.driverId, T2.dob FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 592 AND T1.time IS NOT NULL ORDER BY T2.dob ASC LIMIT 1
SELECT url FROM drivers WHERE driverId IN (SELECT driverId FROM lapTimes WHERE raceId = 161 AND time = '1:27.000')
SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933)
SELECT lat, lng FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE name = 'Malaysian Grand Prix');
SELECT url FROM constructors WHERE constructorId = (SELECT constructorId FROM constructorResults WHERE raceId = 9 ORDER BY points DESC LIMIT 1)
SELECT q1 FROM qualifying WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi') AND raceId = 345
SELECT T2.nationality FROM drivers AS T2 INNER JOIN qualifying AS T1 ON T2.driverId = T1.driverId WHERE T1.q2 = '1:15.000' AND T1.raceId = 347
SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 45 AND T1.q3 = '1:33.000'
SELECT T1.time FROM results AS T1 WHERE T1.raceId = 743 AND T1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Bruce' AND surname = 'McLaren')
SELECT T3.forename, T3.surname FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.position = 2 AND T2.name = 'San Marino Grand Prix' AND T2.year = 2006
SELECT S.url FROM races AS R INNER JOIN seasons AS S ON R.year = S.year WHERE R.raceId = 901
SELECT COUNT(DISTINCT R.driverId)  FROM results AS R  INNER JOIN races AS RA ON R.raceId = RA.raceId  INNER JOIN status AS S ON R.statusId = S.statusId  WHERE RA.date = '2015-11-29' AND S.status = 'Finished'
SELECT MAX(dob) FROM drivers WHERE driverId IN (SELECT driverId FROM results WHERE raceId = 872 AND time IS NOT NULL)
SELECT T2.forename || ' ' || T2.surname AS full_name  FROM lapTimes AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.raceId = 348  AND T1.time = (SELECT MIN(time) FROM lapTimes WHERE raceId = 348);
SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)
SELECT (r1.fastestLapSpeed - r2.fastestLapSpeed) / r1.fastestLapSpeed * 100 AS percentage  FROM results AS r1  JOIN results AS r2 ON r1.driverId = r2.driverId  WHERE r1.raceId = 853 AND r2.raceId = 854 AND r1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Paul' AND surname = 'di Resta')
SELECT (COUNT(CASE WHEN time IS NOT NULL THEN driverId END) * 1.0 / COUNT(driverId)) * 100 AS completion_rate  FROM results  WHERE raceId = (SELECT raceId FROM races WHERE date = '1983-07-16')
SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix';
SELECT COUNT(*) AS race_count, GROUP_CONCAT(name ORDER BY name DESC) AS race_names FROM races WHERE year = 2005
WITH first_race AS (SELECT MIN(date) AS min_date FROM races) SELECT name FROM races WHERE date = (SELECT min_date FROM first_race) UNION SELECT name FROM races WHERE STRFTIME('%Y', date) = (SELECT STRFTIME('%Y', min_date) FROM first_race) AND STRFTIME('%m', date) = (SELECT STRFTIME('%m', min_date) FROM first_race);
SELECT name, date FROM races WHERE year = 1999 AND round = (SELECT MAX(round) FROM races WHERE year = 1999)
SELECT year FROM races GROUP BY year HAVING COUNT(round) = (SELECT MAX(race_count) FROM (SELECT COUNT(round) AS race_count FROM races GROUP BY year))
SELECT name FROM races WHERE year = 2017 AND raceId NOT IN (SELECT raceId FROM races WHERE year = 2000);
SELECT C.country, C.name, C.location FROM circuits AS C INNER JOIN races AS R ON C.circuitId = R.circuitId WHERE R.name = 'European Grand Prix' AND R.year = (SELECT MIN(year) FROM races WHERE name = 'European Grand Prix')
SELECT MAX(T3.year) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN seasons AS T3 ON T1.year = T3.year WHERE T1.name = 'British Grand Prix' AND T2.name = 'Brands Hatch'
SELECT COUNT(DISTINCT T3.year) FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN seasons AS T3 ON T2.year = T3.year WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'
SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Singapore Grand Prix' AND T3.year = 2010 ORDER BY T1.position ASC
SELECT T2.forename || ' ' || T2.surname AS full_name, T1.points  FROM driverStandings AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.points = (SELECT MAX(points) FROM driverStandings)
SELECT T3.forename, T3.surname, T1.points FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2017 ORDER BY T1.points DESC LIMIT 3
SELECT T1.time, T2.forename, T2.surname, T3.name FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.time = (SELECT MIN(time) FROM lapTimes)
SELECT AVG(T1.time) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Sebastian' AND T3.surname = 'Vettel' AND T2.name = 'Chinese Grand Prix' AND T2.year = 2009
SELECT (SUM(CASE WHEN T1.position > 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.raceId)) AS percentage  FROM driverStandings AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  INNER JOIN races AS T3 ON T1.raceId = T3.raceId  WHERE T2.surname = 'Hamilton' AND T3.year >= 2010
SELECT D.forename, D.surname, D.nationality, AVG(DS.points)  FROM drivers AS D  INNER JOIN driverStandings AS DS ON D.driverId = DS.driverId  GROUP BY D.driverId  HAVING COUNT(DS.wins) = (SELECT MAX(total_wins) FROM (SELECT COUNT(wins) AS total_wins FROM driverStandings GROUP BY driverId))
SELECT forename || ' ' || surname AS name, (2022 - STRFTIME('%Y', dob) + 1) AS age FROM drivers WHERE nationality = 'Japanese' AND dob = (SELECT MAX(dob) FROM drivers WHERE nationality = 'Japanese')
SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.year BETWEEN 1990 AND 2000 GROUP BY T1.circuitId HAVING COUNT(T2.raceId) = 4
SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'USA' AND T2.year = 2006
SELECT T1.name, T2.name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE STRFTIME('%m', T1.date) = '09' AND STRFTIME('%Y', T1.date) = '2005'
SELECT T3.raceId, T3.name FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Alex' AND T2.surname = 'Yoong' AND T1.position < 10
SELECT COUNT(*) FROM results AS R  INNER JOIN drivers AS D ON R.driverId = D.driverId  INNER JOIN races AS RA ON R.raceId = RA.raceId  INNER JOIN circuits AS C ON RA.circuitId = C.circuitId  WHERE D.surname = 'Schumacher'  AND C.name = 'Sepang International Circuit'  AND R.points = (SELECT MAX(points) FROM results WHERE raceId = R.raceId)
SELECT R.raceId, R.year FROM lapTimes AS L  INNER JOIN drivers AS D ON L.driverId = D.driverId  INNER JOIN races AS R ON L.raceId = R.raceId  WHERE D.forename = 'Michael' AND D.surname = 'Schumacher'  ORDER BY L.milliseconds ASC LIMIT 1
SELECT AVG(T1.points) FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Eddie' AND T2.surname = 'Irvine' AND T3.year = 2000
SELECT T2.year, T1.points  FROM driverStandings AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  WHERE T1.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton')  ORDER BY T2.year ASC  LIMIT 1
SELECT T1.date, T2.country FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2017 ORDER BY T1.date
SELECT T2.name, T2.year, T3.location FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T1.laps = (SELECT MAX(laps) FROM results)
SELECT (COUNT(CASE WHEN C.country = 'Germany' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE R.name = 'European Grand Prix'
SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';
SELECT name, lat FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1
SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';
SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits WHERE alt IS NOT NULL)
SELECT COUNT(*) FROM drivers WHERE code IS NULL;
SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers)
SELECT surname FROM drivers WHERE UPPER(nationality) = 'ITALIAN';
SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';
SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';
SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix'
SELECT DISTINCT year FROM races WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Silverstone Circuit')
SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'
SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year BETWEEN 2010 AND 2019 AND T2.name = 'Yas Marina Circuit'
SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Italy'
SELECT T1.date FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'
SELECT url FROM circuits WHERE circuitId = (SELECT circuitId FROM races WHERE name = 'Spanish Grand Prix' AND year = 2009)
SELECT MIN(T1.fastestLapTime) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'Hamilton' AND T2.forename = 'Lewis'
SELECT T1.forename, T1.surname  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  WHERE T2.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results)
SELECT T1.driverRef FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.positionOrder = 1 AND T2.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')
SELECT R.name, R.date, R.year  FROM drivers AS D  INNER JOIN results AS Res ON D.driverId = Res.driverId  INNER JOIN races AS R ON Res.raceId = R.raceId  WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'
SELECT T1.raceId FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.rank ASC LIMIT 1
SELECT MAX(T3.fastestLapSpeed) FROM results AS T3 INNER JOIN races AS T1 ON T3.raceId = T1.raceId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix'
SELECT DISTINCT R.year FROM races AS R INNER JOIN results AS Res ON R.raceId = Res.raceId INNER JOIN drivers AS D ON Res.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton'
SELECT R.positionOrder FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId INNER JOIN races AS R2 ON R.raceId = R2.raceId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton' AND R2.year = 2008 AND R2.name = 'Australian Grand Prix'
SELECT T3.forename, T3.surname FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.grid = 4 AND T2.year = 2008 AND T2.name = 'Australian Grand Prix'
SELECT COUNT(*) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL AND T2.name = 'Australian Grand Prix' AND T2.year = 2008
SELECT MIN(T4.time) FROM lapTimes AS T4 INNER JOIN results AS T3 ON T4.raceId = T3.raceId AND T4.driverId = T3.driverId WHERE T3.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND T3.raceId = (SELECT raceId FROM races WHERE name = 'Australian Grand Prix' AND year = 2008)
SELECT time FROM results WHERE rank = 2 AND raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')
SELECT T3.forename, T3.surname, T3.url FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.position = 1 AND T2.year = 2008 AND T2.name = 'Australian Grand Prix'
SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'American' AND T3.year = 2008 AND T3.name = 'Australian Grand Prix'
SELECT COUNT(DISTINCT R.driverId) FROM results AS R WHERE R.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND R.time IS NOT NULL AND R.driverId IN (SELECT driverId FROM results GROUP BY driverId HAVING COUNT(raceId) > 0)
SELECT SUM(ds.points)  FROM driverStandings AS ds  INNER JOIN drivers AS d ON ds.driverId = d.driverId  WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'
SELECT AVG((CAST(SUBSTR(fastestLapTime, 1, INSTR(fastestLapTime, ':') - 1) AS INTEGER) * 60) + CAST(SUBSTR(fastestLapTime, INSTR(fastestLapTime, ':') + 1) AS REAL)) AS average_fastest_lap_time FROM results AS R INNER JOIN drivers AS D ON R.driverId = D.driverId WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton';
SELECT (COUNT(r.raceId) * 1.0 / COUNT(*)) AS rate  FROM results AS r  INNER JOIN races AS ra ON r.raceId = ra.raceId  WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND r.time IS NOT NULL
SELECT ((last_driver_time - champion_time) * 100.0 / last_driver_time) AS speed_difference FROM (     SELECT          (SELECT MIN(milliseconds) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL) AS champion_time,         (SELECT MAX(milliseconds) FROM results WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix') AND time IS NOT NULL) AS last_driver_time ) AS times
SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';
SELECT lat, lng FROM circuits WHERE country = 'USA';
SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND dob > '1980-12-31';
SELECT AVG(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'
SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.constructorId ORDER BY SUM(T1.points) DESC LIMIT 1
SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 291 AND T2.points = 0
SELECT COUNT(DISTINCT constructorId) FROM constructorResults WHERE points = 0 AND constructorId IN (SELECT constructorId FROM constructors WHERE nationality = 'Japanese') GROUP BY constructorId HAVING COUNT(raceId) = 2
SELECT DISTINCT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.position = 1
SELECT COUNT(DISTINCT T1.constructorId) FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'French' AND T2.laps > 50
SELECT (COUNT(CASE WHEN T1.time IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS completion_percentage  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  INNER JOIN races AS T3 ON T1.raceId = T3.raceId  WHERE T2.nationality = 'Japanese' AND T3.year BETWEEN 2007 AND 2009;
SELECT T2.year, AVG((CAST(SUBSTR(T1.time, 1, 2) AS INTEGER) * 3600) + (CAST(SUBSTR(T1.time, 4, 2) AS INTEGER) * 60) + CAST(SUBSTR(T1.time, 7, 2) AS INTEGER)) AS average_time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL AND T1.position = 1 GROUP BY T2.year
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.dob > '1975-12-31' AND T2.position = 2
SELECT COUNT(*) FROM drivers AS D INNER JOIN results AS R ON D.driverId = R.driverId WHERE D.nationality = 'Italian' AND R.time IS NULL
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.fastestLapTime = (SELECT MIN(T3.fastestLapTime) FROM results AS T3)
SELECT fastestLap FROM results INNER JOIN races ON results.raceId = races.raceId WHERE positionOrder = 1 AND races.year = 2009
SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009
SELECT T2.name, T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.milliseconds = (SELECT MIN(milliseconds) FROM results WHERE milliseconds IS NOT NULL)
SELECT (COUNT(DISTINCT T1.driverId) * 100.0 / NULLIF(COUNT(DISTINCT T2.driverId), 0)) AS percentage  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  INNER JOIN races AS T3 ON T2.raceId = T3.raceId  WHERE STRFTIME('%Y', T1.dob) < '1985' AND T2.laps > 50  AND T3.year BETWEEN 2000 AND 2005
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, INSTR(T2.time, ':') + 1) AS REAL)) < 120
SELECT code FROM drivers WHERE nationality = 'American';
SELECT raceId FROM races WHERE year = 2009;
SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18;
WITH YoungestDrivers AS (     SELECT driverId, code, nationality     FROM drivers     ORDER BY dob DESC     LIMIT 3 ) SELECT COUNT(*) AS NetherlandicCount, GROUP_CONCAT(code) AS CodeNumbers FROM YoungestDrivers WHERE nationality = 'Dutch';
SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';
SELECT COUNT(*) FROM drivers WHERE nationality = 'Australian' AND STRFTIME('%Y', dob) = '1980';
SELECT T1.driverId, T1.forename, T1.surname, MIN(T2.time)  FROM drivers AS T1  INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId  WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1990'  GROUP BY T1.driverId  ORDER BY MIN(T2.time) ASC  LIMIT 3
SELECT driverRef FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers WHERE nationality = 'German')
SELECT DISTINCT T1.driverId, T1.code  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  WHERE strftime('%Y', T1.dob) = '1971' AND T2.fastestLapTime IS NOT NULL
SELECT T2.driverId, T2.forename, T2.surname, MAX(T1.time) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE LOWER(T2.nationality) = 'spanish' AND STRFTIME('%Y', T2.dob) < '1982' GROUP BY T2.driverId, T2.forename, T2.surname ORDER BY MAX(T1.time) DESC LIMIT 10
SELECT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1
SELECT T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId GROUP BY T1.year HAVING MAX(CAST(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) AS INTEGER) * 60 * 1000 + CAST(SUBSTR(T2.time, INSTR(T2.time, ':') + 1) AS INTEGER)) = (SELECT MIN(MaxTime) FROM (SELECT MAX(CAST(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) AS INTEGER) * 60 * 1000 + CAST(SUBSTR(T2.time, INSTR(T2.time, ':') + 1) AS INTEGER)) AS MaxTime FROM lapTimes AS T2 INNER JOIN races AS T1 ON T1.raceId = T2.raceId GROUP BY T1.year));
SELECT driverId FROM lapTimes WHERE lap = 1 GROUP BY driverId ORDER BY MIN(milliseconds) ASC LIMIT 5
SELECT COUNT(*) FROM results AS T1 INNER JOIN status AS T2 ON T1.statusId = T2.statusId WHERE T2.statusId = 2 AND T1.time IS NOT NULL AND T1.raceId > 50 AND T1.raceId < 100
SELECT COUNT(T2.raceId) AS race_count, T1.location, T1.lat, T1.lng  FROM circuits AS T1  INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId  WHERE T1.country = 'Austria'  GROUP BY T1.location, T1.lat, T1.lng
SELECT raceId FROM results WHERE time IS NOT NULL GROUP BY raceId ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.q2 IS NOT NULL AND T1.raceId = 23
SELECT STRFTIME('%Y', T3.date) AS race_year, T3.name AS race_name, T3.date, T1.q1 AS qualifying_time FROM qualifying AS T1 INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.driverId = (SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1) ORDER BY T3.date LIMIT 1
SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'American' AND T2.statusId = 2
SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' AND T2.points = (SELECT MAX(points) FROM constructorStandings AS T3 INNER JOIN constructors AS T4 ON T3.constructorId = T4.constructorId WHERE T4.nationality = 'Italian')
SELECT T2.url FROM constructors AS T2 INNER JOIN (SELECT constructorId, SUM(wins) AS total_wins FROM constructorStandings GROUP BY constructorId ORDER BY total_wins DESC LIMIT 1) AS T1 ON T2.constructorId = T1.constructorId
SELECT T1.driverId, MAX(T1.time) AS slowest_time  FROM lapTimes AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  WHERE T2.name = 'French Grand Prix' AND T1.lap = 3  GROUP BY T1.driverId  ORDER BY slowest_time DESC  LIMIT 1
SELECT T1.raceId, MIN(T1.milliseconds) AS fastest_lap_time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.lap = 1 GROUP BY T1.raceId ORDER BY fastest_lap_time ASC LIMIT 1
SELECT AVG(fastestLapTime) FROM results WHERE position < 11 AND raceId = (SELECT raceId FROM races WHERE name = 'United States Grand Prix' AND year = 2006)
SELECT T1.forename, T1.surname, AVG(T2.duration) AS avg_duration  FROM drivers AS T1  INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId  WHERE T1.dob BETWEEN '1980-01-01' AND '1985-12-31' AND T1.nationality = 'German'  GROUP BY T1.driverId  ORDER BY avg_duration ASC  LIMIT 5
SELECT T3.forename, T3.surname, T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T1.position = 1 AND T2.name = 'Canadian Grand Prix' AND T2.year = 2008
SELECT C.constructorRef, C.url  FROM constructors AS C  INNER JOIN results AS R ON C.constructorId = R.constructorId  INNER JOIN races AS Ra ON R.raceId = Ra.raceId  WHERE Ra.year = 2009 AND Ra.name = 'Singapore Grand Prix'  AND R.time = (SELECT MIN(time) FROM results WHERE raceId = Ra.raceId)
SELECT forename || ' ' || surname AS full_name, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'
SELECT T1.forename || ' ' || T1.surname AS full_name, T1.url, T1.dob FROM drivers AS T1 WHERE T1.nationality = 'German' AND strftime('%Y', T1.dob) BETWEEN '1971' AND '1985' ORDER BY T1.dob DESC
SELECT location, country, lat, lng FROM circuits WHERE circuitRef = 'hungaroring'
SELECT SUM(T1.points) AS total_points, T3.name, T3.nationality FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.name = 'Monaco Grand Prix' AND T2.year BETWEEN 1980 AND 2010 GROUP BY T3.constructorId ORDER BY total_points DESC LIMIT 1
SELECT AVG(T1.points) FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  INNER JOIN races AS T3 ON T1.raceId = T3.raceId  WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'
SELECT AVG(number_of_races) FROM (SELECT COUNT(*) AS number_of_races FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31' GROUP BY STRFTIME('%Y', date))
SELECT T1.nationality FROM drivers AS T1 GROUP BY T1.nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT wins FROM (SELECT driverId, wins, ROW_NUMBER() OVER (ORDER BY points DESC) AS rank FROM driverStandings) AS rankedDrivers WHERE rank = 91
SELECT T2.name FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.fastestLapTime = (SELECT MIN(fastestLapTime) FROM results WHERE fastestLapTime IS NOT NULL)
SELECT T2.location || ', ' || T2.country AS full_location  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T1.date = (SELECT MAX(date) FROM races);
SELECT T3.forename, T3.surname  FROM qualifying AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE T1.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND circuitId = (SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit')))  AND T2.year = 2008
SELECT T1.forename || ' ' || T1.surname AS full_name, T1.nationality, T2.name AS race_name  FROM drivers AS T1  INNER JOIN (SELECT driverId, MIN(raceId) AS first_race_id FROM results GROUP BY driverId) AS T3  ON T1.driverId = T3.driverId  INNER JOIN races AS T2  ON T3.first_race_id = T2.raceId  WHERE T1.dob = (SELECT MAX(dob) FROM drivers)
SELECT COUNT(*) FROM results WHERE driverId = (SELECT R1.driverId FROM results AS R1 INNER JOIN races AS R2 ON R1.raceId = R2.raceId WHERE R2.name = 'Canadian Grand Prix' AND R1.statusId = 3 GROUP BY R1.driverId ORDER BY COUNT(*) DESC LIMIT 1)
SELECT T1.forename, T1.surname, COUNT(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T1.dob = (SELECT MIN(dob) FROM drivers) GROUP BY T1.driverId
SELECT MAX(duration) FROM pitStops;
SELECT MIN(time) FROM lapTimes WHERE time IS NOT NULL AND time != ''
SELECT MAX(pitStops.duration) FROM pitStops INNER JOIN drivers ON pitStops.driverId = drivers.driverId WHERE drivers.surname = 'Hamilton'
SELECT P.lap  FROM pitStops AS P  INNER JOIN drivers AS D ON P.driverId = D.driverId  INNER JOIN races AS R ON P.raceId = R.raceId  WHERE D.forename = 'Lewis' AND D.surname = 'Hamilton' AND R.year = 2011 AND R.name = 'Australian Grand Prix'
SELECT P.duration FROM pitStops AS P INNER JOIN races AS R ON P.raceId = R.raceId WHERE R.year = 2011 AND R.name = 'Australian Grand Prix'
SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'
SELECT T2.forename || ' ' || T2.surname  FROM lapTimes AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.time = (SELECT MIN(time) FROM lapTimes)
SELECT L.position FROM lapTimes AS L INNER JOIN races AS R ON L.raceId = R.raceId WHERE L.driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND L.time = (SELECT MIN(time) FROM lapTimes WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'))
SELECT MIN(LT.time) FROM lapTimes AS LT INNER JOIN races AS R ON LT.raceId = R.raceId WHERE R.name = 'Austrian Grand Prix'
SELECT T3.name, MIN(T1.time) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' GROUP BY T3.name
SELECT T1.name FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Austrian Grand Prix' AND T2.time = (SELECT MIN(T3.time) FROM lapTimes AS T3 INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.name = 'Austrian Grand Prix')
SELECT p.duration FROM pitStops AS p INNER JOIN (SELECT l.raceId, l.driverId FROM lapTimes AS l INNER JOIN races AS r ON l.raceId = r.raceId WHERE r.name = 'Austrian Grand Prix' AND l.time = (SELECT MIN(time) FROM lapTimes WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix'))) AS record ON p.raceId = record.raceId AND p.driverId = record.driverId
SELECT T3.lat, T3.lng  FROM lapTimes AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId  WHERE T1.time = '1:29.488'
SELECT AVG(T1.milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'Hamilton' AND T2.forename = 'Lewis'
SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'
SELECT P.player_api_id FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id ORDER BY PA.overall_rating DESC LIMIT 1;
SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);
SELECT preferred_foot FROM Player_Attributes WHERE potential = (SELECT MIN(potential) FROM Player_Attributes);
SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low';
SELECT T1.player_api_id, MAX(T2.crossing) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY T1.player_api_id ORDER BY MAX(T2.crossing) DESC LIMIT 5
SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1;
SELECT home_team_api_id FROM Match WHERE home_team_goal < away_team_goal AND season = '2015/2016' GROUP BY home_team_api_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.penalties DESC LIMIT 10
SELECT M.away_team_api_id, COUNT(*) AS wins FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Scotland Premier League' AND M.season = '2009/2010' AND M.away_team_goal > M.home_team_goal GROUP BY M.away_team_api_id ORDER BY wins DESC LIMIT 1
SELECT T1.buildUpPlaySpeed FROM Team_Attributes AS T1 ORDER BY T1.buildUpPlaySpeed DESC LIMIT 4
WITH DrawCounts AS (     SELECT `T3`.`name`, COUNT(*) AS draw_count     FROM `League` AS `T3`     INNER JOIN `Match` AS `T1` ON `T3`.`id` = `T1`.`league_id`     WHERE `T1`.`season` = '2015/2016' AND `T1`.`home_team_goal` = `T1`.`away_team_goal`     GROUP BY `T3`.`name` ) SELECT `name` FROM DrawCounts WHERE draw_count = (SELECT MAX(draw_count) FROM DrawCounts);
SELECT strftime('%Y', 'now') - strftime('%Y', P.birthday) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.sprint_speed >= 97 AND PA.date >= '2013-01-01 00:00:00' AND PA.date <= '2015-12-31 00:00:00'
SELECT T2.name, COUNT(T1.league_id) AS match_count  FROM Match AS T1  INNER JOIN League AS T2 ON T1.league_id = T2.id  GROUP BY T2.name  ORDER BY match_count DESC  LIMIT 1;
SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';
SELECT player_api_id  FROM Player_Attributes  WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010')  AND substr(date, 1, 4) = '2010'  AND overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes WHERE overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes WHERE substr(date, 1, 4) = '2010') AND substr(date, 1, 4) = '2010')
SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed BETWEEN 51 AND 59;
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlayPassing > (SELECT AVG(T2.buildUpPlayPassing) FROM Team_Attributes AS T2 WHERE STRFTIME('%Y', T2.date) = '2012' AND T2.buildUpPlayPassing IS NOT NULL) AND STRFTIME('%Y', T2.date) = '2012'
SELECT (SUM(CASE WHEN T2.preferred_foot = 'left' THEN 1 ELSE 0 END) * 1.0 / COUNT(T1.player_fifa_api_id)) * 100 AS percentage_left_foot FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'
SELECT L.name, SUM(M.home_team_goal + M.away_team_goal) AS total_goals  FROM Match AS M  INNER JOIN League AS L ON M.league_id = L.id  GROUP BY L.id  ORDER BY total_goals ASC  LIMIT 5;
SELECT AVG(T1.long_shots) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Ahmed Samir Farag'
SELECT T1.player_name, SUM(T2.heading_accuracy) * 1.0 / COUNT(T2.player_fifa_api_id) AS avg_heading_accuracy FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 180 GROUP BY T1.player_name ORDER BY avg_heading_accuracy DESC LIMIT 10
SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T1.date >= '2014-01-01 00:00:00' AND T1.date < '2015-01-01 00:00:00' AND T1.chanceCreationPassing < (SELECT AVG(chanceCreationPassing) FROM Team_Attributes WHERE date >= '2014-01-01 00:00:00' AND date < '2015-01-01 00:00:00') ORDER BY T1.chanceCreationPassing DESC
SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.name HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)
SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers';
SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 4) = '1970' AND SUBSTR(birthday, 6, 2) = '10';
SELECT T2.attacking_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Franco Zennaro'
SELECT T2.buildUpPlayPositioningClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'ADO Den Haag';
SELECT T2.heading_accuracy FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Francois Affolter' AND T2.date = '2014-09-18 00:00:00'
SELECT overall_rating FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011'
SELECT COUNT(*) FROM `Match` INNER JOIN `League` ON `Match`.league_id = `League`.id WHERE `Match`.season = '2015/2016' AND `League`.name = 'Scotland Premier League'
SELECT PA.preferred_foot FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_fifa_api_id = PA.player_fifa_api_id ORDER BY P.birthday DESC LIMIT 1
SELECT P.player_name  FROM Player AS P  JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id  WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes);
SELECT COUNT(*) FROM Player P INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE P.weight < 130 AND PA.preferred_foot = 'left';
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.chanceCreationPassingClass = 'Risky'
SELECT defensive_work_rate FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'David Wilson');
SELECT P.birthday FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes);
SELECT League.name FROM League INNER JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Netherlands'
SELECT AVG(M.home_team_goal) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id INNER JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Poland' AND M.season = '2010/2011'
SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height BETWEEN (SELECT MIN(height) FROM Player) AND (SELECT MAX(height) FROM Player) GROUP BY Player.player_name HAVING AVG(Player_Attributes.finishing) = (SELECT MAX(avg_finishing) FROM (SELECT AVG(Player_Attributes.finishing) as avg_finishing FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height BETWEEN (SELECT MIN(height) FROM Player) AND (SELECT MAX(height) FROM Player) GROUP BY Player.player_name))
SELECT player_name FROM Player WHERE height > 180;
SELECT COUNT(*) FROM Player WHERE STRFTIME('%Y', birthday) > '1990';
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170;
SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > 80 AND STRFTIME('%Y', T2.date) BETWEEN '2008' AND '2010'
SELECT T2.potential FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Doran'
SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.preferred_foot = 'left';
SELECT T1.team_long_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeedClass = 'Fast'
SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'CLB'
SELECT T2.team_short_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayPassing > 70
SELECT AVG(T2.overall_rating)  FROM Player AS T1  INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  WHERE T1.height > 170 AND STRFTIME('%Y', T2.date) BETWEEN '2010' AND '2015'
SELECT player_name FROM Player WHERE height = (SELECT MIN(height) FROM Player);
SELECT C.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE L.name = 'Italy Serie A'
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = 31 AND T2.buildUpPlayDribbling = 53 AND T2.buildUpPlayPassing = 32
SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Doran'
SELECT COUNT(*) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Germany 1. Bundesliga' AND strftime('%Y-%m', M.date) BETWEEN '2008-08' AND '2008-10'
SELECT T2.team_short_name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.home_team_goal = 10
SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = 61 AND PA.balance = (SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61)
SELECT ABS(AVG(CASE WHEN T1.player_name = 'Abdou Diallo' THEN T2.ball_control END) - AVG(CASE WHEN T1.player_name = 'Aaron Appindangoye' THEN T2.ball_control END))  FROM Player AS T1  INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name IN ('Abdou Diallo', 'Aaron Appindangoye');
SELECT team_long_name FROM Team WHERE team_short_name = 'GEN';
SELECT CASE      WHEN (SELECT birthday FROM Player WHERE player_name = 'Aaron Lennon') < (SELECT birthday FROM Player WHERE player_name = 'Abdelaziz Barrada')      THEN 'Aaron Lennon is older'      ELSE 'Abdelaziz Barrada is older'  END AS older_player;
SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player);
SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';
SELECT T2.name FROM League AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League'
SELECT name FROM League WHERE country_id IN (SELECT id FROM Country WHERE name = 'Germany')
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)
SELECT COUNT(*) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE STRFTIME('%Y', P.birthday) < '1986' AND PA.defensive_work_rate = 'high'
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY T2.crossing DESC LIMIT 1
SELECT T2.heading_accuracy FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Ariel Borysiuk'
SELECT COUNT(*) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height > 180 AND PA.volleys > 70
SELECT DISTINCT P.player_name FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE PA.volleys > 70 AND PA.dribbling > 70
SELECT COUNT(T1.match_api_id) FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id INNER JOIN League AS T3 ON T2.team_fifa_api_id = T3.id INNER JOIN Country AS T4 ON T3.country_id = T4.id WHERE T1.season = '2008/2009' AND T4.name = 'Belgium'
SELECT T1.long_passing FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.birthday = (SELECT MIN(birthday) FROM Player)
SELECT COUNT(*) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE L.name = 'Belgium Jupiler League' AND strftime('%Y', M.date) = '2009' AND strftime('%m', M.date) = '04'
SELECT L.name FROM League AS L INNER JOIN (SELECT league_id, COUNT(*) AS match_count FROM Match WHERE season = '2008/2009' GROUP BY league_id) AS M ON L.id = M.league_id ORDER BY M.match_count DESC LIMIT 1
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE STRFTIME('%Y', T2.birthday) < '1986'
SELECT ((SELECT PA.overall_rating FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Ariel Borysiuk') - (SELECT PA.overall_rating FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Paulin Puel')) / (SELECT PA.overall_rating FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Paulin Puel') * 100 AS percentage_difference;
SELECT AVG(T2.buildUpPlaySpeed) FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Heart of Midlothian'
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 WHERE T1.player_fifa_api_id = (SELECT T2.player_fifa_api_id FROM Player AS T2 WHERE T2.player_name = 'Pietro Marino')
SELECT SUM(T1.crossing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Aaron Lennox'
SELECT MAX(T2.chanceCreationPassing), T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'Ajax'
SELECT preferred_foot FROM Player_Attributes WHERE player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Abdou Diallo')
SELECT MAX(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Dorlan Pabon'
SELECT AVG(M.away_team_goal)  FROM Match AS M  INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id  INNER JOIN League AS L ON M.league_id = L.id  WHERE T.team_long_name = 'Parma' AND L.country_id = (SELECT id FROM Country WHERE name = 'Italy')
SELECT player_name FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Player_Attributes WHERE overall_rating = 77 AND date = '2016-06-23 00:00:00') ORDER BY birthday ASC LIMIT 1
SELECT T2.overall_rating FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Mooy' AND T2.date = '2016-02-04 00:00:00'
SELECT T1.potential FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Parravicini' AND T1.date = '2010-08-30 00:00:00'
SELECT T2.attacking_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Francesco Migliore' AND T2.date = '2015-05-01 00:00:00'
SELECT PA.defensive_work_rate  FROM Player AS P  INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id  WHERE P.player_name = 'Kevin Berigaud' AND PA.date = '2013-02-22 00:00:00'
SELECT MIN(T1.date) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Kevin Constant' AND T1.crossing = (SELECT MAX(T1.crossing) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Kevin Constant')
SELECT T3.buildUpPlaySpeedClass FROM Team_Attributes AS T3 INNER JOIN Team AS T2 ON T3.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Willem II' AND T3.date = '2011-02-22 00:00:00'
SELECT T1.buildUpPlayDribblingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_short_name = 'LEI' AND T1.date = '2015-09-10 00:00:00'
SELECT T2.buildUpPlayPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'FC Lorient' AND T2.date = '2010-02-22'
SELECT T2.chanceCreationPassingClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.team_long_name = 'PEC Zwolle' AND T2.date = '2013-09-20 00:00:00'
SELECT T1.chanceCreationCrossingClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Hull City' AND T1.date = '2010-02-22 00:00:00'
SELECT T1.defenceAggressionClass FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.team_long_name = 'Hannover 96' AND T1.date = '2015-09-10 00:00:00'
SELECT AVG(T1.overall_rating) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Marko Arnautovic' AND T1.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'
SELECT ((LandonDonovanRating.overall_rating - JordanBoweryRating.overall_rating) / LandonDonovanRating.overall_rating) * 100 AS percentage FROM ( SELECT PA.overall_rating FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Landon Donovan' AND PA.date = '2013-07-12' ) AS LandonDonovanRating, ( SELECT PA.overall_rating FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.player_name = 'Jordan Bowery' AND PA.date = '2013-07-12' ) AS JordanBoweryRating
SELECT player_name FROM Player ORDER BY height DESC LIMIT 5
SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10;
SELECT player_name FROM Player WHERE strftime('%Y', 'now') - strftime('%Y', birthday) >= 35
SELECT COUNT(M.home_team_goal) FROM Match AS M INNER JOIN Player AS P ON P.player_api_id IN (M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5, M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10, M.home_player_11) WHERE P.player_name = 'Aaron Lennon'
SELECT SUM(M.away_team_goal) FROM Match AS M INNER JOIN Player AS P ON P.player_api_id IN (M.away_player_1, M.away_player_2, M.away_player_3, M.away_player_4, M.away_player_5, M.away_player_6, M.away_player_7, M.away_player_8, M.away_player_9, M.away_player_10, M.away_player_11) WHERE P.player_name IN ('Daan Smith', 'Filipe Ferreira')
SELECT SUM(M.home_team_goal) FROM Match AS M INNER JOIN Player AS P ON P.player_api_id IN (M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5, M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10, M.home_player_11) WHERE (strftime('%Y', 'now') - strftime('%Y', P.birthday)) < 31
SELECT DISTINCT P.player_name  FROM Player P  INNER JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id  ORDER BY PA.overall_rating DESC  LIMIT 10
SELECT P.player_name  FROM Player AS P  INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id  WHERE PA.potential = (SELECT MAX(potential) FROM Player_Attributes)
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.attacking_work_rate = 'high'
SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.finishing = 1 ORDER BY (julianday('now') - julianday(P.birthday)) DESC LIMIT 1
SELECT T1.player_name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Belgium'
SELECT P.player_name, C.name AS country_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id INNER JOIN Team AS T ON T.team_api_id = (SELECT team_api_id FROM Player_Attributes WHERE player_api_id = P.player_api_id LIMIT 1) INNER JOIN League AS L ON T.team_fifa_api_id = L.id INNER JOIN Country AS C ON L.country_id = C.id WHERE PA.vision > 89
SELECT C.name  FROM Player AS P  JOIN Team AS T ON P.player_fifa_api_id = T.team_fifa_api_id  JOIN Match AS M ON T.team_api_id = M.home_team_api_id OR T.team_api_id = M.away_team_api_id  JOIN League AS L ON M.league_id = L.id  JOIN Country AS C ON L.country_id = C.id  GROUP BY C.name  ORDER BY AVG(P.weight) DESC  LIMIT 1
SELECT DISTINCT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T1.buildUpPlaySpeedClass = 'Slow'
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.chanceCreationPassingClass = 'Safe'
SELECT AVG(height) FROM Player WHERE player_api_id IN (SELECT player_api_id FROM Team WHERE team_api_id IN (SELECT team_api_id FROM League WHERE country_id = (SELECT id FROM Country WHERE name = 'Italy')))
SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name ASC LIMIT 3;
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31';
SELECT (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) - (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS score_difference
SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 3
SELECT COUNT(*) FROM Player_Attributes WHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes) AND player_api_id IN (SELECT player_api_id FROM Player WHERE preferred_foot = 'left')
SELECT (COUNT(T1.player_api_id) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes)) AS percentage FROM Player_Attributes AS T1 WHERE T1.strength > 80 AND T1.stamina > 80
SELECT Country.name FROM League INNER JOIN Country ON League.country_id = Country.id WHERE League.name = 'Poland Ekstraklasa'
SELECT home_team_goal, away_team_goal FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.date LIKE '2008-09-24%' AND L.name = 'Belgium Jupiler League'
SELECT PA.sprint_speed, PA.agility, PA.acceleration FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE P.player_name = 'Alexis Blin'
SELECT T2.buildUpPlaySpeedClass FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge' AND T2.buildUpPlaySpeedClass IN ('Slow', 'Balanced', 'Fast')
SELECT COUNT(*) FROM Match WHERE season = '2015/2016' AND league_id = (SELECT id FROM League WHERE name = 'Italy Serie A');
SELECT MAX(home_team_goal) FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T2.name = 'Netherlands Eredivisie'
SELECT T1.finishing, T1.curve FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.weight = (SELECT MAX(weight) FROM Player)
SELECT T3.name FROM Match AS T1 INNER JOIN Team AS T2 ON T1.home_team_api_id = T2.team_api_id OR T1.away_team_api_id = T2.team_api_id INNER JOIN League AS T3 ON T1.league_id = T3.id WHERE T1.season = '2015/2016' GROUP BY T3.name ORDER BY COUNT(T1.id) DESC LIMIT 1;
SELECT T2.team_long_name FROM Team AS T2 INNER JOIN Match AS T1 ON T2.team_api_id = T1.away_team_api_id WHERE T1.away_team_goal = (SELECT MAX(away_team_goal) FROM Match)
SELECT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes) LIMIT 1;
SELECT (COUNT(CASE WHEN P.height < 180 AND PA.overall_rating > 70 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id
SELECT      SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS Male_Inpatients,     SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS Male_Outpatients,     ((SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END)) * 100.0 /      NULLIF(SUM(CASE WHEN SEX = 'M' THEN 1 ELSE 0 END), 0)) AS Deviation_Percentage FROM Patient  WHERE SEX = 'M';
SELECT (COUNT(CASE WHEN SEX = 'F' AND strftime('%Y', Birthday) > '1930' THEN ID END) * 100.0 / COUNT(CASE WHEN SEX = 'F' THEN ID END)) AS percentage FROM Patient
SELECT (COUNT(CASE WHEN Admission = '+' THEN 1 END) * 100.0 / COUNT(ID)) AS Percentage FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31'
SELECT      SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) * 1.0 /      NULLIF(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END), 0) AS ratio FROM Patient  WHERE Diagnosis = 'SLE';
SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609
SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = '163109'
SELECT T1.ID, T2.SEX, T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.LDH > 500
SELECT T1.ID, (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) AS age FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'
SELECT P.ID, P.SEX, P.Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 2
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday >= '1937-01-01' AND T1.Birthday <= '1937-12-31' AND T2.`T-CHO` >= 250
SELECT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5
SELECT (COUNT(CASE WHEN T2.TP < 6.0 OR T2.TP > 8.5 THEN 1 END) * 100.0 / COUNT(CASE WHEN T1.SEX = 'F' THEN 1 END)) AS percentage  FROM Patient AS T1  INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID  WHERE T1.SEX = 'F'
SELECT AVG(T2.`aCL IgG`) FROM Examination AS T2 INNER JOIN Patient AS T1 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday) >= 50
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND STRFTIME('%Y', Description) = '1997' AND Admission = '-'
SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) AS youngest_age FROM Patient WHERE Birthday IS NOT NULL AND `First Date` IS NOT NULL
SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 1 AND STRFTIME('%Y', E.`Examination Date`) = '1997' AND P.SEX = 'F'
SELECT MAX(strftime('%Y', Birthday)) - MIN(strftime('%Y', Birthday)) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG >= 200
SELECT E.Symptoms, E.Diagnosis FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Birthday = (SELECT MIN(Birthday) FROM Patient WHERE ID IN (SELECT ID FROM Examination))
SELECT COUNT(T1.ID) / 12.0 AS average_male_patients FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1998-01-01' AND '1998-12-31' AND T2.SEX = 'M'
SELECT T1.`First Date`, (STRFTIME('%Y', T1.`First Date`) - STRFTIME('%Y', T1.`Birthday`)) AS Age FROM Patient AS T1 LEFT JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T1.Birthday = (SELECT MAX(Birthday) FROM Patient WHERE Diagnosis = 'SJS')
SELECT SUM(CASE WHEN L.UA <= 8.0 AND P.SEX = 'M' THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN L.UA <= 6.5 AND P.SEX = 'F' THEN 1 ELSE 0 END), 0) FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.UA IS NOT NULL AND P.SEX IS NOT NULL;
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P LEFT JOIN Examination AS E ON P.ID = E.ID WHERE E.`Examination Date` IS NULL OR (STRFTIME('%Y', E.`Examination Date`) - STRFTIME('%Y', P.`First Date`)) >= 1
SELECT COUNT(DISTINCT P.ID) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE STRFTIME('%Y', E."Examination Date") - STRFTIME('%Y', P.Birthday) < 18 AND E."Examination Date" BETWEEN '1990-01-01' AND '1993-12-31'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-BIL` > 2.0
SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1
SELECT AVG(STRFTIME('%Y', '1991-10-01') - STRFTIME('%Y', P.Birthday)) AS average_age FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.Date BETWEEN '1991-10-01' AND '1991-10-30' AND P.Birthday IS NOT NULL
SELECT SUBTRACT(year(`Examination Date`), year(P.Birthday)), `E`.`Diagnosis` FROM `Laboratory` AS `L` INNER JOIN `Examination` AS `E` ON `L`.`ID` = `E`.`ID` INNER JOIN `Patient` AS `P` ON `L`.`ID` = `P`.`ID` WHERE `L`.`HGB` = (SELECT MAX(`HGB`) FROM `Laboratory`)
SELECT `ANA` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'
SELECT T1.`T-CHO` FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.ID = 2927464 AND T1.Date = '1995-09-04' AND T1.`T-CHO` < 250
SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY `First Date` ASC LIMIT 1
SELECT T2.`aCL IgM` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T1.Description = '1994-02-19' AND T2.`Examination Date` = '1993-11-12'
SELECT P.SEX FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GPT = 9 AND L.Date = '1992-06-12'
SELECT (1991 - STRFTIME('%Y', T1.Birthday)) AS Age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = '8.4' AND T2.Date = '1991-10-21'
SELECT COUNT(T3.ID) FROM Laboratory AS T3 WHERE T3.ID = (SELECT T1.ID FROM Patient AS T1 WHERE T1."First Date" = '1991-06-13' AND T1.Diagnosis = 'SJS') AND STRFTIME('%Y', T3.Date) = '1995'
SELECT P.Diagnosis FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Diagnosis = 'SLE' AND E.`Examination Date` = '1997-01-27'
SELECT T1.Symptoms FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-03-01' AND T1.`Examination Date` = '1993-09-27'
SELECT SUM(CASE WHEN T1.Date LIKE '1981-11-%' THEN T1.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T1.Date LIKE '1981-12-%' THEN T1.`T-CHO` ELSE 0 END) AS decrease_rate FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday = '1959-02-18'
SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Diagnosis = 'Behcet' AND E.`Examination Date` BETWEEN '1997-01-01' AND '1997-12-31'
SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND T2.GPT > 30 AND T2.ALB < 4
SELECT ID FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.Thrombosis = 2 AND E.ANA = 'S' AND E.`aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination)
SELECT (SUM(CASE WHEN L.UA <= 6.5 THEN 1 ELSE 0 END) * 100.0) / COUNT(CASE WHEN L.`U-PRO` > 0 AND L.`U-PRO` < 30 THEN 1 END) AS percentage FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`U-PRO` > 0 AND L.`U-PRO` < 30;
SELECT (SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) * 100.0 / COUNT(ID)) AS percentage FROM Patient WHERE SEX = 'M' AND strftime('%Y', "First Date") = '1981'
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.Date LIKE '1991-10%' AND T2.`T-BIL` < 2.0
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2."ANA Pattern" != 'P' AND T1.SEX = 'F' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989'
SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP > 2 AND T3.CRE = 1 AND T3.LDH = 123
SELECT AVG(T1.ALB) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.PLT > 400 AND T2.Diagnosis = 'SLE'
SELECT Symptoms FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE P.Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1
SELECT T1.Description, T1.Diagnosis FROM Patient AS T1 WHERE T1.ID = 48473
SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';
SELECT COUNT(DISTINCT T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Date) = '1997' AND (T1.TP <= 6 OR T1.TP >= 8.5)
SELECT (SUM(CASE WHEN P.Diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) * 100.0 / NULLIF(COUNT(CASE WHEN E.Symptoms LIKE '%thrombocytopenia%' THEN 1 END), 0)) AS proportion FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Symptoms LIKE '%thrombocytopenia%'
SELECT (COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100.0 / COUNT(*)) FROM Patient WHERE strftime('%Y', Birthday) = '1980' AND Diagnosis = 'RA'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.SEX = 'M' AND E.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND P.Diagnosis = 'BEHCET' AND P.Admission = '-'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.WBC < 3.5
SELECT (JULIANDAY(E.`Examination Date`) - JULIANDAY(P.`First Date`)) AS DaysDifference FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.ID = 821298 ORDER BY E.`Examination Date` LIMIT 1
SELECT CASE WHEN (P.SEX = 'M' AND L.UA > 8.0) OR (P.SEX = 'F' AND L.UA > 6.5) THEN 'Yes' ELSE 'No' END AS `Uric Acid Status` FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE P.ID = 57266
SELECT T1.Date FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GOT >= 60 AND T2.ID = 48473
SELECT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60
SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.GPT > 60 ORDER BY T2.Birthday ASC
SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500;
SELECT T1.ID, (strftime('%Y', current_timestamp) - strftime('%Y', T2.Birthday)) AS age FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.LDH BETWEEN 600 AND 800
SELECT P.Admission, COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.ALP < 300 GROUP BY P.Admission
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01' AND T2.ALP < 300
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0
SELECT (T1.TP - 8.5) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'F' AND T1.TP > 8.5
SELECT * FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND (L.ALB <= 3.5 OR L.ALB >= 5.5) ORDER BY P.Birthday DESC
SELECT P.ID, CASE WHEN L.ALB BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range' ELSE 'Out of Normal Range' END AS Albumin_Status  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE STRFTIME('%Y', P.Birthday) = '1982'
SELECT (COUNT(T2.ID) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F')) AS percentage  FROM Laboratory AS T1  INNER JOIN Patient AS T2 ON T1.ID = T2.ID  WHERE T2.SEX = 'F' AND T1.UA > 6.5
WITH LatestResults AS (SELECT L.ID, L.UA, P.SEX, L.Date, ROW_NUMBER() OVER (PARTITION BY L.ID ORDER BY L.Date DESC) AS rn FROM Laboratory L INNER JOIN Patient P ON L.ID = P.ID) SELECT AVG(UA) FROM LatestResults WHERE rn = 1 AND ((SEX = 'M' AND UA < 8.0) OR (SEX = 'F' AND UA < 6.5));
SELECT T1.ID, T2.SEX, T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.UN = 29
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'RA' AND T2.UN < 30
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.CRE >= 1.5
SELECT (SUM(CASE WHEN P.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN P.SEX = 'F' THEN 1 ELSE 0 END)) AS result FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CRE >= 1.5
SELECT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` = (SELECT MAX(`T-BIL`) FROM Laboratory)
SELECT T1.SEX, COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2."T-BIL" >= 2.0 GROUP BY T1.SEX
SELECT P.ID, L.`T-CHO` FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory) AND P.Birthday = (SELECT MIN(Birthday) FROM Patient WHERE ID IN (SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.`T-CHO` = (SELECT MAX(`T-CHO`) FROM Laboratory)))
SELECT AVG(STRFTIME('%Y', 'now') - STRFTIME('%Y', birthday)) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.`T-CHO` >= 250
SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.TG >= 200 AND STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday) > 50
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.CPK < 250
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Birthday >= '1936-01-01' AND P.Birthday <= '1956-12-31' AND P.SEX = 'M' AND L.CPK >= 250
SELECT P.ID, P.SEX, STRFTIME('%Y', 'now') - STRFTIME('%Y', P.Birthday) AS age FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU >= 180 AND L.`T-CHO` < 250
SELECT P.ID, L.GLU FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GLU < 180 AND STRFTIME('%Y', P.Description) >= '1991'
SELECT P.ID, P.SEX, P.BIRTHDAY FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.WBC <= 3.5 OR L.WBC >= 9.0 GROUP BY P.SEX, P.ID, P.BIRTHDAY ORDER BY P.BIRTHDAY ASC
SELECT T1.ID, (strftime('%Y', current_timestamp) - strftime('%Y', T1.Birthday)) AS age, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5
SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) >= 50 AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0)
SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.HGB < 10
SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday DESC LIMIT 1
SELECT P1.ID, (strftime('%Y', 'now') - strftime('%Y', P1.Birthday)) AS age FROM Patient AS P1 INNER JOIN Laboratory AS L ON P1.ID = L.ID WHERE L.HCT >= 52 GROUP BY P1.ID HAVING COUNT(L.ID) > 2
SELECT AVG(HCT) FROM Laboratory WHERE Date LIKE '1991%' AND HCT < 29
SELECT COUNT(CASE WHEN PLT < 100 THEN 1 END) AS lower_count, COUNT(CASE WHEN PLT > 400 THEN 1 END) AS higher_count, (COUNT(CASE WHEN PLT < 100 THEN 1 END) - COUNT(CASE WHEN PLT > 400 THEN 1 END)) AS difference FROM Laboratory WHERE PLT < 100 OR PLT > 400
SELECT DISTINCT T2.ID FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date LIKE '1984%' AND (strftime('%Y', 'now') - strftime('%Y', T2.Birthday)) < 50 AND T1.PLT BETWEEN 100 AND 400
SELECT (SUM(CASE WHEN T1.SEX = 'F' AND T2.PT >= 14 THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(T2.PT >= 14), 0)) * 100 AS percentage_female_abnormal_PT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday)) > 55
SELECT DISTINCT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE STRFTIME('%Y', P.`First Date`) > '1992' AND L.PT < 14
SELECT COUNT(E.ID) FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE E.`Examination Date` > '1997-01-01' AND L.APTT < 45 AND L.APTT IS NOT NULL
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.APTT > 45 AND T2.Thrombosis = 3
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.WBC BETWEEN 3.5 AND 9.0 AND (T2.FG <= 150 OR T2.FG >= 450)
SELECT COUNT(DISTINCT T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Birthday > '1980-01-01' AND (T1.FG < 150 OR T1.FG > 450)
SELECT DISTINCT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`U-PRO` >= 30
--error--
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E."aCL IgG" < 900 AND E.Symptoms = 'abortion'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.IGG BETWEEN 900 AND 2000 AND E.Symptoms IS NOT NULL
SELECT P.Diagnosis  FROM Laboratory AS L  INNER JOIN Patient AS P ON L.ID = P.ID  WHERE L.IGA BETWEEN 80 AND 500  ORDER BY L.IGA DESC  LIMIT 1
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND T1.`First Date` >= '1990-01-01'
SELECT P.Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE E.`aCL IgM` NOT BETWEEN 40 AND 400 GROUP BY P.Diagnosis ORDER BY COUNT(P.Diagnosis) DESC LIMIT 1
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE (L.CRP LIKE '+' OR L.CRP LIKE '-' OR L.CRP < 1.0) AND P.Description IS NULL;
SELECT COUNT(DISTINCT T2.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.CRP NOT IN ('+-', '-') AND T1.CRP >= 1.0 AND (STRFTIME('%Y', 'now') - STRFTIME('%Y', T2.Birthday)) < 18
SELECT COUNT(DISTINCT T2.ID) FROM Patient AS T2 INNER JOIN Laboratory AS T1 ON T2.ID = T1.ID INNER JOIN Examination AS T3 ON T2.ID = T3.ID WHERE T1.RA IN ('-', '+-') AND T3.KCT = '+'
SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday >= '1995-01-01' AND T2.RA IN ('-', '+-')
SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.Birthday) > 60
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.RF < 20 AND E.Thrombosis = 0
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.C3 > 35 AND T2.`ANA Pattern` = 'P'
SELECT E.ID FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.HCT <= 29 OR L.HCT >= 52 ORDER BY E."aCL IgA" DESC LIMIT 1
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'APS' AND L.C4 > 10
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.RNP IN ('-', '+-') AND T2.Admission = '+'
SELECT P.Birthday FROM Patient P INNER JOIN Laboratory L ON P.ID = L.ID WHERE L.RNP NOT IN ('-', '+-') ORDER BY P.Birthday DESC LIMIT 1
SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('-', '+-') AND T1.Thrombosis = 1
SELECT DISTINCT P.ID  FROM Patient AS P  INNER JOIN Laboratory AS L ON P.ID = L.ID  WHERE L.SM NOT IN ('-', '+-')  ORDER BY P.Birthday DESC  LIMIT 3
SELECT DISTINCT T3.ID FROM Examination AS T1 INNER JOIN Patient AS T3 ON T1.ID = T3.ID LEFT JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` >= '1997-01-01' AND (T2.SC170 IN ('-', '+-') OR T2.SC170 IS NULL)
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.SC170 IN ('-', '+-') AND T1.SEX = 'M' AND T2.Symptoms = 'vertigo'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('-', '+-') AND strftime('%Y', T1.`First Date`) < '1990'
SELECT P.ID FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.SSA NOT IN ('-', '+-') ORDER BY P.`First Date` ASC LIMIT 1
SELECT COUNT(DISTINCT T2.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB IN ('-', '0') AND T1.Diagnosis = 'SLE'
SELECT COUNT(DISTINCT L.ID)  FROM Laboratory AS L  INNER JOIN Examination AS E ON L.ID = E.ID  WHERE L.SSB IN ('-', '+-') AND E.Symptoms IS NOT NULL
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.CENTROMEA IN ('-', '+-') AND L.SSB IN ('-', '+-') AND P.SEX = 'M'
SELECT DISTINCT P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.DNA >= 8
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.DNA < 8 AND P.Description IS NULL
SELECT COUNT(*) FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Admission = '+' AND E."DNA-II" >= 8
SELECT (COUNT(CASE WHEN E.Diagnosis = 'SLE' THEN E.ID END) * 1.0 / COUNT(L.ID)) * 100 AS percentage FROM Examination AS E INNER JOIN Laboratory AS L ON E.ID = L.ID WHERE L.GOT >= 60
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60
SELECT MAX(P.Birthday) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT >= 60
SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE L.GOT < 60 AND P.SEX = 'M'
SELECT MIN(`First Date`) FROM Patient WHERE ID = (SELECT ID FROM Laboratory WHERE LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500))
SELECT MAX(P.`First Date`) FROM `Patient` AS P INNER JOIN `Laboratory` AS L ON P.`ID` = L.`ID` WHERE L.`LDH` >= 500
SELECT COUNT(*) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.ALP >= 300 AND T2.Admission = '+'
SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '-' AND L.ALP < 300
SELECT T2.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.TP < 6.0
SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5
SELECT T1.Date FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.ALB > 3.5 AND T1.ALB < 5.5 AND T1.ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB > 3.5 AND ALB < 5.5)
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB > 3.5 AND T2.ALB < 5.5) AND (T2.TP BETWEEN 6.0 AND 8.5)
SELECT T3.`aCL IgG`, T3.`aCL IgM`, T3.`aCL IgA`  FROM Laboratory AS T1  INNER JOIN Patient AS T2 ON T1.ID = T2.ID  INNER JOIN Examination AS T3 ON T2.ID = T3.ID  WHERE T2.SEX = 'F' AND T1.UA > 6.50  ORDER BY T1.UA DESC  LIMIT 1
SELECT MAX(T1.ANA) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE < 1.5
SELECT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 AND T2.`aCL IgA` = (SELECT MAX(`aCL IgA`) FROM Examination WHERE ID IN (SELECT ID FROM Laboratory WHERE CRE < 1.5))
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.`T-BIL` >= 2.0 AND T2.`ANA Pattern` LIKE '%P%'
SELECT T1.ANA FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` = (SELECT MAX(T3.`T-BIL`) FROM Laboratory AS T3 WHERE T3.`T-BIL` < 2.0) AND T2.`T-BIL` < 2.0
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.`T-CHO` >= 250 AND T2.KCT = '-'
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.`T-CHO` < 250 AND T2.`ANA Pattern` = 'P'
SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.TG < 200 AND T2.Symptoms IS NOT NULL
SELECT P.Diagnosis FROM Laboratory AS L INNER JOIN Patient AS P ON L.ID = P.ID WHERE L.TG = (SELECT MAX(TG) FROM Laboratory WHERE TG < 200) LIMIT 1
SELECT DISTINCT E.ID  FROM Examination AS E  INNER JOIN Laboratory AS L ON E.ID = L.ID  WHERE E.Thrombosis = 0 AND L.CPK < 250
SELECT COUNT(DISTINCT T3.ID) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Patient AS T3 ON T1.ID = T3.ID WHERE T1.CPK < 250 AND (T2.KCT = '+' OR T2.RVVT = '+' OR T2.LAC = '+')
SELECT MIN(T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID INNER JOIN Examination AS E ON P.ID = E.ID WHERE L.GLU < 180 AND E.Thrombosis = 0
SELECT COUNT(DISTINCT P.ID) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Admission = '+' AND L.WBC BETWEEN 3.5 AND 9.0
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0
SELECT T1.ID FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE (T1.RBC <= 3.5 OR T1.RBC >= 6.0) AND T2.Admission = '-'
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T3.Diagnosis IS NOT NULL
SELECT T1.PLT FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.PLT > 100 AND T1.PLT < 400 AND T2.Diagnosis = 'MCTD'
SELECT AVG(T1.PT) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.SEX = 'M' AND T1.PT < 14
SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Thrombosis IN (1, 2) AND T2.PT < 14
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'
SELECT COUNT(*) FROM member WHERE link_to_major IN (SELECT major_id FROM major WHERE college = 'College of Engineering');
SELECT DISTINCT T1.first_name || ' ' || T1.last_name AS full_name  FROM member AS T1  INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id  WHERE T2.department = 'Art and Design Department'
SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer'
SELECT T3.phone FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer'
SELECT COUNT(DISTINCT T3.member_id) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'
SELECT T2.event_name FROM event AS T2 INNER JOIN (SELECT link_to_event, COUNT(link_to_member) AS attendance_count FROM attendance GROUP BY link_to_event) AS T1 ON T1.link_to_event = T2.event_id ORDER BY T1.attendance_count DESC LIMIT 1
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT T3.event_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean'
SELECT COUNT(*) FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE STRFTIME('%Y', T3.event_date) = '2019' AND T2.first_name = 'Sacha' AND T2.last_name = 'Harrison' AND T3.event_name = 'Student_Club'
SELECT COUNT(DISTINCT T1.event_id)  FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event  WHERE T1.type = 'Meeting'  GROUP BY T1.event_id  HAVING COUNT(DISTINCT T2.link_to_member) > 10
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name HAVING COUNT(T2.link_to_member) > 20
SELECT COUNT(T1.link_to_member) * 1.0 / COUNT(DISTINCT T2.event_name) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.type = 'Meeting' AND STRFTIME('%Y', T2.event_date) = '2020'
SELECT expense_description, MAX(cost) FROM expense GROUP BY expense_description ORDER BY MAX(cost) DESC LIMIT 1
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'
SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'
SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'
SELECT T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Tyler' AND T2.last_name = 'Hewitt'
SELECT SUM(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President'
SELECT SUM(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food' AND T2.event_name = 'September Meeting'
SELECT Z.city, Z.state FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE M.position = 'President'
SELECT T1.first_name || ' ' || T1.last_name AS full_name  FROM member AS T1  INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code  WHERE T2.state = 'Illinois'
SELECT SUM(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.event_name = 'September Meeting'
SELECT DISTINCT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name IN ('Pierce', 'Guidi')
SELECT SUM(b.amount) FROM budget AS b INNER JOIN event AS e ON b.link_to_event = e.event_id WHERE e.event_name = 'October Speaker'
SELECT NOT EXISTS (SELECT * FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T2.event_name = 'October Meeting' AND T2.event_date = '2019-10-08' AND T1.approved = 'false')
SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.link_to_member = (SELECT member_id FROM member WHERE first_name = 'Elijah' AND last_name = 'Allen') AND STRFTIME('%m', T1.expense_date) IN ('09', '10')
SELECT      SUM(CASE WHEN STRFTIME('%Y', T2.event_date) = '2019' AND (T2.event_name LIKE '%Student_Club%' OR T2.type LIKE '%Student_Club%') THEN T1.spent ELSE 0 END) -      SUM(CASE WHEN STRFTIME('%Y', T2.event_date) = '2020' AND (T2.event_name LIKE '%Student_Club%' OR T2.type LIKE '%Student_Club%') THEN T1.spent ELSE 0 END) AS difference  FROM budget AS T1  INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id;
SELECT location FROM event WHERE event_name = 'Spring Budget Review'
SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'
SELECT remaining FROM budget WHERE amount = (SELECT MAX(amount) FROM budget WHERE category = 'Food');
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'
SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'
SELECT Z.county FROM zip_code AS Z INNER JOIN member AS M ON Z.zip_code = M.zip WHERE M.first_name = 'Adela' AND M.last_name = 'O''Gallagher'
SELECT COUNT(*) FROM budget AS B INNER JOIN event AS E ON B.link_to_event = E.event_id WHERE E.event_name = 'November Meeting' AND B.remaining < 0
SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'
SELECT T2.status FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.expense_description = 'Post Cards, Posters' AND T1.expense_date = '2019-08-20'
SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Brent' AND T2.last_name = 'Thomason'
SELECT COUNT(*) FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.major_name = 'Human Development and Family Studies' AND M.t_shirt_size = 'Large'
SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
SELECT J.department FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE M.position = 'President';
SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.source = 'Dues' AND T2.first_name = 'Connor' AND T2.last_name = 'Hilton'
SELECT T2.first_name || ' ' || T2.last_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.source = 'Dues' AND T1.date_received = (SELECT MIN(date_received) FROM income WHERE source = 'Dues')
SELECT (SUM(CASE WHEN B.category = 'Advertisement' AND E.event_name = 'Yearly Kickoff' THEN B.amount ELSE 0 END) /          NULLIF(SUM(CASE WHEN B.category = 'Advertisement' AND E.event_name = 'October Meeting' THEN B.amount ELSE 0 END), 0)) AS times_more FROM budget AS B INNER JOIN event AS E ON B.link_to_event = E.event_id WHERE B.category = 'Advertisement' AND (E.event_name = 'Yearly Kickoff' OR E.event_name = 'October Meeting');
SELECT (SUM(T1.amount) * 1.0 / NULLIF(SUM(CASE WHEN T2.event_name = 'November Speaker' THEN T1.amount END), 0)) * 100 AS percentage  FROM budget AS T1  INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id  WHERE T1.category = 'Parking' AND T2.event_name = 'November Speaker'
SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza';
SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';
SELECT DISTINCT department FROM major WHERE college = 'College of Humanities and Social Sciences';
SELECT z.city, z.county, z.state  FROM member AS m  INNER JOIN zip_code AS z ON m.zip = z.zip_code  WHERE m.first_name = 'Amy' AND m.last_name = 'Firth'
SELECT E.expense_description  FROM expense AS E  INNER JOIN budget AS B ON E.link_to_budget = B.budget_id  WHERE B.remaining = (SELECT MIN(remaining) FROM budget)
SELECT DISTINCT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting'
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.college ORDER BY COUNT(T1.member_id) DESC LIMIT 1
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.amount = (SELECT MAX(amount) FROM budget)
SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President'
SELECT COUNT(DISTINCT T1.link_to_member) FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer'
SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Casey' AND T2.last_name = 'Mason'
SELECT COUNT(*) FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE Z.state = 'Maryland'
SELECT COUNT(T1.link_to_event) FROM attendance AS T1 WHERE T1.link_to_member = (SELECT member_id FROM member WHERE phone = '954-555-6240')
SELECT M.first_name, M.last_name FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.department = 'School of Applied Sciences, Technology and Education'
SELECT T2.event_name, (T1.spent * 1.0 / T1.amount) AS spend_to_budget_ratio  FROM budget AS T1  INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id  WHERE T2.status = 'Closed' AND T1.amount > 0  ORDER BY spend_to_budget_ratio DESC  LIMIT 1
SELECT COUNT(*) FROM member WHERE position = 'President';
SELECT MAX(spent) FROM budget;
SELECT COUNT(*) FROM event WHERE type = 'Meeting' AND STRFTIME('%Y', event_date) = '2020';
SELECT SUM(spent) FROM budget WHERE category = 'Food';
SELECT T1.first_name || ' ' || T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id HAVING COUNT(T2.link_to_event) > 7
SELECT T1.first_name, T1.last_name  FROM member AS T1  INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member  INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id  INNER JOIN major AS T4 ON T1.link_to_major = T4.major_id  WHERE T4.major_name = 'Interior Design' AND T3.event_name = 'Community Theater'
SELECT T1.first_name || ' ' || T1.last_name AS full_name  FROM member AS T1  INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code  WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'
SELECT SUM(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Grant' AND T2.last_name = 'Gilmour'
SELECT DISTINCT T1.first_name || ' ' || T1.last_name AS full_name  FROM member AS T1  INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member  WHERE T2.amount > 40
SELECT SUM(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Yearly Kickoff'
SELECT M.first_name, M.last_name  FROM member AS M  INNER JOIN attendance AS A ON M.member_id = A.link_to_member  INNER JOIN budget AS B ON A.link_to_event = B.link_to_event  INNER JOIN event AS E ON B.link_to_event = E.event_id  WHERE E.event_name = 'Yearly Kickoff';
SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount = (SELECT MAX(amount) FROM income WHERE link_to_member IS NOT NULL)
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.cost = (SELECT MIN(cost) FROM expense)
SELECT (SUM(CASE WHEN T3.event_name = 'Yearly Kickoff' THEN T1.cost ELSE 0 END) / SUM(T1.cost)) * 100 AS percentage FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id
SELECT (SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END), 0)) AS ratio FROM major
SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' ORDER BY amount DESC LIMIT 1
SELECT T1.first_name || ' ' || T1.last_name AS full_name, T1.email  FROM member AS T1  WHERE T1.position = 'Secretary'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Physics Teaching'
SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND STRFTIME('%Y', T1.event_date) = '2019'
SELECT COUNT(DISTINCT T1.link_to_event) AS events_attended, T2.major_name  FROM attendance AS T1  INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id  INNER JOIN major AS T2 ON T3.link_to_major = T2.major_id  WHERE T3.first_name = 'Luisa' AND T3.last_name = 'Guidi'
SELECT AVG(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food' AND T2.status = 'Closed'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.spent = (SELECT MAX(T3.spent) FROM budget AS T3 WHERE T3.category = 'Advertisement')
SELECT COUNT(*) > 0 FROM attendance AS T1  INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id  INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id  WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer'
SELECT (SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) * 100.0 / COUNT(event_id)) AS percentage_share FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'
SELECT T3.cost FROM expense AS T3 INNER JOIN budget AS T2 ON T3.link_to_budget = T2.budget_id INNER JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T3.expense_description = 'Posters' AND T1.event_name = 'September Speaker'
SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1
SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining ASC LIMIT 1
SELECT T2.category, SUM(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting' AND T1.approved = 'true' GROUP BY T2.category
SELECT T1.category, T1.amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'April Speaker' ORDER BY T1.amount ASC
SELECT MAX(amount) FROM budget WHERE category = 'Food';
SELECT amount FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3
SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking';
SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20';
SELECT T1.first_name || ' ' || T1.last_name AS full_name, COALESCE(SUM(T2.cost), 0) AS total_cost  FROM member AS T1  LEFT JOIN expense AS T2 ON T1.member_id = T2.link_to_member  WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'  GROUP BY T1.first_name, T1.last_name
SELECT DISTINCT T2.expense_description FROM expense AS T2 INNER JOIN member AS T1 ON T2.link_to_member = T1.member_id WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'
SELECT DISTINCT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'X-Large'
SELECT DISTINCT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Phillip' AND T1.last_name = 'Cullen'
SELECT T1.position FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business'
SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'
SELECT DISTINCT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30
SELECT DISTINCT T1.category FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.location = 'MU 215'
SELECT B.category FROM event AS E INNER JOIN budget AS B ON E.event_id = B.link_to_event WHERE E.event_date = '2020-03-24T12:00:00'
SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'
SELECT (SUM(CASE WHEN T1.position = 'Member' AND T2.major_name = 'Mathematics' THEN 1 ELSE 0 END) * 100.0 / COUNT(T1.member_id)) AS percentage FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id
SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'
SELECT COUNT(*) FROM income WHERE amount = 50;
SELECT COUNT(*) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large';
SELECT COUNT(*) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'
SELECT T1.last_name, T2.department, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'
SELECT DISTINCT B.category  FROM event AS E  INNER JOIN budget AS B ON E.event_id = B.link_to_event  WHERE E.location = 'MU 215' AND E.type = 'Guest Speaker' AND B.spent = 0
SELECT zip_code.city, zip_code.state FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'Electrical and Computer Engineering Department' AND member.position = 'Member'
SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.type = 'Social' AND T1.location = '900 E. Washington St.' AND T3.position = 'Vice President'
SELECT T2.last_name, T2.position FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Pizza' AND T1.expense_date = '2019-09-10'
SELECT T2.last_name FROM member AS T2 INNER JOIN attendance AS T1 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.position = 'Member' AND T3.event_name = 'Women''s Soccer'
SELECT (COUNT(CASE WHEN T2.amount = 50 THEN 1 END) * 100.0 / COUNT(T1.member_id)) AS percentage FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium' AND T1.position = 'Member'
SELECT DISTINCT state FROM zip_code WHERE type = 'PO Box'
SELECT DISTINCT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'
--error--
SELECT DISTINCT M.first_name, M.last_name, A.link_to_event  FROM expense AS E  INNER JOIN member AS M ON E.link_to_member = M.member_id  INNER JOIN attendance AS A ON M.member_id = A.link_to_member  WHERE E.approved = 'true' AND E.expense_date BETWEEN '2019-01-10' AND '2019-11-19'
SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Katy' AND T1.link_to_major = 'rec1N0upiVLy5esTO'
SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'
SELECT DISTINCT T2.email FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 20 AND T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19'
SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'education' AND T2.college = 'College of Education & Human Services' AND T1.position = 'Member'
SELECT (SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) * 100.0 / COUNT(budget_id)) AS percentage FROM budget
SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' AND '2020-03-31'
SELECT expense_description FROM expense GROUP BY expense_description HAVING (SUM(cost) / COUNT(expense_id)) > 50
SELECT first_name || ' ' || last_name AS full_name FROM member WHERE t_shirt_size = 'X-Large';
SELECT (SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) * 100.0 / COUNT(zip_code)) AS percentage FROM zip_code
SELECT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0
SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100
SELECT DISTINCT T1.first_name || ' ' || T1.last_name AS full_name, T2.major_name  FROM expense AS T3  INNER JOIN member AS T1 ON T3.link_to_member = T1.member_id  INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id  WHERE T3.cost > 100
SELECT zip.city, zip.county FROM event AS E INNER JOIN attendance AS A ON E.event_id = A.link_to_event INNER JOIN income AS I ON A.link_to_member = I.link_to_member INNER JOIN member AS M ON A.link_to_member = M.member_id INNER JOIN zip_code AS zip ON M.zip = zip.zip_code GROUP BY zip.city, zip.county HAVING COUNT(I.income_id) > 40
SELECT T1.link_to_member, MAX(T1.cost)  FROM expense AS T1  INNER JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member  GROUP BY T1.link_to_member  HAVING COUNT(DISTINCT T2.link_to_event) > 1  ORDER BY MAX(T1.cost) DESC  LIMIT 1
SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Parking' AND T2.amount < (SELECT AVG(cost) FROM expense WHERE category = 'Parking')
SELECT (SUM(T1.cost) / COUNT(T3.event_id)) * 100 FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.type = 'Game'
SELECT T1.budget_id FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Water, chips, cookies' AND T2.cost = (SELECT MAX(cost) FROM expense WHERE expense_description = 'Water, chips, cookies')
SELECT T2.first_name, T2.last_name  FROM member AS T2  INNER JOIN (SELECT link_to_member, SUM(cost) AS total_spent              FROM expense              GROUP BY link_to_member              ORDER BY total_spent DESC              LIMIT 5) AS T1  ON T2.member_id = T1.link_to_member
SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 WHERE T1.member_id IN (SELECT link_to_member FROM expense WHERE cost > (SELECT AVG(cost) FROM expense))
SELECT      (SUM(CASE WHEN Z.state = 'Maine' THEN 1 ELSE 0 END) * 1.0 / COUNT(M.member_id)) -      (SUM(CASE WHEN Z.state = 'Vermont' THEN 1 ELSE 0 END) * 1.0 / COUNT(M.member_id)) AS percentage_difference FROM      member AS M  INNER JOIN      zip_code AS Z ON M.zip = Z.zip_code WHERE      M.position = 'Member'
SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'
SELECT T1.first_name, T1.last_name, T2.cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Water, Veggie tray, supplies'
SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Elementary Education'
SELECT T1.category, T1.amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'January Speaker'
SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Food'
SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.amount  FROM member AS T1  INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member  WHERE T2.date_received = '2019-09-09'
SELECT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'
SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.college  FROM member AS T1  INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id  WHERE T1.position = 'Secretary'
SELECT SUM(B.spent) AS total_spent, E.event_name FROM budget AS B INNER JOIN event AS E ON B.link_to_event = E.event_id WHERE B.category = 'Speaker Gifts' GROUP BY E.event_name
SELECT T1.city FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE LOWER(T2.first_name) = 'garrett' AND LOWER(T2.last_name) = 'girke'
SELECT T1.first_name || ' ' || T1.last_name AS full_name, T1.position  FROM member AS T1  INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code  WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092
SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium';
SELECT      (COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 1.0) /      NULLIF(COUNT(CASE WHEN Currency = 'CZK' THEN 1 END), 0) AS ratio FROM customers;
SELECT T2.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date BETWEEN '201201' AND '201212' AND T2.Segment = 'LAM' GROUP BY T2.CustomerID ORDER BY SUM(T1.Consumption) ASC LIMIT 1
SELECT AVG(T1.Consumption) / 12 FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND T1.Date BETWEEN '201301' AND '201312'
SELECT T1.CustomerID, SUM(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' AND T1.Date BETWEEN '201101' AND '201112' GROUP BY T1.CustomerID ORDER BY SUM(T1.Consumption) DESC
SELECT COUNT(DISTINCT C.CustomerID) FROM customers AS C INNER JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE C.Segment = 'KAM' AND Y.Consumption < 30000 AND Y.Date BETWEEN '201201' AND '201212'
SELECT      COALESCE(SUM(CASE WHEN C.Currency = 'CZK' THEN Y.Consumption ELSE 0 END), 0) -      COALESCE(SUM(CASE WHEN C.Currency = 'EUR' THEN Y.Consumption ELSE 0 END), 0) AS ConsumptionDifference FROM      yearmonth AS Y  INNER JOIN      customers AS C ON Y.CustomerID = C.CustomerID  WHERE      Y.Date BETWEEN '201201' AND '201212'
SELECT SUBSTR(yearmonth.Date, 1, 4) AS year, SUM(yearmonth.Consumption) AS total_consumption  FROM yearmonth  INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID  WHERE customers.Currency = 'EUR'  GROUP BY year  ORDER BY total_consumption DESC  LIMIT 1
SELECT T2.Segment, SUM(T1.Consumption) AS TotalConsumption FROM yearmonth AS T1 INNER JOIN gasstations AS T2 ON T1.CustomerID = T2.GasStationID GROUP BY T2.Segment ORDER BY TotalConsumption ASC LIMIT 1
SELECT SUBSTR(Date, 1, 4) AS Year, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Currency = 'CZK') GROUP BY Year ORDER BY TotalConsumption DESC LIMIT 1
SELECT SUBSTR(Y.Date, 5, 2) AS Month, SUM(Y.Consumption) AS TotalConsumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'SME' AND Y.Date LIKE '2013%' GROUP BY SUBSTR(Y.Date, 5, 2) ORDER BY SUM(Y.Consumption) DESC LIMIT 1
SELECT      (SELECT SUM(C1.Consumption) / COUNT(DISTINCT C1.CustomerID) FROM (SELECT C.CustomerID, SUM(Y.Consumption) AS Consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'SME' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY C.CustomerID ORDER BY Consumption LIMIT 1) AS C1) -      (SELECT SUM(C2.Consumption) / COUNT(DISTINCT C2.CustomerID) FROM (SELECT C.CustomerID, SUM(Y.Consumption) AS Consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'LAM' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY C.CustomerID ORDER BY Consumption LIMIT 1) AS C2) AS SME_LAM_Diff,          (SELECT SUM(C2.Consumption) / COUNT(DISTINCT C2.CustomerID) FROM (SELECT C.CustomerID, SUM(Y.Consumption) AS Consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'LAM' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY C.CustomerID ORDER BY Consumption LIMIT 1) AS C2) -      (SELECT SUM(C3.Consumption) / COUNT(DISTINCT C3.CustomerID) FROM (SELECT C.CustomerID, SUM(Y.Consumption) AS Consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'KAM' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY C.CustomerID ORDER BY Consumption LIMIT 1) AS C3) AS LAM_KAM_Diff,      (SELECT SUM(C3.Consumption) / COUNT(DISTINCT C3.CustomerID) FROM (SELECT C.CustomerID, SUM(Y.Consumption) AS Consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'KAM' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY C.CustomerID ORDER BY Consumption LIMIT 1) AS C3) -      (SELECT SUM(C1.Consumption) / COUNT(DISTINCT C1.CustomerID) FROM (SELECT C.CustomerID, SUM(Y.Consumption) AS Consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'SME' AND Y.Date BETWEEN '201301' AND '201312' GROUP BY C.CustomerID ORDER BY Consumption LIMIT 1) AS C1) AS KAM_SME_Diff
SELECT Segment, MAX(PercentageIncrease) AS MaxIncrease, MIN(PercentageIncrease) AS MinIncrease FROM (SELECT C.Segment, (Y2013.Consumption - Y2012.Consumption) / Y2013.Consumption * 100 AS PercentageIncrease FROM yearmonth AS Y2012 INNER JOIN yearmonth AS Y2013 ON Y2012.CustomerID = Y2013.CustomerID INNER JOIN customers AS C ON Y2012.CustomerID = C.CustomerID WHERE Y2012.Date BETWEEN '201201' AND '201212' AND Y2013.Date BETWEEN '201301' AND '201312' AND C.Currency = 'EUR') AS Increases GROUP BY Segment
SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'
SELECT (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount') - (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount')
SELECT      (SUM(CASE WHEN CustomerID = 7 THEN Consumption ELSE 0 END) -      SUM(CASE WHEN CustomerID = 5 THEN Consumption ELSE 0 END)) AS Difference FROM yearmonth  WHERE Date = '201304';
SELECT (COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) - COUNT(CASE WHEN Currency = 'EUR' THEN 1 END)) AS Difference FROM customers WHERE Segment = 'SME'
SELECT Y.CustomerID, Y.Consumption FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'LAM' AND C.Currency = 'EUR' AND Y.Date = '201310' ORDER BY Y.Consumption DESC LIMIT 1
SELECT T1.CustomerID, SUM(T2.Consumption) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T1.CustomerID ORDER BY TotalConsumption DESC LIMIT 1;
SELECT SUM(Y.Consumption) FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE C.Segment = 'KAM' AND Y.Date = '201305'
SELECT (COUNT(CASE WHEN Y.Consumption > 46.73 THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM customers AS C LEFT JOIN yearmonth AS Y ON C.CustomerID = Y.CustomerID WHERE C.Segment = 'LAM'
SELECT Country, COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country
SELECT (COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 100.0 / COUNT(*)) AS Percentage FROM customers WHERE Segment = 'KAM'
SELECT (COUNT(DISTINCT CustomerID) * 100.0 / (SELECT COUNT(DISTINCT CustomerID) FROM yearmonth WHERE Date = '201202')) FROM yearmonth WHERE Consumption > 528.3 AND Date = '201202'
SELECT (SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM gasstations WHERE Country = 'SVK'
SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1
SELECT T2.Segment, SUM(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201309' GROUP BY T2.Segment ORDER BY SUM(T1.Consumption) ASC LIMIT 1
SELECT T2.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201206' AND T2.Segment = 'SME' ORDER BY T1.Consumption ASC LIMIT 1
SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012'
SELECT MAX(SUM(Consumption) / 12) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY T1.CustomerID
SELECT T2.Description FROM products AS T2 INNER JOIN transactions_1k AS T3 ON T3.ProductID = T2.ProductID INNER JOIN yearmonth AS T1 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '201309'
SELECT DISTINCT T3.Country  FROM transactions_1k AS T1  INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID  INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID  WHERE T2.Date = '201306'
SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'
SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'
SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%'
SELECT COUNT(DISTINCT T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' AND T2.Consumption > 1000
SELECT DISTINCT P.Description  FROM transactions_1k AS T  INNER JOIN gasstations AS G ON T.GasStationID = G.GasStationID  INNER JOIN products AS P ON T.ProductID = P.ProductID  WHERE G.Country = 'CZE'
SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11
SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Price > 1000 AND T2.Country = 'CZE'
SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'
SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'
SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'
SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price * Amount) DESC LIMIT 1
SELECT G.Country FROM gasstations AS G INNER JOIN transactions_1k AS T ON G.GasStationID = T.GasStationID WHERE T.Date = '2012-08-25' ORDER BY T.Time ASC LIMIT 1
SELECT T2.Currency FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'
SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'
SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'EUR'
SELECT Segment FROM customers WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);
SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'
SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00';
SELECT T2.Date, SUM(T2.Consumption) AS Total_Expenses  FROM yearmonth AS T2  WHERE T2.CustomerID = (SELECT T1.CustomerID                          FROM transactions_1k AS T1                          WHERE T1.Price = 124.05 AND T1.Date = '2012-08-24')  AND T2.Date LIKE '201201%'  GROUP BY T2.Date;
SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T1.Date = '2012-08-26' AND T2.Country = 'CZE'
SELECT c.Currency FROM customers AS c INNER JOIN yearmonth AS ym ON c.CustomerID = ym.CustomerID WHERE ym.Date LIKE '201306' AND ym.Consumption = 214582.17
SELECT Country FROM customers WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE CardID = 667467)
SELECT T3.Country FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4
SELECT (SUM(CASE WHEN T2.Currency = 'EUR' THEN 1 ELSE 0 END) * 100.0 / COUNT(DISTINCT T1.CustomerID)) AS percentage  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date = '2012-08-25';
WITH CustomerConsumption AS (     SELECT CustomerID,            MAX(CASE WHEN Date LIKE '2012%' THEN Consumption END) AS consumption_2012,            MAX(CASE WHEN Date LIKE '2013%' THEN Consumption END) AS consumption_2013     FROM yearmonth     WHERE CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Price = 634.8 AND Date = '2012-08-25')     GROUP BY CustomerID ) SELECT (consumption_2012 - consumption_2013) / consumption_2012 AS decrease_rate FROM CustomerConsumption;
SELECT T2.GasStationID, SUM(T1.Price * T1.Amount) AS TotalRevenue  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  GROUP BY T2.GasStationID  ORDER BY TotalRevenue DESC  LIMIT 1
SELECT (COUNT(CASE WHEN T1.Segment = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS premium_percentage  FROM gasstations AS T1  WHERE T1.Country = 'SVK'
SELECT      SUM(Amount) AS TotalSpent,      SUM(CASE WHEN Date LIKE '2012-01%' THEN Amount ELSE 0 END) AS JanuarySpent  FROM transactions_1k  WHERE CustomerID = 38508
SELECT T2.Description FROM products AS T2 INNER JOIN (SELECT ProductID, SUM(Amount) AS TotalSales FROM transactions_1k GROUP BY ProductID ORDER BY TotalSales DESC LIMIT 5) AS T1 ON T1.ProductID = T2.ProductID
SELECT T1.CustomerID, (SUM(T1.Price) / SUM(T1.Amount)) AS AveragePrice, T2.Currency  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  GROUP BY T1.CustomerID, T2.Currency  ORDER BY SUM(T1.Price) DESC  LIMIT 1
SELECT g.Country  FROM gasstations AS g  INNER JOIN transactions_1k AS t ON g.GasStationID = t.GasStationID  WHERE t.ProductID = 2 AND t.Price = (SELECT MAX(Price) FROM transactions_1k WHERE ProductID = 2)
SELECT T1.CustomerID, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T2.Date LIKE '201208%' AND T1.ProductID = 5
