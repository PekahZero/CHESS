SELECT COUNT(DISTINCT Singer_ID) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'
SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1 WHERE T1.Age = (SELECT MIN(Age) FROM singer)
SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1 WHERE T1.Singer_ID = (SELECT T2.Singer_ID FROM singer AS T2 ORDER BY T2.Age ASC LIMIT 1)
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(*) FROM singer GROUP BY Country
SELECT Country, COUNT(Singer_ID) FROM singer GROUP BY Country
SELECT T1.Song_Name FROM singer AS T1 WHERE T1.Age > (SELECT AVG(Age) FROM singer);
SELECT DISTINCT T1.Song_Name  FROM singer AS T1  WHERE T1.Age > (SELECT AVG(Age) FROM singer);
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT MAX(Capacity), AVG(Capacity) FROM stadium;
SELECT AVG(Capacity), MAX(Capacity) FROM stadium;
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)
SELECT COUNT(concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT COUNT(concert_ID) FROM concert WHERE Year IN ('2014', '2015');
SELECT T1.Name, COUNT(T2.concert_ID) AS NumberOfConcerts  FROM stadium AS T1  LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  GROUP BY T1.Name
SELECT T1.Stadium_ID, COUNT(T2.concert_ID) AS concert_count  FROM stadium AS T1  LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  GROUP BY T1.Stadium_ID
SELECT T4.Name, T4.Capacity FROM stadium AS T4 INNER JOIN (SELECT concert.Stadium_ID, COUNT(*) AS concert_count FROM concert WHERE Year >= '2014' GROUP BY concert.Stadium_ID) AS T3 ON T4.Stadium_ID = T3.Stadium_ID ORDER BY T3.concert_count DESC LIMIT 1
SELECT T1.Name, T1.Capacity FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > '2013' GROUP BY T1.Stadium_ID ORDER BY COUNT(T2.concert_ID) DESC LIMIT 1
SELECT Year, COUNT(concert_ID) AS concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Name FROM stadium AS T1 WHERE T1.Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)
SELECT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Stadium_ID IS NULL
SELECT DISTINCT `Country`  FROM `singer` AS S1  WHERE EXISTS (SELECT 1 FROM `singer` AS S2 WHERE S2.`Country` = S1.`Country` AND S2.`Age` > 40)  AND EXISTS (SELECT 1 FROM `singer` AS S3 WHERE S3.`Country` = S1.`Country` AND S3.`Age` < 30);
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')
SELECT DISTINCT S.Name  FROM stadium AS S  LEFT JOIN concert AS C ON S.Stadium_ID = C.Stadium_ID AND C.Year = '2014'  WHERE C.concert_ID IS NULL
SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) AS num_singers FROM concert AS T1 LEFT JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID
SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) AS number_of_singers FROM concert AS T1 LEFT JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID
SELECT T1.Name, COUNT(T2.concert_ID) AS Number_of_Concerts FROM singer AS T1 LEFT JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
SELECT T1.Name, COUNT(T2.concert_ID) AS number_of_concerts  FROM singer AS T1  LEFT JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Name
SELECT DISTINCT T2.Name FROM singer AS T2 INNER JOIN singer_in_concert AS T1 ON T2.Singer_ID = T1.Singer_ID INNER JOIN concert AS T3 ON T1.concert_ID = T3.concert_ID WHERE T3.Year = '2014'
SELECT DISTINCT T3.Name FROM singer AS T3 INNER JOIN singer_in_concert AS T2 ON T3.Singer_ID = T2.Singer_ID INNER JOIN concert AS T1 ON T2.concert_ID = T1.concert_ID WHERE T1.Year = '2014'
SELECT DISTINCT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name LIKE '%Hey%'
SELECT DISTINCT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name LIKE '%Hey%'
SELECT T4.Name, T4.Location FROM stadium AS T4 WHERE T4.Stadium_ID IN (SELECT T2.Stadium_ID FROM concert AS T2 WHERE T2.Year IN ('2014', '2015') GROUP BY T2.Stadium_ID HAVING COUNT(DISTINCT T2.Year) = 2)
SELECT DISTINCT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year IN ('2014', '2015') GROUP BY T1.Stadium_ID HAVING COUNT(DISTINCT T2.Year) = 2
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)
SELECT COUNT(T1.concert_ID) FROM concert AS T1 WHERE T1.Stadium_ID = (SELECT T2.Stadium_ID FROM stadium AS T2 WHERE T2.Capacity = (SELECT MAX(Capacity) FROM stadium))
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog') AND PetType = 'dog'
SELECT weight FROM Pets WHERE PetID = (SELECT PetID FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1)
SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType
SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType
SELECT COUNT(H.PetID) FROM Has_Pet AS H INNER JOIN Student AS S ON H.StuID = S.StuID WHERE S.Age > 20
SELECT COUNT(P.PetID) FROM Pets AS P INNER JOIN Has_Pet AS HP ON P.PetID = HP.PetID INNER JOIN Student AS S ON HP.StuID = S.StuID WHERE S.Age > 20
SELECT COUNT(P.PetID) FROM Pets AS P INNER JOIN Has_Pet AS HP ON P.PetID = HP.PetID INNER JOIN Student AS S ON HP.StuID = S.StuID WHERE P.PetType = 'dog' AND S.Sex = 'F'
SELECT COUNT(T1.PetID) FROM Pets AS T1 INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID INNER JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.PetType = 'dog' AND T3.Sex = 'F'
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT DISTINCT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog')
SELECT DISTINCT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog')
SELECT DISTINCT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog') GROUP BY T1.StuID HAVING COUNT(DISTINCT T3.PetType) = 2
SELECT T2.Fname FROM Student AS T2 INNER JOIN Has_Pet AS T1 ON T2.StuID = T1.StuID INNER JOIN Pets AS T3 ON T1.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog') GROUP BY T2.StuID HAVING COUNT(DISTINCT T3.PetType) = 2
SELECT Major, Age FROM Student AS T1 WHERE NOT EXISTS (SELECT 1 FROM Has_Pet AS T2 INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T2.StuID = T1.StuID AND T3.PetType = 'cat')
SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat')
SELECT S.StuID FROM Student AS S WHERE NOT EXISTS (SELECT 1 FROM Has_Pet AS HP INNER JOIN Pets AS P ON HP.PetID = P.PetID WHERE HP.StuID = S.StuID AND P.PetType = 'cat')
SELECT DISTINCT S.StuID  FROM Student AS S  LEFT JOIN Has_Pet AS HP ON S.StuID = HP.StuID  LEFT JOIN Pets AS P ON HP.PetID = P.PetID AND P.PetType = 'cat'  WHERE P.PetID IS NULL
SELECT DISTINCT S.Fname, S.Age  FROM Student AS S  INNER JOIN Has_Pet AS HP ON S.StuID = HP.StuID  INNER JOIN Pets AS P ON HP.PetID = P.PetID  WHERE P.PetType = 'dog'  AND S.StuID NOT IN (SELECT HP2.StuID FROM Has_Pet AS HP2 INNER JOIN Pets AS P2 ON HP2.PetID = P2.PetID WHERE P2.PetType = 'cat')
SELECT Fname FROM Student WHERE StuID IN (SELECT HP.StuID FROM Has_Pet AS HP INNER JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog') AND StuID NOT IN (SELECT HP.StuID FROM Has_Pet AS HP INNER JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat')
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetID, weight FROM Pets WHERE pet_age > 1
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM Pets GROUP BY PetType
SELECT PetType, AVG(pet_age) AS Average_Age, MAX(pet_age) AS Max_Age FROM Pets GROUP BY PetType
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType
SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType
SELECT DISTINCT S.Fname, S.Age  FROM Student AS S  INNER JOIN Has_Pet AS HP ON S.StuID = HP.StuID
SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID
SELECT T1.PetID FROM Has_Pet AS T1 INNER JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.LName = 'Smith'
SELECT T1.PetID FROM Has_Pet AS T1 INNER JOIN Pets AS T2 ON T1.PetID = T2.PetID INNER JOIN Student AS T3 ON T1.StuID = T3.StuID WHERE T3.LName = 'Smith'
SELECT T1.StuID, COUNT(T2.PetID) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID
SELECT T1.StuID, COUNT(T1.PetID) FROM Has_Pet AS T1 INNER JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID
SELECT T1.Fname, T1.Sex FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(T2.PetID) > 1
SELECT T1.Fname, T1.Sex FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(T2.PetID) > 1
SELECT T2.LName FROM Student AS T2 INNER JOIN Has_Pet AS T1 ON T2.StuID = T1.StuID INNER JOIN Pets AS T3 ON T1.PetID = T3.PetID WHERE T3.pet_age = 3 AND T3.PetType = 'cat'
SELECT T1.LName FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3
SELECT AVG(T1.Age) FROM Student AS T1 LEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.StuID IS NULL
SELECT AVG(T1.Age) FROM Student AS T1 LEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.StuID IS NULL
SELECT COUNT(DISTINCT ContId) FROM continents;
SELECT COUNT(DISTINCT Continent) FROM continents;
SELECT C.ContId, C.Continent, COUNT(CN.CountryId) AS NumberOfCountries  FROM continents AS C  LEFT JOIN countries AS CN ON C.ContId = CN.Continent  GROUP BY C.ContId, C.Continent
SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId) AS CountryCount  FROM continents AS T1  LEFT JOIN countries AS T2 ON T1.ContId = T2.Continent  GROUP BY T1.ContId, T1.Continent
SELECT COUNT(*) FROM countries;
SELECT COUNT(DISTINCT CountryId) FROM countries;
SELECT T1.FullName, T1.Id, COUNT(T2.Model) AS ModelCount  FROM car_makers AS T1  LEFT JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T1.FullName, T1.Id
SELECT T1.FullName, T1.Id, COUNT(T2.ModelId) AS ModelCount FROM car_makers AS T1 LEFT JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower IS NOT NULL AND T1.Horsepower = (SELECT MIN(Horsepower) FROM cars_data WHERE Horsepower IS NOT NULL)
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE CAST(T1.Horsepower AS INTEGER) = (SELECT MIN(CAST(Horsepower AS INTEGER)) FROM cars_data WHERE Horsepower IS NOT NULL AND Horsepower NOT LIKE '%[^0-9]%')
SELECT T1.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT DISTINCT T2.Model  FROM cars_data AS T1  INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId  WHERE T1.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT DISTINCT T3.Maker FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId INNER JOIN car_makers AS T3 ON T2.Model = T3.Maker WHERE T1.Year = 1970
SELECT DISTINCT T3.Maker FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId INNER JOIN car_makers AS T3 ON T2.Model = T3.Maker WHERE T1.Year = 1970
SELECT T2.Make, T1.Year FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT MIN(Year) FROM cars_data)
SELECT T3.Maker, MIN(T1.Year) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.ModelId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Id
SELECT DISTINCT T1.Model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.Model = T2.Model INNER JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year > 1980
SELECT DISTINCT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T3 ON T1.Id = T3.MakeId INNER JOIN model_list AS T2 ON T3.Model = T2.Model WHERE T1.Year > 1980
SELECT T3.Continent, COUNT(DISTINCT T2.Id) FROM car_makers AS T2 INNER JOIN countries AS T1 ON T2.Country = T1.CountryId INNER JOIN continents AS T3 ON T1.Continent = T3.ContId GROUP BY T3.Continent
SELECT C.Continent, COUNT(DISTINCT CM.Maker) AS MakerCount  FROM continents AS C  LEFT JOIN countries AS CO ON C.ContId = CO.Continent  LEFT JOIN car_makers AS CM ON CO.CountryId = CM.Country  GROUP BY C.Continent
SELECT C.CountryName FROM countries AS C INNER JOIN car_makers AS M ON C.CountryId = M.Country GROUP BY C.CountryName ORDER BY COUNT(M.Id) DESC LIMIT 1
SELECT CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY CountryName ORDER BY COUNT(T2.Id) DESC LIMIT 1
SELECT COUNT(T1.ModelId) AS ModelCount, T2.FullName FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.FullName
SELECT T1.Id, T1.FullName, COUNT(T2.ModelId) AS ModelCount FROM car_makers AS T1 LEFT JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName
SELECT T2.Accelerate FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Make = 'amc hornet sportabout (sw)'
SELECT T3.Accelerate FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.Model = T2.Model INNER JOIN cars_data AS T3 ON T1.MakeId = T3.Id WHERE T1.Make = 'amc hornet sportabout (sw)'
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')
SELECT COUNT(DISTINCT T1.Maker) FROM car_makers AS T1 WHERE T1.Country = (SELECT CountryId FROM countries WHERE CountryName = 'france')
SELECT COUNT(DISTINCT T3.Model) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId INNER JOIN model_list AS T3 ON T1.Id = T3.Maker WHERE T2.CountryName = 'usa'
SELECT COUNT(DISTINCT T1.Model) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id INNER JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT DISTINCT T1.Maker, T2.Model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker
SELECT T1.Maker, T2.Model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker
SELECT DISTINCT c.CountryName, c.CountryId  FROM countries AS c  INNER JOIN car_makers AS cm ON c.CountryId = cm.Country
SELECT DISTINCT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country
SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150;
SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150;
SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year
SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year
SELECT C.CountryName FROM countries AS C INNER JOIN car_makers AS M ON C.CountryId = M.Country INNER JOIN continents AS CT ON C.Continent = CT.ContId WHERE CT.Continent = 'europe' GROUP BY C.CountryName HAVING COUNT(M.Id) >= 3
SELECT T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.Continent = (SELECT ContId FROM continents WHERE Continent = 'europe') GROUP BY T1.CountryName HAVING COUNT(T2.Id) >= 3
SELECT MAX(T1.Horsepower), T2.Make FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make
SELECT T2.Make, MAX(T1.Horsepower)  FROM cars_data AS T1  INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId  WHERE T1.Cylinders = 3  GROUP BY T2.Make  ORDER BY MAX(T1.Horsepower) DESC  LIMIT 1
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T3 ON T1.Id = T3.MakeId INNER JOIN model_list AS T2 ON T3.Model = T2.Model WHERE T1.MPG = (SELECT MAX(CAST(MPG AS REAL)) FROM cars_data)
SELECT T1.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE CAST(T2.MPG AS REAL) = (SELECT MAX(CAST(MPG AS REAL)) FROM cars_data)
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(CD.Edispl)  FROM cars_data AS CD  INNER JOIN car_names AS CN ON CD.Id = CN.MakeId  WHERE CN.Model = 'volvo'
SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')
SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders
SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders
SELECT T1.Model, COUNT(DISTINCT T2.Make) AS VersionCount  FROM model_list AS T1  INNER JOIN car_names AS T2 ON T1.Model = T2.Model  GROUP BY T1.Model  ORDER BY VersionCount DESC  LIMIT 1
SELECT Model, COUNT(DISTINCT Make) FROM car_names GROUP BY Model ORDER BY COUNT(DISTINCT Make) DESC LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(Id) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(DISTINCT T2.Model) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'
SELECT COUNT(DISTINCT T2.Model) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company'
SELECT T1.FullName, T1.Id  FROM car_makers AS T1  INNER JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T1.Id, T1.FullName  HAVING COUNT(T2.ModelId) > 3
SELECT T1.Id, T1.Maker FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING COUNT(T2.ModelId) > 3
SELECT DISTINCT T1.Model FROM model_list AS T1 LEFT JOIN car_makers AS T2 ON T1.Maker = T2.Id LEFT JOIN cars_data AS T3 ON T1.Model = T3.Id WHERE T2.FullName = 'General Motors' OR T3.Weight > 3500
SELECT DISTINCT T1.Model FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id INNER JOIN cars_data AS T3 ON T1.ModelId = T3.Id WHERE T2.Maker = 'General Motors' OR T3.Weight > 3500
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000 GROUP BY Year HAVING COUNT(CASE WHEN Weight < 4000 THEN 1 END) > 0 AND COUNT(CASE WHEN Weight > 3000 THEN 1 END) > 0
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT T1.Cylinders FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId INNER JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T3.Model = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1
SELECT T1.Cylinders FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId INNER JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T3.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') ORDER BY T1.Accelerate ASC LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(CAST(Horsepower AS INTEGER)) FROM cars_data);
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT MAX(Horsepower) FROM cars_data) LIMIT 1)
SELECT COUNT(DISTINCT T1.Country)  FROM car_makers AS T1  INNER JOIN countries AS T2 ON T1.Country = T2.CountryId  GROUP BY T1.Country  HAVING COUNT(T1.Id) > 2
SELECT COUNT(*) FROM (SELECT countries.CountryId FROM car_makers INNER JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryId HAVING COUNT(car_makers.Id) > 2) AS CountryCount
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT T1.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY CAST(T2.Horsepower AS INTEGER) DESC LIMIT 1
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY CAST(T1.Horsepower AS INTEGER) DESC LIMIT 1
SELECT T1.MakeId, T1.Make FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT MIN(CAST(Horsepower AS INTEGER)) FROM cars_data) AND T2.Cylinders <= 3
SELECT T1.Id, T2.Make FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders < 4 AND T1.Horsepower NOT IN (SELECT MIN(Horsepower) FROM cars_data)
SELECT MAX(CAST(MPG AS REAL)) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT MAX(CAST(MPG AS REAL)) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT T1.Model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.Model = T2.Model INNER JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Weight < 3500 AND T1.Maker NOT IN (SELECT Id FROM car_makers WHERE FullName = 'Ford Motor Company')
SELECT DISTINCT T1.Model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.Model = T2.Model INNER JOIN cars_data AS T3 ON T2.MakeId = T3.Id INNER JOIN car_makers AS T4 ON T1.Maker = T4.Id WHERE T3.Weight < 3500 AND T4.FullName <> 'Ford Motor Company'
SELECT DISTINCT CountryName FROM countries AS T1 LEFT JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Country IS NULL
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL
SELECT T1.Id, T1.Maker  FROM car_makers AS T1  INNER JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T1.Id, T1.Maker  HAVING COUNT(T2.ModelId) >= 2 AND (SELECT COUNT(DISTINCT Id) FROM car_makers) > 3
SELECT T1.Id, T1.Maker  FROM car_makers AS T1  INNER JOIN model_list AS T2 ON T1.Id = T2.Maker  INNER JOIN car_names AS T3 ON T2.Model = T3.Model  INNER JOIN cars_data AS T4 ON T3.MakeId = T4.Id  GROUP BY T1.Id, T1.Maker  HAVING COUNT(DISTINCT T2.ModelId) >= 2 AND COUNT(T4.Id) > 3
SELECT CountryId, CountryName FROM countries WHERE EXISTS (SELECT 1 FROM car_makers WHERE countries.CountryId = car_makers.Country GROUP BY car_makers.Country HAVING COUNT(Maker) > 3) OR EXISTS (SELECT 1 FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker WHERE countries.CountryId = car_makers.Country AND model_list.Model = 'fiat')
SELECT DISTINCT c.CountryId, c.CountryName  FROM countries AS c  LEFT JOIN car_makers AS cm ON c.CountryId = cm.Country  LEFT JOIN model_list AS ml ON cm.Maker = ml.Model  GROUP BY c.CountryId  HAVING COUNT(cm.Country) > 3 OR MAX(ml.Model) = 'fiat';
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE LOWER(TRIM(Airline)) = LOWER(TRIM('Jetblue Airways'))
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE TRIM(LOWER(Airline)) = TRIM(LOWER('Jetblue Airways'));
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE TRIM(LOWER(City)) = TRIM(LOWER('Anthony'));
SELECT AirportCode, AirportName FROM airports WHERE LOWER(TRIM(City)) = LOWER(TRIM('Anthony'))
SELECT COUNT(DISTINCT Airline) FROM airlines;
SELECT COUNT(DISTINCT Airline) FROM airlines;
SELECT COUNT(DISTINCT AirportCode) FROM airports;
SELECT COUNT(DISTINCT AirportCode) FROM airports;
SELECT COUNT(FlightNo) FROM flights;
SELECT COUNT(FlightNo) FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(DISTINCT Airline) FROM airlines WHERE Country = 'USA';
SELECT City, Country FROM airports WHERE TRIM(LOWER(AirportName)) = 'alton'
SELECT City, Country FROM airports WHERE TRIM(AirportName) = 'Alton'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE LOWER(TRIM(City)) = LOWER(TRIM('Aberdeen'))
SELECT AirportName FROM airports WHERE TRIM(LOWER(City)) = 'aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
SELECT COUNT(FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
SELECT COUNT(F.FlightNo) FROM flights AS F INNER JOIN airports AS A1 ON F.SourceAirport = A1.AirportCode INNER JOIN airports AS A2 ON F.DestAirport = A2.AirportCode WHERE A1.City = 'Aberdeen' AND A2.City = 'Ashley'
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley')
SELECT COUNT(*) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'Jetblue Airways'
SELECT COUNT(f.FlightNo) FROM flights AS f INNER JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY'
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'UAL') AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'AHD' AND Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')
SELECT COUNT(F.flightNo) FROM flights AS F INNER JOIN airlines AS A ON F.Airline = A.uid WHERE F.SourceAirport = 'AHD' AND A.Airline = 'United Airlines'
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid INNER JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.Airline = 'United Airlines' AND T3.City = 'Aberdeen'
SELECT COUNT(F1.FlightNo) FROM flights AS F1 INNER JOIN airports AS A1 ON F1.DestAirport = A1.AirportCode INNER JOIN airlines AS AL1 ON F1.Airline = AL1.uid WHERE AL1.Airline = 'United Airlines' AND A1.City = 'Aberdeen'
SELECT A.City, COUNT(F.DestAirport) FROM airports AS A INNER JOIN flights AS F ON TRIM(A.AirportCode) = TRIM(F.DestAirport) GROUP BY A.City ORDER BY COUNT(F.DestAirport) DESC LIMIT 1
SELECT A.City, F.DestAirport, COUNT(*) AS FlightCount FROM flights AS F INNER JOIN airports AS A ON F.DestAirport = A.AirportCode GROUP BY F.DestAirport ORDER BY FlightCount DESC LIMIT 1
SELECT T2.City, COUNT(T1.SourceAirport) AS FlightCount FROM flights AS T1 INNER JOIN airports AS T2 ON TRIM(T1.SourceAirport) = TRIM(T2.AirportCode) GROUP BY T2.City ORDER BY FlightCount DESC LIMIT 1
SELECT T2.City, COUNT(T1.SourceAirport) AS frequency FROM flights AS T1 INNER JOIN airports AS T2 ON TRIM(T1.SourceAirport) = TRIM(T2.AirportCode) GROUP BY T2.City ORDER BY frequency DESC LIMIT 1
SELECT AirportCode FROM (SELECT AirportCode, COUNT(*) AS flight_count FROM (SELECT SourceAirport AS AirportCode FROM flights UNION ALL SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode) ORDER BY flight_count DESC LIMIT 1
SELECT airport_code FROM (     SELECT SourceAirport AS airport_code, COUNT(*) AS flight_count FROM flights GROUP BY SourceAirport      UNION ALL      SELECT DestAirport AS airport_code, COUNT(*) AS flight_count FROM flights GROUP BY DestAirport ) AS combined GROUP BY airport_code ORDER BY SUM(flight_count) DESC LIMIT 1
SELECT airport_code FROM (     SELECT airport_code, COUNT(*) AS total_flights      FROM (         SELECT SourceAirport AS airport_code FROM flights          UNION ALL          SELECT DestAirport AS airport_code FROM flights     )      GROUP BY airport_code )  ORDER BY total_flights ASC  LIMIT 1
SELECT AirportCode FROM (     SELECT SourceAirport AS AirportCode FROM flights     UNION ALL     SELECT DestAirport AS AirportCode FROM flights ) AS CombinedFlights GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1
SELECT T2.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid GROUP BY T2.Airline ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Airline, COUNT(T2.FlightNo) AS FlightCount FROM flights AS T2 INNER JOIN airlines AS T1 ON T2.Airline = T1.uid GROUP BY T1.Airline ORDER BY FlightCount DESC LIMIT 1
SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 INNER JOIN (SELECT Airline, COUNT(FlightNo) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount ASC LIMIT 1) AS T2 ON T1.uid = T2.Airline;
SELECT T1.Abbreviation, T1.Country  FROM airlines AS T1  INNER JOIN (SELECT Airline, COUNT(FlightNo) AS flight_count              FROM flights              GROUP BY Airline              ORDER BY flight_count ASC              LIMIT 1) AS T2  ON T1.uid = T2.Airline
--error--
SELECT DISTINCT T2.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE TRIM(T1.SourceAirport) = 'AHD'
SELECT DISTINCT T2.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE TRIM(T1.DestAirport) = 'AHD'
SELECT DISTINCT T2.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE UPPER(TRIM(T1.DestAirport)) = 'AHD'
SELECT DISTINCT T2.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport IN ('APG', 'CVO') GROUP BY T2.Airline HAVING COUNT(DISTINCT T1.SourceAirport) = 2
SELECT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') GROUP BY Airline HAVING COUNT(SourceAirport) = 2
SELECT DISTINCT T1.Airline FROM flights AS T1 WHERE T1.SourceAirport = 'CVO' AND T1.Airline NOT IN (SELECT T2.Airline FROM flights AS T2 WHERE T2.SourceAirport = 'APG')
SELECT DISTINCT A.Airline FROM airlines AS A INNER JOIN flights AS F ON A.uid = F.Airline WHERE F.SourceAirport = 'CVO' AND A.uid NOT IN (SELECT F2.Airline FROM flights AS F2 WHERE F2.SourceAirport = 'APG')
SELECT T1.Airline FROM airlines AS T1 LEFT JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(T2.FlightNo) >= 10
SELECT T1.Airline FROM flights AS T1 GROUP BY T1.Airline HAVING COUNT(T1.FlightNo) >= 10
SELECT T2.Airline FROM airlines AS T2 INNER JOIN flights AS T1 ON T2.uid = T1.Airline GROUP BY T2.Airline HAVING COUNT(T1.FlightNo) < 200
SELECT T2.Airline FROM airlines AS T2 INNER JOIN (SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline HAVING COUNT(*) < 200) AS T1 ON T2.uid = T1.Airline
SELECT T1.FlightNo FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'United Airlines'
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
SELECT FlightNo FROM flights WHERE TRIM(UPPER(SourceAirport)) = 'APG'
SELECT FlightNo FROM flights WHERE TRIM(UPPER(SourceAirport)) = 'APG'
SELECT FlightNo FROM flights WHERE TRIM(UPPER(DestAirport)) = 'APG';
SELECT FlightNo FROM flights WHERE TRIM(UPPER(DestAirport)) = 'APG'
SELECT T1.FlightNo FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')
SELECT F.FlightNo FROM flights AS F INNER JOIN airports AS A ON F.DestAirport = A.AirportCode WHERE LOWER(A.City) = 'aberdeen'
SELECT FlightNo FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE LOWER(City) = 'aberdeen')
SELECT COUNT(*) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City IN ('Aberdeen', 'Abilene')
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene'));
SELECT AirportName FROM airports WHERE NOT EXISTS (SELECT 1 FROM flights WHERE flights.SourceAirport = airports.AirportCode OR flights.DestAirport = airports.AirportCode)
SELECT a.AirportName  FROM airports AS a  LEFT JOIN flights AS f1 ON a.AirportCode = f1.SourceAirport  LEFT JOIN flights AS f2 ON a.AirportCode = f2.DestAirport  WHERE f1.SourceAirport IS NULL AND f2.DestAirport IS NULL
SELECT COUNT(DISTINCT Employee_ID) FROM employee;
SELECT COUNT(Employee_ID) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(*) FROM employee GROUP BY City
SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1
SELECT Location, COUNT(*) FROM shop GROUP BY Location
SELECT Location, COUNT(*) FROM shop GROUP BY Location
SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT Manager_name, District FROM shop WHERE Shop_ID = (SELECT Shop_ID FROM shop ORDER BY Number_products DESC LIMIT 1)
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT T1.Name FROM employee AS T1 INNER JOIN (SELECT Employee_ID, COUNT(Year_awarded) AS Award_Count FROM evaluation GROUP BY Employee_ID) AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Award_Count DESC LIMIT 1
SELECT T2.Name FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT T2.Name FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T1.Bonus DESC LIMIT 1
SELECT T2.Name FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T1.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT T1.Name FROM employee AS T1 WHERE T1.Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT T1.Name FROM employee AS T1 LEFT JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.Employee_ID IS NULL
SELECT T2.Name FROM shop AS T2 INNER JOIN hiring AS T1 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY COUNT(T1.Employee_ID) DESC LIMIT 1
SELECT T2.Name FROM shop AS T2 INNER JOIN hiring AS T1 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY COUNT(T1.Employee_ID) DESC LIMIT 1
SELECT T1.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Shop_ID IS NULL
SELECT T1.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Employee_ID IS NULL
SELECT T1.Name, COUNT(T2.Employee_ID) AS Employee_Count  FROM shop AS T1  LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID  GROUP BY T1.Name;
SELECT T1.Name, COUNT(T2.Employee_ID) AS Number_of_Employees  FROM shop AS T1  LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID  GROUP BY T1.Name
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM("Bonus") FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring AS H INNER JOIN employee AS E ON H.Employee_ID = E.Employee_ID INNER JOIN shop AS S ON H.Shop_ID = S.Shop_ID
SELECT District FROM shop GROUP BY District HAVING COUNT(CASE WHEN Number_products < 3000 THEN Shop_ID END) > 0 AND COUNT(CASE WHEN Number_products > 10000 THEN Shop_ID END) > 0
SELECT District FROM shop GROUP BY District HAVING COUNT(CASE WHEN Number_products < 3000 THEN 1 END) > 0 AND COUNT(CASE WHEN Number_products > 10000 THEN 1 END) > 0
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(Document_ID) FROM Documents;
SELECT COUNT(Document_ID) FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'
SELECT COUNT(DISTINCT T1.Template_ID) FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_ID IS NOT NULL
SELECT COUNT(DISTINCT Template_ID) FROM Templates WHERE Template_ID IN (SELECT DISTINCT Template_ID FROM Documents)
SELECT COUNT(D.Document_ID) FROM Documents AS D INNER JOIN Templates AS T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'PPT'
SELECT COUNT(*) FROM Documents AS D INNER JOIN Templates AS T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'PPT'
SELECT T1.Template_ID, COUNT(T2.Document_ID) AS Document_Count  FROM Templates AS T1  LEFT JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T1.Template_ID
SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID;
SELECT T1.Template_ID, T2.Template_Type_Code FROM Templates AS T2 INNER JOIN Documents AS T1 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T2.Template_Type_Code ORDER BY COUNT(T1.Document_ID) DESC LIMIT 1
SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1
SELECT T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING COUNT(T2.Document_ID) > 1
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1
SELECT T.Template_ID FROM Templates AS T LEFT JOIN Documents AS D ON T.Template_ID = D.Template_ID WHERE D.Template_ID IS NULL
SELECT T1.Template_ID FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_ID IS NULL
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT T1.Template_ID, T1.Version_Number, T2.Template_Type_Code FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5
SELECT Template_Type_Code, Version_Number FROM Templates WHERE Version_Number > 5;
SELECT Template_Type_Code, COUNT(Template_ID) FROM Templates GROUP BY Template_Type_Code
SELECT Template_Type_Code, COUNT(Template_ID) FROM Templates GROUP BY Template_Type_Code
SELECT Template_Type_Code, COUNT(*) AS Template_Count FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Count DESC LIMIT 1
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3
SELECT MIN(T1.Version_Number), T2.Template_Type_Code  FROM Templates AS T1  INNER JOIN Ref_Template_Types AS T2  ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T2.Template_Type_Code  ORDER BY MIN(T1.Version_Number) ASC  LIMIT 1
SELECT T1.Version_Number, T2.Template_Type_Code FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Version_Number = (SELECT MIN(Version_Number) FROM Templates)
SELECT T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'
SELECT T2.Template_Type_Code FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Data base'
SELECT T2.Document_Name FROM Documents AS T2 INNER JOIN Templates AS T1 ON T2.Template_ID = T1.Template_ID WHERE T1.Template_Type_Code = 'BK'
SELECT T1.Document_Name FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'BK'
SELECT T1.Template_Type_Code, COUNT(T2.Document_ID) FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code
SELECT T1.Template_Type_Code, COUNT(T3.Document_ID) AS Document_Count FROM Ref_Template_Types AS T1 LEFT JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code LEFT JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code
SELECT T.Template_Type_Code, COUNT(D.Document_ID) FROM Documents AS D INNER JOIN Templates AS T ON D.Template_ID = T.Template_ID GROUP BY T.Template_Type_Code ORDER BY COUNT(D.Document_ID) DESC LIMIT 1
SELECT T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 LEFT JOIN Documents AS T2 ON T1.Template_Type_Code = T2.Template_ID WHERE T2.Template_ID IS NULL
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT T.Template_Type_Code FROM Documents D INNER JOIN Templates T ON D.Template_ID = T.Template_ID)
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT DISTINCT T3.Template_Type_Description FROM Ref_Template_Types AS T3 INNER JOIN Templates AS T2 ON T3.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T1 ON T2.Template_ID = T1.Template_ID
SELECT DISTINCT T3.Template_Type_Description FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code
SELECT T1.Template_ID FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'
SELECT T1.Template_ID FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'
SELECT COUNT(Paragraph_ID) FROM Paragraphs;
SELECT COUNT(Paragraph_ID) FROM Paragraphs;
SELECT COUNT(T1.Paragraph_ID) FROM Paragraphs AS T1 WHERE T1.Document_ID = (SELECT T2.Document_ID FROM Documents AS T2 WHERE T2.Document_Name = 'Summer Show')
SELECT COUNT(P.Paragraph_ID) FROM Paragraphs AS P INNER JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Summer Show'
SELECT * FROM Paragraphs WHERE TRIM(Paragraph_Text) = 'Korea'
SELECT Paragraph_ID, Paragraph_Text, Other_Details, Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'
SELECT T2.Paragraph_ID, T2.Paragraph_Text FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Welcome to NY'
SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'
SELECT P.Paragraph_Text FROM Paragraphs AS P INNER JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Customer reviews'
SELECT T1.Paragraph_Text FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'
SELECT T1.Document_ID, COUNT(T2.Paragraph_ID) AS Number_of_Paragraphs  FROM Documents AS T1  LEFT JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID  ORDER BY T1.Document_ID;
SELECT T1.Document_ID, COUNT(T2.Paragraph_ID) AS NumberOfParagraphs FROM Documents AS T1 LEFT JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY T1.Document_ID
SELECT T1.Document_ID, T1.Document_Name, COUNT(T2.Paragraph_ID) FROM Documents AS T1 LEFT JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID
SELECT T1.Document_ID, T1.Document_Name, COUNT(T2.Paragraph_ID) FROM Documents AS T1 LEFT JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2
SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name ORDER BY COUNT(T2.Paragraph_ID) DESC LIMIT 1
SELECT D.Document_ID, D.Document_Name  FROM Documents AS D  INNER JOIN (SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count              FROM Paragraphs              GROUP BY Document_ID              ORDER BY Paragraph_Count DESC              LIMIT 1) AS P  ON D.Document_ID = P.Document_ID;
SELECT T1.Document_ID FROM Documents AS T1 LEFT JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY COUNT(T2.Paragraph_ID) ASC LIMIT 1
SELECT D.Document_ID FROM Documents AS D LEFT JOIN Paragraphs AS P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY COUNT(P.Paragraph_ID) ASC LIMIT 1
SELECT D.Document_ID FROM Documents AS D INNER JOIN Paragraphs AS P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(P.Paragraph_ID) BETWEEN 1 AND 2
SELECT D.Document_ID FROM Documents AS D LEFT JOIN Paragraphs AS P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(P.Paragraph_Text) BETWEEN 1 AND 2
SELECT T1.Document_ID  FROM Documents AS T1  INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID  WHERE T2.Paragraph_Text IN ('Brazil', 'Ireland')  GROUP BY T1.Document_ID  HAVING COUNT(DISTINCT T2.Paragraph_Text) = 2;
SELECT DISTINCT P1.Document_ID  FROM Paragraphs AS P1  INNER JOIN Paragraphs AS P2 ON P1.Document_ID = P2.Document_ID  WHERE P1.Paragraph_Text = 'Brazil' AND P2.Paragraph_Text = 'Ireland'
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT T1.Name FROM teacher AS T1 ORDER BY T1.Age ASC
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Age, Hometown FROM teacher
SELECT Age, Hometown FROM teacher
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age IN ('32', '33');
SELECT Name FROM teacher WHERE Age IN ('32', '33');
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown
SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown
SELECT Hometown FROM (SELECT Hometown, COUNT(*) AS count FROM teacher GROUP BY Hometown) ORDER BY count DESC LIMIT 1
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
SELECT LOWER(Hometown) AS Hometown FROM teacher GROUP BY LOWER(Hometown) HAVING COUNT(DISTINCT Teacher_ID) >= 2
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2
SELECT T1.Name, T2.Course FROM teacher AS T1 INNER JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID INNER JOIN course AS T2 ON T3.Course_ID = T2.Course_ID
SELECT T1.Name, T3.Course FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID INNER JOIN course AS T3 ON T2.Course_ID = T3.Course_ID
SELECT T2.Name, T3.Course FROM teacher AS T2 INNER JOIN course_arrange AS T1 ON T2.Teacher_ID = T1.Teacher_ID INNER JOIN course AS T3 ON T1.Course_ID = T3.Course_ID ORDER BY T2.Name ASC
SELECT T1.Name, T3.Course FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID INNER JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
SELECT T3.Name FROM teacher AS T3 INNER JOIN course_arrange AS T2 ON T3.Teacher_ID = T2.Teacher_ID INNER JOIN course AS T1 ON T2.Course_ID = T1.Course_ID WHERE T1.Course = 'Math'
SELECT DISTINCT T2.Name FROM course AS T1 INNER JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID INNER JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID WHERE T1.Course = 'Math'
SELECT T1.Name, COUNT(T2.Course_ID) AS NumberOfCourses  FROM teacher AS T1  LEFT JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name
SELECT T1.Name, COUNT(DISTINCT T2.Course_ID) AS Course_Count  FROM teacher AS T1  LEFT JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name
SELECT T1.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(DISTINCT T2.Course_ID) >= 2
SELECT T2.Name FROM teacher AS T2 INNER JOIN course_arrange AS T1 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID HAVING COUNT(DISTINCT T1.Course_ID) >= 2
SELECT T1.Name FROM teacher AS T1 LEFT JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Teacher_ID IS NULL
SELECT DISTINCT T1.Name  FROM teacher AS T1  LEFT JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  WHERE T2.Course_ID IS NULL
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010')
SELECT T2.ID, T2.Name, T2.Age  FROM visitor AS T2  INNER JOIN (SELECT Museum_ID, visitor_ID, COUNT(*) AS VisitCount              FROM visit              GROUP BY visitor_ID              HAVING COUNT(*) > 1) AS T1  ON T2.ID = T1.visitor_ID
SELECT T1.ID, T1.Name, T1.Level_of_membership FROM visitor AS T1 INNER JOIN (SELECT visitor_ID, SUM(Total_spent) AS TotalSpent FROM visit GROUP BY visitor_ID ORDER BY TotalSpent DESC LIMIT 1) AS T2 ON T1.ID = T2.visitor_ID
SELECT T1.Museum_ID, T2.Name FROM visit AS T1 INNER JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID, T2.Name ORDER BY COUNT(T1.visitor_ID) DESC LIMIT 1
SELECT T1.Name FROM museum AS T1 WHERE T1.Museum_ID NOT IN (SELECT Museum_ID FROM visit);
SELECT T2.Name, T2.Age FROM visitor AS T2 INNER JOIN visit AS T1 ON T1.visitor_ID = T2.ID WHERE T1.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT AVG(Num_of_Ticket) AS average_tickets, MAX(Num_of_Ticket) AS max_tickets FROM visit;
SELECT SUM(T1.Total_spent) FROM visit AS T1 INNER JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1
SELECT DISTINCT T1.Name FROM visitor AS T1  INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID  INNER JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID  WHERE T3.Open_Year < '2009'  AND T2.visitor_ID IN (     SELECT T4.visitor_ID FROM visit AS T4      INNER JOIN museum AS T5 ON T4.Museum_ID = T5.Museum_ID      WHERE T5.Open_Year > '2011' )
SELECT COUNT(DISTINCT v.ID) FROM visitor AS v WHERE v.ID NOT IN (SELECT DISTINCT v2.visitor_ID FROM visit AS v2 INNER JOIN museum AS m ON v2.Museum_ID = m.Museum_ID WHERE m.Open_Year > '2010')
SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008'
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(age) FROM (     SELECT winner_age AS age FROM matches     UNION ALL     SELECT loser_age AS age FROM matches )
SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches
SELECT AVG(winner_rank) FROM matches WHERE winner_rank IS NOT NULL;
SELECT AVG(winner_rank) FROM matches;
SELECT MAX(loser_rank) FROM matches;
SELECT MIN(loser_rank) FROM matches;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT DISTINCT T3.first_name, T3.last_name  FROM matches AS T1  INNER JOIN players AS T3 ON T1.winner_id = T3.player_id  WHERE T1.year IN (2013, 2016)  GROUP BY T3.player_id  HAVING COUNT(DISTINCT T1.year) = 2;
SELECT T2.first_name, T2.last_name  FROM matches AS T1  INNER JOIN players AS T2 ON T1.winner_id = T2.player_id  WHERE T1.year IN (2013, 2016)  GROUP BY T2.player_id  HAVING COUNT(DISTINCT T1.year) = 2
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT T1.country_code, T1.first_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY T1.player_id HAVING COUNT(DISTINCT T2.tourney_name) = 2
SELECT DISTINCT T1.first_name, T1.country_code  FROM players AS T1  INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id  INNER JOIN matches AS T3 ON T1.player_id = T3.winner_id  WHERE T2.tourney_name = 'WTA Championships'  AND T3.tourney_name = 'Australian Open'
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1
SELECT first_name, last_name FROM players ORDER BY birth_date ASC;
SELECT CAST(first_name || ' ' || last_name AS TEXT) AS full_name FROM players ORDER BY birth_date
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC
WITH TourCounts AS (SELECT player_id, COUNT(tours) AS tour_count FROM rankings GROUP BY player_id) SELECT T1.first_name, T1.country_code  FROM players AS T1  INNER JOIN TourCounts AS T2 ON T1.player_id = T2.player_id  WHERE T2.tour_count = (SELECT MAX(tour_count) FROM TourCounts);
SELECT T2.first_name, T2.country_code  FROM players AS T2  INNER JOIN (SELECT player_id, SUM(tours) AS total_tours              FROM rankings              GROUP BY player_id              ORDER BY total_tours DESC              LIMIT 1) AS T1  ON T2.player_id = T1.player_id
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1
SELECT T1.first_name, T1.last_name, T3.ranking_points FROM players AS T1 INNER JOIN (SELECT winner_id, COUNT(*) AS win_count FROM matches GROUP BY winner_id ORDER BY win_count DESC LIMIT 1) AS T2 ON T1.player_id = T2.winner_id INNER JOIN rankings AS T3 ON T1.player_id = T3.player_id ORDER BY T3.ranking_date DESC LIMIT 1
SELECT P.first_name || ' ' || P.last_name AS winner_name, R.ranking_points  FROM players AS P  INNER JOIN (SELECT winner_id, COUNT(*) AS match_count              FROM matches              GROUP BY winner_id              ORDER BY match_count DESC              LIMIT 1) AS M ON P.player_id = M.winner_id  INNER JOIN rankings AS R ON P.player_id = R.player_id  WHERE R.ranking_date = (SELECT MAX(ranking_date) FROM rankings WHERE player_id = M.winner_id)
SELECT T2.first_name || ' ' || T2.last_name AS winner_name  FROM matches AS T1  INNER JOIN players AS T2 ON T1.winner_id = T2.player_id  WHERE T1.tourney_name = 'Australian Open'  AND T1.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open')
SELECT T1.winner_name FROM matches AS T1 INNER JOIN rankings AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'Australian Open' ORDER BY T2.ranking_points DESC LIMIT 1
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT W.first_name || ' ' || W.last_name AS winner_name, L.first_name || ' ' || L.last_name AS loser_name FROM matches AS M INNER JOIN players AS W ON M.winner_id = W.player_id INNER JOIN players AS L ON M.loser_id = L.player_id WHERE M.minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM rankings INNER JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name
SELECT T1.first_name, AVG(T2.ranking) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT T2.first_name, SUM(T1.ranking_points) FROM rankings AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name
SELECT T1.first_name, SUM(T2.ranking_points) AS total_ranking_points  FROM players AS T1  INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id  GROUP BY T1.first_name
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50
SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year
SELECT T2.first_name, T2.last_name, R.ranking FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id INNER JOIN rankings AS R ON T2.player_id = R.player_id ORDER BY T2.birth_date DESC LIMIT 3
SELECT T2.first_name, T2.last_name, T3.ranking  FROM matches AS T1  INNER JOIN players AS T2 ON T1.winner_id = T2.player_id  INNER JOIN rankings AS T3 ON T2.player_id = T3.player_id  ORDER BY T2.birth_date DESC  LIMIT 3
SELECT COUNT(DISTINCT T1.winner_id) FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T2.hand = 'L' AND T1.tourney_name = 'WTA Championships'
SELECT COUNT(*) FROM matches AS M INNER JOIN players AS P ON M.winner_id = P.player_id WHERE P.hand = 'L' AND M.tourney_name = 'WTA Championships'
SELECT T2.first_name, T2.country_code, T2.birth_date FROM players AS T2 WHERE T2.player_id = (SELECT T1.winner_id FROM matches AS T1 ORDER BY T1.winner_rank_points DESC LIMIT 1)
SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN (SELECT winner_id, SUM(winner_rank_points) AS total_points FROM matches GROUP BY winner_id ORDER BY total_points DESC LIMIT 1) AS T2 ON T1.player_id = T2.winner_id
SELECT hand, COUNT(player_id) AS player_count FROM players GROUP BY hand
SELECT hand, COUNT(*) FROM players GROUP BY hand
SELECT COUNT(id) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle
SELECT caused_by_ship_id, MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death GROUP BY caused_by_ship_id
SELECT AVG(injured) FROM death WHERE injured IS NOT NULL;
SELECT T1.killed, T1.injured FROM death AS T1 INNER JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril';
SELECT DISTINCT T3.id, T3.name FROM battle AS T3 INNER JOIN ship AS T2 ON T3.id = T2.lost_in_battle INNER JOIN death AS T1 ON T2.id = T1.caused_by_ship_id WHERE T2.ship_type = 'Brig'
SELECT T2.id, T2.name  FROM battle AS T2  INNER JOIN (SELECT caused_by_ship_id, SUM(killed) AS total_killed              FROM death              GROUP BY caused_by_ship_id              HAVING total_killed > 10) AS T1  ON T2.id = T1.caused_by_ship_id
SELECT T1.id, T1.name FROM ship AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id, T1.name ORDER BY SUM(T2.injured) DESC LIMIT 1
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(*) FROM battle AS B WHERE NOT EXISTS (SELECT 1 FROM ship AS S WHERE S.lost_in_battle = B.id AND S.tonnage = '225')
SELECT T3.name, T3.date FROM ship AS T1 INNER JOIN battle AS T3 ON T1.lost_in_battle = T3.id WHERE T1.name IN ('Lettice', 'HMS Atalanta') GROUP BY T3.name, T3.date HAVING COUNT(DISTINCT T1.name) = 2
SELECT T1.name, T1.result, T1.bulgarian_commander FROM battle AS T1 LEFT JOIN ship AS T2 ON T1.id = T2.lost_in_battle AND T2.location = 'English Channel' WHERE T2.id IS NULL
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(DISTINCT course_id) FROM Courses;
SELECT course_description FROM Courses WHERE course_name = 'math';
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT T1.department_name, T1.department_id FROM Departments AS T1 INNER JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_name, T1.department_id ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1
SELECT D.department_id, D.department_name  FROM Departments AS D  INNER JOIN Degree_Programs AS DP ON D.department_id = DP.department_id  GROUP BY D.department_id, D.department_name  ORDER BY COUNT(DP.degree_program_id) DESC  LIMIT 1
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs WHERE department_id IS NOT NULL;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(T1.degree_program_id) FROM Degree_Programs AS T1 INNER JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'engineering'
SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');
SELECT section_name, section_description FROM Sections
SELECT section_name, section_description FROM Sections;
SELECT C.course_id, C.course_name  FROM Courses AS C  INNER JOIN (SELECT course_id, COUNT(section_id) AS section_count              FROM Sections              GROUP BY course_id              HAVING COUNT(section_id) <= 2) AS S  ON C.course_id = S.course_id
SELECT C.course_id, C.course_name FROM Courses AS C LEFT JOIN Sections AS S ON C.course_id = S.course_id GROUP BY C.course_id, C.course_name HAVING COUNT(S.section_id) < 2
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT T2.semester_name, T2.semester_id FROM Semesters AS T2 INNER JOIN Student_Enrolment AS T1 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1
SELECT S.semester_id, S.semester_name  FROM Semesters AS S  INNER JOIN (SELECT semester_id, COUNT(student_enrolment_id) AS student_count              FROM Student_Enrolment              GROUP BY semester_id) AS counts  ON S.semester_id = counts.semester_id  ORDER BY counts.student_count DESC  LIMIT 1;
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT first_name, middle_name, last_name, student_id FROM Students AS S WHERE student_id IN (SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2)
SELECT first_name, middle_name, last_name, student_id FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(DISTINCT degree_program_id) = 2)
SELECT S.first_name, S.middle_name, S.last_name FROM Students AS S INNER JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id INNER JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor'
SELECT S.first_name, S.middle_name, S.last_name FROM Students AS S INNER JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id INNER JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor'
SELECT T2.degree_summary_name, COUNT(T1.student_id) AS enrollment_count FROM Student_Enrolment AS T1 INNER JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY enrollment_count DESC LIMIT 1
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY COUNT(T2.student_id) DESC LIMIT 1
SELECT T1.degree_program_id, T1.degree_summary_description FROM Degree_Programs AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1
SELECT DP.degree_program_id, DP.degree_summary_name  FROM Degree_Programs AS DP  INNER JOIN (      SELECT student_enrolment.degree_program_id, COUNT(*) AS student_count      FROM Student_Enrolment AS student_enrolment      GROUP BY student_enrolment.degree_program_id      ORDER BY student_count DESC      LIMIT 1 ) AS Enrolled ON DP.degree_program_id = Enrolled.degree_program_id
SELECT T2.student_id, T2.first_name, T2.middle_name, T2.last_name, COUNT(T1.student_enrolment_id) AS enrollment_count FROM Student_Enrolment AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY enrollment_count DESC LIMIT 1
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.student_enrolment_id) AS enrollment_count FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY enrollment_count DESC LIMIT 1
SELECT T2.semester_name FROM Semesters AS T2 LEFT JOIN Student_Enrolment AS T1 ON T2.semester_id = T1.semester_id WHERE T1.student_enrolment_id IS NULL
SELECT T1.semester_name FROM Semesters AS T1 LEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_enrolment_id IS NULL
SELECT DISTINCT T1.course_name FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
SELECT DISTINCT T1.course_name FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
SELECT T2.course_name FROM Courses AS T2 INNER JOIN Student_Enrolment_Courses AS T1 ON T1.course_id = T2.course_id GROUP BY T2.course_name ORDER BY COUNT(T1.student_enrolment_id) DESC LIMIT 1
SELECT C.course_name FROM Courses AS C INNER JOIN (SELECT course_id, COUNT(student_course_id) AS enrollment_count FROM Student_Enrolment_Courses GROUP BY course_id) AS E ON C.course_id = E.course_id ORDER BY E.enrollment_count DESC LIMIT 1
SELECT T1.last_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment)
SELECT T1.last_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE LOWER(T2.state_province_county) = 'north carolina' AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IS NOT NULL)
SELECT T1.transcript_date, T1.transcript_id  FROM Transcripts AS T1  INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_id  HAVING COUNT(T2.student_course_id) >= 2
SELECT T1.transcript_id, T1.transcript_date  FROM Transcripts AS T1  INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_id  HAVING COUNT(T2.student_course_id) >= 2
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)
SELECT T1.first_name FROM Students AS T1 WHERE T1.permanent_address_id <> T1.current_address_id
SELECT first_name FROM Students WHERE permanent_address_id <> current_address_id;
SELECT A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.state_province_county, A.zip_postcode, A.country  FROM Addresses AS A  INNER JOIN (SELECT current_address_id, COUNT(*) AS student_count              FROM Students              GROUP BY current_address_id              ORDER BY student_count DESC              LIMIT 1) AS S  ON A.address_id = S.current_address_id
SELECT A.address_id, A.line_1, A.line_2  FROM Addresses A  INNER JOIN (SELECT current_address_id, COUNT(*) AS student_count              FROM Students              GROUP BY current_address_id              ORDER BY student_count DESC              LIMIT 1) AS S  ON A.address_id = S.current_address_id
SELECT AVG(transcript_date) FROM Transcripts;
SELECT DATETIME(AVG(STRFTIME('%s', transcript_date)), 'unixepoch') AS average_transcript_date FROM Transcripts
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1 WHERE T1.transcript_date = (SELECT MIN(transcript_date) FROM Transcripts)
SELECT COUNT(transcript_id) FROM Transcripts;
SELECT COUNT(transcript_id) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT student_course_id, COUNT(transcript_id) AS enrollment_count FROM Transcript_Contents GROUP BY student_course_id ORDER BY enrollment_count DESC LIMIT 1
SELECT T1.student_course_id, COUNT(T1.transcript_id) AS count FROM Transcript_Contents AS T1 INNER JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.student_course_id ORDER BY count DESC LIMIT 1
SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 WHERE T1.transcript_id = (SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1)
SELECT T1.transcript_id, T1.transcript_date  FROM Transcripts AS T1  INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_id  ORDER BY COUNT(T2.student_course_id) ASC  LIMIT 1
SELECT T3.semester_name  FROM Student_Enrolment AS T1  INNER JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id  INNER JOIN Semesters AS T3 ON T1.semester_id = T3.semester_id  WHERE T2.degree_summary_name IN ('Master', 'Bachelor')  GROUP BY T3.semester_name  HAVING COUNT(DISTINCT T2.degree_summary_name) = 2
SELECT SE.semester_id FROM Student_Enrolment AS SE INNER JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name IN ('Master', 'Bachelor') GROUP BY SE.semester_id HAVING COUNT(DISTINCT DP.degree_summary_name) = 2
SELECT COUNT(DISTINCT T1.address_id) FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id
SELECT DISTINCT A.* FROM Addresses AS A  WHERE A.address_id IN (SELECT S.current_address_id FROM Students AS S)     OR A.address_id IN (SELECT S.permanent_address_id FROM Students AS S);
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC
SELECT * FROM Students ORDER BY last_name DESC
SELECT * FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT S.first_name FROM Students AS S INNER JOIN Addresses AS A ON S.permanent_address_id = A.address_id WHERE A.country = 'Haiti' OR S.cell_mobile_number = '09700166582'
SELECT DISTINCT T1.first_name  FROM Students AS T1  INNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id  WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date ASC
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Country, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1
SELECT Country, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1
SELECT COUNT(DISTINCT series_name) AS distinct_series_count, COUNT(DISTINCT content) AS distinct_content_count FROM TV_Channel
SELECT COUNT(DISTINCT series_name) AS distinct_series_count, COUNT(DISTINCT Content) AS distinct_content_count FROM TV_Channel
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'
SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1
WITH LanguageCounts AS (SELECT `Language`, COUNT(`id`) AS `channel_count` FROM `TV_Channel` GROUP BY `Language`) SELECT `Language`, `channel_count` FROM LanguageCounts WHERE `channel_count` = (SELECT MIN(`channel_count`) FROM LanguageCounts)
SELECT Language, COUNT(DISTINCT id) FROM TV_Channel GROUP BY Language
SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language
SELECT T2.series_name FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Title = 'The Rise of the Blue Beetle!'
SELECT T2.series_name FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Title = 'The Rise of the Blue Beetle'
SELECT T1.Title FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'
SELECT T1.Title FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'
SELECT Episode FROM TV_series ORDER BY Rating ASC
SELECT Episode FROM TV_series ORDER BY Rating DESC
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT MIN(Share), MAX(Share) FROM TV_series
SELECT MAX(Share), MIN(Share) FROM TV_series
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT T1.series_name FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'
SELECT T2.series_name FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime'
SELECT T1.Episode FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio')
SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by
SELECT Directed_by, COUNT(*) AS cartoon_count FROM Cartoon GROUP BY Directed_by
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes'
SELECT "Package_Option", "series_name" FROM TV_Channel WHERE "Hight_definition_TV" = 'yes'
SELECT DISTINCT T3.Country FROM Cartoon AS T1 INNER JOIN TV_Channel AS T3 ON T1.Channel = T3.id WHERE T1.Written_by = 'Todd Casey'
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'
SELECT DISTINCT T1.Country  FROM TV_Channel AS T1  LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel AND T2.Written_by = 'Todd Casey'  WHERE T2.Channel IS NULL;
SELECT DISTINCT T2.Country FROM TV_Channel AS T2 WHERE T2.id NOT IN (SELECT T1.Channel FROM Cartoon AS T1 WHERE T1.Written_by = 'Todd Casey')
SELECT DISTINCT T2.series_name, T2.Country FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT DISTINCT T1.series_name, T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY T1.series_name, T1.Country HAVING COUNT(DISTINCT T2.Directed_by) = 2
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
SELECT T1.id FROM TV_Channel AS T1 WHERE T1.Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2)
SELECT T1.id  FROM TV_Channel AS T1  LEFT JOIN TV_series AS T2 ON T2.Channel = T1.id  LEFT JOIN Cartoon AS T3 ON T3.Channel = T1.id  GROUP BY T1.id  HAVING COUNT(DISTINCT T2.id) + COUNT(DISTINCT T3.id) > 2
SELECT T1.id FROM TV_Channel AS T1 WHERE T1.id NOT IN (SELECT T2.Channel FROM Cartoon AS T2 WHERE T2.Directed_by = 'Ben Jones')
SELECT id FROM TV_Channel WHERE NOT EXISTS (SELECT 1 FROM Cartoon WHERE Cartoon.Channel = TV_Channel.id AND Directed_by = 'Ben Jones')
SELECT DISTINCT T1.Package_Option  FROM TV_Channel AS T1  LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel AND T2.Directed_by = 'Ben Jones'  WHERE T2.Channel IS NULL
SELECT DISTINCT T1.Package_Option  FROM TV_Channel AS T1  LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel AND T2.Directed_by = 'Ben Jones'  WHERE T2.Channel IS NULL
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(Poker_Player_ID) FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT T1.Final_Table_Made, T1.Best_Finish FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT DISTINCT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT DISTINCT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000
SELECT T2.Name FROM people AS T2 INNER JOIN poker_player AS T1 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC
SELECT T1.Name, COUNT(T2.Final_Table_Made) FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Name ORDER BY COUNT(T2.Final_Table_Made) ASC
SELECT T1.Birth_Date FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings = (SELECT MIN(Earnings) FROM poker_player)
SELECT T1.Birth_Date FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings = (SELECT MIN(Earnings) FROM poker_player)
SELECT T1.Money_Rank FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = (SELECT MAX(Height) FROM people)
SELECT Money_Rank FROM poker_player WHERE People_ID = (SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1)
SELECT AVG(T2.Earnings) FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200
SELECT AVG(T1.Earnings) FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200
SELECT T1.Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC
SELECT Nationality, COUNT(People_ID) FROM people GROUP BY Nationality
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality
SELECT Nationality, COUNT(*) AS count FROM people GROUP BY Nationality ORDER BY count DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT T1.Name FROM people AS T1 WHERE T1.People_ID NOT IN (SELECT T2.People_ID FROM poker_player AS T2)
SELECT T1.Name FROM people AS T1 LEFT JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.People_ID IS NULL
SELECT COUNT(DISTINCT Nationality) FROM people
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT state, created FROM VOTES;
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 INNER JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING COUNT(T2.vote_id) >= 2
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 WHERE T1.contestant_number = (SELECT T2.contestant_number FROM VOTES AS T2 GROUP BY T2.contestant_number ORDER BY COUNT(*) ASC LIMIT 1)
SELECT COUNT(vote_id) FROM VOTES WHERE state IN ('NY', 'CA');
SELECT COUNT(contestant_number) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);
SELECT T1.area_code FROM AREA_CODE_STATE AS T1 INNER JOIN VOTES AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY COUNT(T2.vote_id) DESC LIMIT 1
SELECT V.created, V.state, V.phone_number FROM VOTES AS V INNER JOIN CONTESTANTS AS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'
SELECT T3.area_code  FROM VOTES AS T1  INNER JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number  INNER JOIN AREA_CODE_STATE AS T3 ON T1.state = T3.state  WHERE T1.contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name IN ('Tabatha Gehling', 'Kelly Clauss'))  GROUP BY T3.area_code  HAVING COUNT(DISTINCT T1.contestant_number) = 2
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT Continent FROM country WHERE Name = 'Anguilla'
SELECT Continent FROM country WHERE Name = 'Anguilla' OR Code = 'AIA'
SELECT T2.Region FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'
SELECT T2.Region FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'
SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1
SELECT T1.Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba' ORDER BY T1.Percentage DESC LIMIT 1
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' AND T1.LifeExpectancy = (SELECT MIN(T2.LifeExpectancy) FROM country AS T2 WHERE T2.Continent = 'Asia')
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia'
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM country WHERE Continent = 'Asia'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic' AND LifeExpectancy IS NOT NULL
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT AVG(GNP) AS average_GNP, SUM(Population) AS total_population FROM country WHERE GovernmentForm = 'US territory'
SELECT AVG(GNP) AS mean_GNP, SUM(Population) AS total_population FROM country WHERE Code IN ('ASM', 'GUM', 'PRI', 'VIR') -- Assuming these are the US territories in the country table
SELECT COUNT(DISTINCT Language) FROM countrylanguage
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT `Language`) FROM `countrylanguage` WHERE `CountryCode` = (SELECT `Code` FROM `country` WHERE `Name` = 'Aruba')
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba')
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T'
SELECT COUNT(*) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan')
SELECT C.Name FROM country AS C INNER JOIN (SELECT CountryCode, COUNT(DISTINCT Language) AS LanguageCount FROM countrylanguage GROUP BY CountryCode ORDER BY LanguageCount DESC LIMIT 1) AS CL ON C.Code = CL.CountryCode
SELECT T2.Name FROM (SELECT CountryCode, COUNT(DISTINCT Language) AS LanguageCount FROM countrylanguage GROUP BY CountryCode) AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.LanguageCount DESC LIMIT 1
SELECT T2.Continent, COUNT(DISTINCT T1.Language) AS LanguageCount FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY LanguageCount DESC LIMIT 1
SELECT C.Continent, COUNT(DISTINCT CL.Language) AS LanguageCount FROM country AS C INNER JOIN countrylanguage AS CL ON C.Code = CL.CountryCode GROUP BY C.Continent ORDER BY LanguageCount DESC LIMIT 1
SELECT COUNT(DISTINCT T1.CountryCode) FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Language = 'English' AND T2.Language = 'Dutch'
SELECT COUNT(DISTINCT `CountryCode`) FROM `countrylanguage` WHERE `Language` IN ('English', 'Dutch') GROUP BY `CountryCode` HAVING COUNT(DISTINCT `Language`) = 2
SELECT C.Name  FROM country AS C  JOIN (SELECT CL.CountryCode        FROM countrylanguage AS CL        WHERE CL.Language IN ('English', 'French')        GROUP BY CL.CountryCode        HAVING COUNT(DISTINCT CL.Language) = 2) AS CL  ON C.Code = CL.CountryCode;
SELECT T3.Name  FROM (SELECT CountryCode        FROM countrylanguage        WHERE Language IN ('English', 'French')        GROUP BY CountryCode        HAVING COUNT(DISTINCT Language) = 2) AS T1  INNER JOIN country AS T3 ON T1.CountryCode = T3.Code
SELECT DISTINCT C.Name  FROM country AS C  INNER JOIN countrylanguage AS CL1 ON C.Code = CL1.CountryCode AND CL1.Language = 'English' AND CL1.IsOfficial = 'T'  INNER JOIN countrylanguage AS CL2 ON C.Code = CL2.CountryCode AND CL2.Language = 'French' AND CL2.IsOfficial = 'T'
SELECT DISTINCT C.Name  FROM country AS C  INNER JOIN countrylanguage AS CL1 ON C.Code = CL1.CountryCode AND CL1.Language = 'English' AND CL1.IsOfficial = 'T'  INNER JOIN countrylanguage AS CL2 ON C.Code = CL2.CountryCode AND CL2.Language = 'French' AND CL2.IsOfficial = 'T'
SELECT COUNT(DISTINCT T2.Continent) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Chinese'
SELECT COUNT(DISTINCT T2.Continent) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Chinese'
SELECT DISTINCT T1.Region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'Dutch')
SELECT DISTINCT T1.Region FROM country AS T1 WHERE T1.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' OR Language = 'English')
SELECT DISTINCT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language IN ('English', 'Dutch') AND T1.IsOfficial = 'T'
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'Dutch') AND T2.IsOfficial = 'T'
SELECT T2.Language  FROM country AS T1  INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T1.Continent = 'Asia'  GROUP BY T2.Language  ORDER BY SUM(T2.Percentage) DESC  LIMIT 1
SELECT CL.Language, COUNT(DISTINCT CL.CountryCode) AS CountryCount FROM countrylanguage AS CL INNER JOIN country AS C ON CL.CountryCode = C.Code WHERE C.Continent = 'Asia' GROUP BY CL.Language ORDER BY CountryCount DESC LIMIT 1
SELECT CL.Language FROM countrylanguage AS CL INNER JOIN country AS C ON CL.CountryCode = C.Code WHERE C.GovernmentForm = 'Republic' GROUP BY CL.Language HAVING COUNT(DISTINCT C.Code) = 1
SELECT CL.Language  FROM countrylanguage AS CL  INNER JOIN country AS C ON CL.CountryCode = C.Code  GROUP BY CL.Language  HAVING COUNT(DISTINCT CL.CountryCode) = 1 AND C.GovernmentForm = 'Republic'
SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1
SELECT T2.Name FROM city AS T2 INNER JOIN countrylanguage AS T1 ON T2.CountryCode = T1.CountryCode WHERE T1.Language = 'English' ORDER BY T2.Population DESC LIMIT 1
SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asia' ORDER BY T1.SurfaceArea DESC LIMIT 1
SELECT Name, Population, LifeExpectancy FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia')
SELECT AVG(T1.LifeExpectancy) FROM country AS T1 WHERE NOT EXISTS (SELECT 1 FROM countrylanguage AS T2 WHERE T1.Code = T2.CountryCode AND T2.Language = 'English' AND T2.IsOfficial = 'T')
SELECT AVG(T1.LifeExpectancy) FROM country AS T1 LEFT JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode AND T2.Language = 'English' AND T2.IsOfficial = 'T' WHERE T2.CountryCode IS NULL
SELECT SUM(c.Population) FROM country AS c LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.Language IS NULL;
SELECT SUM(T1.Population) FROM country AS T1 LEFT JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode AND T2.Language = 'English' AND T2.IsOfficial = 'T' WHERE T2.CountryCode IS NULL
SELECT CL.Language  FROM country AS C  INNER JOIN countrylanguage AS CL ON C.Code = CL.CountryCode  WHERE C.HeadOfState = 'Beatrix' AND CL.IsOfficial = 'T'
SELECT cl.Language  FROM country AS c  INNER JOIN countrylanguage AS cl ON c.Code = cl.CountryCode  WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'
SELECT COUNT(DISTINCT T1.Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930 AND T1.IsOfficial = 'T'
SELECT COUNT(DISTINCT T1.Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930 AND T1.IsOfficial = 'T'
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Region = 'Europe');
SELECT Name FROM country WHERE SurfaceArea > (SELECT COALESCE(MAX(SurfaceArea), 0) FROM country WHERE Region = 'Europe');
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Africa' AND T1.Population < (SELECT MIN(T2.Population) FROM country AS T2 WHERE T2.Continent = 'Asia')
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' AND T1.Population > (SELECT MAX(T2.Population) FROM country AS T2 WHERE T2.Continent = 'Africa')
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' AND T1.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
SELECT Code FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'English')
SELECT DISTINCT c.Code FROM country AS c LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.Language IS NULL
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'
SELECT T1.Code FROM country AS T1 WHERE T1.GovernmentForm != 'Republic' AND NOT EXISTS (SELECT 1 FROM countrylanguage AS T2 WHERE T2.CountryCode = T1.Code AND T2.Language = 'English')
SELECT c.Code  FROM country AS c  LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode AND cl.Language = 'English'  WHERE cl.CountryCode IS NULL AND c.GovernmentForm <> 'Republic'
SELECT T1.Name FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Region = 'Europe' AND NOT EXISTS (SELECT 1 FROM countrylanguage AS T3 WHERE T3.CountryCode = T2.Code AND T3.Language = 'English' AND T3.IsOfficial = 'T')
SELECT T1.Name FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code LEFT JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode AND T3.Language = 'English' WHERE T2.Region = 'Europe' AND (T3.CountryCode IS NULL OR T3.IsOfficial = 'F')
SELECT DISTINCT T1.Name FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code INNER JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'Chinese' AND T3.IsOfficial = 'T' AND T2.Continent = 'Asia'
SELECT DISTINCT C.Name FROM city AS C INNER JOIN country AS Co ON C.CountryCode = Co.Code INNER JOIN countrylanguage AS CL ON Co.Code = CL.CountryCode WHERE Co.Continent = 'Asia' AND CL.Language = 'Chinese' AND CL.IsOfficial = 'T'
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT T1.Name, COUNT(T2.Language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(T2.Language) >= 3
SELECT T2.Name, COUNT(DISTINCT T1.Language) AS LanguageCount  FROM countrylanguage AS T1  INNER JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T2.Name  HAVING COUNT(DISTINCT T1.Language) > 2
SELECT District, COUNT(*) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District
SELECT District, COUNT(ID) FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District
SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72
SELECT GovernmentForm, SUM(Population) AS TotalPopulation  FROM country  WHERE LifeExpectancy > 72  GROUP BY GovernmentForm;
SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72
SELECT Continent, SUM(Population) AS Total_Population, AVG(LifeExpectancy) AS Average_Life_Expectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT T1.Name FROM country AS T1 INNER JOIN (SELECT CountryCode, SUM(Population) AS TotalPopulation FROM city GROUP BY CountryCode) AS T2 ON T1.Code = T2.CountryCode ORDER BY TotalPopulation DESC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Region = 'Europe' AND Population = 80000;
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Region = 'North America' AND SurfaceArea > 3000
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1
SELECT T1.Code, T2.Language  FROM country AS T1  INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  WHERE T2.Percentage = (SELECT MAX(Percentage) FROM countrylanguage AS T3 WHERE T3.CountryCode = T1.Code)
SELECT T1.CountryCode, T1.Language  FROM countrylanguage AS T1  INNER JOIN (SELECT CountryCode, MAX(Percentage) AS MaxPercentage              FROM countrylanguage              GROUP BY CountryCode) AS T2  ON T1.CountryCode = T2.CountryCode AND T1.Percentage = T2.MaxPercentage
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish')
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage >= 50.0;
SELECT COUNT(Conductor_ID) FROM conductor;
SELECT COUNT(DISTINCT Conductor_ID) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA'
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final';
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> 'Live final';
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT "Nationality") FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);
SELECT T1.Name, T2.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
SELECT T1.Name, T2.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1
SELECT T1.Name FROM conductor AS T1 WHERE T1.Conductor_ID IN (SELECT T2.Conductor_ID FROM orchestra AS T2 GROUP BY T2.Conductor_ID HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1)
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(DISTINCT T2.Orchestra_ID) DESC LIMIT 1
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1
SELECT DISTINCT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008
SELECT DISTINCT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008
SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company
SELECT T1.Record_Company, COUNT(DISTINCT T1.Orchestra_ID) AS Orchestra_Count  FROM orchestra AS T1  GROUP BY T1.Record_Company
SELECT Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
SELECT Major_Record_Format, COUNT(*) FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1
SELECT T1.Orchestra FROM orchestra AS T1 LEFT JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Orchestra_ID IS NULL
SELECT T1.Orchestra FROM orchestra AS T1 LEFT JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Performance_ID IS NULL
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT DISTINCT O.Year_of_Founded FROM orchestra AS O INNER JOIN performance AS P ON O.Orchestra_ID = P.Orchestra_ID GROUP BY O.Year_of_Founded HAVING COUNT(P.Performance_ID) > 1
SELECT DISTINCT T2.Year_of_Founded FROM orchestra AS T2 INNER JOIN performance AS T1 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Year_of_Founded HAVING COUNT(T1.Performance_ID) > 1
SELECT COUNT(ID) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT DISTINCT grade FROM Highschooler;
SELECT ID, grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4
SELECT T1.ID, COUNT(T2.friend_id) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID
SELECT student_id, COUNT(friend_id) FROM Friend GROUP BY student_id
SELECT T1.name, COUNT(T2.friend_id) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID
SELECT H.name, COUNT(F.friend_id) AS friend_count  FROM Highschooler AS H  LEFT JOIN Friend AS F ON H.ID = F.student_id  GROUP BY H.ID
SELECT T2.name FROM (SELECT student_id, COUNT(friend_id) AS friend_count FROM Friend GROUP BY student_id ORDER BY friend_count DESC LIMIT 1) AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID
SELECT T2.name FROM Highschooler AS T2 INNER JOIN (SELECT student_id, COUNT(friend_id) AS friend_count FROM Friend GROUP BY student_id) AS T1 ON T2.ID = T1.student_id ORDER BY friend_count DESC LIMIT 1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN (SELECT student_id, COUNT(friend_id) AS friend_count FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 3) AS T2 ON T1.ID = T2.student_id
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(T2.friend_id) >= 3
SELECT T2.name FROM Highschooler AS T1 INNER JOIN Friend AS T3 ON T1.ID = T3.friend_id INNER JOIN Highschooler AS T2 ON T3.student_id = T2.ID WHERE T1.name = 'Kyle'
SELECT T2.name FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T1.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(F.friend_id) FROM Friend AS F INNER JOIN Highschooler AS H ON F.student_id = H.ID WHERE H.name = 'Kyle'
SELECT COUNT(friend_id) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT ID FROM Highschooler WHERE NOT EXISTS (SELECT 1 FROM Friend WHERE Friend.student_id = Highschooler.ID)
SELECT T1.ID FROM Highschooler AS T1 WHERE NOT EXISTS (SELECT 1 FROM Friend AS T2 WHERE T2.student_id = T1.ID)
SELECT T1.name FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.friend_id IS NULL
SELECT T1.name FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id IS NULL
SELECT DISTINCT H.ID  FROM Highschooler H  INNER JOIN Friend F ON H.ID = F.student_id  INNER JOIN Likes L ON H.ID = L.liked_id
SELECT DISTINCT F.student_id FROM Friend F INNER JOIN Likes L ON F.student_id = L.student_id
SELECT DISTINCT T3.name FROM Highschooler AS T3 INNER JOIN Friend AS F ON T3.ID = F.student_id INNER JOIN Likes AS L ON T3.ID = L.liked_id
SELECT DISTINCT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id INNER JOIN Likes AS T3 ON T1.ID = T3.student_id
SELECT student_id, COUNT(liked_id) FROM Likes GROUP BY student_id
SELECT student_id, COUNT(liked_id) FROM Likes GROUP BY student_id
SELECT H.name, COUNT(L.liked_id) AS number_of_likes  FROM Highschooler AS H  INNER JOIN Likes AS L ON H.ID = L.student_id  GROUP BY H.name
SELECT T1.name, COUNT(T2.liked_id) FROM Highschooler AS T1 LEFT JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(T2.liked_id) > 0
SELECT T2.name FROM Highschooler AS T2 WHERE T2.ID = (SELECT T1.student_id FROM Likes AS T1 GROUP BY T1.student_id ORDER BY COUNT(T1.liked_id) DESC LIMIT 1)
SELECT T1.name FROM Highschooler AS T1 INNER JOIN (SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(liked_id) DESC LIMIT 1) AS T2 ON T1.ID = T2.student_id
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(T2.liked_id) >= 2
SELECT T2.name FROM Likes AS T1 INNER JOIN Highschooler AS T2 ON T1.liked_id = T2.ID GROUP BY T1.liked_id HAVING COUNT(T1.student_id) >= 2
SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade > 5 AND T1.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2)
SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade > 5 AND T1.ID IN (SELECT T2.student_id FROM Friend AS T2 GROUP BY T2.student_id HAVING COUNT(T2.friend_id) >= 2)
SELECT COUNT(T1.liked_id) FROM Likes AS T1 INNER JOIN Highschooler AS T2 ON T1.liked_id = T2.ID WHERE T2.name = 'Kyle'
SELECT COUNT(T1.liked_id) FROM Likes AS T1 WHERE T1.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT AVG(T1.grade) FROM Highschooler AS T1 WHERE T1.ID IN (SELECT DISTINCT T2.student_id FROM Friend AS T2)
SELECT AVG(T1.grade) FROM Highschooler AS T1 WHERE T1.ID IN (SELECT DISTINCT student_id FROM Friend);
SELECT MIN(T1.grade) FROM Highschooler AS T1 WHERE NOT EXISTS (SELECT 1 FROM Friend AS T2 WHERE T1.ID = T2.student_id);
SELECT MIN(H.grade) FROM Highschooler AS H LEFT JOIN Friend AS F ON H.ID = F.student_id WHERE F.student_id IS NULL
SELECT DISTINCT O.state FROM Owners O INNER JOIN Professionals P ON O.state = P.state
SELECT DISTINCT O.state FROM Owners O INNER JOIN Professionals P ON O.state = P.state
SELECT AVG(CAST(T1.age AS INTEGER)) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
SELECT AVG(CAST(T1.age AS INTEGER)) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 WHERE T1.state = 'Indiana' OR T1.professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2)
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2)
SELECT T1.name FROM Dogs AS T1 WHERE T1.dog_id IN (SELECT T2.dog_id FROM Treatments AS T2 GROUP BY T2.dog_id HAVING SUM(T2.cost_of_treatment) <= 1000)
SELECT D.name FROM Dogs AS D LEFT JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY D.dog_id HAVING SUM(T.cost_of_treatment) <= 1000
SELECT `first_name` FROM `Professionals` UNION SELECT `first_name` FROM `Owners` WHERE `first_name` NOT IN (SELECT `name` FROM `Dogs`)
SELECT first_name FROM (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) AS combined_names WHERE first_name NOT IN (SELECT name FROM Dogs)
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 WHERE T1.professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments)
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 WHERE T1.professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT T2.owner_id, T2.first_name, T2.last_name FROM Owners AS T2 INNER JOIN (SELECT owner_id, COUNT(*) AS dog_count FROM Dogs GROUP BY owner_id) AS T1 ON T1.owner_id = T2.owner_id ORDER BY dog_count DESC LIMIT 1
SELECT O.owner_id, O.first_name, O.last_name  FROM Owners O INNER JOIN Dogs D ON O.owner_id = D.owner_id  GROUP BY O.owner_id ORDER BY COUNT(D.dog_id) DESC  LIMIT 1;
SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(T2.treatment_id) >= 2
SELECT T1.professional_id, T1.role_code, T1.first_name  FROM Professionals AS T1  INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T1.professional_id  HAVING COUNT(T2.treatment_id) >= 2
SELECT T2.breed_name FROM Breeds AS T2 INNER JOIN Dogs AS T1 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_name ORDER BY COUNT(T1.dog_id) DESC LIMIT 1
SELECT T1.breed_name FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(T2.dog_id) DESC LIMIT 1
SELECT T1.owner_id, T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1
SELECT O.owner_id, O.last_name FROM Owners AS O INNER JOIN Dogs AS D ON O.owner_id = D.owner_id INNER JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1;
SELECT T2.treatment_type_description FROM Treatment_Types AS T2 INNER JOIN (SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code ORDER BY total_cost ASC LIMIT 1) AS T1 ON T1.treatment_type_code = T2.treatment_type_code
SELECT T2.treatment_type_description FROM Treatments AS T1 INNER JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code HAVING SUM(T1.cost_of_treatment) = (SELECT MIN(total_cost) FROM (SELECT SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code))
SELECT T1.owner_id, T3.zip_code FROM (SELECT T2.owner_id, SUM(T1.cost_of_treatment) AS total_paid FROM Treatments AS T1 INNER JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T2.owner_id) AS T1 INNER JOIN Owners AS T3 ON T1.owner_id = T3.owner_id ORDER BY total_paid DESC LIMIT 1
SELECT T3.owner_id, T3.zip_code  FROM Owners AS T3  INNER JOIN (SELECT T2.owner_id, SUM(T1.cost_of_treatment) AS total_spent              FROM Treatments AS T1              INNER JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id              GROUP BY T2.owner_id              ORDER BY total_spent DESC LIMIT 1) AS T4  ON T3.owner_id = T4.owner_id
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.cell_number HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2
SELECT DISTINCT P.first_name, P.last_name  FROM Professionals AS P  INNER JOIN Treatments AS T ON P.professional_id = T.professional_id  WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT DISTINCT T2.first_name, T2.last_name FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id WHERE T1.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id
SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 INNER JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 INNER JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code
SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Sizes AS T3 ON T2.size_code = T3.size_code
SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Sizes AS T3 ON T2.size_code = T3.size_code
SELECT T1.first_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
SELECT T1.first_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
SELECT D.name, T.date_of_treatment FROM Dogs AS D INNER JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE D.breed_code = (SELECT breed_code FROM Breeds WHERE breed_code IN (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(dog_id) ASC LIMIT 1))
SELECT D.name, T.date_of_treatment FROM Dogs AS D INNER JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE D.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)
SELECT T2.first_name, T1.name FROM Dogs AS T1 INNER JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.state = 'Virginia'
SELECT T1.first_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'
SELECT D.date_arrived, D.date_departed FROM Dogs AS D INNER JOIN Treatments AS T ON D.dog_id = T.dog_id
SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
SELECT O.last_name  FROM Owners O  INNER JOIN Dogs D ON O.owner_id = D.owner_id  WHERE D.date_of_birth = (SELECT MAX(date_of_birth) FROM Dogs)
SELECT T2.last_name FROM Dogs AS T1 INNER JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T1.date_of_birth = (SELECT MIN(date_of_birth) FROM Dogs)
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs;
SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE dog_id IS NOT NULL;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT COUNT(*) FROM Dogs WHERE CAST(age AS INTEGER) < (SELECT AVG(CAST(age AS INTEGER)) FROM Dogs);
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment) FROM Treatments)
SELECT COUNT(T1.dog_id) FROM Dogs AS T1 LEFT JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.dog_id IS NULL
SELECT COUNT(T1.dog_id) FROM Dogs AS T1 LEFT JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.dog_id IS NULL
SELECT COUNT(*) FROM Owners O WHERE NOT EXISTS (SELECT 1 FROM Dogs D WHERE D.owner_id = O.owner_id)
SELECT COUNT(owner_id) FROM Owners WHERE NOT EXISTS (SELECT 1 FROM Dogs WHERE Dogs.owner_id = Owners.owner_id);
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT COUNT(*) FROM Professionals AS P LEFT JOIN Treatments AS T ON P.professional_id = T.professional_id WHERE T.professional_id IS NULL
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT AVG(CAST(age AS INTEGER)) FROM Dogs;
SELECT AVG(CAST(age AS INTEGER)) FROM Dogs;
SELECT MAX(STRFTIME('%Y', 'now') - STRFTIME('%Y', date_of_birth)) AS age FROM Dogs
SELECT MAX(CAST(age AS INTEGER)) FROM Dogs;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT B.breed_name, S.size_description FROM Breeds AS B CROSS JOIN Sizes AS S
SELECT DISTINCT B.breed_name, S.size_description FROM Dogs AS D INNER JOIN Breeds AS B ON D.breed_code = B.breed_code INNER JOIN Sizes AS S ON D.size_code = S.size_code
SELECT T1.first_name, T2.treatment_type_description FROM Professionals AS T1 INNER JOIN Treatments AS T3 ON T1.professional_id = T3.professional_id INNER JOIN Treatment_Types AS T2 ON T3.treatment_type_code = T2.treatment_type_code
SELECT T1.first_name, T3.treatment_type_description FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id INNER JOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code
SELECT COUNT(DISTINCT Singer_ID) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT T1.Name FROM singer AS T1 ORDER BY T1.Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship <> 'France'
SELECT Name FROM singer WHERE Citizenship <> 'France';
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
SELECT Citizenship, COUNT(Singer_ID) FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(Singer_ID) FROM singer GROUP BY Citizenship
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT T1.Citizenship, MAX(T1.Net_Worth_Millions) FROM singer AS T1 GROUP BY T1.Citizenship
SELECT T1.Title, T2.Name FROM song AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID
SELECT T1.Title, T2.Name FROM song AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID
SELECT DISTINCT T2.Name FROM singer AS T2 INNER JOIN song AS T1 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Sales > 300000
SELECT DISTINCT T2.Name FROM song AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Sales > 300000
SELECT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(T2.Song_ID) > 1
SELECT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(T2.Song_ID) > 1
SELECT T2.Name, SUM(T1.Sales) FROM song AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name
SELECT T2.Name, SUM(T1.Sales) FROM song AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name
SELECT T1.Name FROM singer AS T1 LEFT JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Singer_ID IS NULL
SELECT T1.Name FROM singer AS T1 LEFT JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Song_ID IS NULL
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship HAVING COUNT(DISTINCT CASE WHEN Birth_Year < 1945 THEN 1 END) > 0 AND COUNT(DISTINCT CASE WHEN Birth_Year > 1955 THEN 1 END) > 0
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship HAVING COUNT(DISTINCT Singer_ID) > 1
SELECT COUNT(DISTINCT feature_id) FROM Other_Available_Features;
SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 INNER JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'
SELECT DISTINCT RPT.property_type_description  FROM Properties AS P  INNER JOIN Ref_Property_Types AS RPT  ON P.property_type_code = RPT.property_type_code;
SELECT T1.property_name  FROM Properties AS T1  INNER JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code  WHERE (T2.property_type_description LIKE '%House%' OR T2.property_type_description LIKE '%Apartment%')  AND T1.room_count > 1
