SELECT MAX(eligible_free_rate) AS highest_eligible_free_rate FROM ( SELECT (T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)`) AS eligible_free_rate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T2.`County` = 'Alameda' AND T1.`Enrollment (Ages 5-17)` > 0 ) AS rates
SELECT (T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)`) AS eligible_free_rate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T2.`StatusType` = 'Active' AND T1.`Free Meal Count (Ages 5-17)` IS NOT NULL AND T1.`Enrollment (Ages 5-17)` IS NOT NULL ORDER BY eligible_free_rate ASC LIMIT 3
SELECT `Zip` FROM schools WHERE `CDSCode` IN ( SELECT `CDSCode` FROM frpm WHERE `County Name` = 'Fresno' ) AND `Charter` = 1
SELECT T3.`MailStreet`, T3.`MailCity`, T3.`MailZip`, T3.`MailState` FROM frpm AS T1 INNER JOIN schools AS T3 ON T1.`CDSCode` = T3.`CDSCode` WHERE T1.`CDSCode` = ( SELECT `CDSCode` FROM frpm WHERE `FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm ) )
SELECT T1.`Phone` FROM schools AS T1 WHERE T1.`FundingType` = 'Directly funded' AND T1.`OpenDate` > '2000-01-01' AND T1.`Charter` = 1 AND T1.`Phone` IS NOT NULL AND T1.`OpenDate` IS NOT NULL AND T1.`FundingType` IS NOT NULL
SELECT COUNT(*) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T1.`Virtual` = 'F' AND T2.`AvgScrMath` < 400
SELECT DISTINCT T2.`School` FROM schools AS T2 JOIN satscores AS T1 ON T1.cds = T2.CDSCode WHERE T1.`NumTstTakr` > 500 AND T2.`Magnet` = 1
SELECT T3.`Phone` FROM satscores AS T2 INNER JOIN schools AS T3 ON T2.`cds` = T3.`CDSCode` WHERE T2.`NumGE1500` = ( SELECT MAX(T2.`NumGE1500`) FROM satscores AS T2 )
SELECT SUM(T2.`NumTstTakr`) FROM satscores AS T2 WHERE T2.`cds` IN ( SELECT T1.`CDSCode` FROM frpm AS T1 WHERE T1.`FRPM Count (K-12)` = ( SELECT MAX(`FRPM Count (K-12)`) FROM frpm ) )
SELECT COUNT(*) FROM schools AS T1 JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T1.`Charter` = 1 AND T2.`AvgScrMath` > 560
SELECT T1.`Free Meal Count (Ages 5-17)` FROM frpm AS T1 JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` JOIN satscores AS T3 ON T2.`CDSCode` = T3.`cds` WHERE T3.AvgScrRead = ( SELECT MAX(T4.AvgScrRead) FROM satscores AS T4 ) AND T1.`Free Meal Count (Ages 5-17)` IS NOT NULL
SELECT T1.`CDSCode` FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE (T1.`Enrollment (Ages 5-17)` + T2.`enroll12`) > 500
SELECT MAX(CAST(T3.`Free Meal Count (Ages 5-17)` AS REAL) / CAST(T3.`Enrollment (Ages 5-17)` AS REAL)) AS highest_eligible_free_rate FROM frpm AS T3 JOIN schools AS T1 ON T3.`CDSCode` = T1.`CDSCode` JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE CAST(T2.`NumGE1500` AS REAL) / CAST(T2.`NumTstTakr` AS REAL) > 0.3 AND T3.`Free Meal Count (Ages 5-17)` IS NOT NULL AND T3.`Enrollment (Ages 5-17)` IS NOT NULL;
SELECT T3.`Phone` FROM ( SELECT T3.`CDSCode`, CAST(T2.`NumGE1500` AS REAL) / T2.`NumTstTakr` AS excellence_rate FROM satscores AS T2 INNER JOIN schools AS T3 ON T2.`cds` = T3.`CDSCode` WHERE T2.`NumTstTakr` > 0 ORDER BY excellence_rate DESC LIMIT 3 ) AS TopSchools INNER JOIN schools AS T3 ON TopSchools.`CDSCode` = T3.`CDSCode`
SELECT T2.`NCESSchool` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` ORDER BY T1.`Enrollment (Ages 5-17)` DESC LIMIT 5
SELECT T1.District FROM ( SELECT T3.District, AVG(T2.AvgScrRead) AS avg_reading_score FROM schools AS T3 INNER JOIN satscores AS T2 ON T3.CDSCode = T2.cds WHERE T3.StatusType = 'Active' AND T2.AvgScrRead IS NOT NULL GROUP BY T3.District ) AS T1 ORDER BY T1.avg_reading_score DESC LIMIT 1
SELECT COUNT(*) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T1.`County` = 'Alameda' AND T1.`StatusType` = 'Merged' AND T2.`NumTstTakr` < 100
SELECT T2.`CharterNum` FROM schools AS T2 JOIN satscores AS T1 ON T1.cds = T2.`CDSCode` WHERE T1.`AvgScrWrite` = 499 AND T2.`CharterNum` IS NOT NULL GROUP BY T2.`CharterNum`
SELECT COUNT(*) FROM satscores AS T2 WHERE T2.`cds` IN ( SELECT T1.`CDSCode` FROM schools AS T1 WHERE T1.`County` = 'Contra Costa' AND T1.`FundingType` = 'Directly funded' ) AND T2.`NumTstTakr` <= 250
SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath = ( SELECT MAX(AvgScrMath) FROM satscores WHERE AvgScrMath IS NOT NULL ) AND T2.Phone IS NOT NULL
SELECT COUNT(*) FROM schools AS S WHERE S.County = 'Amador'
SELECT COUNT(*) FROM frpm AS T2 INNER JOIN schools AS T1 ON T1.`CDSCode` = T2.`CDSCode` WHERE T1.`County` = 'Los Angeles' AND T2.`Free Meal Count (K-12)` > 500 AND T2.`Free Meal Count (K-12)` < 700
SELECT T2.`sname`, MAX(T2.`NumTstTakr`) AS MaxNumTstTakr FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T1.`County` = 'Alameda' AND T2.`NumTstTakr` IS NOT NULL GROUP BY T2.`sname` ORDER BY MaxNumTstTakr DESC LIMIT 1
SELECT T2.`School`, T2.`Street`, T2.`City`, T2.`Zip` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > 30
SELECT T3.`School` FROM schools AS T3 INNER JOIN frpm AS T1 ON T3.`CDSCode` = T1.`CDSCode` INNER JOIN satscores AS T2 ON T3.`CDSCode` = T2.`cds` WHERE T1.`Percent (%) Eligible Free (K-12)` > 0.1 AND T2.`NumGE1500` > 0
SELECT T1.`School`, T1.`FundingType` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T1.`County` = 'Riverside' AND T2.`AvgScrMath` IS NOT NULL GROUP BY T1.`School`, T1.`FundingType` HAVING AVG(T2.`AvgScrMath`) > 400
SELECT T2.`sname`, T3.`Street`, T3.`City`, T3.`Zip`, T3.`State` FROM frpm AS T1 INNER JOIN schools AS T3 ON T1.`CDSCode` = T3.`CDSCode` INNER JOIN satscores AS T2 ON T2.`cds` = T1.`CDSCode` WHERE T3.`City` = 'Monterey' AND T1.`FreeReducedMealCount` IS NOT NULL GROUP BY T2.`sname`, T3.`Street`, T3.`City`, T3.`Zip`, T3.`State` HAVING SUM(T1.`FreeReducedMealCount`) > 800
SELECT T1.`School`, T2.`AvgScrWrite`, T1.`Phone` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE (T1.`OpenDate` > '1991-01-01' OR T1.`ClosedDate` < '2000-01-01') AND T2.`AvgScrWrite` IS NOT NULL AND T1.`Phone` IS NOT NULL
SELECT SELECT T2.`School`, T2.`DOCType` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T2.`FundingType` = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > ( SELECT AVG(Difference) FROM ( SELECT (T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) AS Difference FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.`CDSCode` = T4.`CDSCode` WHERE T4.`FundingType` = 'Locally funded' ) AS AvgDifferences )
SELECT s.OpenDate FROM schools AS s JOIN satscores AS ss ON ss.cds = s.CDSCode WHERE ss.enroll12 IS NOT NULL AND s.OpenDate IS NOT NULL AND ss.enroll12 = ( SELECT MAX(enroll12) FROM satscores WHERE enroll12 IS NOT NULL )
SELECT DISTINCT S.City FROM schools AS S JOIN satscores AS SS ON S.CDSCode = SS.cds WHERE SS.enroll12 IS NOT NULL ORDER BY SS.enroll12 ASC LIMIT 5;
SELECT T1.`CDSCode`, (T1.`Free Meal Count (K-12)` / T1.`Enrollment (K-12)`) AS `Eligible Free Rate` FROM frpm AS T1 WHERE T1.`CDSCode` IN ( SELECT T2.`CDSCode` FROM frpm AS T2 ORDER BY T2.`Enrollment (K-12)` DESC LIMIT 11 ) ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9
SELECT (T1.`FRPM Count (K-12)` / T1.`Enrollment (K-12)`) AS `Eligible Free or Reduced Price Meal Rate` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T2.`SOC` = '66' ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5
SELECT T2.`sname`, T2.`Website` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T1.`Free Meal Count (Ages 5-17)` IS NOT NULL
SELECT S.`School`, (F.`Free Meal Count (Ages 5-17)` * 1.0 / F.`Enrollment (Ages 5-17)`) AS Free_Rate FROM frpm AS F JOIN schools AS S ON F.`CDSCode` = S.`CDSCode` WHERE S.`School` = 'Kacey Gibson' AND F.`Free Meal Count (Ages 5-17)` IS NOT NULL AND F.`Enrollment (Ages 5-17)` IS NOT NULL;
SELECT T3.`AdmEmail1` FROM frpm AS T1 INNER JOIN schools AS T3 ON T1.`CDSCode` = T3.`CDSCode` WHERE T1.`Charter School (Y/N)` = 1 AND T1.`Enrollment (K-12)` = ( SELECT MIN(T2.`Enrollment (K-12)`) FROM frpm AS T2 WHERE T2.`Charter School (Y/N)` = 1 )
SELECT COALESCE(T2.AdmFName1 || ' ' || T2.AdmLName1, '') AS FullName1, COALESCE(T2.AdmFName2 || ' ' || T2.AdmLName2, '') AS FullName2, COALESCE(T2.AdmFName3 || ' ' || T2.AdmLName3, '') AS FullName3 FROM schools AS T2 JOIN satscores AS T1 ON T1.cds = T2.CDSCode WHERE T1.NumGE1500 > 0 ORDER BY T1.NumTstTakr DESC LIMIT 1;
SELECT S.`Street`, S.`City`, S.`Zip`, S.`State` FROM schools AS S JOIN satscores AS SS ON S.`CDSCode` = SS.`cds` WHERE SS.`NumTstTakr` > 0 ORDER BY (SS.`NumGE1500` * 1.0 / SS.`NumTstTakr`) ASC LIMIT 1;
SELECT T2.`Website` FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.`cds` = T2.`CDSCode` WHERE T2.`County` = 'Los Angeles' AND T1.`NumTstTakr` BETWEEN 2000 AND 3000
SELECT AVG(T2.`NumTstTakr`) FROM satscores AS T2 WHERE T2.`cds` IN ( SELECT T1.`CDSCode` FROM schools AS T1 WHERE T1.`County` = 'Fresno' AND T1.`OpenDate` BETWEEN '1980-01-01' AND '1980-12-31' )
SELECT T1.`Phone` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T1.`District` = 'Fresno Unified' ORDER BY T2.`AvgScrRead` ASC LIMIT 1
SELECT T1.`School`, AVG(T2.`AvgScrRead`) AS AvgReadingScore FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T1.`Virtual` = 'F' AND T2.`AvgScrRead` IS NOT NULL GROUP BY T1.`School` ORDER BY AvgReadingScore DESC LIMIT 5
SELECT T2.StatusType FROM schools AS T2 INNER JOIN satscores AS T1 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath = ( SELECT MAX(AvgScrMath) FROM satscores WHERE AvgScrMath IS NOT NULL )
SELECT T2.`AvgScrMath`, T1.`County` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T1.`CDSCode` = ( SELECT T1.`CDSCode` FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T2.`AvgScrMath` IS NOT NULL AND T2.`AvgScrRead` IS NOT NULL AND T2.`AvgScrWrite` IS NOT NULL GROUP BY T1.`CDSCode` ORDER BY (T2.`AvgScrMath` + T2.`AvgScrRead` + T2.`AvgScrWrite`) ASC LIMIT 1 )
WITH HighestTestTakerSchool AS ( SELECT T2.`cds` FROM satscores AS T2 WHERE T2.`NumTstTakr` > 0 ORDER BY T2.`NumGE1500` DESC LIMIT 1 ) SELECT AVG(T3.`AvgScrWrite`) AS average_writing_score, T4.`City` FROM satscores AS T3 JOIN schools AS T4 ON T4.`CDSCode` = (SELECT `cds` FROM HighestTestTakerSchool) WHERE T3.`cds` = (SELECT `cds` FROM HighestTestTakerSchool)
SELECT T3.`School`, AVG(T2.`AvgScrWrite`) AS `Average_Writing_Score` FROM schools AS T3 INNER JOIN satscores AS T2 ON T3.`CDSCode` = T2.`cds` WHERE T2.`AvgScrWrite` IS NOT NULL GROUP BY T3.`School`
SELECT T2.`School` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` INNER JOIN satscores AS T3 ON T2.`CDSCode` = T3.`cds` WHERE T2.`FundingType` = 'Directly funded' GROUP BY T2.`School` HAVING SUM(T3.`enroll12`) = ( SELECT MAX(total_enrollment) FROM ( SELECT SUM(T3.`enroll12`) AS total_enrollment FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` INNER JOIN satscores AS T3 ON T2.`CDSCode` = T3.`cds` WHERE T2.`FundingType` = 'Directly funded' GROUP BY T2.`School` ) )
SELECT COUNT(*) / 12.0 AS monthly_average FROM schools WHERE `County` = 'Alameda' AND `OpenDate` BETWEEN '1980-01-01' AND '1980-12-31' AND `District` = '52'
SELECT (SELECT COUNT(*) FROM schools WHERE DOC = '54' AND County = 'Orange' AND StatusType = 'Merged') * 1.0 / (SELECT COUNT(*) FROM schools WHERE DOC = '52' AND County = 'Orange' AND StatusType = 'Merged') AS ratio
SELECT T3.`School`, T3.`ClosedDate` FROM schools AS T3 WHERE T3.`StatusType` = 'Closed' AND T3.`County` = ( SELECT T3.`County` FROM schools AS T3 WHERE T3.`StatusType` = 'Closed' GROUP BY T3.`County` ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT T3.`School`, T3.`Street` FROM satscores AS T1 INNER JOIN schools AS T3 ON T1.`cds` = T3.`CDSCode` WHERE T1.`AvgScrMath` = ( SELECT DISTINCT T2.`AvgScrMath` FROM satscores AS T2 ORDER BY T2.`AvgScrMath` DESC LIMIT 1 OFFSET 5 )
SELECT T2.School AS sname, T2.MailStreet FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead = ( SELECT MIN(AvgScrRead) FROM satscores WHERE AvgScrRead IS NOT NULL )
SELECT COUNT(*) FROM ( SELECT (T2.`AvgScrRead` + T2.`AvgScrMath` + T2.`AvgScrWrite`) AS TotalSATScore FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds` WHERE T1.`MailCity` = 'Lakeport' ) AS SubQuery WHERE TotalSATScore >= 1500
SELECT SUM(T2.`NumTstTakr`) FROM satscores AS T2 INNER JOIN schools AS T1 ON T1.`CDSCode` = T2.`cds` WHERE T1.`City` = 'Fresno'
SELECT S.`School`, S.`MailZip` FROM schools AS S INNER JOIN satscores AS SS ON S.`CDSCode` = SS.`cds` WHERE S.`AdmFName1` = 'Avetik Atoian' AND S.`MailZip` IS NOT NULL
SELECT (SELECT COUNT(*) FROM schools WHERE County = 'Colusa' AND State = 'CA') * 1.0 / NULLIF((SELECT COUNT(*) FROM schools WHERE County = 'Humboldt' AND State = 'CA'), 0) AS ratio
SELECT COUNT(*) FROM schools WHERE MailState = 'CA' AND StatusType = 'Active' AND District = 'San Joaquin'
SELECT T2.`Phone`, T2.`Ext` FROM ( SELECT DISTINCT T1.`AvgScrWrite` FROM satscores AS T1 WHERE T1.`AvgScrWrite` IS NOT NULL ORDER BY T1.`AvgScrWrite` DESC LIMIT 1 OFFSET 332 ) AS T3 INNER JOIN satscores AS T1 ON T3.`AvgScrWrite` = T1.`AvgScrWrite` INNER JOIN schools AS T2 ON T1.`cds` = T2.`CDSCode` WHERE T2.`Phone` IS NOT NULL AND T2.`Ext` IS NOT NULL
SELECT T3.`School`, T3.`Phone`, T3.`Ext` FROM schools AS T3 WHERE T3.`Zip` = '95203-3704'
SELECT DISTINCT T3.`Website` FROM schools AS T3 JOIN frpm AS T1 ON T1.`CDSCode` = T3.`CDSCode` WHERE T1.`County Name` IN ('Mike Larson', 'Dante Alvarez') AND T1.`CDSCode` IS NOT NULL
SELECT T1.`Website` FROM schools AS T1 WHERE T1.`Charter` = 1 AND T1.`Virtual` = 'P' AND T1.`County` = 'San Joaquin' AND T1.`Website` IS NOT NULL
SELECT COUNT(*) FROM schools WHERE `County` = 'Hickman' AND `DOC` = '52' AND `Charter` = 1
SELECT COUNT(*) AS total_non_chartered_schools FROM ( SELECT T1.`CDSCode`, (T2.`Free Meal Count (Ages 5-17)` * 100.0 / T2.`Enrollment (Ages 5-17)`) AS eligible_free_meal_percent FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T1.`County` = 'Los Angeles' AND T1.`Charter` = 0 ) AS subquery WHERE eligible_free_meal_percent < 0.18
SELECT T1.`School`, T1.`City`, T1.`AdmFName1`, T1.`AdmLName1`, T1.`AdmFName2`, T1.`AdmLName2` FROM schools AS T1 WHERE T1.`CDSCode` LIKE '00D2%' AND T1.`AdmFName1` IS NOT NULL AND T1.`AdmLName1` IS NOT NULL OR T1.`AdmFName2` IS NOT NULL AND T1.`AdmLName2` IS NOT NULL
SELECT COUNT(*) FROM schools WHERE `CharterNum` = '00D4' AND `MailCity` = 'Hickman'
SELECT (COUNT(CASE WHEN FundingType = 'Locally funded' THEN 1 END) * 100.0 / COUNT(*)) AS funding_ratio_percentage FROM schools WHERE County = 'Santa Clara'
SELECT COUNT(*) FROM schools WHERE `FundingType` = 'Directly funded' AND `OpenDate` IS NOT NULL AND `OpenDate` BETWEEN '2000-01-01' AND '2005-12-31' AND `County` = 'Stanislaus'
SELECT COUNT(*) AS total_closures FROM schools WHERE `ClosedDate` = '1989-06-30' AND `City` = 'San Francisco'
SELECT T1.`County` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T1.`StatusType` = 'Closed' AND T2.`Academic Year` BETWEEN '1980-1981' AND '1989-1990' AND T1.`SOC` = '11' GROUP BY T1.`County` ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.`NCESDist` FROM schools AS T1 WHERE T1.`SOC` = '31'
SELECT DISTINCT `County Name` FROM frpm
SELECT T2.`District Code` FROM frpm AS T2 WHERE T2.`CDSCode` IN ( SELECT T1.`CDSCode` FROM schools AS T1 WHERE T1.`City` = 'Fresno' AND T1.`Magnet` = 0 )
SELECT SELECT SUM(T3.enroll12) AS total_enrollment FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode INNER JOIN satscores AS T3 ON T2.CDSCode = T3.cds WHERE T2.EdOpsCode = 'SSS' AND T1."Academic Year" = '2014-2015' AND T2.District = 'Fremont' AND T3.enroll12 IS NOT NULL;
SELECT SUM(`FRPM Count (Ages 5-17)`) AS Total_FRPM_Count FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.School = 'Youth Authority School' AND schools.MailStreet = 'PO Box 1040' AND `FRPM Count (Ages 5-17)` IS NOT NULL
SELECT MIN(ss.enroll12) FROM frpm f JOIN schools s ON f.CDSCode = s.CDSCode JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.EdOpsCode = 'SPECON' AND s.NCESDist = '613360' AND ss.enroll12 IS NOT NULL GROUP BY ss.enroll12
SELECT T1.School Name FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County Code = '37' AND T2.Breakfast Provision = '2'
SELECT DISTINCT schools.County FROM frpm JOIN schools ON frpm.CDSCode = schools.CDSCode JOIN satscores ON schools.CDSCode = satscores.cds WHERE frpm.County_Code = '19' AND schools.School IS NOT NULL
SELECT T1.`CDSCode`, (T2.`Free Meal Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) * 100 AS `Percent Eligible FRPM` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T1.`County` = 'Los Angeles' AND T1.`CDSCode` IN ( SELECT T1.`CDSCode` FROM schools AS T1 WHERE T1.`County` = 'Los Angeles' )
SELECT T3.`GSserved` FROM schools AS T3 WHERE T3.`City` = 'Adelanto' GROUP BY T3.`GSserved` ORDER BY COUNT(*) DESC LIMIT 1
SELECT County, school_count FROM ( SELECT 'San Diego' AS County, COUNT(*) AS school_count FROM schools WHERE County = 'San Diego' AND Virtual = 'F' UNION ALL SELECT 'Santa Barbara' AS County, COUNT(*) AS school_count FROM schools WHERE County = 'Santa Barbara' AND Virtual = 'F' ) AS counts ORDER BY school_count DESC LIMIT 1
SELECT T1.School, T1.Latitude, T1.County FROM schools AS T1 WHERE T1.Latitude = ( SELECT MAX(Latitude) FROM schools )
SELECT T1.`School`, T1.`City`, 'K' AS Lowest_Grade FROM schools AS T1 WHERE T1.`City` IS NOT NULL ORDER BY T1.`Latitude` ASC LIMIT 1
SELECT GSoffered FROM schools WHERE Latitude = ( SELECT MAX(Latitude) FROM schools )
SELECT WITH MagnetSchoolCount AS ( SELECT COUNT(*) AS Magnet_School_Count FROM schools WHERE GSserved = 'K-8' AND Magnet = 1 ), CitySchoolCount AS ( SELECT County, COUNT(*) AS Number_of_Schools FROM schools WHERE GSserved = 'K-8' GROUP BY County ) SELECT (SELECT Magnet_School_Count FROM MagnetSchoolCount) AS Magnet_School_Count, County, Number_of_Schools FROM CitySchoolCount;
SELECT SELECT T1.AdmFName1, T1.District FROM schools AS T1 WHERE T1.AdmFName1 IS NOT NULL GROUP BY T1.AdmFName1, T1.District ORDER BY COUNT(*) DESC LIMIT 2;
SELECT T1.`District Code`, (T1.`Free Meal Count (Ages 5-17)` / T1.`Enrollment (Ages 5-17)`) * 100 AS `Percent Eligible Free` FROM frpm AS T1 WHERE T1.`CDSCode` = ( SELECT T3.`CDSCode` FROM schools AS T3 WHERE T3.`AdmFName1` = 'Alusine' )
SELECT * FROM schools WHERE CharterNum = '40'
SELECT T1.`Email` FROM frpm AS T1 JOIN schools AS T2 ON T1.`CDSCode` = T2.`CDSCode` WHERE T2.`County` = 'San Bernardino' AND T1.`District` = 'San Bernardino City Unified' AND T2.`StatusType` = 'Active' AND T2.`SOCType` IN ('Intermediate/Middle Schools (Public)', 'Unified Schools') AND T1.`Academic Year` BETWEEN '2009-2009' AND '2010-2010'
SELECT T3.AdmEmail1, T3.School FROM schools AS T3 INNER JOIN satscores AS T2 ON T3.CDSCode = T2.cds WHERE T2.NumTstTakr IS NOT NULL AND T2.NumGE1500 > 0 AND T2.NumTstTakr = ( SELECT MAX(T4.NumTstTakr) FROM satscores AS T4 WHERE T4.NumGE1500 > 0 AND T4.NumTstTakr IS NOT NULL )
SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.`district_id` = T2.`district_id` WHERE T2.`A3` = 'east Bohemia' AND T1.`frequency` = 'POPLATEK PO OBRATU'
SELECT COUNT(DISTINCT T1.`account_id`) FROM account AS T1 WHERE T1.`district_id` IN ( SELECT `district_id` FROM district WHERE `A3` = 'Prague' ) AND T1.`account_id` IN ( SELECT `account_id` FROM loan )
SELECT CASE WHEN (SELECT AVG(CAST(A12 AS REAL)) FROM district WHERE A12 IS NOT NULL) > (SELECT AVG(CAST(A13 AS REAL)) FROM district WHERE A13 IS NOT NULL) THEN '1995 has a higher average unemployment rate' WHEN (SELECT AVG(CAST(A12 AS REAL)) FROM district WHERE A12 IS NOT NULL) < (SELECT AVG(CAST(A13 AS REAL)) FROM district WHERE A13 IS NOT NULL) THEN '1996 has a higher average unemployment rate' ELSE 'Both years have the same average unemployment rate' END AS result
SELECT COUNT(*) FROM ( SELECT T1.`district_id`, AVG(T1.`A11`) AS female_avg_salary FROM client AS T2 INNER JOIN district AS T1 ON T2.`district_id` = T1.`district_id` WHERE T2.`gender` = 'F' GROUP BY T1.`district_id` ) AS subquery WHERE female_avg_salary > 6000 AND female_avg_salary < 10000
SELECT COUNT(*) FROM client AS T1 WHERE T1.`district_id` IN ( SELECT `district_id` FROM district WHERE `A3` = 'north Bohemia' AND `A11` > 8000 ) AND T1.`gender` = 'M'
WITH SalaryInfo AS ( SELECT MIN(A11) AS lowest_avg_salary, MAX(A11) AS highest_avg_salary FROM district ), OldestFemaleClient AS ( SELECT T1.account_id FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T2.gender = 'F' AND T4.A11 = (SELECT lowest_avg_salary FROM SalaryInfo) ORDER BY T2.birth_date ASC LIMIT 1 ) SELECT (SELECT account_id FROM OldestFemaleClient) AS account_number, (SELECT highest_avg_salary FROM SalaryInfo) - (SELECT lowest_avg_salary FROM SalaryInfo) AS salary_gap;
SELECT DISTINCT d.account_id FROM disp AS d INNER JOIN client AS c ON d.client_id = c.client_id WHERE c.district_id = (SELECT district_id FROM district WHERE A11 = (SELECT MAX(A11) FROM district)) AND c.birth_date = (SELECT MIN(birth_date) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A11 = (SELECT MAX(A11) FROM district)))
SELECT COUNT(DISTINCT T1.client_id) AS owner_count FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER'
SELECT DISTINCT T1.client_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK PO OBRATU' AND T1.type = 'DISPONENT'
SELECT DISTINCT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = ( SELECT MIN(amount) FROM loan WHERE date BETWEEN '1997-01-01' AND '1997-12-31' ) AND T2.frequency = 'POPLATEK TYDNE' AND T1.date BETWEEN '1997-01-01' AND '1997-12-31'
SELECT T1.`account_id` FROM account AS T1 INNER JOIN loan AS T2 ON T1.`account_id` = T2.`account_id` WHERE T2.`duration` > 12 AND strftime('%Y', T1.`date`) = '1993' AND T2.`amount` = ( SELECT MAX(T2_inner.`amount`) FROM account AS T1_inner INNER JOIN loan AS T2_inner ON T1_inner.`account_id` = T2_inner.`account_id` WHERE T2_inner.`duration` > 12 AND strftime('%Y', T1_inner.`date`) = '1993' )
SELECT COUNT(*) FROM client AS T1 INNER JOIN account AS T2 ON T1.`district_id` = T2.`district_id` WHERE T1.`gender` = 'F' AND T1.`birth_date` < '1950-01-01' AND T1.`district_id` = ( SELECT `district_id` FROM district WHERE `A2` = 'Slokolov' )
SELECT DISTINCT `account_id` FROM trans WHERE `date` = ( SELECT MIN(`date`) FROM trans WHERE `date` BETWEEN '1995-01-01' AND '1995-12-31' )
SELECT DISTINCT T1.`account_id` FROM account AS T1 INNER JOIN loan AS T2 ON T1.`account_id` = T2.`account_id` WHERE T1.`date` < '1997-01-01' AND T2.`amount` > 3000
SELECT T1.`client_id` FROM disp AS T1 INNER JOIN card AS T2 ON T1.`disp_id` = T2.`disp_id` WHERE T2.`issued` = '1994-03-03'
SELECT `date` FROM account WHERE `account_id` = ( SELECT `account_id` FROM trans WHERE `amount` = 840 AND `date` = '1998-10-14' )
SELECT T1.`district_id` FROM account AS T1 WHERE T1.`account_id` = ( SELECT `account_id` FROM loan WHERE `date` = '1994-08-25' )
SELECT MAX(T3.amount) FROM trans AS T3 INNER JOIN disp AS T2 ON T3.account_id = T2.account_id INNER JOIN card AS T1 ON T2.disp_id = T1.disp_id WHERE T1.issued = '1996-10-21'
SELECT T1.`gender` FROM client AS T1 INNER JOIN district AS T2 ON T1.`district_id` = T2.`district_id` WHERE T2.`district_id` = ( SELECT `district_id` FROM district ORDER BY `A11` DESC LIMIT 1 ) ORDER BY T1.`birth_date` ASC LIMIT 1
SELECT `amount` FROM trans WHERE `account_id` = ( SELECT `account_id` FROM loan ORDER BY `amount` DESC LIMIT 1 ) ORDER BY `date` ASC LIMIT 1
SELECT COUNT(*) FROM client AS T1 WHERE T1.`district_id` = ( SELECT `district_id` FROM district WHERE `A2` = 'Jesenik' ) AND T1.`gender` = 'F'
SELECT `disp_id` FROM disp WHERE `account_id` = ( SELECT `account_id` FROM trans WHERE `amount` = 5100 AND `date` = '1998-09-02' )
SELECT COUNT(*) FROM account WHERE `district_id` = ( SELECT `district_id` FROM district WHERE `A2` = 'Litomerice' ) AND strftime('%Y', `date`) = '1996'
SELECT T2.`A2` FROM district AS T2 WHERE T2.`district_id` = ( SELECT T1.`district_id` FROM client AS T1 WHERE T1.`client_id` = ( SELECT `client_id` FROM client WHERE `gender` = 'F' AND `birth_date` = '1976-01-29' ) )
SELECT `birth_date` FROM client WHERE `client_id` = ( SELECT `client_id` FROM disp WHERE `account_id` = ( SELECT `account_id` FROM loan WHERE `amount` = 98832 AND `date` = '1996-01-03' ) )
SELECT T2.`account_id` FROM client AS T1 INNER JOIN disp AS T3 ON T1.`client_id` = T3.`client_id` INNER JOIN account AS T2 ON T3.`account_id` = T2.`account_id` WHERE T1.`district_id` = (SELECT `district_id` FROM district WHERE `A3` = 'Prague') ORDER BY T2.`date` ASC LIMIT 1
SELECT (CAST(male_count AS REAL) / total_clients) * 100 AS male_percentage FROM ( SELECT COUNT(*) AS male_count FROM client WHERE `district_id` = ( SELECT `district_id` FROM district WHERE `A3` = 'south Bohemia' ORDER BY CAST(`A4` AS INTEGER) DESC LIMIT 1 ) AND `gender` = 'M' ) AS male_count_table, ( SELECT COUNT(*) AS total_clients FROM client WHERE `district_id` = ( SELECT `district_id` FROM district WHERE `A3` = 'south Bohemia' ORDER BY CAST(`A4` AS INTEGER) DESC LIMIT 1 ) ) AS total_clients_table
SELECT ((balance_1998_12_27 - balance_1993_03_22) / balance_1993_03_22) * 100 AS increase_rate FROM ( SELECT (SELECT SUM(T3.amount) FROM trans AS T3 INNER JOIN disp AS D ON T3.account_id = D.account_id WHERE D.client_id = ( SELECT D2.client_id FROM loan AS L INNER JOIN disp AS D2 ON L.account_id = D2.account_id WHERE L.date = '1993-07-05' LIMIT 1 ) AND T3.date <= '1993-03-22') AS balance_1993_03_22, (SELECT SUM(T3.amount) FROM trans AS T3 INNER JOIN disp AS D ON T3.account_id = D.account_id WHERE D.client_id = ( SELECT D2.client_id FROM loan AS L INNER JOIN disp AS D2 ON L.account_id = D2.account_id WHERE L.date = '1993-07-05' LIMIT 1 ) AND T3.date <= '1998-12-27') AS balance_1998_12_27 ) AS balances
SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) / SUM(amount)) * 100 AS percentage_paid FROM loan
SELECT (SUM(CASE WHEN `status` = 'C' THEN `amount` ELSE 0 END) * 100.0 / NULLIF(SUM(`amount`), 0)) AS percentage_running FROM loan WHERE `amount` < 100000
SELECT T1.`account_id`, T2.`A2` AS district_name, T2.`A3` AS district_region FROM account AS T1 INNER JOIN district AS T2 ON T1.`district_id` = T2.`district_id` WHERE T1.`date` LIKE '1993%' AND T1.`frequency` = 'POPLATEK PO OBRATU'
SELECT T1.`account_id`, T1.`frequency` FROM account AS T1 INNER JOIN disp AS T2 ON T1.`account_id` = T2.`account_id` WHERE T1.`district_id` = ( SELECT `district_id` FROM district WHERE `A3` = 'east Bohemia' ) AND T1.`date` BETWEEN '1995-01-01' AND '2000-12-31'
SELECT `account_id`, `date` FROM account WHERE `district_id` = ( SELECT `district_id` FROM district WHERE `A2` = 'Prachatice' )
SELECT `A2`, `A3` FROM district WHERE `district_id` = ( SELECT `district_id` FROM account WHERE `account_id` = ( SELECT `account_id` FROM loan WHERE `loan_id` = '4990' ) )
SELECT T1.account_id, T3.A2 AS district, T3.A3 AS region FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.amount > 300000
SELECT T1.`loan_id`, T2.`district_id`, T3.`A11` AS `average_salary` FROM loan AS T1 INNER JOIN account AS T2 ON T1.`account_id` = T2.`account_id` INNER JOIN district AS T3 ON T2.`district_id` = T3.`district_id` WHERE T1.`duration` = 60
SELECT D.district_id, ((D.A13 - D.A12) / D.A12) * 100 AS unemployment_increment FROM district AS D WHERE D.district_id IN ( SELECT DISTINCT A.district_id FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id INNER JOIN disp AS D2 ON A.account_id = D2.account_id INNER JOIN client AS C ON D2.client_id = C.client_id WHERE L.status = 'D' )
SELECT (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM account WHERE date LIKE '1993%')) * 100 AS percentage_decin_accounts FROM account AS A INNER JOIN district AS D ON A.district_id = D.district_id WHERE D.A2 = 'Decin' AND A.date LIKE '1993%'
SELECT `account_id` FROM account WHERE `frequency` = 'POPLATEK MESICNE'
SELECT T2.`district_id`, COUNT(T1.`client_id`) AS female_count FROM client AS T1 INNER JOIN district AS T2 ON T1.`district_id` = T2.`district_id` WHERE T1.`gender` = 'F' GROUP BY T2.`district_id` ORDER BY female_count DESC LIMIT 10
SELECT T3.`A2` AS district_name, SUM(T4.`amount`) AS total_withdrawals FROM trans AS T4 INNER JOIN account AS T1 ON T4.`account_id` = T1.`account_id` INNER JOIN district AS T3 ON T1.`district_id` = T3.`district_id` WHERE T4.`type` = 'VYDAJ' AND T4.`date` LIKE '1996-01%' GROUP BY T3.`district_id` ORDER BY total_withdrawals DESC LIMIT 10
SELECT COUNT(DISTINCT T1.`account_id`) FROM account AS T1 LEFT JOIN disp AS T2 ON T1.`account_id` = T2.`account_id` INNER JOIN district AS T3 ON T1.`district_id` = T3.`district_id` WHERE T3.`A3` = 'south Bohemia' AND T2.`disp_id` IS NULL
SELECT T4.`A3` AS district_name FROM ( SELECT T3.`district_id`, COUNT(T1.`loan_id`) AS active_loans FROM loan AS T1 INNER JOIN account AS T2 ON T1.`account_id` = T2.`account_id` INNER JOIN district AS T3 ON T2.`district_id` = T3.`district_id` WHERE T1.`status` IN ('C', 'D') GROUP BY T3.`district_id` ) AS subquery INNER JOIN district AS T4 ON subquery.`district_id` = T4.`district_id` ORDER BY subquery.active_loans DESC LIMIT 1
SELECT AVG(loan.amount) AS average_loan_amount FROM loan INNER JOIN disp ON loan.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE client.gender = 'M'
SELECT district_id, A2 FROM district WHERE A13 = ( SELECT MAX(A13) FROM district )
SELECT COUNT(*) AS account_count FROM account WHERE `district_id` = ( SELECT `district_id` FROM district ORDER BY `A16` DESC LIMIT 1 )
SELECT COUNT(DISTINCT T1.`account_id`) FROM account AS T1 WHERE T1.`frequency` = 'POPLATEK MESICNE' AND T1.`account_id` IN ( SELECT DISTINCT T2.`account_id` FROM trans AS T2 WHERE T2.`operation` = 'VYBER KARTOU' AND T2.`balance` < 0 )
SELECT COUNT(*) FROM loan AS T1 INNER JOIN account AS T2 ON T1.`account_id` = T2.`account_id` WHERE T2.`frequency` = 'POPLATEK MESICNE' AND T1.`amount` >= 250000 AND T1.`date` BETWEEN '1995-01-01' AND '1997-12-31'
SELECT COUNT(*) FROM account AS A WHERE A.`district_id` = 1 AND A.`account_id` IN ( SELECT D.`account_id` FROM disp AS D WHERE D.`type` IN ('OWNER', 'DISPONENT') AND D.`client_id` IN ( SELECT C.`client_id` FROM client AS C WHERE C.`district_id` = A.`district_id` ) AND D.`account_id` IN ( SELECT L.`account_id` FROM loan AS L WHERE L.`status` IN ('C', 'D') ) )
SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.`district_id` = T2.`district_id` WHERE T2.`district_id` = ( SELECT `district_id` FROM district ORDER BY `A15` DESC LIMIT 1 OFFSET 1 ) AND T1.`gender` = 'M'
SELECT COUNT(DISTINCT T1.`card_id`) FROM card AS T1 INNER JOIN disp AS T2 ON T1.`disp_id` = T2.`disp_id` WHERE T1.`type` = 'gold' AND T2.`type` = 'DISPONENT'
SELECT COUNT(*) FROM account WHERE `district_id` = ( SELECT `district_id` FROM district WHERE `A2` = 'Pisek' )
SELECT DISTINCT T2.`district_id` FROM trans AS T1 INNER JOIN account AS T2 ON T1.`account_id` = T2.`account_id` WHERE T1.`amount` > 10000 AND strftime('%Y', T1.`date`) = '1997'
SELECT DISTINCT T1.`account_id` FROM account AS T1 INNER JOIN `order` AS T2 ON T1.`account_id` = T2.`account_id` WHERE T2.`k_symbol` = 'SIPO' AND T1.`district_id` = ( SELECT `district_id` FROM district WHERE `A2` = 'Pisek' )
SELECT DISTINCT type FROM card;
SELECT AVG(monthly_avg) AS overall_average FROM ( SELECT AVG(amount) AS monthly_avg FROM trans WHERE operation = 'VYBER KARTOU' AND date BETWEEN '2021-01-01' AND '2021-12-31' AND amount IS NOT NULL GROUP BY strftime('%Y-%m', date) ) AS monthly_data
SELECT DISTINCT T2.client_id FROM disp AS T2 INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T1 ON T3.account_id = T1.account_id WHERE T1.type = 'VYBER' AND T1.date BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY T2.client_id HAVING SUM(T1.amount) / COUNT(DISTINCT strftime('%m', T1.date)) < ( SELECT AVG(monthly_spending) FROM ( SELECT SUM(T1.amount) / COUNT(DISTINCT strftime('%m', T1.date)) AS monthly_spending FROM trans AS T1 WHERE T1.type = 'VYBER' AND T1.date BETWEEN '1998-01-01' AND '1998-12-31' GROUP BY strftime('%m', T1.date) ) AS monthly_totals )
SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'F'
SELECT COUNT(T1.`client_id`) FROM client AS T1 WHERE T1.`gender` = 'F' AND T1.`district_id` IN ( SELECT `district_id` FROM district WHERE `A3` = 'south Bohemia' )
SELECT T1.`account_id` FROM account AS T1 INNER JOIN disp AS T2 ON T1.`account_id` = T2.`account_id` WHERE T2.`type` = 'OWNER' AND T1.`district_id` = ( SELECT `district_id` FROM district WHERE `A2` = 'Tabor' )
SELECT DISTINCT T1.`type` FROM disp AS T1 INNER JOIN account AS T2 ON T1.`account_id` = T2.`account_id` WHERE T1.`type` <> 'OWNER' AND T2.`district_id` IN ( SELECT T3.`district_id` FROM district AS T3 WHERE T3.`A11` > 8000 AND T3.`A11` <= 9000 )
SELECT COUNT(DISTINCT T1.account_id) AS account_count FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN "order" AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'north Bohemia' AND T3.bank_to = 'AB'
SELECT DISTINCT T2.`A2` FROM district AS T2 WHERE T2.`district_id` IN ( SELECT DISTINCT T1.`district_id` FROM account AS T1 WHERE T1.`account_id` IN ( SELECT DISTINCT `account_id` FROM trans WHERE `type` = 'VYDAJ' ) )
SELECT AVG(T1.`A15`) FROM district AS T1 WHERE T1.`district_id` IN ( SELECT DISTINCT T2.`district_id` FROM district AS T2 INNER JOIN account AS T3 ON T2.`district_id` = T3.`district_id` WHERE T2.`A15` > 4000 AND T3.`date` >= '1997-01-01' )
SELECT COUNT(T2.`card_id`) FROM card AS T2 INNER JOIN disp AS T1 ON T2.`disp_id` = T1.`disp_id` WHERE T2.`type` = 'classic' AND T1.`account_id` IN ( SELECT DISTINCT T1.`account_id` FROM disp AS T1 WHERE T1.`type` = 'OWNER' )
SELECT COUNT(*) FROM client WHERE `district_id` = ( SELECT `district_id` FROM district WHERE `A2` = 'Hl.m. Praha' ) AND `gender` = 'M'
SELECT (CAST((SELECT COUNT(*) FROM card WHERE type = 'gold' AND issued < '1998-01-01') AS REAL) / (SELECT COUNT(*) FROM card)) * 100 AS percent_gold_prior_1998
SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id = ( SELECT account_id FROM loan WHERE amount = ( SELECT MAX(amount) FROM loan ) ) AND T1.type = 'OWNER'
SELECT `A15` FROM district WHERE `district_id` = ( SELECT `district_id` FROM account WHERE `account_id` = 532 )
SELECT T1.`district_id` FROM account AS T1 WHERE T1.`account_id` = ( SELECT `account_id` FROM `order` WHERE `order_id` = 33333 )
SELECT T.trans_id, T.date, T.amount FROM trans AS T JOIN disp AS D ON T.account_id = D.account_id WHERE D.client_id = 3356 AND T.operation = 'VYBER' AND T.operation IS NOT NULL;
SELECT COUNT(*) FROM loan AS T1 WHERE T1.`account_id` IN ( SELECT `account_id` FROM account WHERE `frequency` = 'POPLATEK TYDNE' ) AND T1.`amount` < 200000
SELECT T1.`type` FROM card AS T1 INNER JOIN disp AS T2 ON T1.`disp_id` = T2.`disp_id` WHERE T2.`client_id` = 13539
SELECT T2.`A3` FROM district AS T2 INNER JOIN client AS T1 ON T1.`district_id` = T2.`district_id` WHERE T1.`client_id` = 3541
SELECT T2.`district_id` FROM ( SELECT T2.`district_id`, COUNT(T1.`account_id`) AS account_count FROM account AS T1 INNER JOIN loan AS T3 ON T1.`account_id` = T3.`account_id` INNER JOIN district AS T2 ON T1.`district_id` = T2.`district_id` WHERE T3.`status` = 'A' GROUP BY T2.`district_id` ) AS T2 ORDER BY T2.`account_count` DESC LIMIT 1
SELECT T1.`gender` FROM `order` AS T2 INNER JOIN `disp` AS T3 ON T2.`account_id` = T3.`account_id` INNER JOIN `client` AS T1 ON T3.`client_id` = T1.`client_id` WHERE T2.`order_id` = 32423
SELECT T.trans_id, T.account_id, T.date, T.type, T.operation, T.amount FROM trans AS T JOIN account AS A ON T.account_id = A.account_id WHERE A.district_id = 5 AND T.operation IS NOT NULL
SELECT COUNT(*) FROM account WHERE `district_id` = ( SELECT `district_id` FROM district WHERE `A2` = 'Jesenik' )
SELECT DISTINCT T1.`client_id` FROM client AS T1 INNER JOIN disp AS T2 ON T1.`client_id` = T2.`client_id` INNER JOIN card AS T3 ON T2.`disp_id` = T3.`disp_id` WHERE T3.`type` = 'junior' AND T3.`issued` >= '1997-01-01'
SELECT (CAST(COUNT(CASE WHEN `gender` = 'F' THEN 1 END) AS REAL) / COUNT(*)) * 100 AS female_percentage FROM client WHERE `district_id` IN ( SELECT `district_id` FROM district WHERE `A11` > 10000 )
WITH amounts AS ( SELECT (SELECT SUM(L.amount) FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id INNER JOIN client AS C ON A.account_id = C.client_id WHERE C.gender = 'M' AND L.date LIKE '1996%') AS total_amount_1996, (SELECT SUM(L.amount) FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id INNER JOIN client AS C ON A.account_id = C.client_id WHERE C.gender = 'M' AND L.date LIKE '1997%') AS total_amount_1997 ) SELECT (total_amount_1997 - total_amount_1996) / total_amount_1996 * 100 AS growth_rate FROM amounts WHERE total_amount_1996 IS NOT NULL;  Ensure we don't divide by zero
SELECT COUNT(*) FROM trans WHERE `type` = 'VYBER' AND `operation` = 'VYBER KARTOU' AND `date` > '1995-12-31'
SELECT (SELECT SUM(CAST(A16 AS INTEGER)) FROM district WHERE A3 = 'north Bohemia') - (SELECT SUM(CAST(A16 AS INTEGER)) FROM district WHERE A3 = 'east Bohemia') AS crime_difference
SELECT (SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type = 'OWNER') + (SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type = 'DISPONENT') AS total_dispositions
SELECT `k_symbol` FROM `order` WHERE `amount` = 3539
SELECT strftime('%Y', `birth_date`) AS birth_year FROM client WHERE `client_id` = ( SELECT `client_id` FROM disp WHERE `account_id` = ( SELECT `account_id` FROM disp WHERE `client_id` = 130 ) )
SELECT COUNT(DISTINCT T1.`account_id`) FROM disp AS T1 INNER JOIN account AS T2 ON T1.`account_id` = T2.`account_id` WHERE T1.`type` = 'OWNER' AND T2.`frequency` = 'POPLATEK PO OBRATU'
SELECT T1.`loan_id`, T1.`amount`, T1.`duration`, T1.`payments` FROM loan AS T1 INNER JOIN account AS T2 ON T1.`account_id` = T2.`account_id` INNER JOIN disp AS T3 ON T2.`account_id` = T3.`account_id` INNER JOIN client AS T4 ON T3.`client_id` = T4.`client_id` WHERE T4.`client_id` = 992
SELECT T1.`gender` FROM client AS T1 INNER JOIN disp AS T2 ON T1.`client_id` = T2.`client_id` WHERE T2.`account_id` = ( SELECT T3.`account_id` FROM disp AS T3 WHERE T3.`client_id` = 4 )
SELECT T1.`type` FROM card AS T1 INNER JOIN disp AS T2 ON T1.`disp_id` = T2.`disp_id` WHERE T2.`client_id` = 9
SELECT SUM(`amount`) AS total_paid FROM trans WHERE `account_id` IN ( SELECT `account_id` FROM disp WHERE `client_id` = 617 ) AND `date` LIKE '1998%' AND `type` = 'VYDAJ'
SELECT T1.`client_id` FROM client AS T1 INNER JOIN account AS T2 ON T1.`district_id` = T2.`district_id` WHERE T1.`birth_date` BETWEEN '1983-01-01' AND '1987-12-31' AND T2.`district_id` IN ( SELECT `district_id` FROM district WHERE `A3` = 'east Bohemia' )
SELECT T1.client_id FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'F' ORDER BY T2.amount DESC LIMIT 3
SELECT COUNT(DISTINCT T1.client_id) AS male_client_count FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN "order" AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M' AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T4.k_symbol = 'SIPO' AND T4.amount > 4000
SELECT COUNT(*) FROM account WHERE `district_id` = ( SELECT `district_id` FROM district WHERE `A2` = 'Beroun' ) AND `date` > '1996-12-31'
SELECT COUNT(DISTINCT T1.client_id) AS female_junior_card_count FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'
SELECT (COUNT(DISTINCT CASE WHEN T1.`gender` = 'F' THEN T1.`client_id` END) * 100.0 / COUNT(DISTINCT T1.`client_id`)) AS female_proportion FROM client AS T1 INNER JOIN disp AS T2 ON T1.`client_id` = T2.`client_id` INNER JOIN account AS T3 ON T2.`account_id` = T3.`account_id` WHERE T1.`district_id` = ( SELECT `district_id` FROM district WHERE `A3` = 'Prague' )
SELECT (SELECT COUNT(DISTINCT T1.client_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T3.gender = 'M') * 100.0 / (SELECT COUNT(DISTINCT T1.client_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE') AS male_percentage
SELECT COUNT(DISTINCT T1.`client_id`) FROM disp AS T1 INNER JOIN account AS T2 ON T1.`account_id` = T2.`account_id` WHERE T2.`frequency` = 'POPLATEK TYDNE' AND T1.`type` = 'OWNER'
SELECT T1.`account_id` FROM account AS T1 INNER JOIN loan AS T2 ON T1.`account_id` = T2.`account_id` WHERE T2.`duration` > 24 AND T1.`date` < '1997-01-01' AND T2.`amount` = ( SELECT MIN(T2.`amount`) FROM account AS T1 INNER JOIN loan AS T2 ON T1.`account_id` = T2.`account_id` WHERE T2.`duration` > 24 AND T1.`date` < '1997-01-01' )
SELECT T2.`account_id` FROM client AS T1 INNER JOIN disp AS T3 ON T1.`client_id` = T3.`client_id` INNER JOIN account AS T2 ON T3.`account_id` = T2.`account_id` WHERE T1.`gender` = 'F' AND T1.`district_id` = ( SELECT `district_id` FROM district ORDER BY `A11` ASC LIMIT 1 ) ORDER BY T1.`birth_date` ASC LIMIT 1
SELECT COUNT(*) FROM client WHERE `district_id` IN ( SELECT `district_id` FROM district WHERE `A3` = 'east Bohemia' ) AND strftime('%Y', `birth_date`) = '1920'
SELECT COUNT(DISTINCT L.`account_id`) AS loan_count FROM loan AS L INNER JOIN account AS A ON L.`account_id` = A.`account_id` WHERE L.`duration` = 24 AND A.`frequency` = 'POPLATEK TYDNE'
SELECT AVG(L.amount) AS average_loan_amount FROM loan AS L INNER JOIN account AS A ON L.account_id = A.account_id INNER JOIN trans AS T ON A.account_id = T.account_id WHERE L.status IN ('C', 'D') AND T.type = 'POPLATEK PO OBRATU' AND L.amount IS NOT NULL
SELECT T1.client_id, T1.district_id FROM client AS T1 WHERE T1.client_id NOT IN ( SELECT T2.client_id FROM disp AS T2 WHERE T2.type = 'OWNER' )
SELECT DISTINCT T1.client_id, (strftime('%Y', '2023-10-01') - strftime('%Y', T1.birth_date)) - (strftime('%m', '2023-10-01') < strftime('%m', T1.birth_date) OR (strftime('%m', '2023-10-01') = strftime('%m', T1.birth_date) AND strftime('%d', '2023-10-01') < strftime('%d', T1.birth_date))) AS age FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN account AS T4 ON T2.account_id = T4.account_id INNER JOIN loan AS T5 ON T4.account_id = T5.account_id WHERE T3.type = 'gold';
SELECT bond_type FROM ( SELECT bond_type, COUNT(*) AS bond_count FROM bond GROUP BY bond_type ) AS bond_counts ORDER BY bond_count DESC LIMIT 1
SELECT COUNT(DISTINCT T1.`molecule_id`) FROM atom AS T1 INNER JOIN ( SELECT `molecule_id` FROM molecule WHERE `label` = '-' ) AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`element` = 'cl'
SELECT AVG(oxygen_count) AS average_oxygen_atoms FROM ( SELECT COUNT(T2.`atom_id`) AS oxygen_count FROM atom AS T2 WHERE T2.`element` = 'o' AND T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_type` = '-' ) GROUP BY T2.`molecule_id` )
SELECT (SELECT COUNT(*) FROM bond AS T1 WHERE T1.`molecule_id` IN ( SELECT `molecule_id` FROM molecule WHERE `label` = '+' ) AND T1.`bond_type` = '-') * 1.0 / (SELECT COUNT(*) FROM molecule WHERE `label` = '+') AS average_single_bond
SELECT COUNT(T1.`atom_id`) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`label` = '-' AND T1.`molecule_id` IN ( SELECT DISTINCT T3.`molecule_id` FROM atom AS T3 WHERE T3.`element` = 'na' )
SELECT T1.`molecule_id` FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`bond_type` = '#' AND T2.`label` = '+'
SELECT (CAST(COUNT(T2.atom_id) AS REAL) / NULLIF(COUNT(T3.atom_id), 0)) * 100 AS carbon_percentage FROM atom AS T2 JOIN bond AS T1 ON T2.molecule_id = T1.molecule_id JOIN atom AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.element = 'c' AND T1.bond_type = '=' GROUP BY T2.molecule_id
SELECT COUNT(*) FROM bond WHERE bond_type = '#'
SELECT COUNT(*) FROM atom WHERE element != 'br'
SELECT COUNT(*) FROM molecule WHERE `molecule_id` BETWEEN 'TR000' AND 'TR099' AND `label` = '+'
SELECT DISTINCT `molecule_id` FROM atom WHERE `atom_id` IN ( SELECT `atom_id` FROM atom WHERE `element` = 'si' )
SELECT DISTINCT T3.element FROM bond AS T1 JOIN connected AS T2 ON T1.bond_id = T2.bond_id JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T1.bond_id = 'TR004_8_9';
SELECT DISTINCT `element` FROM atom WHERE `atom_id` IN ( SELECT `atom_id` FROM connected WHERE `bond_id` IN ( SELECT `bond_id` FROM bond WHERE `bond_type` = '=' ) ) UNION SELECT DISTINCT `element` FROM atom WHERE `atom_id` IN ( SELECT `atom_id2` FROM connected WHERE `bond_id` IN ( SELECT `bond_id` FROM bond WHERE `bond_type` = '=' ) )
SELECT T2.`label` FROM molecule AS T2 WHERE T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM atom AS T1 WHERE T1.`element` = 'h' ) GROUP BY T2.`label` ORDER BY COUNT(*) DESC LIMIT 1
SELECT T3.`bond_type` FROM bond AS T3 WHERE T3.`molecule_id` IN ( SELECT T1.`molecule_id` FROM atom AS T1 WHERE T1.`element` = 'te' )
SELECT DISTINCT T1.`atom_id`, T1.`atom_id2` FROM connected AS T1 INNER JOIN bond AS T2 ON T1.`bond_id` = T2.`bond_id` WHERE T2.`bond_type` = '-'
SELECT T1.`atom_id`, T1.`atom_id2` FROM connected AS T1 INNER JOIN bond AS T2 ON T1.`bond_id` = T2.`bond_id` INNER JOIN molecule AS T3 ON T2.`molecule_id` = T3.`molecule_id` WHERE T3.`label` = '-'
SELECT `element` FROM ( SELECT T1.`element`, COUNT(*) AS `element_count` FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`label` = '-' GROUP BY T1.`element` ) AS subquery ORDER BY `element_count` ASC LIMIT 1
SELECT T2.`bond_type` FROM bond AS T2 WHERE T2.`bond_id` = ( SELECT T3.`bond_id` FROM connected AS T3 WHERE T3.`atom_id` = 'TR004_8' AND T3.`atom_id2` = 'TR004_20' )
SELECT DISTINCT T2.`label` FROM molecule AS T2 WHERE T2.`label` NOT IN ( SELECT DISTINCT T3.`label` FROM molecule AS T3 WHERE T3.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM atom AS T1 WHERE T1.`element` = 'sn' ) )
SELECT COUNT(T2.`atom_id`) FROM atom AS T2 WHERE T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_type` = '-' ) AND T2.`element` IN ('i', 's')
SELECT T1.`atom_id`, T1.`atom_id2` FROM connected AS T1 INNER JOIN bond AS T2 ON T1.`bond_id` = T2.`bond_id` WHERE T2.`bond_type` = '#'
SELECT DISTINCT T2.`atom_id` FROM connected AS T1 INNER JOIN atom AS T2 ON T1.`atom_id2` = T2.`atom_id` WHERE T1.`atom_id` IN ( SELECT T1.`atom_id` FROM atom AS T1 WHERE T1.`molecule_id` = 'TR181' )
SELECT (COUNT(DISTINCT T1.`molecule_id`) - COUNT(DISTINCT T2.`molecule_id`)) * 100.0 / COUNT(DISTINCT T1.`molecule_id`) AS percentage FROM molecule AS T1 LEFT JOIN atom AS T2 ON T1.`molecule_id` = T2.`molecule_id` AND T2.`element` = 'f' WHERE T1.`label` = '+'
SELECT (CAST(SUM(CASE WHEN T2.`label` = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.`bond_id`)) * 100 AS percent FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`bond_type` = '#'
SELECT T1.`element` FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`molecule_id` = 'TR000' ORDER BY T1.`element` ASC LIMIT 3
SELECT T3.`element` FROM connected AS T1 INNER JOIN bond AS T2 ON T1.`bond_id` = T2.`bond_id` INNER JOIN atom AS T3 ON T1.`atom_id` = T3.`atom_id` WHERE T2.`molecule_id` = 'TR001' AND T2.`bond_id` = 'TR001_2_6'
SELECT (SELECT COUNT(*) FROM molecule WHERE label = '+') - (SELECT COUNT(*) FROM molecule WHERE label = '-') AS difference
SELECT DISTINCT T1.atom_id FROM connected AS T1 JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR_000_2_5';
SELECT `bond_id` FROM connected WHERE `atom_id2` = 'TR000_2'
SELECT DISTINCT T2.label FROM molecule AS T2 JOIN bond AS T1 ON T2.molecule_id = T1.molecule_id WHERE T1.bond_type = ' = ' ORDER BY T2.label ASC LIMIT 5;
SELECT (SELECT COUNT(bond_id) FROM bond WHERE molecule_id = 'TR008' AND bond_type = '=') * 100.0 / (SELECT COUNT(bond_id) FROM bond WHERE molecule_id = 'TR008') AS percentage_double_bonds
SELECT (COUNT(CASE WHEN label = '+' THEN 1 END) * 100.0) / COUNT(molecule_id) AS carcinogenic_percentage FROM molecule
SELECT (CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(atom_id)) * 100 AS hydrogen_percentage FROM atom WHERE molecule_id = 'TR206'
SELECT DISTINCT T2.`bond_type` FROM bond AS T2 INNER JOIN molecule AS T1 ON T2.`molecule_id` = T1.`molecule_id` WHERE T1.`molecule_id` = 'TR000'
SELECT T1.`element`, T2.`label` FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`molecule_id` = 'TR060'
WITH MajorityBond AS ( SELECT T1.bond_type FROM bond AS T1 WHERE T1.molecule_id = 'TR018' AND T1.bond_type IS NOT NULL GROUP BY T1.bond_type ORDER BY COUNT(*) DESC LIMIT 1 ), CarcinogenicStatus AS ( SELECT T2.label FROM molecule AS T2 WHERE T2.molecule_id = 'TR018' ) SELECT MB.bond_type, CASE WHEN CS.label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM MajorityBond AS MB JOIN CarcinogenicStatus AS CS ON 1=1
SELECT T1.`molecule_id` FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`bond_type` = '-' AND T1.`label` = '-' ORDER BY T1.`molecule_id` ASC LIMIT 3
SELECT T2.`bond_type` FROM bond AS T2 INNER JOIN molecule AS T1 ON T2.`molecule_id` = T1.`molecule_id` WHERE T1.`molecule_id` = 'TR006' ORDER BY T2.`bond_type` ASC LIMIT 2
SELECT COUNT(*) FROM connected WHERE bond_id IN ( SELECT bond_id FROM bond WHERE molecule_id = 'TR009' ) AND (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12')
SELECT COUNT(DISTINCT T1.`molecule_id`) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '+' AND T2.`element` = 'br'
SELECT B.`bond_type`, C.`atom_id`, C.`atom_id2` FROM bond AS B INNER JOIN connected AS C ON B.`bond_id` = C.`bond_id` WHERE B.`bond_id` = 'TR001_6_9'
SELECT T1.`molecule_id`, CASE WHEN T2.`label` = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`atom_id` = 'TR001_10'
SELECT COUNT(DISTINCT `molecule_id`) FROM bond WHERE `bond_type` = '#'
SELECT COUNT(*) FROM connected WHERE `atom_id` = 19 OR `atom_id2` = 19
SELECT DISTINCT element FROM atom WHERE molecule_id = 'TR004';
SELECT COUNT(*) FROM molecule WHERE label = '-'
SELECT DISTINCT m.molecule_id FROM molecule AS m JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE m.label = '+' AND SUBSTR(a.atom_id, 7, 2) BETWEEN '21' AND '25';
SELECT T2.`bond_id` FROM bond AS T2 WHERE T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM atom AS T1 WHERE T1.`element` IN ('p', 'n') GROUP BY T1.`molecule_id` HAVING COUNT(DISTINCT T1.`element`) = 2 )
SELECT CASE WHEN T2.`label` = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule AS T2 WHERE T2.`molecule_id` = ( SELECT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_type` = '=' GROUP BY T1.`molecule_id` ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT AVG(bond_count) AS average_bonds FROM ( SELECT COUNT(T3.`bond_id`) AS bond_count FROM atom AS T1 LEFT JOIN connected AS T2 ON T1.`atom_id` = T2.`atom_id` LEFT JOIN bond AS T3 ON T2.`bond_id` = T3.`bond_id` WHERE T1.`element` = 'i' GROUP BY T1.`atom_id` ) AS bond_counts
SELECT T2.bond_type, T2.bond_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = (SELECT atom_id FROM atom WHERE SUBSTR(atom_id, 7, 2) + 0 = 45)
SELECT T1.`element` FROM atom AS T1 WHERE T1.`atom_id` NOT IN ( SELECT DISTINCT `atom_id` FROM connected )
SELECT DISTINCT A.`atom_id` FROM molecule AS M INNER JOIN bond AS B ON M.`molecule_id` = B.`molecule_id` INNER JOIN connected AS C ON B.`bond_id` = C.`bond_id` INNER JOIN atom AS A ON C.`atom_id2` = A.`atom_id` WHERE B.`bond_type` = '#' AND M.`label` = 'TR447'
SELECT T3.`element` FROM atom AS T3 WHERE T3.`atom_id` IN ( SELECT T2.`atom_id` FROM atom AS T2 WHERE T2.`molecule_id` = ( SELECT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_id` = 'TR144_8_19' ) )
SELECT T1.molecule_id FROM ( SELECT T2.molecule_id, COUNT(T3.bond_id) AS double_bond_count FROM molecule AS T2 LEFT JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.label = '+' AND T3.bond_type = '=' GROUP BY T2.molecule_id ) AS T1 ORDER BY T1.double_bond_count DESC LIMIT 1;
SELECT T2.`element` FROM ( SELECT T2.`element`, COUNT(*) AS `element_count` FROM atom AS T2 WHERE T2.`molecule_id` IN ( SELECT T1.`molecule_id` FROM molecule AS T1 WHERE T1.`label` = '+' ) GROUP BY T2.`element` ) AS T2 ORDER BY T2.`element_count` ASC LIMIT 1
SELECT T2.`atom_id` FROM connected AS T1 INNER JOIN atom AS T2 ON T1.`atom_id2` = T2.`atom_id` WHERE T1.`atom_id` = ( SELECT `atom_id` FROM atom WHERE `element` = 'pb' )
SELECT DISTINCT T1.`element` FROM atom AS T1 WHERE T1.`atom_id` IN ( SELECT `atom_id` FROM connected WHERE `bond_id` IN ( SELECT `bond_id` FROM bond WHERE `bond_type` = '#' ) )
SELECT (CAST(common_bond_count AS REAL) / total_bonds) * 100 AS percentage FROM ( SELECT COUNT(DISTINCT T3.`bond_id`) AS common_bond_count FROM connected AS T3 INNER JOIN bond AS T2 ON T3.`bond_id` = T2.`bond_id` INNER JOIN atom AS T1 ON T3.`atom_id` = T1.`atom_id` WHERE T1.`element` IN ( SELECT element FROM atom AS T1 GROUP BY T1.`molecule_id` ORDER BY COUNT(*) DESC LIMIT 1 ) ) AS common_bonds, ( SELECT COUNT(*) AS total_bonds FROM bond ) AS total
SELECT CAST(SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.bond_id) AS proportion_carcinogenic FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'
SELECT COUNT(*) AS total_atoms FROM atom WHERE element IN ('c', 'h')
SELECT `atom_id2` FROM connected WHERE `atom_id` IN ( SELECT `atom_id` FROM atom WHERE `element` = 's' )
SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T3.element = 'sn'
SELECT COUNT(DISTINCT T2.`element`) FROM atom AS T2 WHERE T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_type` = '-' )
SELECT COUNT(T4.`atom_id`) FROM atom AS T4 WHERE T4.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM bond AS T1 INNER JOIN connected AS T2 ON T1.`bond_id` = T2.`bond_id` INNER JOIN atom AS T3 ON T2.`atom_id` = T3.`atom_id` WHERE T1.`bond_type` = '#' AND T3.`element` IN ('p', 'br') )
SELECT T2.`bond_id` FROM bond AS T2 INNER JOIN molecule AS T1 ON T2.`molecule_id` = T1.`molecule_id` WHERE T1.`label` = '+'
SELECT T2.`molecule_id` FROM molecule AS T2 WHERE T2.`label` = '-' AND T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_type` = '-' )
SELECT (SELECT COUNT(T2.`atom_id`) FROM atom AS T2 WHERE T2.`element` = 'cl' AND T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_type` = '-' )) * 100.0 / (SELECT COUNT(T2.`atom_id`) FROM atom AS T2 WHERE T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_type` = '-' )) AS percent
SELECT `label` FROM molecule WHERE `molecule_id` IN ('TR000', 'TR001', 'TR002')
SELECT `molecule_id` FROM molecule WHERE `label` = '-'
SELECT COUNT(*) FROM molecule WHERE `molecule_id` BETWEEN 'TR000' AND 'TR030' AND `label` = '+'
SELECT T2.`bond_type` FROM bond AS T2 INNER JOIN molecule AS T1 ON T2.`molecule_id` = T1.`molecule_id` WHERE T1.`molecule_id` BETWEEN 'TR000' AND 'TR050'
SELECT T3.`element` FROM atom AS T3 WHERE T3.`atom_id` IN ( SELECT T1.`atom_id` FROM connected AS T1 INNER JOIN bond AS T2 ON T1.`bond_id` = T2.`bond_id` WHERE T2.`bond_id` = 'TR001_10_11' ) UNION SELECT T4.`element` FROM atom AS T4 WHERE T4.`atom_id` IN ( SELECT T1.`atom_id2` FROM connected AS T1 INNER JOIN bond AS T2 ON T1.`bond_id` = T2.`bond_id` WHERE T2.`bond_id` = 'TR001_10_11' )
SELECT COUNT(DISTINCT C.`bond_id`) AS `bond_count` FROM connected AS C INNER JOIN atom AS A1 ON C.`atom_id` = A1.`atom_id` INNER JOIN atom AS A2 ON C.`atom_id2` = A2.`atom_id` WHERE A1.`element` = 'i' OR A2.`element` = 'i'
SELECT T2.`label` FROM molecule AS T2 WHERE T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM atom AS T1 WHERE T1.`element` = 'ca' ) GROUP BY T2.`label` ORDER BY COUNT(*) DESC LIMIT 1
SELECT CASE WHEN COUNT(DISTINCT T2.`element`) = 2 THEN 'Yes' ELSE 'No' END AS has_both_elements FROM atom AS T2 WHERE T2.`molecule_id` = ( SELECT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_id` = 'TR001_1_8' ) AND T2.`element` IN ('cl', 'c')
SELECT DISTINCT T3.`molecule_id` FROM atom AS T3 INNER JOIN ( SELECT DISTINCT T1.`molecule_id` FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`bond_type` = '#' AND T2.`label` = '-' ) AS T4 ON T3.`molecule_id` = T4.`molecule_id` WHERE T3.`element` = 'c' LIMIT 2
SELECT (CAST(SUM(CASE WHEN T1.`element` = 'cl' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.`atom_id`)) * 100 AS percentage FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`label` = '+'
SELECT DISTINCT T1.`element` FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`molecule_id` = 'TR001'
SELECT DISTINCT `molecule_id` FROM bond WHERE `bond_type` = '='
SELECT `atom_id`, `atom_id2` FROM connected WHERE `bond_id` IN ( SELECT `bond_id` FROM bond WHERE `bond_type` = '#' )
SELECT `element` FROM atom WHERE `atom_id` IN ( SELECT `atom_id` FROM atom WHERE `molecule_id` = ( SELECT `molecule_id` FROM bond WHERE `bond_id` = 'TR005_16_26' ) )
SELECT COUNT(DISTINCT T2.`molecule_id`) FROM molecule AS T2 WHERE T2.`label` = '-' AND T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_type` = '-' )
SELECT T2.`label` FROM molecule AS T2 WHERE T2.`molecule_id` = ( SELECT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_id` = 'TR001_10_11' )
SELECT T1.`bond_id`, CASE WHEN T2.`label` = '+' THEN 'Carcinogenic' ELSE 'Non-Carcinogenic' END AS `Carcinogenic Status` FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`bond_type` = '#'
SELECT T2.`element`, COUNT(*) AS `tally` FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '+' AND SUBSTR(T2.`atom_id`, 7, 1) = '4' GROUP BY T2.`element`
SELECT CAST(SUM(CASE WHEN T1.`element` = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) AS hydrogen_ratio, T2.`label` FROM atom AS T1 JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`molecule_id` = 'TR006' GROUP BY T2.`label`
SELECT CASE WHEN T2.`label` = '+' THEN 'Carcinogenic' WHEN T2.`label` = '-' THEN 'Non-carcinogenic' ELSE 'Unknown' END AS carcinogenic_status FROM molecule AS T2 WHERE T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM atom AS T1 WHERE T1.`element` = 'ca' )
SELECT DISTINCT T2.`bond_type` FROM bond AS T2 WHERE T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM atom AS T1 WHERE T1.`element` = 'te' )
SELECT DISTINCT T1.`element` FROM atom AS T1 WHERE T1.`atom_id` IN ( SELECT T2.`atom_id` FROM bond AS T3 INNER JOIN connected AS T2 ON T3.`bond_id` = T2.`bond_id` WHERE T3.`bond_id` = 'TR001_10_11' UNION SELECT T2.`atom_id2` FROM bond AS T3 INNER JOIN connected AS T2 ON T3.`bond_id` = T2.`bond_id` WHERE T3.`bond_id` = 'TR001_10_11' )
SELECT (CAST(triple_bond_count AS REAL) / NULLIF(total_count, 0)) * 100 AS percentage_triple_bond FROM ( SELECT COUNT(DISTINCT T1.`molecule_id`) AS triple_bond_count, (SELECT COUNT(DISTINCT `molecule_id`) FROM molecule) AS total_count FROM bond AS T1 INNER JOIN connected AS T2 ON T1.`bond_id` = T2.`bond_id` WHERE T1.`bond_type` = '#' ) AS counts
SELECT (SELECT COUNT(*) FROM bond WHERE molecule_id = 'TR047' AND bond_type = '=') * 100.0 / (SELECT COUNT(*) FROM bond WHERE molecule_id = 'TR047') AS percent_double_bond
SELECT CASE WHEN M.`label` = '+' THEN 'Carcinogenic' ELSE 'Not Carcinogenic' END AS `Carcinogenic_Status` FROM molecule AS M WHERE M.`molecule_id` = ( SELECT A.`molecule_id` FROM atom AS A WHERE A.`atom_id` = 'TR001_1' )
SELECT CASE WHEN T1.`label` = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule AS T1 WHERE T1.`molecule_id` = 'TR151'
SELECT DISTINCT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = 'TR151') AND element IN ('cl', 's', 'n', 'p', 'br', 'f', 'i', 'sn', 'pb', 'te');
SELECT COUNT(*) FROM molecule WHERE label = '+'
SELECT T1.`atom_id` FROM atom AS T1 INNER JOIN ( SELECT `molecule_id` FROM molecule WHERE CAST(SUBSTR(`molecule_id`, 3, 3) AS INTEGER) > 10 AND CAST(SUBSTR(`molecule_id`, 3, 3) AS INTEGER) < 50 ) AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`element` = 'c'
SELECT COUNT(*) FROM atom WHERE `molecule_id` IN ( SELECT `molecule_id` FROM molecule WHERE `label` = '+' )
SELECT T2.`bond_id` FROM bond AS T2 WHERE T2.`bond_type` = '=' AND T2.`molecule_id` IN ( SELECT T1.`molecule_id` FROM molecule AS T1 WHERE T1.`label` = '+' )
SELECT COUNT(*) FROM atom WHERE `molecule_id` IN ( SELECT T1.`molecule_id` FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`element` = 'h' AND T2.`label` = '+' )
SELECT DISTINCT b.molecule_id FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id2 = a.atom_id WHERE b.bond_type = 'TR00_1_2' AND a.atom_id = 'TR00_1';
SELECT `atom_id` FROM atom WHERE `element` = 'c' AND `molecule_id` IN ( SELECT `molecule_id` FROM molecule WHERE `label` = '-' ) AND `atom_id` NOT IN ( SELECT DISTINCT `connected`.`atom_id` FROM connected JOIN bond ON connected.bond_id = bond.bond_id JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE molecule.label != '-' )
SELECT (SELECT COUNT(DISTINCT T1.`molecule_id`) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`element` = 'h' AND T2.`label` = '+') * 100.0 / (SELECT COUNT(DISTINCT T1.`molecule_id`) FROM atom AS T1 WHERE T1.`element` = 'h') AS percentage
SELECT CASE WHEN T1.`label` = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule AS T1 WHERE T1.`molecule_id` = 'TR124'
SELECT DISTINCT T1.`element` FROM atom AS T1 JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`molecule_id` = 'TR186'
SELECT * FROM molecule WHERE label = 'TR007_4_19';
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.bond_type IS NOT NULL;
SELECT COUNT(T1.bond_id) AS double_bond_count, T2.label AS carcinogenic_status FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006' AND T1.bond_type = '=' GROUP BY T2.label;
SELECT T2.`molecule_id`, T1.`element` FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`label` = '+'
SELECT T1.bond_id, T1.molecule_id, T2.atom_id, T3.atom_id AS atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id2 = T3.atom_id WHERE T1.bond_type = '-'
SELECT T3.`molecule_id`, GROUP_CONCAT(T2.`element`) AS elements FROM atom AS T2 INNER JOIN molecule AS T3 ON T2.`molecule_id` = T3.`molecule_id` WHERE T3.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_type` = '#' ) GROUP BY T3.`molecule_id`
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id JOIN molecule m ON b.molecule_id = m.molecule_id WHERE m.molecule_id = 'TR000_2_3';
SELECT COUNT(DISTINCT T1.`bond_id`) AS bond_count FROM connected AS T1 INNER JOIN atom AS T2 ON T1.`atom_id` = T2.`atom_id` WHERE T2.`element` = 'cl'
SELECT COUNT(DISTINCT T1.`bond_type`) AS bond_type_count FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T2.`label` = 'TR346'
SELECT COUNT(DISTINCT T1.`molecule_id`) AS carcinogenic_count FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`bond_type` = '=' AND T2.`label` = '+'
SELECT COUNT(DISTINCT MoleculesWithoutSulphur.molecule_id) AS molecule_count FROM ( SELECT DISTINCT a.molecule_id FROM atom AS a WHERE a.element != 's' ) AS MoleculesWithoutSulphur INNER JOIN ( SELECT DISTINCT b.molecule_id FROM bond AS b WHERE b.bond_type != '=' ) AS MoleculesWithoutDoubleBond ON MoleculesWithoutSulphur.molecule_id = MoleculesWithoutDoubleBond.molecule_id;
SELECT T2.`label` FROM molecule AS T2 WHERE T2.`molecule_id` = ( SELECT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_id` = 'TR001_2_4' )
SELECT COUNT(*) FROM atom WHERE `molecule_id` = 'TR005'
SELECT COUNT(*) FROM bond WHERE bond_type = '-'
SELECT T2.`molecule_id` FROM molecule AS T2 WHERE T2.`label` = '+' AND T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM atom AS T1 WHERE T1.`element` = 'cl' )
SELECT T2.`molecule_id` FROM molecule AS T2 WHERE T2.`label` = '-' AND T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM atom AS T1 WHERE T1.`element` = 'c' )
SELECT (SELECT COUNT(DISTINCT T1.`molecule_id`) FROM molecule AS T1 WHERE T1.`label` = '+') AS total_carcinogenic, (SELECT COUNT(DISTINCT T1.`molecule_id`) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '+' AND T2.`element` = 'cl') AS carcinogenic_with_cl, (SELECT COUNT(DISTINCT T1.`molecule_id`) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '+' AND T2.`element` = 'cl') * 100.0 / (SELECT COUNT(DISTINCT T1.`molecule_id`) FROM molecule AS T1 WHERE T1.`label` = '+') AS percentage
SELECT `molecule_id` FROM bond WHERE `bond_id` = 'TR001_1_7'
SELECT COUNT(DISTINCT T2.`element`) FROM atom AS T2 WHERE T2.`molecule_id` = ( SELECT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_id` = 'TR001_3_4' )
SELECT B.bond_type FROM connected AS C INNER JOIN atom AS A1 ON C.atom_id = A1.atom_id INNER JOIN atom AS A2 ON C.atom_id2 = A2.atom_id INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE A1.atom_id = 'TR000_1' AND A2.atom_id = 'TR000_2'
SELECT T3.`label` FROM molecule AS T3 WHERE T3.`molecule_id` = ( SELECT T1.`molecule_id` FROM atom AS T1 WHERE T1.`atom_id` = 'TR000_2' INTERSECT SELECT T2.`molecule_id` FROM atom AS T2 WHERE T2.`atom_id` = 'TR000_4' )
SELECT `element` FROM atom WHERE `atom_id` = 'TR000_1'
SELECT CASE WHEN `label` = '+' THEN 'Carcinogenic' WHEN `label` = '-' THEN 'Non-carcinogenic' ELSE 'Unknown' END AS carcinogenic_status FROM molecule WHERE `molecule_id` = 'TR000'
SELECT (SELECT COUNT(bond_id) FROM bond WHERE bond_type = '-') * 100.0 / (SELECT COUNT(bond_id) FROM bond) AS percentage_of_single_bonds
SELECT COUNT(DISTINCT T1.`molecule_id`) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '+' AND T2.`element` = 'n'
SELECT DISTINCT T4.label FROM molecule AS T4 WHERE T4.molecule_id IN ( SELECT DISTINCT T2.molecule_id FROM bond AS T2 INNER JOIN connected AS T1 ON T2.bond_id = T1.bond_id INNER JOIN atom AS T3 ON T1.atom_id2 = T3.atom_id WHERE T3.element = 's' AND T2.bond_type = '=' )
SELECT T1.`molecule_id` FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '-' GROUP BY T1.`molecule_id` HAVING COUNT(T2.`atom_id`) > 5
SELECT DISTINCT a.element FROM atom a JOIN connected c ON a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE b.molecule_id = ( SELECT m.molecule_id FROM molecule m WHERE m.label = 'TR024' ) AND b.bond_type = '=' AND a.molecule_id IS NOT NULL
SELECT T1.`molecule_id` FROM ( SELECT T1.`molecule_id`, COUNT(T2.`atom_id`) AS atom_count FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`label` = '+' GROUP BY T1.`molecule_id` ) AS T1 ORDER BY T1.atom_count DESC LIMIT 1
SELECT (CAST(SUM(CASE WHEN T4.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(DISTINCT T1.molecule_id)) * 100.0 AS percentage FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 'h' AND T3.bond_type = '#' AND T4.label IS NOT NULL
SELECT COUNT(*) FROM molecule WHERE label = '+'
SELECT COUNT(DISTINCT T1.`molecule_id`) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.`molecule_id` = T2.`molecule_id` WHERE T1.`bond_type` = '-' AND T2.`molecule_id` BETWEEN 'TR004' AND 'TR010'
SELECT COUNT(*) FROM atom WHERE `molecule_id` = ( SELECT `molecule_id` FROM molecule WHERE `label` = 'TR008' ) AND `element` = 'c'
SELECT `element` FROM atom WHERE `atom_id` = 'TR004_7' AND `molecule_id` IN ( SELECT `molecule_id` FROM molecule WHERE `label` = '-' )
SELECT COUNT(DISTINCT T1.`molecule_id`) AS total_molecules FROM atom AS T1 INNER JOIN connected AS T2 ON T1.`atom_id` = T2.`atom_id` INNER JOIN bond AS T3 ON T2.`bond_id` = T3.`bond_id` WHERE T1.`element` = 'o' AND T3.`bond_type` = '='
SELECT COUNT(DISTINCT T2.`molecule_id`) FROM molecule AS T2 WHERE T2.`label` = '-' AND T2.`molecule_id` IN ( SELECT DISTINCT T1.`molecule_id` FROM bond AS T1 WHERE T1.`bond_type` = '#' )
SELECT T1.`element` AS value FROM atom AS T1 WHERE T1.`molecule_id` = 'TR016' UNION SELECT T2.`bond_type` AS value FROM bond AS T2 WHERE T2.`molecule_id` = 'TR016'
SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T1.molecule_id = ( SELECT molecule_id FROM molecule WHERE label = 'TR012' ) AND T1.element = 'c' AND T2.bond_type = '='
SELECT T1.`atom_id` FROM atom AS T1 WHERE T1.`molecule_id` IN ( SELECT `molecule_id` FROM molecule WHERE `label` = '+' ) AND T1.`element` = 'o'
SELECT DISTINCT cardKingdomId, cardKingdomFoilId FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL AND cardKingdomFoilId = cardKingdomId;
SELECT T1.`name` FROM cards AS T1 WHERE T1.`borderColor` = 'borderless' AND T1.`availability` IS NOT NULL AND T1.`cardKingdomId` IS NULL
SELECT name FROM cards WHERE faceConvertedManaCost = ( SELECT MAX(faceConvertedManaCost) FROM cards WHERE faceConvertedManaCost IS NOT NULL )
SELECT `name` FROM cards WHERE `frameVersion` = '2015' AND `edhrecRank` < 100
SELECT T1.`name` FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`rarity` = 'mythic' AND T2.`status` = 'Banned' AND T2.`format` = 'gladiator'
SELECT T2.`status` FROM legalities AS T2 WHERE T2.`uuid` IN ( SELECT T1.`uuid` FROM cards AS T1 WHERE T1.`type` = 'Artifact' AND T1.`side` IS NULL ) AND T2.`format` = 'vintage'
SELECT T1.`id`, T1.`artist` FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.`uuid` = T2.`uuid` WHERE (T1.`power` IS NULL OR T1.`power` = '*') AND T2.`format` = 'commander' AND T2.`status` = 'Legal'
SELECT T1.`id`, T2.`text`, CASE WHEN T1.`flavorText` IS NULL OR T1.`text` IS NULL THEN 'Missing properties' ELSE 'No missing properties' END AS `property_status` FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`artist` = 'Stephen Daniele'
SELECT `text` FROM rulings WHERE `uuid` = ( SELECT `uuid` FROM cards WHERE `name` = 'Sublime Epiphany' AND `number` = '74s' )
SELECT T1.`name`, T1.`artist`, T1.`isPromo` FROM cards AS T1 WHERE T1.`uuid` = ( SELECT T1.`uuid` FROM cards AS T1 LEFT JOIN rulings AS T2 ON T1.`uuid` = T2.`uuid` GROUP BY T1.`uuid` ORDER BY COUNT(T2.`uuid`) DESC LIMIT 1 )
SELECT `language` FROM foreign_data WHERE `uuid` = ( SELECT `uuid` FROM cards WHERE `name` = 'Annul' AND `number` = '29' )
SELECT T1.`name` FROM cards AS T1 WHERE T1.`uuid` IN ( SELECT `uuid` FROM foreign_data WHERE `language` = 'Japanese' )
SELECT (CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.id)) * 100 AS percentage_chinese_simplified FROM cards AS T1 LEFT JOIN foreign_data AS T2 ON T1.uuid = T2.uuid
SELECT T1.`name`, T1.`totalSetSize` FROM sets AS T1 WHERE T1.`id` IN ( SELECT DISTINCT `id` FROM set_translations WHERE `language` = 'Italian' )
SELECT COUNT(DISTINCT `type`) AS `number_of_types` FROM cards WHERE `artist` = 'Aaron Boyd'
SELECT `keywords` FROM cards WHERE `name` = 'Angel of Mercy'
SELECT COUNT(*) AS card_count FROM cards WHERE power = '*'
SELECT `promoTypes` FROM cards WHERE `name` = 'Duress' AND `promoTypes` IS NOT NULL
SELECT `borderColor` FROM cards WHERE `name` = "Ancestor's Chosen"
SELECT `originalType` FROM cards WHERE `name` = "Ancestor's Chosen" AND `originalType` IS NOT NULL
SELECT DISTINCT `language` FROM set_translations WHERE `setCode` = ( SELECT `setCode` FROM sets WHERE `id` = ( SELECT `id` FROM cards WHERE `name` = 'Angel of Mercy' ) )
SELECT COUNT(*) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.`id` = T2.`id` WHERE T1.`status` = 'Restricted' AND T2.`text` IS NOT NULL
SELECT `text` FROM rulings WHERE `uuid` = ( SELECT `uuid` FROM cards WHERE `name` = 'Condemn' )
SELECT COUNT(DISTINCT T1.`id`) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`isStarter` = 1 AND T2.`status` = 'Restricted'
SELECT `status` FROM legalities WHERE `uuid` = ( SELECT `uuid` FROM cards WHERE `name` = 'Cloudchaser Eagle' )
SELECT `type` FROM cards WHERE `name` = 'Benalish Knight'
SELECT `format`, `status` FROM legalities WHERE `uuid` = ( SELECT `uuid` FROM cards WHERE `name` = 'Benalish Knight' )
SELECT DISTINCT T1.artist FROM cards AS T1 JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'
SELECT (CAST(COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) AS REAL) / COUNT(id)) * 100 AS percentage_borderless FROM cards
SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.`id` = T2.`id` WHERE T2.`language` = 'German' AND T1.`isReprint` = 1
SELECT COUNT(*) FROM foreign_data WHERE `language` = 'Russian' AND `uuid` IN ( SELECT `uuid` FROM cards WHERE `borderColor` = 'borderless' )
SELECT (CAST( (SELECT COUNT(id) FROM cards WHERE isStorySpotlight = 1 AND id IN ( SELECT id FROM foreign_data WHERE language = 'French' ) ) AS REAL) / (SELECT COUNT(id) FROM cards WHERE isStorySpotlight = 1) ) * 100 AS percentage_french_story_spotlight
SELECT COUNT(*) FROM cards WHERE toughness = '99'
SELECT `name` FROM cards WHERE `artist` = 'Aaron Boyd'
SELECT COUNT(*) FROM cards WHERE `borderColor` = 'black' AND `availability` = 'mtgo'
SELECT `id` FROM cards WHERE `convertedManaCost` = 0
SELECT `layout` FROM cards WHERE `id` IN ( SELECT `id` FROM cards WHERE `keywords` LIKE '%flying%' )
SELECT COUNT(*) FROM cards WHERE `originalType` = 'Summon - Angel' AND `subtypes` != 'Angel'
SELECT `id` FROM cards WHERE `cardKingdomFoilId` IS NOT NULL AND `cardKingdomId` IS NOT NULL
SELECT `id` FROM cards WHERE `duelDeck` = 'a'
SELECT `edhrecRank` FROM cards WHERE `frameVersion` = '2015'
SELECT DISTINCT T2.`artist` FROM cards AS T2 WHERE T2.`id` IN ( SELECT T1.`id` FROM foreign_data AS T1 WHERE T1.`language` = 'Chinese Simplified' )
SELECT T1.id, T1.artist, T1.availability, T1.name, T1.rarity FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese' AND T1.availability IS NOT NULL AND T2.language IS NOT NULL
SELECT COUNT(*) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.`id` = T2.`id` WHERE T2.`status` = 'Banned' AND T1.`borderColor` = 'white'
SELECT T1.`uuid`, T2.`language` FROM legalities AS T1 INNER JOIN foreign_data AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`format` = 'legacy'
SELECT `text` FROM rulings WHERE `uuid` = ( SELECT `uuid` FROM cards WHERE `name` = 'Beacon of Immortality' )
SELECT T3.`status` FROM cards AS T1 INNER JOIN legalities AS T3 ON T1.`uuid` = T3.`uuid` WHERE T1.`frameVersion` = 'future'
SELECT T1.`name`, T1.`colors` FROM cards AS T1 WHERE T1.`setCode` = 'OGW' AND T1.`colors` IS NOT NULL
SELECT T1.`name`, T2.`language`, T2.`translation` FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.`setCode` = T2.`setCode` WHERE T1.`setCode` = '10E' AND T1.`convertedManaCost` = 5 AND T2.`translation` IS NOT NULL
SELECT T1.`name`, T2.`date` FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`originalType` = 'Creature - Elf'
SELECT T2.`format` FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`id` BETWEEN 1 AND 20
SELECT T1.`name`, T1.`id` FROM cards AS T1 WHERE T1.`originalType` = 'Artifact' AND T1.`colors` LIKE '%B%' AND T1.`uuid` IN ( SELECT T2.`uuid` FROM foreign_data AS T2 WHERE T2.`uuid` = T1.`uuid` )
SELECT T1.`name` FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`rarity` = 'uncommon' ORDER BY T2.`date` ASC LIMIT 3
SELECT COUNT(*) FROM cards WHERE `artist` = 'John Avon' AND `cardKingdomFoilId` IS NOT NULL AND `cardKingdomId` IS NULL
SELECT COUNT(*) FROM cards WHERE `borderColor` = 'white' AND `cardKingdomFoilId` = `cardKingdomId` AND `cardKingdomId` IS NOT NULL
SELECT COUNT(*) FROM cards WHERE `artist` = 'UDON' AND `availability` = 'mtgo' AND `hand` = '-1'
SELECT COUNT(*) FROM cards WHERE `frameVersion` = '1993' AND `availability` = 'paper' AND `hasContentWarning` = 1
SELECT `manaCost` FROM cards WHERE `frameVersion` = '2003' AND `borderColor` = 'black' AND `availability` LIKE '%paper%' AND `availability` LIKE '%mtgo%'
SELECT SUM(CASE WHEN T1.`manaCost` IS NOT NULL THEN (SELECT SUM(CAST(SUBSTR(T1.`manaCost`, INSTR(T1.`manaCost`, '{') + 1, INSTR(T1.`manaCost`, '}') - INSTR(T1.`manaCost`, '{') - 1) AS REAL)) FROM cards AS T1 WHERE T1.`artist` = 'Rob Alexander') ELSE 0 END) AS total_unconverted_mana FROM cards AS T1 WHERE T1.`artist` = 'Rob Alexander'
SELECT DISTINCT `subtypes` AS `type` FROM cards WHERE `availability` = 'arena' AND `subtypes` IS NOT NULL UNION SELECT DISTINCT `supertypes` AS `type` FROM cards WHERE `availability` = 'arena' AND `supertypes` IS NOT NULL
SELECT DISTINCT T1.`setCode` FROM set_translations AS T1 WHERE T1.`language` = 'Spanish'
SELECT (CAST(COUNT(CASE WHEN hand = '+3' THEN 1 END) AS REAL) / COUNT(id)) * 100 AS percentage FROM cards WHERE frameEffects = 'legendary'
SELECT id FROM cards WHERE isStorySpotlight = 1 AND isTextless = 0
SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Spanish'
SELECT DISTINCT `language` FROM set_translations WHERE `setCode` = ( SELECT `code` FROM sets WHERE `baseSetSize` = 309 )
SELECT COUNT(*) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.`setCode` = T2.`id` WHERE T2.`block` = 'Commander' AND T1.`language` = 'Portuguese (Brazil)'
SELECT T1.`id` FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`types` = 'Creature' AND T2.`status` = 'Legal'
SELECT DISTINCT T1.`subtypes` AS card_type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.`uuid` = T2.`uuid` WHERE T2.`language` = 'German' AND T1.`subtypes` IS NOT NULL UNION SELECT DISTINCT T1.`supertypes` AS card_type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.`uuid` = T2.`uuid` WHERE T2.`language` = 'German' AND T1.`supertypes` IS NOT NULL
SELECT COUNT(*) FROM cards WHERE power IS NULL AND text IS NOT NULL AND text LIKE '%triggered ability%'
SELECT COUNT(DISTINCT T1.`id`) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.`uuid` = T2.`uuid` INNER JOIN legalities AS T3 ON T1.`uuid` = T3.`uuid` WHERE T2.`text` = 'This is a triggered mana ability' AND T3.`format` = 'pre-modern' AND T3.`status` = 'Legal' AND T1.`loyalty` IS NULL
SELECT T1.`id` FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`artist` = 'Erica Yang' AND T1.`availability` = 'paper' AND T2.`format` = 'pauper' AND T2.`status` = 'Legal'
SELECT DISTINCT `artist` FROM cards WHERE `flavorText` = 'Das perfekte Gegenmittel zu einer dichten Formation'
SELECT COUNT(*) FROM foreign_data WHERE `language` = 'French';
SELECT COUNT(DISTINCT T1.`uuid`) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`rarity` = 'rare' AND T2.`date` = '2009-01-10'
SELECT DISTINCT T2.`language` FROM set_translations AS T2 INNER JOIN sets AS T1 ON T2.`setCode` = T1.`code` WHERE T1.`baseSetSize` = 180 AND T1.`block` = 'Ravnica'
SELECT (CAST(COUNT(CASE WHEN T1.`hasContentWarning` = 0 THEN 1 END) AS REAL) / COUNT(*)) * 100 AS percentage FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.`uuid` = T2.`uuid` WHERE T2.`format` = 'commander' AND T2.`status` = 'Legal'
SELECT (CAST(COUNT(CASE WHEN T2.language = 'French' THEN 1 END) AS REAL) / COUNT(*)) * 100 AS percentage FROM cards AS T1 LEFT JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'
SELECT (CAST(COUNT(CASE WHEN T1.`type` = 'expansion' THEN 1 END) AS REAL) / COUNT(*)) * 100 AS percentage_expansion FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.`id` = T2.`id` WHERE T2.`language` = 'Japanese'
SELECT `availability` FROM cards WHERE `artist` = 'Daren Bader'
SELECT COUNT(*) FROM cards WHERE `borderColor` = 'borderless' AND `edhrecRank` > 12000
SELECT COUNT(*) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1
SELECT T1.`name` FROM cards AS T1 WHERE T1.`power` IS NULL OR T1.`power` = '*' AND T1.`promoTypes` = 'arenaleague' ORDER BY T1.`name` ASC LIMIT 3
SELECT * FROM foreign_data WHERE uuid IN (SELECT uuid FROM cards WHERE multiverseId = 149934);
SELECT T1.`id` FROM cards AS T1 WHERE T1.`cardKingdomFoilId` IS NOT NULL AND T1.`cardKingdomId` IS NOT NULL ORDER BY T1.`cardKingdomFoilId` ASC LIMIT 3
SELECT (CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS proportion FROM cards
SELECT id FROM cards WHERE colors IS NULL AND subtypes IS NOT NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%';
SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3
SELECT DISTINCT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Archenemy' AND T2.code = 'ARC'
SELECT S.`name`, ST.`translation` FROM sets AS S LEFT JOIN set_translations AS ST ON S.`code` = ST.`setCode` WHERE S.`id` = 5 AND ST.`translation` IS NOT NULL
SELECT T2.language, T1.type FROM sets AS T1 LEFT JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.id = 206 AND T2.language IS NOT NULL
SELECT T1.`id`, T1.`name` FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.`code` = T2.`setCode` WHERE T1.`block` = 'Shadowmoor' AND T2.`language` = 'Italian' ORDER BY T1.`name` ASC LIMIT 2
SELECT S.id FROM sets AS S INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE S.isForeignOnly = 1 AND S.isFoilOnly = 1 AND ST.language = 'Japanese' GROUP BY S.id
SELECT T1.`name`, T1.`baseSetSize` FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.`id` = T2.`id` WHERE T2.`language` = 'Russian' AND T1.`baseSetSize` = ( SELECT MAX(T3.`baseSetSize`) FROM sets AS T3 INNER JOIN set_translations AS T4 ON T3.`id` = T4.`id` WHERE T4.`language` = 'Russian' )
SELECT (CAST(T2.online_only_chinese_cards AS REAL) / T1.total_cards) * 100 AS percentage FROM ( SELECT COUNT(*) AS total_cards FROM cards ) AS T1, ( SELECT COUNT(*) AS online_only_chinese_cards FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 ) AS T2
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.`code` = T2.`setCode` WHERE T2.`language` = 'Japanese' AND T1.`isOnlineOnly` = 0
SELECT id FROM cards WHERE borderColor = 'black'
SELECT `id` FROM cards WHERE `frameEffects` = 'extendedart'
SELECT `name` FROM cards WHERE `borderColor` = 'black' AND `isFullArt` = 1
SELECT st.language FROM sets s LEFT JOIN set_translations st ON s.code = st.setCode WHERE s.id = 174 AND st.language IS NOT NULL;
SELECT `name` FROM sets WHERE `code` = 'ALL'
SELECT DISTINCT fd.language FROM cards c JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.name = 'A Pedra Fellwar' AND fd.language IS NOT NULL;
SELECT `code` FROM sets WHERE `releaseDate` = '2007-07-13'
SELECT `baseSetSize`, `code` FROM sets WHERE `block` IN ('Masques', 'Mirage')
SELECT `code` FROM sets WHERE `type` = 'expansion'
SELECT `type` FROM cards WHERE `watermark` = 'boros'
SELECT T2.`type` FROM cards AS T2 WHERE T2.`watermark` IS NOT NULL
SELECT (CAST(COUNT(CASE WHEN T1.convertedManaCost = 10 THEN 1 END) AS REAL) / COUNT(T1.convertedManaCost)) * 100 AS percentage FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.id WHERE T2.name = 'Abyssal Horror' AND T1.convertedManaCost IS NOT NULL
SELECT `code` FROM sets WHERE `type` = 'expansion' OR `type` = 'commander'
SELECT T1.`type` FROM cards AS T1 WHERE T1.`watermark` = 'abzan'
SELECT T2.`language`, T1.`type` FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`watermark` = 'azorius'
SELECT COUNT(*) FROM cards WHERE artist = 'Aaron Miller' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL
SELECT COUNT(*) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'
SELECT `name` FROM cards WHERE `isTextless` = 0
SELECT convertedManaCost AS unconvertedManaCost FROM cards WHERE name = 'Ancestor''s Chosen'
SELECT COUNT(*) FROM cards WHERE `borderColor` = 'white' AND (`power` IS NULL OR `power` = '*')
SELECT T1.name FROM cards AS T1 WHERE T1.isPromo = 1 AND T1.faceConvertedManaCost IS NOT NULL
SELECT `subtypes` AS `type` FROM cards WHERE `name` = 'Molimo, Maro-Sorcerer' UNION SELECT `supertypes` AS `type` FROM cards WHERE `name` = 'Molimo, Maro-Sorcerer'
SELECT `purchaseUrls` FROM cards WHERE `promoTypes` = 'bundle'
SELECT COUNT(DISTINCT T1.`artist`) AS artist_count FROM cards AS T1 WHERE T1.`borderColor` = 'black' AND T1.`availability` LIKE '%arena%' AND T1.`availability` LIKE '%mtgo%'
SELECT CASE WHEN (SELECT `convertedManaCost` FROM cards WHERE `name` = 'Serra Angel') > (SELECT `convertedManaCost` FROM cards WHERE `name` = 'Shrine Keeper') THEN 'Serra Angel' WHEN (SELECT `convertedManaCost` FROM cards WHERE `name` = 'Serra Angel') < (SELECT `convertedManaCost` FROM cards WHERE `name` = 'Shrine Keeper') THEN 'Shrine Keeper' ELSE 'Both have the same converted mana cost' END AS result
SELECT `artist` FROM cards WHERE `flavorName` = 'Battra, Dark Destroyer'
SELECT T1.`name` FROM cards AS T1 WHERE T1.`frameVersion` = '2003' ORDER BY T1.`convertedManaCost` DESC LIMIT 3
SELECT st.translation FROM set_translations st JOIN sets s ON st.setCode = s.code JOIN cards c ON c.setCode = s.code WHERE c.name = 'Ancestor\'s Chosen' AND st.language = 'Italian'
SELECT COUNT(*) FROM set_translations AS ST WHERE ST.setCode IN ( SELECT S.code FROM cards AS C INNER JOIN foreign_data AS FD ON C.uuid = FD.uuid INNER JOIN sets AS S ON FD.name = S.name WHERE C.name = 'Angel of Mercy' )
SELECT DISTINCT T3.name FROM cards AS T3 INNER JOIN foreign_data AS T4 ON T3.uuid = T4.uuid INNER JOIN sets AS T1 ON T4.multiverseid = T1.id INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'
SELECT EXISTS ( SELECT 1 FROM foreign_data WHERE `uuid` IN ( SELECT `uuid` FROM cards WHERE `name` = 'Ancestor''s Chosen' ) AND `language` = 'Korean' ) AS has_korean_version
SELECT COUNT(*) FROM cards AS T1 WHERE T1.`artist` = 'Adam Rex' AND T1.`setCode` = ( SELECT T1.`id` FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.`id` = T2.`id` WHERE T2.`translation` = 'Hauptset Zehnte Edition' )
SELECT T1.`baseSetSize` FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.`id` = T2.`id` WHERE T2.`translation` = 'Hauptset Zehnte Edition'
SELECT `translation` FROM set_translations WHERE `setCode` = ( SELECT `code` FROM sets WHERE `name` = 'Eighth Edition' ) AND `language` = 'Chinese Simplified'
SELECT CASE WHEN EXISTS ( SELECT 1 FROM sets AS T1 INNER JOIN cards AS T2 ON T1.`id` = T2.`id` WHERE T2.`name` = 'Angel of Mercy' AND T1.`mtgoCode` IS NOT NULL ) THEN 'Yes' ELSE 'No' END AS `AppearsOnMTGO`
SELECT `releaseDate` FROM sets WHERE `id` = ( SELECT `id` FROM cards WHERE `name` = 'Ancestor''s Chosen' )
SELECT T1.`type` FROM sets AS T1 WHERE T1.`id` = ( SELECT T2.`id` FROM set_translations AS T2 WHERE T2.`translation` = 'Hauptset Zehnte Edition' )
SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.block = 'Ice Age' AND T2.language = 'Italian'
SELECT CASE WHEN s.isForeignOnly = 1 THEN 'Yes' ELSE 'No' END AS Availability FROM cards c JOIN foreign_data f ON c.uuid = f.uuid JOIN sets s ON f.name = s.name WHERE c.name = 'Adarkar Valkyrie'
SELECT COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.`id` = T2.`id` WHERE T2.`language` = 'Italian' AND T2.`translation` IS NOT NULL AND T1.`baseSetSize` < 10
SELECT COUNT(*) FROM cards WHERE `borderColor` = 'black' AND `id` IN ( SELECT `id` FROM sets WHERE `name` = 'Coldsnap' )
SELECT cards.name FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' AND cards.convertedManaCost = ( SELECT MAX(cards.convertedManaCost) FROM cards INNER JOIN sets ON cards.id = sets.id WHERE sets.name = 'Coldsnap' )
SELECT DISTINCT c.artist FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.name = 'Coldsnap' AND c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');
SELECT T1.`name` FROM cards AS T1 INNER JOIN sets AS T2 ON T1.`setCode` = T2.`code` WHERE T2.`name` = 'Coldsnap' AND T1.`number` = '4'
SELECT COUNT(*) FROM cards AS T1 WHERE T1.`convertedManaCost` > 5 AND (T1.`power` IS NULL OR T1.`power` = 'None') AND T1.`id` IN ( SELECT `id` FROM sets WHERE `name` = 'Coldsnap' )
SELECT `flavorText` FROM foreign_data WHERE `uuid` = ( SELECT `uuid` FROM cards WHERE `name` = 'Ancestor''s Chosen' ) AND `language` = 'Italian'
SELECT DISTINCT `language` FROM foreign_data WHERE `id` = ( SELECT `id` FROM cards WHERE `name` = 'Ancestor''s Chosen' ) AND `flavorText` IS NOT NULL
SELECT T1.`type` FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.`uuid` = T2.`uuid` WHERE T2.`language` = 'German' AND T1.`name` = 'Ancestor''s Chosen'
SELECT T3.text FROM rulings AS T3 INNER JOIN cards AS T1 ON T1.uuid = T3.uuid INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T4 ON T1.uuid = T4.id WHERE T4.name = 'Coldsnap' AND T2.language = 'Italian'
SELECT fd.name FROM foreign_data AS fd INNER JOIN cards AS c ON fd.uuid = c.uuid INNER JOIN sets AS s ON c.uuid = s.id WHERE s.name = 'Coldsnap' AND fd.language = 'Italian' AND c.convertedManaCost = ( SELECT MAX(c2.convertedManaCost) FROM cards AS c2 INNER JOIN sets AS s2 ON c2.uuid = s2.id WHERE s2.name = 'Coldsnap' )
SELECT `date` FROM rulings WHERE `uuid` = ( SELECT `uuid` FROM cards WHERE `name` = 'Reminisce' )
SELECT (CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.convertedManaCost)) * 100 AS percentage FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost IS NOT NULL
SELECT (CAST(SUM(CASE WHEN c.cardKingdomFoilId = c.cardKingdomId AND c.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / NULLIF(COUNT(*), 0) * 100) AS percentage FROM cards c JOIN sets s ON c.setCode = s.id WHERE s.name = 'Coldsnap'
SELECT `code` FROM sets WHERE `releaseDate` = '2017-07-14'
SELECT `keyruneCode` FROM sets WHERE `code` = 'PKHC'
SELECT mcmId FROM sets WHERE code = 'SS2'
SELECT `mcmName` FROM sets WHERE `releaseDate` = '2017-06-09'
SELECT `type` FROM sets WHERE `name` LIKE '%From the Vault: Lore%'
SELECT `parentCode` FROM sets WHERE `name` = 'Commander 2014 Oversized'
SELECT T1.`id`, T1.`name`, T2.`text` AS ruling_text, CASE WHEN T1.`hasContentWarning` = 1 THEN 'Yes' ELSE 'No' END AS has_missing_or_degraded_properties FROM cards AS T1 LEFT JOIN rulings AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`artist` = 'Jim Pavelec' AND T2.`uuid` IS NOT NULL
SELECT s.releaseDate FROM sets AS s JOIN cards AS c ON c.uuid = s.code WHERE c.name = 'Evacuation'
SELECT T1.`baseSetSize` FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.`id` = T2.`id` WHERE T2.`translation` = 'Rinascita di Alara'
SELECT T1.`type` FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.`code` = T2.`setCode` WHERE T2.`translation` = 'Huitième édition'
SELECT st.translation FROM cards c JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.code = st.setCode WHERE c.name = 'Tendo Ice Bridge' AND st.language = 'French'
SELECT COUNT(*) FROM set_translations WHERE `setCode` = ( SELECT `code` FROM sets WHERE `name` = 'Salvat 2011' ) AND `translation` IS NOT NULL
SELECT ST.translation FROM cards AS C INNER JOIN foreign_data AS FD ON C.uuid = FD.uuid INNER JOIN sets AS S ON FD.id = S.id INNER JOIN set_translations AS ST ON S.code = ST.setCode WHERE ST.language = 'Japanese' AND C.name = 'Fellwar Stone';
SELECT T1.`name` FROM cards AS T1 INNER JOIN sets AS T2 ON T1.`setCode` = T2.`code` WHERE T2.`id` = ( SELECT `id` FROM sets WHERE `name` = 'Journey into Nyx Hero''s Path' ) ORDER BY T1.`convertedManaCost` DESC LIMIT 1
SELECT T2.`releaseDate` FROM sets AS T2 WHERE T2.`code` = ( SELECT T1.`setCode` FROM set_translations AS T1 WHERE T1.`translation` = 'Ola de frío' )
SELECT S.type FROM cards AS C INNER JOIN foreign_data AS F ON C.uuid = F.uuid INNER JOIN sets AS S ON F.multiverseid = S.id WHERE C.name = 'Samite Pilgrim'
SELECT COUNT(*) FROM cards WHERE `setCode` = ( SELECT `id` FROM sets WHERE `name` = 'World Championship Decks 2004' ) AND `convertedManaCost` = 3
SELECT `translation` FROM set_translations WHERE `setCode` = ( SELECT `code` FROM sets WHERE `name` = 'Mirrodin' ) AND `language` = 'Chinese Simplified'
SELECT (SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.`uuid` = T2.`uuid` INNER JOIN sets AS T3 ON T1.`setCode` = T3.`code` WHERE T2.`language` = 'Japanese' AND T3.`isNonFoilOnly` = 1) * 100.0 / (SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.`uuid` = T2.`uuid` WHERE T2.`language` = 'Japanese') AS percentage_non_foil
SELECT (SUM(CASE WHEN C.isOnlineOnly = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage FROM foreign_data AS FD INNER JOIN cards AS C ON FD.uuid = C.uuid WHERE FD.language = 'Portuguese (Brazil)'
SELECT DISTINCT T1.`availability` FROM cards AS T1 WHERE T1.`artist` = 'Aleksi Briclot' AND T1.`isTextless` = 1 AND T1.`availability` IS NOT NULL
SELECT `id` FROM sets WHERE `baseSetSize` = ( SELECT MAX(`baseSetSize`) FROM sets )
SELECT `artist` FROM cards WHERE `convertedManaCost` = ( SELECT MAX(`convertedManaCost`) FROM cards WHERE `id` IS NOT NULL ) AND `id` IS NOT NULL
SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL AND frameEffects IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*) FROM cards WHERE `power` IS NULL AND `hasFoil` = 0 AND `duelDeck` = 'a'
SELECT `id` FROM sets WHERE `type` = 'commander' AND `totalSetSize` = ( SELECT MAX(`totalSetSize`) FROM sets WHERE `type` = 'commander' )
SELECT T1.`name`, T1.`manaCost` FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.`uuid` = T2.`uuid` WHERE T2.`format` = 'duel' ORDER BY T1.`convertedManaCost` DESC LIMIT 10
SELECT 1
SELECT COUNT(*) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.`id` = T2.`id` WHERE T2.`artist` = 'Volkan Baga' AND T1.`language` = 'French'
SELECT COUNT(*) FROM legalities AS T1 WHERE T1.`uuid` IN ( SELECT T2.`uuid` FROM cards AS T2 WHERE T2.`rarity` = 'rare' AND T2.`types` = 'Enchantment' AND T2.`name` = 'Abundance' ) AND T1.`status` = 'Legal' GROUP BY T1.`uuid` HAVING COUNT(*) = ( SELECT COUNT(*) FROM legalities AS T3 WHERE T3.`uuid` = T1.`uuid` )
SELECT T2.`name`, T1.`format` FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`status` = 'Banned' AND T1.`format` = ( SELECT T1.`format` FROM ( SELECT T1.`format`, COUNT(*) AS banned_count FROM legalities AS T1 WHERE T1.`status` = 'Banned' GROUP BY T1.`format` ) AS T1 ORDER BY T1.banned_count DESC LIMIT 1 )
SELECT st.language FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.name = 'Battlebond' AND st.language IS NOT NULL;
SELECT DISTINCT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = ( SELECT artist FROM ( SELECT artist, COUNT(id) AS card_count FROM cards WHERE artist IS NOT NULL GROUP BY artist ORDER BY card_count ASC LIMIT 1 ) AS subquery )
SELECT T2.`status` FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`frameVersion` = '1997' AND T1.`artist` = 'D. Alexander Gregory' AND T1.`hasContentWarning` = 1 AND T2.`format` = 'legacy'
SELECT T1.`name`, T2.`format` FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.`uuid` = T2.`uuid` WHERE T1.`edhrecRank` = 1 AND T2.`status` = 'Banned'
SELECT (SELECT COUNT(*) FROM sets WHERE releaseDate BETWEEN '2012-01-01' AND '2015-12-31') / (2015 - 2012 + 1) AS annual_average_sets, (SELECT language FROM foreign_data AS FD INNER JOIN cards AS C ON FD.uuid = C.uuid INNER JOIN sets AS S ON C.id = S.id WHERE S.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY language ORDER BY COUNT(language) DESC LIMIT 1) AS common_language
SELECT DISTINCT T1.`artist` FROM cards AS T1 WHERE T1.`borderColor` = 'black' AND T1.`availability` = 'arena'
SELECT T1.`uuid` FROM legalities AS T1 WHERE T1.`format` = 'oldschool' AND (T1.`status` = 'Banned' OR T1.`status` = 'Restricted')
SELECT COUNT(*) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'
SELECT T1.`text` FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.`uuid` = T2.`uuid` WHERE T2.`artist` = 'Kev Walker' ORDER BY T1.`date` DESC
SELECT T1.`name`, T3.`format` FROM cards AS T1 INNER JOIN legalities AS T3 ON T1.`uuid` = T3.`uuid` INNER JOIN sets AS T2 ON T1.`id` = T2.`id` WHERE T2.`name` = 'Hour of Devastation' AND T3.`status` = 'Legal'
SELECT DISTINCT s.name FROM sets AS s JOIN set_translations AS st_korean ON s.code = st_korean.setCode AND st_korean.language = 'Korean' LEFT JOIN set_translations AS st_japanese ON s.code = st_japanese.setCode AND st_japanese.language = 'Japanese' WHERE st_japanese.setCode IS NULL;
SELECT DISTINCT T1.frameVersion, T1.name FROM cards AS T1 LEFT JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams' GROUP BY T1.frameVersion, T1.name HAVING MAX(T2.status) = 'Banned' OR MAX(T2.status) IS NULL
SELECT `DisplayName`, `Reputation` FROM users WHERE `DisplayName` IN ('Harlan', 'Jarrod Dixon') ORDER BY `Reputation` DESC LIMIT 1
SELECT DisplayName FROM users WHERE strftime('%Y', CreationDate) = '2014'
SELECT COUNT(*) FROM users WHERE `LastAccessDate` > '2014-09-01 00:00:00'
SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )
SELECT COUNT(*) FROM users WHERE UpVotes > 100 AND DownVotes > 1
SELECT COUNT(*) FROM users WHERE `Views` > 10 AND `CreationDate` > '2013-01-01'
SELECT COUNT(*) FROM posts WHERE `OwnerUserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'csgillespie' )
SELECT p.Title FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE u.DisplayName = 'csgillespie' AND p.OwnerUserId IS NOT NULL AND p.Title IS NOT NULL;
SELECT `DisplayName` FROM users WHERE `Id` = ( SELECT `OwnerUserId` FROM posts WHERE `Title` = 'Eliciting priors from experts' )
SELECT `Title` FROM posts WHERE `OwnerUserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'csgillespie' ) ORDER BY `ViewCount` DESC LIMIT 1
SELECT u.DisplayName FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE p.Id = ( SELECT Id FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts ) )
SELECT SUM(T1.`CommentCount`) FROM posts AS T1 INNER JOIN users AS T2 ON T1.`OwnerUserId` = T2.`Id` WHERE T2.`DisplayName` = 'csgillespie'
SELECT T1.`AnswerCount` FROM posts AS T1 INNER JOIN users AS T2 ON T1.`OwnerUserId` = T2.`Id` WHERE T2.`DisplayName` = 'csgillespie' AND T1.`Id` = ( SELECT T3.`Id` FROM posts AS T3 INNER JOIN users AS T4 ON T3.`OwnerUserId` = T4.`Id` WHERE T4.`DisplayName` = 'csgillespie' ORDER BY T3.`AnswerCount` DESC LIMIT 1 )
SELECT `DisplayName` FROM users WHERE `Id` = ( SELECT `LastEditorUserId` FROM posts WHERE `Id` = ( SELECT `Id` FROM posts WHERE `Title` = 'Examples for teaching: Correlation does not mean causation' ) )
SELECT COUNT(*) FROM posts WHERE `OwnerUserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'csgillespie' ) AND `ParentId` IS NULL
SELECT DISTINCT T1.`DisplayName` FROM users AS T1 INNER JOIN posts AS T2 ON T1.`Id` = T2.`OwnerUserId` WHERE T2.`ClosedDate` IS NOT NULL
SELECT COUNT(*) FROM posts WHERE OwnerUserId IN ( SELECT Id FROM users WHERE Age > 65 ) AND Score >= 20
SELECT `Location` FROM users WHERE `Id` = ( SELECT `OwnerUserId` FROM posts WHERE `Title` = 'Eliciting priors from experts' )
SELECT `Body` FROM posts WHERE `Id` = ( SELECT `ExcerptPostId` FROM tags WHERE `TagName` = 'bayesian' )
SELECT `Body` FROM posts WHERE `Id` = ( SELECT `ExcerptPostId` FROM tags WHERE `Id` = ( SELECT `Id` FROM tags ORDER BY `Count` DESC LIMIT 1 ) )
SELECT COUNT(*) FROM badges WHERE `UserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'csgillespie' )
SELECT T1.`Name` FROM badges AS T1 WHERE T1.`UserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'csgillespie' )
SELECT COUNT(*) FROM badges WHERE `UserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'csgillespie' ) AND strftime('%Y', `Date`) = '2011'
SELECT DisplayName FROM users WHERE Id = ( SELECT UserId FROM ( SELECT UserId, COUNT(Id) AS badge_count FROM badges GROUP BY UserId ) AS badge_counts ORDER BY badge_count DESC LIMIT 1 )
SELECT AVG(`Score`) FROM posts WHERE `OwnerUserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'csgillespie' )
SELECT CAST(COUNT(T1.`Id`) AS REAL) / COUNT(DISTINCT T2.`Id`) AS average_badges FROM badges AS T1 INNER JOIN users AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`Views` > 200
SELECT (CAST(COUNT(CASE WHEN U.Age > 65 THEN 1 END) AS REAL) / COUNT(*)) * 100 AS elder_percentage FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.Score > 20
SELECT COUNT(*) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'
SELECT v.CreationDate FROM votes AS v JOIN ( SELECT PostId, COUNT(*) AS vote_count FROM votes GROUP BY PostId ) AS vote_counts ON v.PostId = vote_counts.PostId WHERE vote_counts.vote_count = ( SELECT MAX(vote_count) FROM ( SELECT COUNT(*) AS vote_count FROM votes GROUP BY PostId ) AS inner_vote_counts )
SELECT COUNT(*) FROM badges WHERE `Name` = 'Revival'
SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments WHERE Score = ( SELECT MAX(Score) FROM comments ) )
SELECT COUNT(*) FROM comments WHERE `PostId` = ( SELECT `Id` FROM posts WHERE `ViewCount` = 1910 )
SELECT T2.`FavoriteCount` FROM posts AS T2 WHERE T2.`Id` = ( SELECT T1.`PostId` FROM comments AS T1 WHERE T1.`UserId` = 3025 AND T1.`CreationDate` = '2014-04-23 20:29:39.0' )
SELECT `Text` FROM comments WHERE `PostId` = ( SELECT `Id` FROM posts WHERE `ParentId` = 107829 AND `CommentCount` = 1 )
SELECT CASE WHEN p.`ClosedDate` IS NULL THEN 'Not Well-Finished' ELSE 'Well-Finished' END AS PostStatus FROM posts AS p WHERE p.`Id` = ( SELECT c.`PostId` FROM comments AS c WHERE c.`UserId` = 23853 AND c.`CreationDate` = '2013-07-12 09:08:18.0' )
SELECT `Reputation` FROM users WHERE `Id` = ( SELECT `OwnerUserId` FROM posts WHERE `Id` = 65041 )
SELECT COUNT(*) FROM posts WHERE `OwnerUserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'Tiago Pasqualini' )
SELECT `DisplayName` FROM users WHERE `Id` = ( SELECT `UserId` FROM votes WHERE `Id` = 6347 )
SELECT COUNT(*) FROM votes WHERE `PostId` = ( SELECT `Id` FROM posts WHERE `Title` LIKE '%data visualization%' )
SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`DisplayName` = 'DatEpicCoderGuyWhoPrograms'
SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = 24) * 1.0 / (SELECT COUNT(*) FROM votes WHERE UserId = 24) AS post_to_vote_ratio
SELECT `ViewCount` FROM posts WHERE `Title` = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'
SELECT `Text` FROM comments WHERE `Score` = 17
SELECT T1.`DisplayName` FROM users AS T1 WHERE T1.`WebsiteUrl` = 'http://stackoverflow.com'
SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`DisplayName` = 'SilentGhost'
SELECT `DisplayName` FROM users WHERE `Id` = ( SELECT `UserId` FROM comments WHERE `Text` = 'thank you user93!' )
SELECT `Text` FROM comments WHERE `UserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'A Lion' )
SELECT `DisplayName`, `Reputation` FROM users WHERE `Id` = ( SELECT `OwnerUserId` FROM posts WHERE `Title` = 'Understanding what Dassault iSight is doing?' )
SELECT `Text` FROM comments WHERE `PostId` = ( SELECT `Id` FROM posts WHERE `Title` = 'How does gentle boosting differ from AdaBoost?' )
SELECT T2.`DisplayName` FROM badges AS T1 INNER JOIN users AS T2 ON T1.`UserId` = T2.`Id` WHERE T1.`Name` = 'Necromancer' LIMIT 10
SELECT u.DisplayName FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Open source tools for visualizing multi-dimensional data'
SELECT T1.`Title` FROM posts AS T1 WHERE T1.`LastEditorUserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'Vebjorn Ljosa' )
SELECT SUM(T1.`Score`) AS total_score, T2.`WebsiteUrl` FROM posts AS T1 INNER JOIN users AS T2 ON T1.`LastEditorUserId` = T2.`Id` WHERE T2.`DisplayName` = 'Yevgeny'
SELECT T1.`Text` FROM comments AS T1 WHERE T1.`PostId` = ( SELECT `Id` FROM posts WHERE `Title` = 'Why square the difference instead of taking the absolute value in standard deviation?' )
SELECT SUM(`BountyAmount`) FROM votes WHERE `PostId` IN ( SELECT `Id` FROM posts WHERE `Title` LIKE '%data%' )
SELECT T3.`DisplayName` FROM votes AS T1 INNER JOIN posts AS T2 ON T1.`PostId` = T2.`Id` INNER JOIN users AS T3 ON T1.`UserId` = T3.`Id` WHERE T1.`BountyAmount` = 50 AND T2.`Title` LIKE '%variance%'
SELECT P.Title, C.Text, C.Score, AVG(P.ViewCount) OVER() AS AverageViewCount FROM posts AS P JOIN tags AS T ON P.Id = T.ExcerptPostId LEFT JOIN comments AS C ON P.Id = C.PostId WHERE T.TagName = 'humor'
SELECT COUNT(*) FROM comments WHERE UserId = 13
SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
SELECT `Id` FROM users WHERE `Views` = ( SELECT MIN(`Views`) FROM users WHERE `Views` IS NOT NULL )
SELECT COUNT(DISTINCT T1.`UserId`) FROM badges AS T1 WHERE T1.`Name` = 'Supporter' AND strftime('%Y', T1.`Date`) = '2011'
SELECT COUNT(UserId) AS user_count FROM ( SELECT UserId, COUNT(Name) AS badge_count FROM badges GROUP BY UserId ) AS badge_counts WHERE badge_count > 5
SELECT COUNT(DISTINCT T1.`UserId`) FROM badges AS T1 WHERE T1.`UserId` IN ( SELECT `Id` FROM users WHERE `Location` = 'New York' ) AND T1.`UserId` IN ( SELECT `UserId` FROM badges WHERE `Name` = 'Teacher' ) AND T1.`UserId` IN ( SELECT `UserId` FROM badges WHERE `Name` = 'Supporter' )
SELECT U.`DisplayName`, U.`Reputation` FROM posts AS P INNER JOIN users AS U ON P.`OwnerUserId` = U.`Id` WHERE P.`Id` = 1
SELECT T1.UserId FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount >= 1000 GROUP BY T1.UserId HAVING COUNT(T1.PostId) = 1
SELECT T2.`Name` FROM badges AS T2 WHERE T2.`UserId` IN ( SELECT T1.`UserId` FROM comments AS T1 GROUP BY T1.`UserId` HAVING COUNT(T1.`Id`) = ( SELECT MAX(CommentCount) FROM ( SELECT COUNT(`Id`) AS CommentCount FROM comments GROUP BY `UserId` ) ) )
SELECT COUNT(DISTINCT T1.`Id`) FROM users AS T1 INNER JOIN badges AS T2 ON T1.`Id` = T2.`UserId` WHERE T1.`Location` = 'India' AND T2.`Name` = 'Teacher'
SELECT (CAST(SUM(CASE WHEN strftime('%Y', Date) = '2010' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) * 100) - (CAST(SUM(CASE WHEN strftime('%Y', Date) = '2011' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) * 100) AS percentage_difference FROM badges WHERE Name = 'Student' AND (strftime('%Y', Date) = '2010' OR strftime('%Y', Date) = '2011')
SELECT COUNT(DISTINCT `UserId`) AS unique_user_count FROM comments WHERE `PostId` = 3720
SELECT T2.Id, T2.Title, T2.ViewCount, (SELECT T1.ViewCount FROM posts AS T1 WHERE T1.Id = 61217) AS Popularity FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.RelatedPostId = T2.Id WHERE T1.PostId = 61217 AND T2.Id IS NOT NULL
SELECT T1.`Score`, T2.`LinkTypeId` FROM posts AS T1 LEFT JOIN postLinks AS T2 ON T1.`Id` = T2.`PostId` WHERE T1.`Id` = 395
SELECT `OwnerUserId` FROM posts WHERE `Score` > 60
SELECT SUM(p.FavoriteCount) AS TotalFavoriteCount FROM posts p WHERE p.OwnerUserId = 686 AND strftime('%Y', p.CreationDate) = '2011' AND p.FavoriteCount IS NOT NULL
WITH UserStats AS ( SELECT AVG(T1.UpVotes) AS AvgUpVotes, AVG(T1.Age) AS AvgAge FROM users AS T1 WHERE T1.Id IN ( SELECT OwnerUserId FROM posts GROUP BY OwnerUserId HAVING COUNT(Id) > 10 ) ) SELECT AvgUpVotes, AvgAge FROM UserStats
SELECT COUNT(DISTINCT T1.`UserId`) AS UserCount FROM badges AS T1 WHERE T1.`Name` = 'Announcer'
SELECT `Name` FROM badges WHERE `Date` >= '2010-07-19 00:00:00' AND `Date` < '2010-07-20 00:00:00'
SELECT COUNT(*) FROM comments WHERE Score > 60
SELECT `Text` FROM comments WHERE `CreationDate` = '2010-07-19 19:25:47.0'
SELECT COUNT(*) FROM posts WHERE Score = 10
SELECT DISTINCT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Reputation = ( SELECT MAX(Reputation) FROM users )
SELECT T1.`Reputation` FROM users AS T1 WHERE T1.`Id` IN ( SELECT `UserId` FROM badges WHERE `Date` = '2010-07-19 19:39:08.0' )
SELECT `Name` FROM badges WHERE `UserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'Pierre' )
SELECT T1.`Date` FROM badges AS T1 INNER JOIN users AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`Location` = 'Rochester, NY'
SELECT (CAST(TeacherCount AS REAL) / TotalUsers) * 100 AS TeacherPercentage FROM ( SELECT COUNT(DISTINCT T1.`UserId`) AS TeacherCount FROM badges AS T1 WHERE T1.`Name` = 'Teacher' ) AS TeacherCountTable, ( SELECT COUNT(DISTINCT T2.`Id`) AS TotalUsers FROM users AS T2 ) AS TotalUsersTable
SELECT (COUNT(DISTINCT T1.UserId) * 100.0 / (SELECT COUNT(UserId) FROM badges WHERE Name = 'Organizer')) AS TeenPercentage FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer' AND T2.Age BETWEEN 13 AND 18
SELECT c.Score FROM posts AS p JOIN comments AS c ON p.Id = c.PostId WHERE p.CreationDate = '2010-07-19 19:19:56.0'
SELECT c.Text FROM comments c JOIN posts p ON c.PostId = p.Id JOIN postHistory ph ON p.Id = ph.PostId WHERE ph.CreationDate = '2010-07-19 19:37:33.0'
SELECT T1.`Age` FROM users AS T1 INNER JOIN badges AS T2 ON T1.`Id` = T2.`UserId` WHERE T1.`Location` = 'Vienna, Austria' AND T1.`Age` IS NOT NULL
SELECT COUNT(*) FROM users AS T2 WHERE T2.`Id` IN ( SELECT DISTINCT T1.`UserId` FROM badges AS T1 WHERE T1.`Name` = 'Supporter' ) AND T2.`Age` BETWEEN 19 AND 65
SELECT SUM(`Views`) AS total_views FROM users WHERE `Id` IN ( SELECT `UserId` FROM badges WHERE `Date` = '2010-07-19 19:39:08.0' )
SELECT T1.`Name` FROM badges AS T1 WHERE T1.`UserId` IN ( SELECT `Id` FROM users WHERE `Reputation` = ( SELECT MIN(`Reputation`) FROM users ) )
SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.`UserId` = T2.`Id` WHERE T2.`DisplayName` = 'Sharpie'
SELECT COUNT(*) FROM users AS T2 WHERE T2.`Age` > 65 AND T2.`Id` IN ( SELECT T1.`UserId` FROM badges AS T1 WHERE T1.`Name` = 'Supporter' )
SELECT `DisplayName` FROM `users` WHERE `Id` = 30
SELECT COUNT(*) FROM users WHERE `Location` = 'New York'
SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2010'
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65
SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users WHERE Views IS NOT NULL )
SELECT (SELECT COUNT(Id) FROM votes WHERE strftime('%Y', CreationDate) = '2010') * 1.0 / (SELECT COUNT(Id) FROM votes WHERE strftime('%Y', CreationDate) = '2011') AS ratio
SELECT DISTINCT t.TagName FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN tags t ON p.Id = t.ExcerptPostId WHERE u.DisplayName = 'John Stauffer';
SELECT COUNT(*) FROM posts WHERE `OwnerUserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'Daniel Vassallo' )
SELECT COUNT(*) FROM votes WHERE `UserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'Harlan' )
SELECT `Id` FROM posts WHERE `OwnerUserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'slashnick' ) ORDER BY `AnswerCount` DESC LIMIT 1
SELECT u.DisplayName, SUM(p.ViewCount) AS TotalViewCount FROM posts AS p INNER JOIN users AS u ON p.OwnerUserId = u.Id WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY u.DisplayName ORDER BY TotalViewCount DESC LIMIT 1
SELECT COUNT(*) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.`Id` = T2.`PostId` WHERE T1.`OwnerUserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'Matt Parker' ) GROUP BY T1.`Id` HAVING COUNT(T2.`Id`) > 4
SELECT COUNT(*) FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'Neil McGuigan' ) ) AND Score < 60
SELECT DISTINCT T.TagName FROM tags AS T INNER JOIN posts AS P ON T.ExcerptPostId = P.Id WHERE P.OwnerUserId = ( SELECT Id FROM users WHERE DisplayName = 'Mark Meckes' ) AND P.CommentCount = 0
SELECT `DisplayName` FROM users WHERE `Id` IN ( SELECT `UserId` FROM badges WHERE `Name` = 'Organizer' )
SELECT (SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Community') AS total_posts, (SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN postLinks AS T3 ON T1.Id = T3.PostId INNER JOIN tags AS T4 ON T3.RelatedPostId = T4.Id WHERE T2.DisplayName = 'Community' AND T4.TagName = 'r') AS r_posts, (SELECT COUNT(DISTINCT T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id INNER JOIN postLinks AS T3 ON T1.Id = T3.PostId INNER JOIN tags AS T4 ON T3.RelatedPostId = T4.Id WHERE T2.DisplayName = 'Community' AND T4.TagName = 'r') * 100.0 / (SELECT COUNT(*) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Community') AS percentage
SELECT SUM(CASE WHEN U.DisplayName = 'Mornington' THEN P.ViewCount ELSE 0 END) - SUM(CASE WHEN U.DisplayName = 'Amos' THEN P.ViewCount ELSE 0 END) AS ViewCountDifference FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.ViewCount IS NOT NULL
SELECT COUNT(DISTINCT T1.`UserId`) AS `UserCount` FROM badges AS T1 WHERE T1.`Name` = 'commentator' AND strftime('%Y', T1.`Date`) = '2014'
SELECT COUNT(*) AS post_count FROM postHistory ph JOIN posts p ON ph.PostId = p.Id WHERE ph.CreationDate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'
SELECT U.DisplayName, U.Age FROM users AS U INNER JOIN posts AS P ON U.Id = P.OwnerUserId WHERE P.ViewCount = (SELECT MAX(ViewCount) FROM posts)
SELECT `LastEditDate`, `LastEditorUserId` FROM posts WHERE `Id` = ( SELECT `Id` FROM posts WHERE `Title` = 'Detecting a given face in a database of facial images' )
SELECT COUNT(*) FROM comments WHERE `UserId` = 13 AND `Score` < 60
SELECT COUNT(*) FROM comments WHERE Score > 60
SELECT `Name` FROM badges WHERE `UserId` = ( SELECT `Id` FROM users WHERE `Location` = 'North Pole' ) AND strftime('%Y', `Date`) = '2011'
SELECT U.DisplayName, U.WebsiteUrl FROM posts AS P INNER JOIN users AS U ON P.OwnerUserId = U.Id WHERE P.FavoriteCount > 150 AND U.WebsiteUrl IS NOT NULL
WITH PostInfo AS ( SELECT `Id`, `LastEditDate` FROM posts WHERE `Title` = 'What is the best introductory Bayesian statistics textbook?' ) SELECT (SELECT COUNT(*) FROM postHistory WHERE `PostId` = PostInfo.`Id`) AS PostHistoryCount, PostInfo.`LastEditDate` FROM PostInfo WHERE PostInfo.`Id` IS NOT NULL;
SELECT * FROM badges WHERE Name = 'Outliers'
SELECT `Title` FROM posts WHERE `Id` IN ( SELECT `RelatedPostId` FROM postLinks WHERE `PostId` = ( SELECT `Id` FROM posts WHERE `Title` = 'How to tell if something happened in a data set which monitors a value over time' ) )
SELECT P.Id AS PostID, B.Name AS BadgeName FROM postHistory AS PH INNER JOIN posts AS P ON PH.PostId = P.Id INNER JOIN badges AS B ON B.UserId = ( SELECT Id FROM users WHERE DisplayName = 'Samuel' ) WHERE PH.UserDisplayName = 'Samuel' AND strftime('%Y', PH.CreationDate) = '2013' AND strftime('%Y', B.Date) = '2013'
SELECT p.OwnerDisplayName FROM posts p WHERE p.ViewCount IS NOT NULL AND p.ViewCount = (SELECT MAX(ViewCount) FROM posts WHERE ViewCount IS NOT NULL)
SELECT `DisplayName`, `Location` FROM users WHERE `Id` = ( SELECT `OwnerUserId` FROM posts WHERE `Id` = ( SELECT `ExcerptPostId` FROM tags WHERE `TagName` = 'hypothesis-testing' ) )
SELECT T1.`Title`, T2.`LinkTypeId` FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.`Id` = T2.`RelatedPostId` WHERE T2.`PostId` = ( SELECT `Id` FROM posts WHERE `Title` = 'What are principal component scores?' )
SELECT U.`DisplayName` FROM posts AS P INNER JOIN users AS U ON P.`OwnerUserId` = U.`Id` WHERE P.`Id` = ( SELECT `ParentId` FROM posts WHERE `Id` = ( SELECT `Id` FROM posts WHERE `ParentId` IS NOT NULL ORDER BY `Score` DESC LIMIT 1 ) )
SELECT U.DisplayName, U.WebsiteUrl FROM votes AS V INNER JOIN users AS U ON V.UserId = U.Id WHERE V.VoteTypeId = 8 AND V.BountyAmount IS NOT NULL AND V.BountyAmount = ( SELECT MAX(BountyAmount) FROM votes WHERE VoteTypeId = 8 AND BountyAmount IS NOT NULL )
SELECT T1.`Title` FROM posts AS T1 ORDER BY T1.`ViewCount` DESC LIMIT 5
SELECT COUNT(*) FROM tags WHERE `Count` BETWEEN 5000 AND 7000
SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )
SELECT Age FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)
SELECT COUNT(*) FROM votes AS T2 INNER JOIN posts AS T1 ON T1.Id = T2.PostId WHERE strftime('%Y', T2.CreationDate) = '2011' AND T2.BountyAmount = 50 AND T2.BountyAmount IS NOT NULL
SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users WHERE Age IS NOT NULL )
SELECT p.Score FROM posts p JOIN tags t ON t.ExcerptPostId = p.Id WHERE t.Count = (SELECT MAX(Count) FROM tags)
SELECT CAST(COUNT(Id) AS REAL) / 12 AS average_monthly_links FROM postLinks WHERE strftime('%Y', CreationDate) = '2010' AND PostId IN ( SELECT Id FROM posts WHERE AnswerCount <= 2 )
SELECT T2.`Id` FROM posts AS T2 WHERE T2.`FavoriteCount` = ( SELECT MAX(T3.`FavoriteCount`) FROM posts AS T3 WHERE T3.`Id` IN ( SELECT DISTINCT T1.`PostId` FROM votes AS T1 WHERE T1.`UserId` = 1465 ) )
SELECT `Title` FROM posts WHERE `Id` = ( SELECT `PostId` FROM postLinks WHERE `CreationDate` = ( SELECT MIN(`CreationDate`) FROM postLinks ) )
SELECT u.DisplayName FROM users AS u WHERE u.Id IN ( SELECT UserId FROM ( SELECT UserId, COUNT(Name) AS badge_count FROM badges GROUP BY UserId ) AS badge_counts WHERE badge_count = ( SELECT MAX(badge_count) FROM ( SELECT UserId, COUNT(Name) AS badge_count FROM badges GROUP BY UserId ) AS inner_badge_counts ) )
SELECT MIN(CreationDate) AS FirstVoteDate FROM votes WHERE UserId = ( SELECT Id FROM users WHERE DisplayName = 'chl' )
SELECT MIN(CreaionDate) AS FirstPostDate FROM posts WHERE OwnerUserId = ( SELECT Id FROM users WHERE Age = (SELECT MIN(Age) FROM users WHERE Age IS NOT NULL) )
SELECT DisplayName FROM users WHERE Id = ( SELECT UserId FROM badges WHERE Name = 'Autobiographer' AND Date = ( SELECT MIN(Date) FROM badges WHERE Name = 'Autobiographer' ) )
SELECT COUNT(DISTINCT T1.`OwnerUserId`) FROM posts AS T1 INNER JOIN users AS T2 ON T1.`OwnerUserId` = T2.`Id` WHERE T2.`Location` = 'United Kingdom' AND T1.`FavoriteCount` >= 4
SELECT AVG(vote_count) AS average_votes FROM ( SELECT COUNT(PostId) AS vote_count FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users)) GROUP BY UserId ) AS user_votes
SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )
SELECT COUNT(*) FROM users WHERE Reputation > 2000 AND Views > 1000
SELECT `DisplayName` FROM users WHERE `Age` BETWEEN 19 AND 65
SELECT COUNT(*) FROM postHistory ph JOIN posts p ON ph.PostId = p.Id JOIN users u ON ph.UserId = u.Id WHERE u.DisplayName = 'Jay Stevens' AND strftime('%Y', ph.CreationDate) = '2010'
SELECT `Id`, `Title` FROM posts WHERE `OwnerUserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'Harvey Motulsky' ) ORDER BY `ViewCount` DESC LIMIT 1
SELECT Id, Title FROM posts WHERE Score = ( SELECT MAX(Score) FROM posts )
SELECT AVG(`Score`) FROM posts WHERE `OwnerUserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'Stephen Turner' )
SELECT DISTINCT u.DisplayName FROM users AS u INNER JOIN posts AS p ON u.Id = p.OwnerUserId INNER JOIN postHistory AS ph ON p.Id = ph.PostId WHERE p.ViewCount > 20000 AND strftime('%Y', ph.CreationDate) = '2011'
SELECT p.Id, u.DisplayName AS OwnerDisplayName FROM posts p JOIN postHistory ph ON p.Id = ph.PostId JOIN users u ON p.OwnerUserId = u.Id WHERE ph.CreationDate IS NOT NULL AND strftime('%Y', ph.CreationDate) = '2010' AND p.FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts p2 JOIN postHistory ph2 ON p2.Id = ph2.PostId WHERE strftime('%Y', ph2.CreationDate) = '2010' )
SELECT 1
SELECT (CAST(COUNT(CASE WHEN Age BETWEEN 13 AND 18 THEN 1 END) AS REAL) / COUNT(Id)) * 100 AS percentage FROM users
SELECT p.ViewCount, u.DisplayName FROM posts p JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Computer Game Datasets' AND p.ViewCount IS NOT NULL
SELECT COUNT(*) AS total_posts_above_average FROM posts WHERE ViewCount > (SELECT AVG(ViewCount) FROM posts)
SELECT COUNT(*) AS comment_count FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Score = (SELECT MAX(Score) FROM posts))
SELECT COUNT(*) FROM posts WHERE `ViewCount` > 35000 AND `CommentCount` = 0
SELECT u.DisplayName, u.Location FROM posts AS p JOIN users AS u ON p.LastEditorUserId = u.Id WHERE p.Id = 183 AND p.LastEditDate IS NOT NULL
SELECT `Name` FROM badges WHERE `UserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'Emmett' ) ORDER BY `Date` DESC LIMIT 1
SELECT COUNT(*) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000
SELECT julianday(badge.Date) - julianday(user.CreationDate) AS DaysToEarnBadge FROM badges AS badge INNER JOIN users AS user ON badge.UserId = user.Id WHERE user.DisplayName = 'Zolomon'
SELECT (SELECT COUNT(*) FROM posts WHERE `OwnerUserId` = ( SELECT `Id` FROM users WHERE `CreationDate` = ( SELECT MAX(`CreationDate`) FROM users ) )) AS PostCount, (SELECT COUNT(*) FROM comments WHERE `UserId` = ( SELECT `Id` FROM users WHERE `CreationDate` = ( SELECT MAX(`CreationDate`) FROM users ) )) AS CommentCount
SELECT U.`DisplayName`, C.`Text` FROM comments AS C INNER JOIN users AS U ON C.`UserId` = U.`Id` WHERE C.`PostId` = ( SELECT `Id` FROM posts WHERE `Title` = 'Analysing wind data with R' ) ORDER BY C.`CreationDate` DESC LIMIT 1
SELECT COUNT(DISTINCT T1.`UserId`) AS UserCount FROM badges AS T1 WHERE T1.`Name` = 'Citizen Patrol'
SELECT COUNT(T1.`Id`) AS post_count FROM posts AS T1 INNER JOIN tags AS T2 ON T1.`Id` = T2.`ExcerptPostId` WHERE T2.`TagName` = 'careers'
SELECT `Reputation`, `Views` FROM users WHERE `DisplayName` = 'Jarrod Dixon'
SELECT (SELECT COUNT(*) FROM comments WHERE `PostId` = (SELECT `Id` FROM posts WHERE `Title` = 'Clustering 1D data')) AS comment_count, (SELECT COUNT(*) FROM posts WHERE `ParentId` = (SELECT `Id` FROM posts WHERE `Title` = 'Clustering 1D data')) AS answer_count
SELECT `CreationDate` FROM users WHERE `DisplayName` = 'IrishStat'
SELECT COUNT(*) FROM votes WHERE `BountyAmount` > 30
SELECT (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users)) AND Score > 50) * 100.0 / (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users WHERE Reputation = (SELECT MAX(Reputation) FROM users))) AS PercentageAbove50
SELECT COUNT(*) AS post_count FROM posts WHERE Score < 20
SELECT COUNT(*) FROM tags WHERE Id < 15 AND Count <= 20
SELECT `ExcerptPostId`, `WikiPostId` FROM tags WHERE `TagName` = 'sample'
SELECT `Reputation`, `UpVotes` FROM users WHERE `Id` = ( SELECT `UserId` FROM comments WHERE `Text` = 'fine, you win :)' )
SELECT Text FROM comments WHERE PostId = (SELECT Id FROM posts WHERE Title = 'How can I adapt ANOVA for binary data?')
SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount BETWEEN 100 AND 150 ORDER BY T1.Score DESC LIMIT 1
SELECT DISTINCT u.CreationDate, u.Age FROM users AS u JOIN comments AS c ON u.Id = c.UserId WHERE c.Text LIKE '%http://%' AND u.CreationDate IS NOT NULL AND u.Age IS NOT NULL
SELECT COUNT(DISTINCT T1.`PostId`) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.`PostId` = T2.`Id` WHERE T1.`Score` = 0 AND T2.`ViewCount` < 5
SELECT COUNT(*) FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE CommentCount = 1 ) AND Score = 0
SELECT COUNT(DISTINCT U.`Id`) AS TotalUsers FROM users AS U WHERE U.`Age` = 40 AND U.`Id` IN ( SELECT DISTINCT C.`UserId` FROM comments AS C INNER JOIN posts AS P ON C.`PostId` = P.`Id` WHERE C.`Score` = 0 )
SELECT `Id` AS PostId, `Text` AS Comment FROM comments WHERE `PostId` = ( SELECT `Id` FROM posts WHERE `Title` = 'Group differences on a five point Likert item' )
SELECT UpVotes FROM users WHERE Id = ( SELECT UserId FROM comments WHERE Text = 'R is also lazy evaluated.' )
SELECT T1.`Text` FROM comments AS T1 WHERE T1.`UserId` = ( SELECT `Id` FROM users WHERE `DisplayName` = 'Harvey Motulsky' )
SELECT DISTINCT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0 AND T2.DisplayName IS NOT NULL
SELECT (COUNT(DISTINCT CASE WHEN u.UpVotes = 0 THEN c.UserId END) * 100.0 / NULLIF(COUNT(*), 0)) AS percentage FROM comments AS c INNER JOIN users AS u ON c.UserId = u.Id WHERE c.Score BETWEEN 5 AND 10
SELECT T2.`power_name` FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.`power_id` = T2.`id` WHERE T1.`hero_id` = ( SELECT `id` FROM superhero WHERE `superhero_name` = '3-D Man' )
SELECT COUNT(DISTINCT T1.`hero_id`) AS superhero_count FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.`power_id` = T2.`id` WHERE T2.`power_name` = 'Super Strength'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN superpower AS T3 ON T2.`power_id` = T3.`id` WHERE T3.`power_name` = 'Super Strength' AND T1.`height_cm` > 200
SELECT T1.full_name FROM superhero AS T1 INNER JOIN ( SELECT hero_id FROM ( SELECT hero_id, COUNT(power_id) AS superpower_count FROM hero_power GROUP BY hero_id ) AS superpower_counts WHERE superpower_count > 15 ) AS T2 ON T1.id = T2.hero_id WHERE T1.full_name IS NOT NULL
SELECT COUNT(*) FROM superhero WHERE `eye_colour_id` = ( SELECT `id` FROM colour WHERE `colour` = 'Blue' )
SELECT T1.`colour` FROM colour AS T1 INNER JOIN superhero AS T2 ON T1.`id` = T2.`skin_colour_id` WHERE T2.`superhero_name` = 'Apocalypse'
SELECT COUNT(DISTINCT T1.`id`) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id` INNER JOIN hero_power AS T3 ON T1.`id` = T3.`hero_id` INNER JOIN superpower AS T4 ON T3.`power_id` = T4.`id` WHERE T2.`colour` = 'Blue' AND T4.`power_name` = 'Agility'
SELECT `superhero_name` FROM `superhero` WHERE `eye_colour_id` = (SELECT `id` FROM `colour` WHERE `colour` = 'Blue') AND `hair_colour_id` = (SELECT `id` FROM `colour` WHERE `colour` = 'Blond')
SELECT COUNT(*) FROM superhero WHERE `publisher_id` = ( SELECT `id` FROM publisher WHERE `publisher_name` = 'Marvel Comics' )
SELECT T1.`full_name` FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` WHERE T1.`height_cm` = ( SELECT MAX(T3.`height_cm`) FROM superhero AS T3 INNER JOIN publisher AS T4 ON T3.`publisher_id` = T4.`id` WHERE T4.`publisher_name` = 'Marvel Comics' )
SELECT `publisher_name` FROM publisher WHERE `id` = ( SELECT `publisher_id` FROM superhero WHERE `superhero_name` = 'Sauron' )
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` INNER JOIN colour AS T3 ON T1.`eye_colour_id` = T3.`id` WHERE T2.`publisher_name` = 'Marvel Comics' AND T3.`colour` = 'Blue'
SELECT AVG(`height_cm`) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` WHERE T2.`publisher_name` = 'Marvel Comics'
SELECT (CAST(SUM(CASE WHEN T4.`power_name` = 'Super Strength' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.`id`)) * 100 AS percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` LEFT JOIN hero_power AS T3 ON T1.`id` = T3.`hero_id` LEFT JOIN superpower AS T4 ON T3.`power_id` = T4.`id` WHERE T2.`publisher_name` = 'Marvel Comics'
SELECT COUNT(*) FROM superhero WHERE `publisher_id` = ( SELECT `id` FROM publisher WHERE `publisher_name` = 'DC Comics' )
SELECT T3.`publisher_name` FROM superhero AS T1 INNER JOIN publisher AS T3 ON T1.`publisher_id` = T3.`id` WHERE T1.`id` = ( SELECT T1.`hero_id` FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.`attribute_id` = T2.`id` WHERE T2.`attribute_name` = 'Speed' ORDER BY T1.`attribute_value` ASC LIMIT 1 )
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id` INNER JOIN publisher AS T3 ON T1.`publisher_id` = T3.`id` WHERE T2.`colour` = 'Gold' AND T3.`publisher_name` = 'Marvel Comics'
SELECT `publisher_name` FROM publisher WHERE `id` = ( SELECT `publisher_id` FROM superhero WHERE `superhero_name` = 'Blue Beetle II' )
SELECT COUNT(*) FROM superhero WHERE `hair_colour_id` = ( SELECT `id` FROM colour WHERE `colour` = 'Blond' )
SELECT T3.`superhero_name` FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.`attribute_id` = T2.`id` INNER JOIN superhero AS T3 ON T1.`hero_id` = T3.`id` WHERE T2.`attribute_name` = 'Intelligence' AND T1.`attribute_value` = ( SELECT MIN(T1.`attribute_value`) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.`attribute_id` = T2.`id` WHERE T2.`attribute_name` = 'Intelligence' )
SELECT T3.`race` FROM superhero AS T1 INNER JOIN race AS T3 ON T1.`race_id` = T3.`id` WHERE T1.`superhero_name` = 'Copycat'
SELECT COUNT(DISTINCT T1.`hero_id`) FROM hero_attribute AS T1 WHERE T1.`attribute_id` = ( SELECT `id` FROM attribute WHERE `attribute_name` = 'Durability' ) AND T1.`attribute_value` < 50
SELECT T1.`superhero_name` FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.`id` = T2.`hero_id` WHERE T2.`power_id` = ( SELECT `id` FROM superpower WHERE `power_name` = 'Death Touch' )
SELECT COUNT(DISTINCT T1.`hero_id`) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.`hero_id` = T2.`id` INNER JOIN gender AS T3 ON T2.`gender_id` = T3.`id` INNER JOIN attribute AS T4 ON T1.`attribute_id` = T4.`id` WHERE T3.`gender` = 'Female' AND T4.`attribute_name` = 'Strength' AND T1.`attribute_value` = 100
SELECT S.superhero_name FROM superhero AS S INNER JOIN ( SELECT hero_id, COUNT(power_id) AS power_count FROM hero_power GROUP BY hero_id ) AS power_counts ON S.id = power_counts.hero_id WHERE power_counts.power_count = ( SELECT MAX(power_count) FROM ( SELECT hero_id, COUNT(power_id) AS power_count FROM hero_power GROUP BY hero_id ) AS inner_power_counts )
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.`race_id` = T2.`id` WHERE T2.`race` = 'Vampire'
SELECT (CAST((SELECT COUNT(*) FROM superhero WHERE alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad')) AS REAL) / (SELECT COUNT(*) FROM superhero)) * 100 AS percentage_bad_superheroes, (SELECT COUNT(*) FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE S.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Bad') AND P.publisher_name = 'Marvel Comics') AS bad_marvel_superheroes
SELECT (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics') AS dc_count, (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics') AS marvel_count, ((SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics') - (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics')) AS difference
SELECT `id` FROM publisher WHERE `publisher_name` = 'Star Trek'
SELECT AVG(attribute_value) AS average_attribute_value FROM hero_attribute
SELECT COUNT(*) FROM superhero WHERE full_name IS NULL
SELECT T2.`colour` FROM colour AS T2 INNER JOIN superhero AS T1 ON T1.`eye_colour_id` = T2.`id` WHERE T1.`id` = 75
SELECT SP.`power_name` FROM hero_power AS HP INNER JOIN superpower AS SP ON HP.`power_id` = SP.`id` WHERE HP.`hero_id` = ( SELECT `id` FROM superhero WHERE `superhero_name` = 'Deathlok' )
SELECT AVG(`weight_kg`) FROM superhero WHERE `gender_id` = ( SELECT `id` FROM gender WHERE `gender` = 'Female' )
SELECT DISTINCT T3.`power_name` FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.`hero_id` = T2.`id` INNER JOIN superpower AS T3 ON T1.`power_id` = T3.`id` WHERE T2.`gender_id` = (SELECT `id` FROM gender WHERE `gender` = 'Male') LIMIT 5
SELECT T1.`superhero_name` FROM superhero AS T1 INNER JOIN race AS T2 ON T1.`race_id` = T2.`id` WHERE T2.`race` = 'Alien'
SELECT `superhero_name` FROM superhero WHERE `height_cm` BETWEEN 170 AND 190 AND `eye_colour_id` = 1
SELECT T1.`power_name` FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.`id` = T2.`power_id` WHERE T2.`hero_id` = 56
SELECT `full_name` FROM superhero WHERE `race_id` = (SELECT `id` FROM race WHERE `race` = 'Demi-God') LIMIT 5
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.`alignment_id` = T2.`id` WHERE T2.`alignment` = 'Bad'
SELECT T3.`race` FROM superhero AS T1 INNER JOIN race AS T3 ON T1.`race_id` = T3.`id` WHERE T1.`weight_kg` = 169
SELECT C.colour FROM superhero AS S INNER JOIN colour AS C ON S.hair_colour_id = C.id INNER JOIN race AS R ON S.race_id = R.id WHERE S.height_cm = 185 AND R.race = 'human' AND S.hair_colour_id IS NOT NULL
SELECT c.colour FROM superhero AS s INNER JOIN colour AS c ON s.eye_colour_id = c.id WHERE s.id = ( SELECT id FROM superhero WHERE weight_kg = ( SELECT MAX(weight_kg) FROM superhero ) )
SELECT (CAST(SUM(CASE WHEN publisher_id = 13 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_marvel FROM superhero WHERE height_cm BETWEEN 150 AND 180
SELECT full_name FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = 'Male') AND weight_kg > ( SELECT AVG(weight_kg) * 0.79 FROM superhero )
SELECT T2.`power_name` FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.`power_id` = T2.`id` GROUP BY T2.`power_name` HAVING COUNT(T1.`hero_id`) = ( SELECT MAX(power_count) FROM ( SELECT COUNT(T1.`hero_id`) AS power_count FROM hero_power AS T1 GROUP BY T1.`power_id` ) AS power_counts )
SELECT T1.`attribute_value` FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.`hero_id` = T2.`id` WHERE T2.`superhero_name` = 'Abomination'
SELECT T2.`power_name` FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.`power_id` = T2.`id` WHERE T1.`hero_id` = 1
SELECT COUNT(DISTINCT T1.`hero_id`) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.`power_id` = T2.`id` WHERE T2.`power_name` = 'stealth'
SELECT T3.`full_name` FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.`attribute_id` = T2.`id` INNER JOIN superhero AS T3 ON T1.`hero_id` = T3.`id` WHERE T2.`attribute_name` = 'Strength' AND T1.`attribute_value` = ( SELECT MAX(T1_sub.`attribute_value`) FROM hero_attribute AS T1_sub INNER JOIN attribute AS T2_sub ON T1_sub.`attribute_id` = T2_sub.`id` WHERE T2_sub.`attribute_name` = 'Strength' )
SELECT CAST((SELECT COUNT(*) FROM superhero WHERE skin_colour_id = 1) AS REAL) / (SELECT COUNT(*) FROM superhero) AS average_no_skin_colour
SELECT COUNT(*) FROM superhero WHERE `publisher_id` = ( SELECT `id` FROM publisher WHERE `publisher_name` = 'Dark Horse Comics' )
SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Durability') AND T3.attribute_value = ( SELECT MAX(T6.attribute_value) FROM hero_attribute AS T6 INNER JOIN superhero AS T4 ON T6.hero_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T5.publisher_name = 'Dark Horse Comics' AND T6.attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Durability') )
SELECT `colour` FROM colour WHERE `id` = ( SELECT `eye_colour_id` FROM superhero WHERE `full_name` = 'Abraham Sapien' )
SELECT T1.`superhero_name` FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.`id` = T2.`hero_id` WHERE T2.`power_id` = ( SELECT `id` FROM superpower WHERE `power_name` = 'Flight' )
SELECT T1.`eye_colour_id`, T1.`hair_colour_id`, T1.`skin_colour_id` FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.`gender_id` = T2.`id` INNER JOIN publisher AS T3 ON T1.`publisher_id` = T3.`id` WHERE T2.`gender` = 'Female' AND T3.`publisher_name` = 'Dark Horse Comics'
SELECT T1.`superhero_name`, T2.`publisher_name` FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` WHERE T1.`hair_colour_id` = T1.`skin_colour_id` AND T1.`hair_colour_id` = T1.`eye_colour_id`
SELECT T2.`race` FROM superhero AS T1 INNER JOIN race AS T2 ON T1.`race_id` = T2.`id` WHERE T1.`superhero_name` = 'A-Bomb'
SELECT (CAST(SUM(CASE WHEN T3.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_blue_female FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'
SELECT T1.`superhero_name`, T2.`race` FROM superhero AS T1 INNER JOIN race AS T2 ON T1.`race_id` = T2.`id` WHERE T1.`full_name` = 'Charles Chandler'
SELECT g.`gender` FROM superhero AS s INNER JOIN gender AS g ON s.`gender_id` = g.`id` WHERE s.`superhero_name` = 'Agent 13'
SELECT `superhero_name` FROM superhero WHERE `id` IN ( SELECT `hero_id` FROM hero_power WHERE `power_id` = ( SELECT `id` FROM superpower WHERE `power_name` = 'Adaptation' ) )
SELECT COUNT(*) FROM hero_power WHERE hero_id = ( SELECT id FROM superhero WHERE superhero_name = 'Amazo' )
SELECT T3.`power_name` FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.`id` = T2.`hero_id` INNER JOIN superpower AS T3 ON T2.`power_id` = T3.`id` WHERE T1.`full_name` = 'Hunter Zolomon'
SELECT `height_cm` FROM superhero WHERE `eye_colour_id` = ( SELECT `id` FROM colour WHERE `colour` = 'Amber' )
SELECT T1.`superhero_name` FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id` INNER JOIN colour AS T3 ON T1.`hair_colour_id` = T3.`id` WHERE T2.`colour` = 'Black' AND T3.`colour` = 'Black'
SELECT T3.`colour` FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.`skin_colour_id` = T2.`id` INNER JOIN colour AS T3 ON T1.`eye_colour_id` = T3.`id` WHERE T2.`colour` = 'Gold'
SELECT T1.`full_name` FROM superhero AS T1 INNER JOIN race AS T2 ON T1.`race_id` = T2.`id` WHERE T2.`race` = 'Vampire'
SELECT T1.`superhero_name` FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.`alignment_id` = T2.`id` WHERE T2.`alignment` = 'Neutral'
SELECT COUNT(T1.`hero_id`) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.`attribute_id` = T2.`id` WHERE T2.`attribute_name` = 'Strength' AND T1.`attribute_value` = ( SELECT MAX(T3.`attribute_value`) FROM hero_attribute AS T3 INNER JOIN attribute AS T4 ON T3.`attribute_id` = T4.`id` WHERE T4.`attribute_name` = 'Strength' )
SELECT T3.`race`, T4.`alignment` FROM superhero AS T1 INNER JOIN race AS T3 ON T1.`race_id` = T3.`id` INNER JOIN alignment AS T4 ON T1.`alignment_id` = T4.`id` WHERE T1.`superhero_name` = 'Cameron Hicks'
SELECT (CAST(SUM(CASE WHEN T1.gender_id = (SELECT id FROM gender WHERE gender = 'Female') THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS female_percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT AVG(`weight_kg`) FROM superhero WHERE `race_id` = ( SELECT `id` FROM race WHERE `race` = 'Alien' )
SELECT (SELECT SUM(T1.`weight_kg`) FROM superhero AS T1 WHERE T1.`full_name` = 'Emil Blonsky') - (SELECT SUM(T2.`weight_kg`) FROM superhero AS T2 WHERE T2.`full_name` = 'Charles Chandler') AS weight_difference
SELECT superhero_name, AVG(height_cm) AS average_height FROM superhero GROUP BY superhero_name
SELECT T2.`power_name` FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.`power_id` = T2.`id` WHERE T1.`hero_id` = ( SELECT `id` FROM superhero WHERE `superhero_name` = 'Abomination' )
SELECT COUNT(*) FROM superhero AS T1 WHERE T1.`race_id` = (SELECT `id` FROM race WHERE `race` = 'god/eternal') AND T1.`gender_id` = (SELECT `id` FROM gender WHERE `gender` = 'Male')
SELECT T3.`superhero_name` FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.`attribute_id` = T2.`id` INNER JOIN superhero AS T3 ON T1.`hero_id` = T3.`id` WHERE T2.`attribute_name` = 'Speed' AND T1.`attribute_value` = ( SELECT MAX(T1.`attribute_value`) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.`attribute_id` = T2.`id` WHERE T2.`attribute_name` = 'Speed' )
SELECT COUNT(*) FROM superhero WHERE `alignment_id` = ( SELECT `id` FROM alignment WHERE `alignment` = 'Neutral' )
SELECT T2.`attribute_name`, T1.`attribute_value` FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.`attribute_id` = T2.`id` WHERE T1.`hero_id` = ( SELECT `id` FROM superhero WHERE `superhero_name` = '3-D Man' )
SELECT T1.`superhero_name` FROM superhero AS T1 WHERE T1.`eye_colour_id` = (SELECT `id` FROM colour WHERE `colour` = 'Blue') AND T1.`hair_colour_id` = (SELECT `id` FROM colour WHERE `colour` = 'Brown')
SELECT T2.`publisher_name` FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` WHERE T1.`superhero_name` = 'Hawkman' UNION SELECT T2.`publisher_name` FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` WHERE T1.`superhero_name` = 'Karate Kid' UNION SELECT T2.`publisher_name` FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` WHERE T1.`superhero_name` = 'Speedy'
SELECT COUNT(*) FROM superhero WHERE publisher_id IS NULL
SELECT (CAST(SUM(CASE WHEN `eye_colour_id` = 7 THEN 1 ELSE 0 END) AS REAL) / COUNT(`superhero_name`)) * 100.0 AS percentage_blue_eyes FROM superhero
SELECT (SELECT COUNT(*) FROM superhero WHERE gender_id = 1) * 1.0 / (SELECT COUNT(*) FROM superhero WHERE gender_id = 2) AS gender_ratio
SELECT superhero_name FROM superhero WHERE height_cm = ( SELECT MAX(height_cm) FROM superhero )
SELECT id FROM superpower WHERE power_name = 'cryokinesis';
SELECT `superhero_name` FROM superhero WHERE `id` = 294
SELECT T1.`full_name` FROM superhero AS T1 WHERE (T1.`weight_kg` = 0 OR T1.`weight_kg` IS NULL) AND T1.`full_name` IS NOT NULL;
SELECT C.`colour` FROM superhero AS S INNER JOIN colour AS C ON S.`eye_colour_id` = C.`id` WHERE S.`full_name` = 'Karen Beecher-Duncan'
SELECT T2.`power_name` FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.`power_id` = T2.`id` WHERE T1.`hero_id` = ( SELECT `id` FROM superhero WHERE `full_name` = 'Helen Parr' )
SELECT T2.`race` FROM superhero AS T1 INNER JOIN race AS T2 ON T1.`race_id` = T2.`id` WHERE T1.`weight_kg` = 108 AND T1.`height_cm` = 188
SELECT T2.`publisher_name` FROM publisher AS T2 INNER JOIN superhero AS T1 ON T1.`publisher_id` = T2.`id` WHERE T1.`id` = 38
SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )
SELECT T2.`alignment`, GROUP_CONCAT(T3.`power_name`) AS superpowers FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.`alignment_id` = T2.`id` LEFT JOIN hero_power AS T4 ON T1.`id` = T4.`hero_id` LEFT JOIN superpower AS T3 ON T4.`power_id` = T3.`id` WHERE T1.`superhero_name` = 'Atom IV' GROUP BY T2.`alignment`
SELECT DISTINCT T1.`full_name` FROM superhero AS T1 JOIN colour AS C ON T1.`eye_colour_id` = C.`id` WHERE C.`colour` = 'Blue' AND T1.`full_name` IS NOT NULL LIMIT 5
SELECT AVG(T3.`attribute_value`) FROM hero_attribute AS T3 WHERE T3.`hero_id` IN ( SELECT T1.`id` FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.`alignment_id` = T2.`id` WHERE T2.`alignment` = 'Neutral' )
SELECT T3.`colour` FROM superhero AS T2 INNER JOIN colour AS T3 ON T2.`skin_colour_id` = T3.`id` WHERE T2.`id` IN ( SELECT T1.`hero_id` FROM hero_attribute AS T1 WHERE T1.`attribute_value` = 100 )
SELECT COUNT(*) FROM superhero WHERE `alignment_id` = 1 AND `gender_id` = 2
SELECT T2.`superhero_name` FROM superhero AS T2 WHERE T2.`id` IN ( SELECT T1.`hero_id` FROM hero_attribute AS T1 WHERE T1.`attribute_value` BETWEEN 75 AND 80 )
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T3 ON T1.`hair_colour_id` = T3.`id` INNER JOIN gender AS T4 ON T1.`gender_id` = T4.`id` WHERE T3.`colour` = 'blue' AND T4.`gender` = 'Male'
SELECT (CAST((SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad' AND T3.gender = 'Female') AS REAL) / (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad')) * 100.0 AS female_percentage
SELECT (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE (T1.weight_kg = 0 OR T1.weight_kg IS NULL) AND T2.id = 7) - (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE (T1.weight_kg = 0 OR T1.weight_kg IS NULL) AND T2.id = 1) AS eye_color_difference
SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T1.hero_id = ( SELECT id FROM superhero WHERE superhero_name = 'Hulk' ) AND T2.attribute_name = 'Strength'
SELECT T2.`power_name` FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.`power_id` = T2.`id` WHERE T1.`hero_id` = ( SELECT `id` FROM superhero WHERE `superhero_name` = 'Ajax' )
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.`skin_colour_id` = T2.`id` INNER JOIN alignment AS T3 ON T1.`alignment_id` = T3.`id` WHERE T2.`colour` = 'Green' AND T3.`alignment` = 'Bad'
SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.`gender_id` = T2.`id` INNER JOIN publisher AS T3 ON T1.`publisher_id` = T3.`id` WHERE T2.`gender` = 'Female' AND T3.`publisher_name` = 'Marvel Comics'
SELECT T3.`superhero_name` FROM superhero AS T3 WHERE T3.`id` IN ( SELECT T1.`hero_id` FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.`power_id` = T2.`id` WHERE T2.`power_name` = 'Wind Control' ) ORDER BY T3.`superhero_name` ASC
SELECT G.gender FROM superhero AS S INNER JOIN hero_power AS HP ON S.id = HP.hero_id INNER JOIN superpower AS SP ON HP.power_id = SP.id INNER JOIN gender AS G ON S.gender_id = G.id WHERE SP.power_name = 'Phoenix Force'
SELECT T1.`superhero_name` FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` WHERE T2.`publisher_name` = 'DC Comics' AND T1.`weight_kg` = ( SELECT MAX(T3.`weight_kg`) FROM superhero AS T3 INNER JOIN publisher AS T4 ON T3.`publisher_id` = T4.`id` WHERE T4.`publisher_name` = 'DC Comics' )
SELECT AVG(`height_cm`) FROM superhero WHERE `race_id` <> ( SELECT `id` FROM race WHERE `race` = 'Human' ) AND `publisher_id` = ( SELECT `id` FROM publisher WHERE `publisher_name` = 'Dark Horse Comics' )
SELECT COUNT(DISTINCT T1.`hero_id`) FROM hero_attribute AS T1 WHERE T1.`attribute_id` = ( SELECT `id` FROM attribute WHERE `attribute_name` = 'Speed' ) AND T1.`attribute_value` = 100
SELECT (SELECT COUNT(*) FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name = 'DC Comics') AS dc_count, (SELECT COUNT(*) FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name = 'Marvel Comics') AS marvel_count, ((SELECT COUNT(*) FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name = 'DC Comics') - (SELECT COUNT(*) FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id WHERE P.publisher_name = 'Marvel Comics')) AS difference
SELECT T1.`attribute_name` FROM hero_attribute AS T2 INNER JOIN attribute AS T1 ON T2.`attribute_id` = T1.`id` WHERE T2.`hero_id` = ( SELECT `id` FROM superhero WHERE `superhero_name` = 'Black Panther' ) ORDER BY T2.`attribute_value` ASC LIMIT 1
SELECT T2.`colour` FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id` WHERE T1.`superhero_name` = 'Abomination'
SELECT superhero_name FROM superhero WHERE height_cm = ( SELECT MAX(height_cm) FROM superhero )
SELECT T1.`superhero_name` FROM superhero AS T1 WHERE T1.`full_name` = 'Charles Chandler'
SELECT (CAST(SUM(CASE WHEN T1.`gender_id` = (SELECT `id` FROM gender WHERE `gender` = 'Female') THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS female_percentage FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` WHERE T2.`publisher_name` = 'George Lucas'
SELECT (CAST(SUM(CASE WHEN T1.alignment_id = (SELECT id FROM alignment WHERE alignment = 'Good') THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100.0 AS percentage_good_superheroes FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'
SELECT COUNT(*) FROM superhero WHERE full_name LIKE 'John%'
SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )
SELECT `full_name` FROM superhero WHERE `superhero_name` = 'Alien'
SELECT T1.`full_name` FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id` WHERE T1.`weight_kg` < 100 AND T2.`colour` = 'Brown' AND T1.`full_name` IS NOT NULL
SELECT T1.`attribute_value` FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.`hero_id` = T2.`id` WHERE T2.`superhero_name` = 'Aquababy'
SELECT T1.`weight_kg`, T2.`race` FROM superhero AS T1 INNER JOIN race AS T2 ON T1.`race_id` = T2.`id` WHERE T1.`id` = 40
SELECT AVG(height_cm) AS average_height FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Neutral' )
SELECT T1.`hero_id` FROM hero_attribute AS T1 WHERE T1.`attribute_id` = ( SELECT `id` FROM attribute WHERE `attribute_name` = 'Intelligence' )
SELECT T2.`colour` FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id` WHERE T1.`superhero_name` = 'Blackwulf'
SELECT SP.power_name FROM superhero AS SH INNER JOIN hero_power AS HP ON SH.id = HP.hero_id INNER JOIN superpower AS SP ON HP.power_id = SP.id WHERE SH.height_cm > (SELECT AVG(height_cm) * 0.8 FROM superhero)
SELECT T3.`driverRef` FROM drivers AS T3 WHERE T3.`driverId` IN ( SELECT T1.`driverId` FROM qualifying AS T1 WHERE T1.`raceId` = 18 AND T1.`q1` IS NOT NULL AND T1.`q1` = ( SELECT MAX(T2.`q1`) FROM qualifying AS T2 WHERE T2.`raceId` = 18 ) )
SELECT T1.surname FROM drivers AS T1 WHERE T1.driverId = ( SELECT driverId FROM qualifying WHERE raceId = 19 AND q2 = ( SELECT MIN(q2) FROM qualifying WHERE raceId = 19 ) )
SELECT DISTINCT `year` FROM races WHERE `circuitId` IN ( SELECT `circuitId` FROM circuits WHERE `location` = 'Shanghai' )
SELECT `url` FROM races WHERE `circuitId` = ( SELECT `circuitId` FROM circuits WHERE `name` = 'Circuit de Barcelona-Catalunya' )
SELECT T2.`name` FROM races AS T1 INNER JOIN circuits AS T2 ON T1.`circuitId` = T2.`circuitId` WHERE T2.`country` = 'Germany'
SELECT DISTINCT r.position FROM results AS r WHERE r.raceId IN ( SELECT raceId FROM constructorResults WHERE constructorId = ( SELECT constructorId FROM constructors WHERE name = 'Renault' ) )
SELECT COUNT(*) FROM races AS T1 WHERE T1.`year` = 2010 AND T1.`circuitId` IN ( SELECT DISTINCT T1.`circuitId` FROM circuits AS T1 WHERE T1.`country` NOT IN ('Japan', 'China', 'Malaysia', 'Singapore', 'India', 'South Korea', 'France', 'Germany', 'Italy', 'Spain', 'UK', 'Belgium', 'Netherlands', 'Austria', 'Switzerland', 'Portugal', 'Monaco') )
SELECT T1.`name` FROM races AS T1 INNER JOIN circuits AS T2 ON T1.`circuitId` = T2.`circuitId` WHERE T2.`country` = 'Spain'
SELECT c.lat, c.lng FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.name = 'Australian Grand Prix'
SELECT `url` FROM races WHERE `circuitId` = ( SELECT `circuitId` FROM circuits WHERE `circuitRef` = 'sepang' )
SELECT T1.`date` FROM races AS T1 INNER JOIN circuits AS T2 ON T1.`circuitId` = T2.`circuitId` WHERE T2.`circuitRef` = 'sepang'
SELECT `lat`, `lng` FROM circuits WHERE `circuitRef` = 'yas_marina'
SELECT T2.nationality FROM constructors AS T2 WHERE T2.constructorId = ( SELECT constructorId FROM results WHERE raceId = 24 AND points = 1 )
SELECT q1 FROM qualifying WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna' ) AND raceId = 354
SELECT T2.nationality FROM drivers AS T2 JOIN qualifying AS T1 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 = '1:40.000'
SELECT number FROM drivers WHERE driverId = ( SELECT driverId FROM qualifying WHERE raceId = 903 AND position = 3 )
SELECT COUNT(*) FROM results AS R INNER JOIN status AS S ON R.`statusId` = S.`statusId` WHERE R.`raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2007 AND `name` = 'Bahrain Grand Prix' ) AND S.`status` = 'Withdrew'
SELECT * FROM seasons WHERE `year` = ( SELECT `year` FROM races WHERE `raceId` = 901 )
SELECT COUNT(DISTINCT `driverId`) AS finished_drivers FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `date` = '2015-11-29' ) AND `time` IS NOT NULL
SELECT T2.`forename`, T2.`surname`, T2.`dob` FROM drivers AS T2 WHERE T2.`driverId` = ( SELECT T2.`driverId` FROM drivers AS T2 WHERE T2.`driverId` IN ( SELECT T1.`driverId` FROM results AS T1 WHERE T1.`raceId` = 592 AND T1.`time` IS NOT NULL ) ORDER BY T2.`dob` ASC LIMIT 1 )
SELECT d.url FROM drivers AS d JOIN lapTimes AS lt ON d.driverId = lt.driverId WHERE lt.raceId = 161 AND lt.time = '0:01:27'
SELECT T1.nationality FROM drivers AS T1 WHERE T1.driverId = ( SELECT driverId FROM results WHERE raceId = 933 AND fastestLapSpeed = ( SELECT MAX(fastestLapSpeed) FROM results WHERE raceId = 933 ) )
SELECT `lat`, `lng` FROM circuits WHERE `circuitId` = ( SELECT `circuitId` FROM races WHERE `name` = 'Malaysian Grand Prix' )
SELECT T2.`url` FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` = 9 ORDER BY T1.`points` DESC LIMIT 1
SELECT q1 FROM qualifying WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi' ) AND raceId = 345
SELECT D.nationality FROM drivers AS D JOIN qualifying AS Q ON D.driverId = Q.driverId WHERE Q.raceId = 347 AND Q.q2 = '0:01:15'
SELECT T2.`code` FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` = 45 AND T1.`q3` = '1:33.000'
SELECT time FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Bruce' AND surname = 'McLaren' ) AND raceId = 743
SELECT CONCAT(T1.`forename`, ' ', T1.`surname`) AS driver_name FROM drivers AS T1 WHERE T1.`driverId` = ( SELECT `driverId` FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `name` = 'San Marino Grand Prix' AND `year` = 2006 ) AND `position` = 2 )
SELECT * FROM seasons WHERE `year` = ( SELECT `year` FROM races WHERE `raceId` = 901 )
SELECT COUNT(*) FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `date` = '2015-11-29' ) AND `position` != 'R'
SELECT T2.driverId FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 AND T1.time IS NOT NULL ORDER BY T2.dob DESC LIMIT 1
SELECT CONCAT(`forename`, ' ', `surname`) AS full_name FROM drivers WHERE `driverId` = ( SELECT `driverId` FROM lapTimes WHERE `raceId` = 348 AND `time` = ( SELECT MIN(`time`) FROM lapTimes WHERE `raceId` = 348 ) )
SELECT nationality FROM drivers WHERE driverId = ( SELECT driverId FROM results WHERE fastestLapSpeed = ( SELECT MAX(fastestLapSpeed) FROM results WHERE fastestLapSpeed IS NOT NULL ) )
SELECT (SELECT `fastestLapSpeed` FROM results WHERE `raceId` = 853 AND `driverId` = (SELECT `driverId` FROM drivers WHERE `forename` = 'Paul' AND `surname` = 'di Resta')) AS `lapSpeed853`, (SELECT `fastestLapSpeed` FROM results WHERE `raceId` = 854 AND `driverId` = (SELECT `driverId` FROM drivers WHERE `forename` = 'Paul' AND `surname` = 'di Resta')) AS `lapSpeed854`, ((SELECT `fastestLapSpeed` FROM results WHERE `raceId` = 853 AND `driverId` = (SELECT `driverId` FROM drivers WHERE `forename` = 'Paul' AND `surname` = 'di Resta')) - (SELECT `fastestLapSpeed` FROM results WHERE `raceId` = 854 AND `driverId` = (SELECT `driverId` FROM drivers WHERE `forename` = 'Paul' AND `surname` = 'di Resta'))) / (SELECT `fastestLapSpeed` FROM results WHERE `raceId` = 854 AND `driverId` = (SELECT `driverId` FROM drivers WHERE `forename` = 'Paul' AND `surname` = 'di Resta')) * 100 AS `percentageFaster`
SELECT (COUNT(CASE WHEN `time` IS NOT NULL THEN 1 END) * 100.0 / COUNT(*)) AS completion_rate FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `date` = '1983-07-16' )
SELECT MIN(r.year) AS first_year FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.circuitRef = 'singapore' AND r.year IS NOT NULL GROUP BY c.circuitRef
SELECT name FROM races WHERE year = 2005 ORDER BY raceId DESC
WITH FirstRace AS ( SELECT MIN(`date`) AS first_race_date FROM races WHERE `date` IS NOT NULL ) SELECT `name`, `date` FROM races WHERE `date` IS NOT NULL AND strftime('%Y', `date`) = (SELECT strftime('%Y', first_race_date) FROM FirstRace) AND strftime('%m', `date`) = (SELECT strftime('%m', first_race_date) FROM FirstRace) AND `date` != (SELECT first_race_date FROM FirstRace)
SELECT name, date FROM races WHERE year = 1999 AND round = ( SELECT MAX(round) FROM races WHERE year = 1999 )
SELECT year FROM ( SELECT year, COUNT(raceId) AS race_count FROM races GROUP BY year ) AS race_counts ORDER BY race_count DESC LIMIT 1
SELECT `name` FROM races WHERE `year` = 2017 AND `raceId` NOT IN ( SELECT `raceId` FROM races WHERE `year` = 2000 )
SELECT T1.circuitRef, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.year = ( SELECT MIN(year) FROM races WHERE name LIKE '%European Grand Prix%' )
SELECT MAX(T1.`year`) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.`circuitId` = T2.`circuitId` WHERE T1.`name` = 'British Grand Prix' AND T2.`circuitRef` = 'brands_hatch'
SELECT COUNT(DISTINCT T1.`year`) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.`circuitId` = T2.`circuitId` WHERE T2.`circuitRef` = 'silverstone' AND T1.`name` = 'British Grand Prix'
SELECT T2.`forename`, T2.`surname` FROM results AS T1 INNER JOIN drivers AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2010 AND `name` = 'Singapore Grand Prix' ) ORDER BY T1.`position`
SELECT CONCAT(T1.forename, ' ', T1.surname) AS full_name FROM drivers AS T1 WHERE T1.driverId IN ( SELECT driverId FROM driverStandings WHERE points = ( SELECT MAX(points) FROM driverStandings ) )
SELECT T3.`forename`, T3.`surname`, T2.`points` FROM driverStandings AS T1 INNER JOIN results AS T2 ON T1.`driverId` = T2.`driverId` INNER JOIN drivers AS T3 ON T1.`driverId` = T3.`driverId` WHERE T2.`raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2017 AND `name` = 'Chinese Grand Prix' ) ORDER BY T1.`position` ASC LIMIT 3
SELECT D.forename, D.surname, R.name AS race_name, MIN(LT.time) AS best_lap_time FROM lapTimes AS LT INNER JOIN drivers AS D ON LT.driverId = D.driverId INNER JOIN races AS R ON LT.raceId = R.raceId WHERE LT.time IS NOT NULL GROUP BY D.driverId, R.raceId ORDER BY best_lap_time ASC LIMIT 1;
SELECT AVG(`time`) FROM lapTimes WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2009 AND `name` = 'Chinese Grand Prix' ) AND `driverId` = ( SELECT `driverId` FROM drivers WHERE `forename` = 'Sebastian' AND `surname` = 'Vettel' )
SELECT (CAST(COUNT(T1.`raceId`) AS REAL) / (SELECT COUNT(T2.`raceId`) FROM results AS T2 INNER JOIN drivers AS T3 ON T2.`driverId` = T3.`driverId` INNER JOIN races AS T4 ON T2.`raceId` = T4.`raceId` WHERE T3.`surname` = 'Hamilton' AND T4.`year` >= 2010)) * 100 AS percentage FROM results AS T1 INNER JOIN drivers AS T2 ON T1.`driverId` = T2.`driverId` INNER JOIN races AS T3 ON T1.`raceId` = T3.`raceId` WHERE T2.`surname` = 'Hamilton' AND T3.`year` >= 2010 AND T1.`position` > 1
WITH MostWinningDriver AS ( SELECT T1.`driverId`, COUNT(T1.`wins`) AS win_count FROM driverStandings AS T1 GROUP BY T1.`driverId` ORDER BY win_count DESC LIMIT 1 ) SELECT T3.`forename`, T3.`surname`, T3.`nationality`, AVG(T2.`points`) AS average_points FROM MostWinningDriver AS T1 JOIN drivers AS T3 ON T1.`driverId` = T3.`driverId` JOIN driverStandings AS T2 ON T1.`driverId` = T2.`driverId` GROUP BY T3.`driverId`
SELECT T1.`forename`, T1.`surname`, (2022 - strftime('%Y', T1.`dob`) + 1) AS age FROM drivers AS T1 WHERE T1.`dob` = ( SELECT MAX(T2.`dob`) FROM drivers AS T2 WHERE T2.`nationality` = 'Japanese' )
SELECT T1.`circuitRef`, T1.`name` FROM circuits AS T1 INNER JOIN ( SELECT `circuitId` FROM ( SELECT `circuitId`, COUNT(*) AS race_count FROM races WHERE `year` BETWEEN 1990 AND 2000 GROUP BY `circuitId` ) AS race_counts WHERE race_count = 4 ) AS T2 ON T1.`circuitId` = T2.`circuitId`
SELECT T1.`name`, T1.`location`, T2.`name` AS race_name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.`circuitId` = T2.`circuitId` WHERE T1.`country` = 'USA' AND T2.`year` = 2006
SELECT T1.`name` AS race_name, T2.`circuitRef`, T2.`location` FROM races AS T1 INNER JOIN circuits AS T2 ON T1.`circuitId` = T2.`circuitId` WHERE strftime('%Y', T1.`date`) = '2005' AND strftime('%m', T1.`date`) = '09'
SELECT T3.`name`, T3.`year`, T3.`round` FROM results AS T1 INNER JOIN drivers AS T2 ON T1.`driverId` = T2.`driverId` INNER JOIN races AS T3 ON T1.`raceId` = T3.`raceId` WHERE T2.`forename` = 'Alex' AND T2.`surname` = 'Yoong' AND T1.`position` < 10
SELECT COUNT(*) FROM results WHERE `driverId` = ( SELECT `driverId` FROM drivers WHERE `forename` = 'Michael' AND `surname` = 'Schumacher' ) AND `raceId` IN ( SELECT `raceId` FROM races WHERE `circuitId` = ( SELECT `circuitId` FROM circuits WHERE `circuitRef` = 'sepang' ) ) AND `points` = ( SELECT MAX(`points`) FROM results WHERE `raceId` IN ( SELECT `raceId` FROM races WHERE `circuitId` = ( SELECT `circuitId` FROM circuits WHERE `circuitRef` = 'sepang' ) ) )
SELECT T2.name, T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.raceId = ( SELECT T1.raceId FROM results AS T1 WHERE T1.driverId = ( SELECT driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher' ) AND T1.fastestLap IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1 )
SELECT AVG(`points`) FROM driverStandings WHERE `driverId` = ( SELECT `driverId` FROM drivers WHERE `forename` = 'Eddie' AND `surname` = 'Irvine' ) AND `raceId` IN ( SELECT `raceId` FROM races WHERE `year` = 2000 )
SELECT T2.`points` FROM driverStandings AS T2 INNER JOIN races AS T1 ON T2.`raceId` = T1.`raceId` INNER JOIN drivers AS T3 ON T2.`driverId` = T3.`driverId` WHERE T3.`forename` = 'Lewis' AND T3.`surname` = 'Hamilton' AND T1.`raceId` = ( SELECT T4.`raceId` FROM races AS T4 INNER JOIN driverStandings AS T5 ON T4.`raceId` = T5.`raceId` INNER JOIN drivers AS T6 ON T5.`driverId` = T6.`driverId` WHERE T6.`forename` = 'Lewis' AND T6.`surname` = 'Hamilton' AND T4.`year` = ( SELECT MIN(T7.`year`) FROM races AS T7 INNER JOIN driverStandings AS T8 ON T7.`raceId` = T8.`raceId` INNER JOIN drivers AS T9 ON T8.`driverId` = T9.`driverId` WHERE T9.`forename` = 'Lewis' AND T9.`surname` = 'Hamilton' ) )
SELECT T1.`date`, T2.`country` FROM races AS T1 INNER JOIN circuits AS T2 ON T1.`circuitId` = T2.`circuitId` WHERE T1.`year` = 2017 ORDER BY T1.`date`
SELECT r.name, r.year, c.location FROM results AS res INNER JOIN races AS r ON res.raceId = r.raceId INNER JOIN circuits AS c ON r.circuitId = c.circuitId WHERE res.laps = ( SELECT MAX(laps) FROM results )
SELECT (CAST(COUNT(CASE WHEN circuitId IN ( SELECT circuitId FROM circuits WHERE country = 'Germany' ) THEN 1 END) AS REAL) / COUNT(*)) * 100 AS percentage FROM races WHERE name = 'European Grand Prix'
SELECT `lat`, `lng` FROM circuits WHERE `circuitRef` = 'silverstone'
SELECT `name` FROM circuits WHERE `lat` = ( SELECT MAX(lat) AS max_latitude FROM ( SELECT `lat` FROM circuits WHERE `name` = 'Silverstone Circuit' UNION ALL SELECT `lat` FROM circuits WHERE `name` = 'Hockenheimring' UNION ALL SELECT `lat` FROM circuits WHERE `name` = 'Hungaroring' ) AS latitudes )
SELECT `circuitRef` FROM circuits WHERE `name` = 'Marina Bay Street Circuit'
SELECT country FROM circuits WHERE alt = ( SELECT MAX(alt) FROM circuits WHERE alt IS NOT NULL )
SELECT COUNT(*) FROM drivers WHERE `driverRef` IS NULL
SELECT T1.`nationality` FROM drivers AS T1 WHERE T1.`driverId` = ( SELECT T2.`driverId` FROM drivers AS T2 WHERE T2.`dob` = ( SELECT MIN(T3.`dob`) FROM drivers AS T3 WHERE T3.`dob` IS NOT NULL ) )
SELECT `surname` FROM drivers WHERE `nationality` = 'Italian'
SELECT `url` FROM drivers WHERE `forename` = 'Anthony' AND `surname` = 'Davidson'
SELECT `driverRef` FROM drivers WHERE `forename` = 'Lewis' AND `surname` = 'Hamilton'
SELECT T1.`circuitRef`, T1.`location` FROM circuits AS T1 INNER JOIN races AS T2 ON T1.`circuitId` = T2.`circuitId` WHERE T2.`year` = 2009 AND T2.`name` = 'Spanish Grand Prix'
SELECT DISTINCT `year` FROM races WHERE `circuitId` = ( SELECT `circuitId` FROM circuits WHERE `circuitRef` = 'silverstone' )
SELECT * FROM races WHERE `circuitId` = ( SELECT `circuitId` FROM circuits WHERE `circuitRef` = 'silverstone' )
SELECT `date` FROM races WHERE `circuitId` = ( SELECT `circuitId` FROM circuits WHERE `circuitRef` = 'yas_marina' ) AND `year` BETWEEN 2010 AND 2019
SELECT COUNT(*) FROM races WHERE `circuitId` IN ( SELECT `circuitId` FROM circuits WHERE `country` = 'Italy' )
SELECT r.date FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.circuitRef = 'barcelona-catalunya';
SELECT `url` FROM circuits WHERE `circuitId` = ( SELECT `circuitId` FROM races WHERE `year` = 2009 AND `name` = 'Spanish Grand Prix' )
SELECT MIN(`fastestLapTime`) FROM results WHERE `driverId` = ( SELECT `driverId` FROM drivers WHERE `forename` = 'Lewis' AND `surname` = 'Hamilton' )
SELECT T1.forename, T1.surname FROM drivers AS T1 WHERE T1.driverId IN ( SELECT driverId FROM results WHERE fastestLapSpeed = ( SELECT MAX(fastestLapSpeed) FROM results WHERE fastestLapSpeed IS NOT NULL ) )
SELECT `driverRef` FROM drivers WHERE `driverId` = ( SELECT `driverId` FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2008 AND `name` = 'Australian Grand Prix' ) AND `position` = 1 )
SELECT T3.name, T2.date FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T1.driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )
SELECT T2.name, T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.rank = ( SELECT MIN(rank) FROM results WHERE driverId = T3.driverId )
SELECT MAX(`fastestLapSpeed`) FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2009 AND `name` = 'Spanish Grand Prix' )
SELECT DISTINCT T2.year FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T2.year ASC
SELECT `positionOrder` FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2008 AND `name` = 'Australian Grand Prix' ) AND `driverId` = ( SELECT `driverId` FROM drivers WHERE `forename` = 'Lewis' AND `surname` = 'Hamilton' )
SELECT `forename`, `surname` FROM drivers WHERE `driverId` = ( SELECT `driverId` FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2008 AND `name` = 'Australian Grand Prix' ) AND `grid` = 4 )
SELECT COUNT(*) FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2008 AND `name` = 'Australian Grand Prix' ) AND `time` IS NOT NULL
SELECT MIN(T1.`fastestLapTime`) AS `fastestLap` FROM results AS T1 INNER JOIN races AS T2 ON T1.`raceId` = T2.`raceId` INNER JOIN drivers AS T3 ON T1.`driverId` = T3.`driverId` WHERE T2.`year` = 2008 AND T2.`name` = 'Australian Grand Prix' AND T3.`forename` = 'Lewis' AND T3.`surname` = 'Hamilton'
SELECT `time` FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2008 AND `name` = 'Australian Grand Prix' ) AND `driverId` = ( SELECT `driverId` FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2008 AND `name` = 'Australian Grand Prix' ) AND `position` = 2 )
SELECT D.forename, D.surname, D.url FROM results AS R JOIN drivers AS D ON R.driverId = D.driverId WHERE R.raceId = ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' ) AND R.position = 1
SELECT COUNT(DISTINCT T1.`driverId`) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2008 AND `name` = 'Australian Grand Prix' ) AND T2.`nationality` = 'American'
SELECT COUNT(DISTINCT `driverId`) FROM results WHERE `driverId` IN ( SELECT `driverId` FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2008 AND `name` = 'Australian Grand Prix' ) AND `time` IS NOT NULL )
SELECT SUM(points) AS total_points FROM driverStandings WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )
SELECT AVG( CAST(SUBSTR(fastestLapTime, 1, INSTR(fastestLapTime, ':') - 1) AS REAL) * 60 + CAST(SUBSTR(fastestLapTime, INSTR(fastestLapTime, ':') + 1) AS REAL) ) AS average_fastest_lap_time_seconds FROM results WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) AND fastestLapTime IS NOT NULL
SELECT CAST(COUNT(DISTINCT T1.driverId) AS REAL) / (SELECT COUNT(DISTINCT T2.driverId) FROM results AS T2 INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix') AS completion_rate FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL
SELECT (CAST((SELECT T1.`time` FROM results AS T1 INNER JOIN races AS T2 ON T1.`raceId` = T2.`raceId` WHERE T2.`year` = 2008 AND T2.`name` = 'Australian Grand Prix' AND T1.`position` = 1 AND T1.`time` IS NOT NULL) AS REAL) - CAST((SELECT T1.`time` FROM results AS T1 INNER JOIN races AS T2 ON T1.`raceId` = T2.`raceId` WHERE T2.`year` = 2008 AND T2.`name` = 'Australian Grand Prix' AND T1.`time` IS NOT NULL ORDER BY T1.`position` DESC LIMIT 1) AS REAL)) / CAST((SELECT T1.`time` FROM results AS T1 INNER JOIN races AS T2 ON T1.`raceId` = T2.`raceId` WHERE T2.`year` = 2008 AND T2.`name` = 'Australian Grand Prix' AND T1.`time` IS NOT NULL ORDER BY T1.`position` DESC LIMIT 1) AS REAL) * 100 AS percentage_difference
SELECT COUNT(*) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia';
SELECT `lat`, `lng` FROM circuits WHERE `country` = 'USA'
SELECT COUNT(*) FROM drivers WHERE `nationality` = 'British' AND `dob` > '1980-01-01'
SELECT AVG(T2.points) AS average_points FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'British'
SELECT T1.constructorId, T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.points = ( SELECT MAX(points) FROM constructorStandings )
SELECT T2.`name` FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` = 291 AND T1.`points` = 0
SELECT COUNT(*) FROM ( SELECT T1.constructorId FROM constructors AS T1 LEFT JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId AND T2.points = 0 WHERE T1.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(T2.raceId) = 2 ) AS subquery
SELECT DISTINCT T2.`name` FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`position` = 1
SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'French' AND T1.laps > 50
SELECT (SELECT COUNT(DISTINCT T1.`driverId`) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.`driverId` = T2.`driverId` INNER JOIN races AS T3 ON T1.`raceId` = T3.`raceId` WHERE T2.`nationality` = 'Japanese' AND T3.`year` BETWEEN 2007 AND 2009 AND T1.`time` IS NOT NULL) * 100.0 / (SELECT COUNT(DISTINCT T1.`driverId`) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.`driverId` = T2.`driverId` INNER JOIN races AS T3 ON T1.`raceId` = T3.`raceId` WHERE T2.`nationality` = 'Japanese' AND T3.`year` BETWEEN 2007 AND 2009) AS completion_percentage
SELECT T1.year, AVG( CAST(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) AS INTEGER) * 3600 + CAST(SUBSTR(T2.time, INSTR(T2.time, ':') + 1, INSTR(T2.time, ':', INSTR(T2.time, ':') + 1) - INSTR(T2.time, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, INSTR(T2.time, ':', INSTR(T2.time, ':') + 1) + 1, 3) AS INTEGER) ) AS average_time_seconds FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.position = 1 AND T2.time IS NOT NULL GROUP BY T1.year
SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN ( SELECT driverId FROM driverStandings WHERE position = 2 ) AS T2 ON T1.driverId = T2.driverId WHERE T1.dob > '1975-01-01'
SELECT COUNT(DISTINCT T1.driverId) AS ItalianDriversNotFinished FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL
SELECT T2.forename, T2.surname FROM drivers AS T2 WHERE T2.driverId = ( SELECT T1.driverId FROM lapTimes AS T1 WHERE T1.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes WHERE milliseconds IS NOT NULL ) )
SELECT T2.lap FROM lapTimes AS T2 INNER JOIN ( SELECT T3.driverId FROM driverStandings AS T3 INNER JOIN races AS T4 ON T3.raceId = T4.raceId WHERE T4.year = 2009 AND T3.position = 1 ) AS T1 ON T2.driverId = T1.driverId WHERE T2.time IS NOT NULL ORDER BY T2.time ASC LIMIT 1
SELECT AVG(`fastestLapSpeed`) FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2009 AND `name` = 'Spanish Grand Prix' )
SELECT T2.`name`, T2.`year` FROM races AS T2 WHERE T2.`raceId` = ( SELECT T1.`raceId` FROM results AS T1 WHERE T1.`milliseconds` = ( SELECT MIN(milliseconds) FROM results WHERE milliseconds IS NOT NULL ) )
SELECT (SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.dob < '1985-01-01' AND T3.year BETWEEN 2000 AND 2005 AND T2.lap > 50) * 100.0 / (SELECT COUNT(DISTINCT T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year BETWEEN 2000 AND 2005) AS percentage
SELECT COUNT(DISTINCT T1.`driverId`) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.`driverId` = T2.`driverId` WHERE T2.`nationality` = 'French' AND CAST(SUBSTR(T1.`time`, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T1.`time`, 4, 2) AS INTEGER) < 120
SELECT `code` FROM `drivers` WHERE `nationality` = 'American' AND `nationality` IS NOT NULL
SELECT `raceId` FROM races WHERE `year` = 2009
SELECT COUNT(DISTINCT driverId) AS driver_count FROM results WHERE raceId = 18
SELECT COUNT(*) FROM ( SELECT T1.`driverId` FROM drivers AS T1 WHERE T1.`dob` IS NOT NULL ORDER BY T1.`dob` DESC LIMIT 3 ) AS YoungestDrivers WHERE YoungestDrivers.`driverId` IN ( SELECT T2.`driverId` FROM drivers AS T2 WHERE T2.`nationality` = 'Dutch' )
SELECT `driverRef` FROM drivers WHERE `forename` = 'Robert' AND `surname` = 'Kubica'
SELECT COUNT(*) FROM drivers WHERE `nationality` = 'Australian' AND strftime('%Y', `dob`) = '1980'
SELECT T2.driverId, T2.forename, T2.surname, MIN(T1.milliseconds) AS earliest_lap_time FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND T2.dob BETWEEN '1980-01-01' AND '1990-12-31' GROUP BY T2.driverId, T2.forename, T2.surname ORDER BY earliest_lap_time ASC LIMIT 3
SELECT T1.`driverRef` FROM drivers AS T1 WHERE T1.`driverId` = ( SELECT T2.`driverId` FROM drivers AS T2 WHERE T2.`dob` = ( SELECT MIN(T3.`dob`) FROM drivers AS T3 WHERE T3.`nationality` = 'German' ) AND T2.`nationality` = 'German' )
SELECT T1.driverId, T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.dob IS NOT NULL AND strftime('%Y', T1.dob) = '1971' AND T2.fastestLapTime IS NOT NULL AND T2.fastestLapTime = ( SELECT MAX(T3.fastestLapTime) FROM results AS T3 WHERE T3.fastestLapTime IS NOT NULL )
SELECT T1.`forename`, T1.`surname`, T2.`time` FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`nationality` = 'Spanish' AND strftime('%Y', T1.`dob`) < '1982' AND T2.`time` = ( SELECT MAX(T3.`time`) FROM lapTimes AS T3 WHERE T3.`driverId` IN ( SELECT T1.`driverId` FROM drivers AS T1 WHERE T1.`nationality` = 'Spanish' AND strftime('%Y', T1.`dob`) < '1982' ) ) LIMIT 10
SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.fastestLapTime = ( SELECT MAX(fastestLapTime) FROM results WHERE fastestLapTime IS NOT NULL )
SELECT T3.year FROM races AS T3 INNER JOIN results AS T2 ON T3.raceId = T2.raceId INNER JOIN lapTimes AS T1 ON T1.raceId = T3.raceId WHERE T1.milliseconds IS NOT NULL GROUP BY T3.year ORDER BY MAX(T1.milliseconds) ASC LIMIT 1
SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY milliseconds ASC LIMIT 5
SELECT COUNT(*) FROM results AS R WHERE R.`raceId` IN ( SELECT `raceId` FROM races WHERE `raceId` > 50 AND `raceId` < 100 ) AND R.`statusId` = 2 AND R.`time` IS NOT NULL
WITH AustriaRaces AS ( SELECT COUNT(*) AS race_count FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.country = 'Austria' ), AustriaCircuits AS ( SELECT C.location, C.lat, C.lng FROM races AS R INNER JOIN circuits AS C ON R.circuitId = C.circuitId WHERE C.country = 'Austria' ) SELECT (SELECT race_count FROM AustriaRaces) AS total_races, location, lat, lng FROM AustriaCircuits
SELECT `raceId` FROM ( SELECT `raceId`, COUNT(*) AS finisher_count FROM results WHERE `time` IS NOT NULL GROUP BY `raceId` ) AS finisher_counts ORDER BY finisher_count DESC LIMIT 1
SELECT T1.driverRef, T1.nationality, T1.dob FROM drivers AS T1 WHERE T1.driverId IN ( SELECT driverId FROM qualifying WHERE raceId = 23 AND q2 IS NOT NULL )
SELECT T2.`number`, T3.`name`, T3.`date`, T3.`time` FROM qualifying AS T2 INNER JOIN races AS T3 ON T2.`raceId` = T3.`raceId` WHERE T2.`driverId` = ( SELECT T1.`driverId` FROM drivers AS T1 ORDER BY T1.`dob` DESC LIMIT 1 ) ORDER BY T3.`date` ASC, T3.`time` ASC LIMIT 1
SELECT COUNT(DISTINCT T1.driverId) AS disqualified_count FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.statusId = 2 AND T2.nationality = 'American'
SELECT T1.`url` FROM constructors AS T1 INNER JOIN ( SELECT T1.`constructorId` FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.`constructorId` = T2.`constructorId` WHERE T1.`nationality` = 'Italian' GROUP BY T1.`constructorId` ORDER BY SUM(T2.`points`) DESC LIMIT 1 ) AS T3 ON T1.`constructorId` = T3.`constructorId`
SELECT url FROM constructors WHERE constructorId = ( SELECT constructorId FROM ( SELECT constructorId, SUM(wins) AS total_wins FROM constructorStandings GROUP BY constructorId ) AS total_wins_table ORDER BY total_wins DESC LIMIT 1 )
SELECT T2.`forename`, T2.`surname` FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.`driverId` = T2.`driverId` WHERE T1.`raceId` = ( SELECT `raceId` FROM races WHERE `name` = 'French Grand Prix' ) AND T1.`lap` = 3 AND T1.`time` = ( SELECT MAX(`time`) FROM lapTimes WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `name` = 'French Grand Prix' ) AND `lap` = 3 )
SELECT T2.`raceId`, MIN(CAST(T1.`milliseconds` AS INTEGER)) AS fastest_lap_time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.`raceId` = T2.`raceId` WHERE T1.`lap` = 1 GROUP BY T2.`raceId` HAVING MIN(CAST(T1.`milliseconds` AS INTEGER)) = ( SELECT MIN(CAST(T3.`milliseconds` AS INTEGER)) FROM lapTimes AS T3 WHERE T3.`lap` = 1 )
SELECT AVG(`fastestLapTime`) FROM `results` WHERE `raceId` = ( SELECT `raceId` FROM `races` WHERE `year` = 2006 AND `name` = 'United States Grand Prix' ) AND `position` < 11
SELECT d.forename, d.surname, avg_durations.avg_duration FROM ( SELECT T1.driverId, AVG(CAST(T2.duration AS REAL)) AS avg_duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.dob BETWEEN '1980-01-01' AND '1985-12-31' AND T1.nationality = 'German' GROUP BY T1.driverId ) AS avg_durations INNER JOIN drivers AS d ON avg_durations.driverId = d.driverId WHERE avg_durations.avg_duration = ( SELECT MIN(avg_duration) FROM ( SELECT AVG(CAST(T2.duration AS REAL)) AS avg_duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.dob BETWEEN '1980-01-01' AND '1985-12-31' AND T1.nationality = 'German' GROUP BY T1.driverId ) AS durations ) ORDER BY avg_durations.avg_duration LIMIT 5;
SELECT `driverId`, `time` FROM results WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2008 AND `name` = 'Canadian Grand Prix' ) AND `position` = 1
SELECT T3.`constructorRef`, T3.`url` FROM results AS T1 INNER JOIN constructors AS T3 ON T1.`constructorId` = T3.`constructorId` WHERE T1.`raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2009 AND `name` = 'Singapore Grand Prix' ) AND T1.`time` = ( SELECT MAX(`time`) FROM results AS T2 WHERE T2.`raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2009 AND `name` = 'Singapore Grand Prix' ) )
SELECT T1.`forename`, T1.`surname`, T1.`dob` FROM drivers AS T1 WHERE T1.`nationality` = 'Austrian' AND strftime('%Y', T1.`dob`) BETWEEN '1981' AND '1991'
SELECT T1.`forename` || ' ' || T1.`surname` AS full_name, T1.`url` AS wiki_page, T1.`dob` FROM drivers AS T1 WHERE T1.`nationality` = 'German' AND strftime('%Y', T1.`dob`) BETWEEN '1971' AND '1985' ORDER BY T1.`dob` DESC
SELECT `location`, `country`, `lat`, `lng` FROM circuits WHERE `circuitRef` = 'hungaroring'
SELECT T2.`name`, T2.`nationality`, T1.max_points FROM ( SELECT T1.`constructorId`, MAX(total_points) AS max_points FROM ( SELECT T1.`constructorId`, SUM(T2.`points`) AS total_points FROM `results` AS T1 INNER JOIN `constructorResults` AS T2 ON T1.`raceId` = T2.`raceId` AND T1.`constructorId` = T2.`constructorId` WHERE T1.`raceId` IN ( SELECT `raceId` FROM `races` WHERE `name` = 'Monaco Grand Prix' AND `year` BETWEEN 1980 AND 2010 ) GROUP BY T1.`constructorId` ) AS T1 ) AS T1 INNER JOIN `constructors` AS T2 ON T1.`constructorId` = T2.`constructorId`
SELECT AVG(`points`) FROM results WHERE `driverId` = ( SELECT `driverId` FROM drivers WHERE `forename` = 'Lewis' AND `surname` = 'Hamilton' ) AND `raceId` IN ( SELECT `raceId` FROM races WHERE `name` LIKE '%Turkish Grand Prix%' )
SELECT COUNT(*) * 1.0 / (strftime('%Y', '2010-12-31') - strftime('%Y', '2000-01-01') + 1) AS annual_average_races FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'
SELECT T1.`nationality` FROM drivers AS T1 GROUP BY T1.`nationality` ORDER BY COUNT(*) DESC LIMIT 1
SELECT wins FROM driverStandings WHERE driverId = ( SELECT driverId FROM driverStandings ORDER BY points DESC LIMIT 1 OFFSET 90 )
SELECT name FROM races WHERE raceId = ( SELECT raceId FROM results WHERE fastestLapSpeed = ( SELECT MIN(fastestLapSpeed) FROM results WHERE fastestLapSpeed IS NOT NULL ) )
SELECT CONCAT(T1.location, ', ', T1.country) AS full_location FROM circuits AS T1 WHERE T1.circuitId = ( SELECT circuitId FROM races WHERE date = (SELECT MAX(date) FROM races) )
SELECT CONCAT(d.forename, ' ', d.surname) AS full_name FROM drivers d JOIN qualifying q ON d.driverId = q.driverId JOIN races r ON q.raceId = r.raceId WHERE r.year = 2008 AND r.circuitId = ( SELECT circuitId FROM circuits WHERE circuitRef = 'marina_bay' ) AND q.position = 1 AND r.round = ( SELECT MIN(round) FROM races WHERE year = 2008 AND circuitId = ( SELECT circuitId FROM circuits WHERE circuitRef = 'marina_bay' ) )
WITH YoungestRacer AS ( SELECT T1.forename || ' ' || T1.surname AS full_name, T1.nationality, T1.driverId FROM drivers AS T1 WHERE T1.dob = ( SELECT MAX(dob) FROM drivers WHERE dob IS NOT NULL ) ), FirstRace AS ( SELECT T2.name AS race_name FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.driverId = (SELECT driverId FROM YoungestRacer) ORDER BY T2.year, T2.round LIMIT 1 ) SELECT YR.full_name, YR.nationality, FR.race_name FROM YoungestRacer AS YR CROSS JOIN FirstRace AS FR
SELECT COUNT(*) AS total_accidents FROM results AS R INNER JOIN status AS S ON R.`statusId` = S.`statusId` WHERE R.`driverId` = ( SELECT `driverId` FROM ( SELECT `driverId`, COUNT(*) AS accident_count FROM results AS R INNER JOIN status AS S ON R.`statusId` = S.`statusId` WHERE R.`raceId` = ( SELECT `raceId` FROM races WHERE `name` = 'Canadian Grand Prix' ) AND S.`status` = 'Wheel' GROUP BY R.`driverId` ORDER BY accident_count DESC LIMIT 1 ) )
SELECT T2.forename || ' ' || T2.surname AS full_name, COUNT(DISTINCT T1.wins) AS total_wins FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.dob = ( SELECT MIN(dob) FROM drivers WHERE dob IS NOT NULL ) GROUP BY T2.driverId
SELECT raceId, driverId, MAX(duration) AS longest_pit_stop FROM pitStops GROUP BY raceId, driverId HAVING MAX(duration) = ( SELECT MAX(duration) FROM pitStops )
SELECT MIN(T1.`time`) AS fastest_lap_time FROM lapTimes AS T1 WHERE T1.`time` IS NOT NULL
SELECT MAX(`duration`) FROM pitStops WHERE `driverId` = ( SELECT `driverId` FROM drivers WHERE `forename` = 'Lewis' AND `surname` = 'Hamilton' )
SELECT `lap` FROM pitStops WHERE `raceId` = ( SELECT `raceId` FROM races WHERE `year` = 2011 AND `name` = 'Australian Grand Prix' ) AND `driverId` = ( SELECT `driverId` FROM drivers WHERE `forename` = 'Lewis' AND `surname` = 'Hamilton' )
SELECT P.driverId, P.duration FROM pitStops AS P JOIN races AS R ON P.raceId = R.raceId WHERE R.year = 2011 AND R.name = 'Australian Grand Prix'
SELECT MIN(lapTimes.time) AS lapRecord FROM lapTimes WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )
SELECT CONCAT(T2.`forename`, ' ', T2.`surname`) AS full_name FROM drivers AS T2 WHERE T2.`driverId` = ( SELECT T1.`driverId` FROM lapTimes AS T1 WHERE T1.`milliseconds` = ( SELECT MIN(`milliseconds`) FROM lapTimes WHERE `milliseconds` IS NOT NULL ) )
SELECT T1.position FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T1.driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) AND T1.milliseconds = ( SELECT MIN(milliseconds) FROM lapTimes WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )
SELECT MIN(r.fastestLapTime) AS lap_record FROM results r JOIN races ra ON r.raceId = ra.raceId JOIN circuits c ON ra.circuitId = c.circuitId WHERE c.circuitRef = 'austrian' AND r.fastestLapTime IS NOT NULL
SELECT C.`circuitRef`, C.`name`, R.`fastestLapTime` FROM ( SELECT T1.`raceId`, MIN(T2.`time`) AS `fastestLapTime` FROM lapTimes AS T2 INNER JOIN races AS T1 ON T2.`raceId` = T1.`raceId` WHERE T1.`circuitId` IN ( SELECT `circuitId` FROM circuits WHERE `country` = 'Italy' ) GROUP BY T1.`raceId` ) AS R INNER JOIN races AS R2 ON R.`raceId` = R2.`raceId` INNER JOIN circuits AS C ON R2.`circuitId` = C.`circuitId` WHERE C.`country` = 'Italy'
SELECT T1.`name`, T1.`year`, T1.`round` FROM races AS T1 INNER JOIN ( SELECT `raceId`, MIN(`milliseconds`) AS `fastestLapTime` FROM lapTimes WHERE `raceId` IN ( SELECT `raceId` FROM races WHERE `circuitId` = ( SELECT `circuitId` FROM circuits WHERE `circuitRef` = 'red_bull_ring' ) ) GROUP BY `raceId` ) AS T2 ON T1.`raceId` = T2.`raceId` WHERE T2.`fastestLapTime` IS NOT NULL
SELECT p.duration FROM pitStops AS p JOIN races AS r ON p.raceId = r.raceId JOIN lapTimes AS lt ON lt.raceId = r.raceId AND lt.driverId = p.driverId WHERE r.circuitId = ( SELECT circuitId FROM circuits WHERE circuitRef = 'austria' ) AND lt.time = ( SELECT MIN(lt2.time) FROM lapTimes AS lt2 WHERE lt2.raceId = r.raceId )
SELECT `lat`, `lng` FROM circuits WHERE `circuitId` IN ( SELECT DISTINCT `circuitId` FROM races WHERE `raceId` IN ( SELECT DISTINCT `raceId` FROM lapTimes WHERE `time` = '1:29.488' ) )
SELECT AVG(milliseconds) AS average_pit_stop_time FROM pitStops WHERE driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' )
SELECT AVG(`milliseconds`) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.`raceId` = T2.`raceId` WHERE T2.`circuitId` IN ( SELECT `circuitId` FROM circuits WHERE `country` = 'Italy' )
SELECT `player_api_id` FROM Player_Attributes WHERE `overall_rating` = ( SELECT MAX(`overall_rating`) FROM Player_Attributes )
SELECT player_name, height FROM Player WHERE height = (SELECT MAX(height) FROM Player)
SELECT preferred_foot FROM Player_Attributes WHERE potential = ( SELECT MIN(potential) FROM Player_Attributes )
SELECT COUNT(*) FROM Player_Attributes WHERE overall_rating >= 60 AND overall_rating < 65 AND defensive_work_rate = 'low'
SELECT T1.`player_api_id` FROM Player_Attributes AS T2 INNER JOIN Player AS T1 ON T1.`player_api_id` = T2.`player_api_id` ORDER BY T2.`crossing` DESC LIMIT 5
SELECT T1.`name` FROM League AS T1 INNER JOIN ( SELECT T2.`league_id`, SUM(T2.`home_team_goal` + T2.`away_team_goal`) AS total_goals FROM Match AS T2 WHERE T2.`season` = '2015/2016' GROUP BY T2.`league_id` ) AS T3 ON T1.`id` = T3.`league_id` ORDER BY T3.total_goals DESC LIMIT 1
SELECT T.team_long_name FROM ( SELECT home_team_api_id FROM ( SELECT home_team_api_id, COUNT(*) AS loss_count FROM Match WHERE season = '2015/2016' AND (home_team_goal - away_team_goal) < 0 GROUP BY home_team_api_id ) ORDER BY loss_count ASC LIMIT 1 ) AS T1 INNER JOIN Team AS T ON T1.home_team_api_id = T.team_api_id
SELECT T1.`player_name` FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.`player_api_id` = T2.`player_api_id` ORDER BY T2.`penalties` DESC LIMIT 10
SELECT T2.`team_long_name` FROM ( SELECT `away_team_api_id` FROM ( SELECT `away_team_api_id`, COUNT(*) AS `wins` FROM Match WHERE `season` = '2009/2010' AND `away_team_goal` > `home_team_goal` GROUP BY `away_team_api_id` ) AS T ORDER BY `wins` DESC LIMIT 1 ) AS T1 INNER JOIN Team AS T2 ON T1.`away_team_api_id` = T2.`team_api_id`
SELECT T1.`buildUpPlaySpeed` FROM Team_Attributes AS T1 ORDER BY T1.`buildUpPlaySpeed` DESC LIMIT 4
SELECT T2.`name` FROM League AS T2 INNER JOIN ( SELECT T1.`league_id`, COUNT(*) AS draw_count FROM Match AS T1 WHERE T1.`season` = '2015/2016' AND T1.`home_team_goal` = T1.`away_team_goal` GROUP BY T1.`league_id` ) AS T3 ON T2.`id` = T3.`league_id` ORDER BY T3.`draw_count` DESC LIMIT 1
SELECT T1.player_api_id, (strftime('%Y', 'now') - strftime('%Y', T2.birthday)) - (strftime('%m', 'now') < strftime('%m', T2.birthday) OR (strftime('%m', 'now') = strftime('%m', T2.birthday) AND strftime('%d', 'now') < strftime('%d', T2.birthday))) AS age FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.sprint_speed >= 97 AND T1.date >= '2013-01-01 00:00:00' AND T1.date <= '2015-12-31 00:00:00';
SELECT L.name, M.match_count FROM ( SELECT league_id, COUNT(*) AS match_count FROM Match GROUP BY league_id ) AS M INNER JOIN League AS L ON M.league_id = L.id WHERE M.league_id = ( SELECT league_id FROM ( SELECT league_id, COUNT(*) AS match_count FROM Match GROUP BY league_id ) AS league_counts ORDER BY match_count DESC LIMIT 1 )
SELECT AVG(height) AS average_height FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'
SELECT `player_api_id` FROM Player_Attributes WHERE `overall_rating` > ( SELECT AVG(`overall_rating`) FROM Player_Attributes WHERE substr(`date`, 1, 4) = '2010' ) AND substr(`date`, 1, 4) = '2010'
SELECT T1.`team_fifa_api_id` FROM Team_Attributes AS T1 WHERE T1.`buildUpPlaySpeed` BETWEEN 51 AND 59
SELECT T2.`team_long_name` FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.`team_api_id` = T2.`team_api_id` WHERE strftime('%Y', T1.`date`) = '2012' AND T1.`buildUpPlayPassing` IS NOT NULL AND T1.`buildUpPlayPassing` > ( SELECT AVG(T3.`buildUpPlayPassing`) FROM Team_Attributes AS T3 WHERE strftime('%Y', T3.`date`) = '2012' AND T3.`buildUpPlayPassing` IS NOT NULL )
SELECT (CAST(SUM(CASE WHEN pa.preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) / COUNT(p.player_fifa_api_id)) * 100 AS percentage_left_foot FROM Player p JOIN Player_Attributes pa ON p.player_fifa_api_id = pa.player_fifa_api_id WHERE p.birthday BETWEEN '1987-01-01 00:00:00' AND '1992-12-31 00:00:00'
SELECT L.`name`, LeagueGoals.total_goals FROM ( SELECT M.`league_id`, SUM(M.`home_team_goal` + M.`away_team_goal`) AS total_goals FROM Match AS M GROUP BY M.`league_id` ) AS LeagueGoals INNER JOIN League AS L ON LeagueGoals.`league_id` = L.`id` ORDER BY LeagueGoals.total_goals ASC LIMIT 5
SELECT AVG(`long_shots`) FROM Player_Attributes WHERE `player_fifa_api_id` = ( SELECT `player_fifa_api_id` FROM Player WHERE `player_name` = 'Ahmed Samir Farag' )
SELECT T2.`player_name` FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`height` > 180 ORDER BY T1.`heading_accuracy` DESC LIMIT 10
SELECT T3.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T3 ON T1.team_api_id = T3.team_api_id WHERE T1.chanceCreationPassing < ( SELECT AVG(T2.chanceCreationPassing) FROM Team_Attributes AS T2 WHERE T2.team_api_id IN ( SELECT T4.team_api_id FROM Team_Attributes AS T4 WHERE T4.buildUpPlayDribblingClass = 'Normal' AND T4.date >= '2014-01-01 00:00:00' AND T4.date <= '2014-12-31 23:59:59' ) ) AND T1.date >= '2014-01-01 00:00:00' AND T1.date <= '2014-12-31 23:59:59' ORDER BY T1.chanceCreationPassing DESC
SELECT L.name FROM League AS L INNER JOIN Match AS M ON L.id = M.league_id WHERE M.season = '2009/2010' GROUP BY L.id HAVING AVG(M.home_team_goal) > AVG(M.away_team_goal)
SELECT `team_short_name` FROM `Team` WHERE `team_long_name` = 'Queens Park Rangers'
SELECT player_name, birthday FROM Player WHERE substr(birthday, 1, 4) = '1970' AND substr(birthday, 6, 2) = '10'
SELECT `attacking_work_rate` FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Franco Zennaro' )
SELECT `buildUpPlayPositioningClass` FROM Team_Attributes WHERE `team_api_id` = ( SELECT `team_api_id` FROM Team WHERE `team_long_name` = 'ADO Den Haag' )
SELECT `heading_accuracy` FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Francois Affolter' ) AND `date` = '2014-09-18 00:00:00'
SELECT `overall_rating` FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Gabriel Tamas' ) AND strftime('%Y', `date`) = '2011'
SELECT COUNT(*) FROM Match WHERE `season` = '2015/2016' AND `league_id` = ( SELECT `id` FROM League WHERE `name` = 'Scotland Premier League' )
SELECT T2.preferred_foot FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday = ( SELECT MAX(birthday) FROM Player )
SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = ( SELECT MAX(potential) FROM Player_Attributes )
SELECT COUNT(*) FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.weight < 130 AND PA.preferred_foot = 'left'
SELECT T.team_short_name FROM Team_Attributes AS TA JOIN Team AS T ON TA.team_api_id = T.team_api_id WHERE TA.chanceCreationPassingClass = 'Risky'
SELECT `defensive_work_rate` FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'David Wilson' )
SELECT T2.`birthday` FROM Player AS T2 WHERE T2.`player_api_id` = ( SELECT T1.`player_api_id` FROM Player_Attributes AS T1 WHERE T1.`overall_rating` = ( SELECT MAX(`overall_rating`) FROM Player_Attributes ) )
SELECT `name` FROM League WHERE `country_id` = ( SELECT `id` FROM Country WHERE `name` = 'Netherlands' )
SELECT AVG(M.`home_team_goal`) FROM Match AS M INNER JOIN League AS L ON M.`league_id` = L.`id` WHERE L.`country_id` = ( SELECT `id` FROM Country WHERE `name` = 'Poland' ) AND M.`season` = '2010/2011'
SELECT P.player_name, PA.finishing FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE P.height IN ( (SELECT MAX(height) FROM Player), (SELECT MIN(height) FROM Player) ) AND PA.finishing = ( SELECT MAX(PA2.finishing) FROM Player AS P2 INNER JOIN Player_Attributes AS PA2 ON P2.player_api_id = PA2.player_api_id WHERE P2.height IN ( (SELECT MAX(height) FROM Player), (SELECT MIN(height) FROM Player) ) )
SELECT T1.`player_name` FROM Player AS T1 WHERE T1.`height` > 180
SELECT COUNT(*) FROM Player WHERE strftime('%Y', birthday) > '1990'
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Adam%' AND weight > 170
SELECT T2.`player_name` FROM Player AS T2 WHERE T2.`player_api_id` IN ( SELECT T1.`player_api_id` FROM Player_Attributes AS T1 WHERE T1.`overall_rating` > 80 AND strftime('%Y', T1.`date`) BETWEEN '2008' AND '2010' )
SELECT `potential` FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Aaron Doran' )
SELECT P.player_name FROM Player P JOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id WHERE PA.preferred_foot = 'left';
SELECT T1.`team_long_name` FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.`team_api_id` = T2.`team_api_id` WHERE T2.`buildUpPlaySpeedClass` = 'Fast'
SELECT `buildUpPlayPassingClass` FROM Team_Attributes WHERE `team_fifa_api_id` = ( SELECT `team_fifa_api_id` FROM Team WHERE `team_short_name` = 'CLB' )
SELECT T2.`team_short_name` FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.`team_api_id` = T2.`team_api_id` WHERE T1.`buildUpPlayPassing` > 70
SELECT AVG(T2.`overall_rating`) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE strftime('%Y', T2.`date`) BETWEEN '2010' AND '2015' AND T1.`height` > 170
SELECT player_name FROM Player WHERE height = ( SELECT MIN(height) FROM Player WHERE height IS NOT NULL )
SELECT name FROM Country WHERE id = ( SELECT country_id FROM League WHERE name = 'Italy Serie A' )
SELECT T2.team_short_name FROM Team AS T2 WHERE T2.team_api_id IN ( SELECT T1.team_api_id FROM Team_Attributes AS T1 WHERE T1.buildUpPlaySpeed = 31 AND T1.buildUpPlayDribbling = 53 AND T1.buildUpPlayPassing = 32 )
SELECT AVG(`overall_rating`) FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Aaron Doran' )
SELECT COUNT(*) FROM Match WHERE league_id = ( SELECT id FROM League WHERE name = 'Germany 1. Bundesliga' ) AND strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10'
SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_api_id = T2.home_team_api_id WHERE T2.home_team_goal = 10
SELECT P.player_name FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE PA.balance = ( SELECT MAX(balance) FROM Player_Attributes WHERE potential = 61 ) AND PA.potential = 61
SELECT (SELECT AVG(T1.`ball_control`) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`player_name` = 'Abdou Diallo') - (SELECT AVG(T1.`ball_control`) FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`player_name` = 'Aaron Appindangoye') AS ball_control_difference
SELECT `team_long_name` FROM Team WHERE `team_short_name` = 'GEN'
SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1
SELECT player_name FROM Player WHERE height = (SELECT MAX(height) FROM Player)
SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'
SELECT C.name FROM League AS L INNER JOIN Country AS C ON L.country_id = C.id WHERE L.name = 'Belgium Jupiler League'
SELECT name FROM League WHERE country_id = ( SELECT id FROM Country WHERE name = 'Germany' )
SELECT P.`player_name` FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.`player_api_id` = P.`player_api_id` WHERE PA.`overall_rating` = ( SELECT MAX(`overall_rating`) FROM Player_Attributes )
SELECT COUNT(DISTINCT T1.`player_api_id`) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE strftime('%Y', T1.`birthday`) < '1986' AND T2.`defensive_work_rate` = 'high'
SELECT T1.`player_name` FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T1.`player_name` IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY T2.`crossing` DESC LIMIT 1
SELECT `heading_accuracy` FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Ariel Borysiuk' )
SELECT COUNT(*) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T1.`height` > 180 AND T2.`volleys` > 70
SELECT T2.`player_name` FROM Player AS T2 WHERE T2.`player_api_id` IN ( SELECT T1.`player_api_id` FROM Player_Attributes AS T1 WHERE T1.`volleys` > 70 AND T1.`dribbling` > 70 )
SELECT COUNT(*) FROM Match AS M INNER JOIN League AS L ON M.`league_id` = L.`id` WHERE M.`season` = '2008/2009' AND L.`country_id` = ( SELECT `id` FROM Country WHERE `name` = 'Belgium' )
SELECT T2.`long_passing` FROM Player_Attributes AS T2 WHERE T2.`player_api_id` = ( SELECT T1.`player_api_id` FROM Player AS T1 ORDER BY T1.`birthday` ASC LIMIT 1 )
SELECT COUNT(*) FROM Match WHERE `league_id` = ( SELECT `id` FROM League WHERE `name` = 'Belgium Jupiler League' ) AND strftime('%Y', `date`) = '2009' AND strftime('%m', `date`) = '04'
SELECT name FROM League WHERE id = ( SELECT league_id FROM ( SELECT league_id, COUNT(*) AS match_count FROM Match WHERE season = '2008/2009' GROUP BY league_id ) AS league_match_counts ORDER BY match_count DESC LIMIT 1 )
SELECT AVG(PA.overall_rating) AS average_overall_rating FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE strftime('%Y', P.birthday) < '1986'
SELECT (CAST(A.overall_rating AS REAL) - CAST(P.overall_rating AS REAL)) / CAST(P.overall_rating AS REAL) * 100 AS percentage_difference FROM Player_Attributes AS A INNER JOIN Player AS PA ON A.player_api_id = PA.player_api_id INNER JOIN Player_Attributes AS P ON P.player_api_id = (SELECT player_api_id FROM Player WHERE player_name = 'Paulin Puel') WHERE PA.player_name = 'Ariel Borysiuk'
SELECT AVG(`buildUpPlaySpeed`) FROM Team_Attributes WHERE `team_api_id` = ( SELECT `team_api_id` FROM Team WHERE `team_long_name` = 'Heart of Midlothian' )
SELECT AVG(T1.`overall_rating`) FROM Player_Attributes AS T1 WHERE T1.`player_api_id` = ( SELECT T2.`player_api_id` FROM Player AS T2 WHERE T2.`player_name` = 'Pietro Marino' )
SELECT SUM(T2.`crossing`) FROM Player_Attributes AS T2 WHERE T2.`player_api_id` = ( SELECT T1.`player_api_id` FROM Player AS T1 WHERE T1.`player_name` = 'Aaron Lennox' )
SELECT MAX(T1.`chanceCreationPassing`) AS highest_score, T1.`chanceCreationPassingClass` FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.`team_api_id` = T2.`team_api_id` WHERE T2.`team_long_name` = 'Ajax' GROUP BY T1.`chanceCreationPassingClass` HAVING T1.`chanceCreationPassing` = ( SELECT MAX(T3.`chanceCreationPassing`) FROM Team_Attributes AS T3 INNER JOIN Team AS T4 ON T3.`team_api_id` = T4.`team_api_id` WHERE T4.`team_long_name` = 'Ajax' )
SELECT `preferred_foot` FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Abdou Diallo' )
SELECT MAX(T2.`overall_rating`) FROM Player_Attributes AS T2 WHERE T2.`player_api_id` = ( SELECT T1.`player_api_id` FROM Player AS T1 WHERE T1.`player_name` = 'Dorlan Pabon' )
SELECT AVG(M.away_team_goal) AS average_goals FROM Match AS M INNER JOIN Team AS T ON M.away_team_api_id = T.team_api_id INNER JOIN League AS L ON L.id = (SELECT country_id FROM League WHERE name LIKE '%Italy%') WHERE T.team_long_name = 'Parma' AND M.away_team_goal IS NOT NULL;
SELECT P.player_name FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.overall_rating = 77 AND PA.date = '2016-06-23' AND P.birthday IS NOT NULL GROUP BY P.player_name, P.birthday HAVING P.birthday = (SELECT MIN(birthday) FROM Player AS P2 JOIN Player_Attributes AS PA2 ON P2.player_api_id = PA2.player_api_id WHERE PA2.overall_rating = 77 AND PA2.date = '2016-06-23' AND P2.birthday IS NOT NULL);
SELECT `overall_rating` FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Aaron Mooy' ) AND `date` = '2016-02-04 00:00:00'
SELECT `potential` FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Francesco Parravicini' ) AND `date` = '2010-08-30 00:00:00'
SELECT T2.`attacking_work_rate` FROM Player_Attributes AS T2 WHERE T2.`player_api_id` = ( SELECT T1.`player_api_id` FROM Player AS T1 WHERE T1.`player_name` = 'Francesco Migliore' ) AND T2.`date` = '2015-05-01 00:00:00'
SELECT `defensive_work_rate` FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Kevin Berigaud' ) AND `date` = '2013-02-22 00:00:00'
SELECT T2.`date` FROM Player_Attributes AS T2 INNER JOIN Player AS T1 ON T1.`player_api_id` = T2.`player_api_id` WHERE T1.`player_name` = 'Kevin Constant' AND T2.`crossing` = ( SELECT MAX(T4.`crossing`) FROM Player_Attributes AS T4 INNER JOIN Player AS T3 ON T3.`player_api_id` = T4.`player_api_id` WHERE T3.`player_name` = 'Kevin Constant' ) ORDER BY T2.`date` ASC LIMIT 1
SELECT DISTINCT T2.buildUpPlaySpeedClass FROM Team_Attributes AS T2 JOIN Team AS T1 ON T2.team_api_id = T1.team_api_id WHERE T1.team_long_name = 'Willem II' AND T2.date <= '2012-02-22 00:00:00' ORDER BY T2.date DESC LIMIT 1
SELECT `buildUpPlayDribblingClass` FROM Team_Attributes WHERE `team_api_id` = ( SELECT `team_api_id` FROM Team WHERE `team_short_name` = 'LEI' ) AND `date` = '2015-09-10 00:00:00'
SELECT `buildUpPlayPassingClass` FROM Team_Attributes WHERE `team_api_id` = ( SELECT `team_api_id` FROM Team WHERE `team_long_name` = 'FC Lorient' ) AND `date` = '2010-02-22 00:00:00'
SELECT T2.`chanceCreationPassingClass` FROM Team_Attributes AS T2 INNER JOIN Team AS T1 ON T1.`team_api_id` = T2.`team_api_id` WHERE T1.`team_long_name` = 'PEC Zwolle' AND T2.`date` = '2013-09-20 00:00:00'
SELECT `chanceCreationCrossingClass` FROM Team_Attributes WHERE `team_api_id` = ( SELECT `team_api_id` FROM Team WHERE `team_long_name` = 'Hull City' ) AND `date` = '2010-02-22 00:00:00'
SELECT `defenceAggressionClass` FROM Team_Attributes WHERE `team_api_id` = ( SELECT `team_api_id` FROM Team WHERE `team_long_name` = 'Hannover 96' ) AND `date` = '2015-09-10 00:00:00'
SELECT AVG(`overall_rating`) FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Marko Arnautovic' ) AND `date` BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'
SELECT (MAX(CASE WHEN P.player_name = 'Landon Donovan' THEN PA.overall_rating END) - MAX(CASE WHEN P.player_name = 'Jordan Bowery' THEN PA.overall_rating END)) / MAX(CASE WHEN P.player_name = 'Landon Donovan' THEN PA.overall_rating END) * 100 AS percentage_difference FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id WHERE PA.date = '2013-07-12' AND P.player_name IN ('Landon Donovan', 'Jordan Bowery') GROUP BY PA.date;
SELECT player_name FROM Player ORDER BY height DESC LIMIT 5
SELECT `player_api_id` FROM Player ORDER BY `weight` DESC LIMIT 10
SELECT T1.player_name FROM Player AS T1 WHERE (strftime('%Y', 'now', 'localtime') - strftime('%Y', T1.birthday)) >= 35
SELECT SUM(T1.`home_team_goal`) FROM Match AS T1 INNER JOIN Player AS T2 ON T1.`home_player_1` = T2.`player_api_id` OR T1.`home_player_2` = T2.`player_api_id` OR T1.`home_player_3` = T2.`player_api_id` OR T1.`home_player_4` = T2.`player_api_id` OR T1.`home_player_5` = T2.`player_api_id` OR T1.`home_player_6` = T2.`player_api_id` OR T1.`home_player_7` = T2.`player_api_id` OR T1.`home_player_8` = T2.`player_api_id` OR T1.`home_player_9` = T2.`player_api_id` OR T1.`home_player_10` = T2.`player_api_id` OR T1.`home_player_11` = T2.`player_api_id` WHERE T2.`player_name` = 'Aaron Lennon'
SELECT SUM(`away_team_goal`) AS total_away_goals FROM Match WHERE `away_player_1` IN ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Daan Smith' UNION SELECT `player_api_id` FROM Player WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_2` IN ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Daan Smith' UNION SELECT `player_api_id` FROM Player WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_3` IN ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Daan Smith' UNION SELECT `player_api_id` FROM Player WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_4` IN ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Daan Smith' UNION SELECT `player_api_id` FROM Player WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_5` IN ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Daan Smith' UNION SELECT `player_api_id` FROM Player WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_6` IN ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Daan Smith' UNION SELECT `player_api_id` FROM Player WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_7` IN ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Daan Smith' UNION SELECT `player_api_id` FROM Player WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_8` IN ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Daan Smith' UNION SELECT `player_api_id` FROM Player WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_9` IN ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Daan Smith' UNION SELECT `player_api_id` FROM Player WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_10` IN ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Daan Smith' UNION SELECT `player_api_id` FROM Player WHERE `player_name` = 'Filipe Ferreira' ) OR `away_player_11` IN ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Daan Smith' UNION SELECT `player_api_id` FROM Player WHERE `player_name` = 'Filipe Ferreira' )
SELECT SUM(T1.`home_team_goal`) AS total_home_goals FROM Match AS T1 WHERE T1.`home_player_1` IN (SELECT T2.`player_api_id` FROM Player AS T2 WHERE (strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) < 30 OR ((strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) = 30 AND strftime('%m-%d', 'now') < strftime('%m-%d', T2.`birthday`))) OR T1.`home_player_2` IN (SELECT T2.`player_api_id` FROM Player AS T2 WHERE (strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) < 30 OR ((strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) = 30 AND strftime('%m-%d', 'now') < strftime('%m-%d', T2.`birthday`))) OR T1.`home_player_3` IN (SELECT T2.`player_api_id` FROM Player AS T2 WHERE (strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) < 30 OR ((strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) = 30 AND strftime('%m-%d', 'now') < strftime('%m-%d', T2.`birthday`))) OR T1.`home_player_4` IN (SELECT T2.`player_api_id` FROM Player AS T2 WHERE (strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) < 30 OR ((strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) = 30 AND strftime('%m-%d', 'now') < strftime('%m-%d', T2.`birthday`))) OR T1.`home_player_5` IN (SELECT T2.`player_api_id` FROM Player AS T2 WHERE (strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) < 30 OR ((strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) = 30 AND strftime('%m-%d', 'now') < strftime('%m-%d', T2.`birthday`))) OR T1.`home_player_6` IN (SELECT T2.`player_api_id` FROM Player AS T2 WHERE (strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) < 30 OR ((strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) = 30 AND strftime('%m-%d', 'now') < strftime('%m-%d', T2.`birthday`))) OR T1.`home_player_7` IN (SELECT T2.`player_api_id` FROM Player AS T2 WHERE (strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) < 30 OR ((strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) = 30 AND strftime('%m-%d', 'now') < strftime('%m-%d', T2.`birthday`))) OR T1.`home_player_8` IN (SELECT T2.`player_api_id` FROM Player AS T2 WHERE (strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) < 30 OR ((strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) = 30 AND strftime('%m-%d', 'now') < strftime('%m-%d', T2.`birthday`))) OR T1.`home_player_9` IN (SELECT T2.`player_api_id` FROM Player AS T2 WHERE (strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) < 30 OR ((strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) = 30 AND strftime('%m-%d', 'now') < strftime('%m-%d', T2.`birthday`))) OR T1.`home_player_10` IN (SELECT T2.`player_api_id` FROM Player AS T2 WHERE (strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) < 30 OR ((strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) = 30 AND strftime('%m-%d', 'now') < strftime('%m-%d', T2.`birthday`))) OR T1.`home_player_11` IN (SELECT T2.`player_api_id` FROM Player AS T2 WHERE (strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) < 30 OR ((strftime('%Y', 'now') - strftime('%Y', T2.`birthday`)) = 30 AND strftime('%m-%d', 'now') < strftime('%m-%d', T2.`birthday`)))
SELECT T1.`player_name` FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T2.`overall_rating` = ( SELECT MAX(`overall_rating`) FROM Player_Attributes ) LIMIT 10
SELECT P.player_name FROM Player AS P INNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.potential = ( SELECT MAX(potential) FROM Player_Attributes )
SELECT T2.`player_name` FROM Player AS T2 WHERE T2.`player_api_id` IN ( SELECT T1.`player_api_id` FROM Player_Attributes AS T1 WHERE T1.`attacking_work_rate` = 'high' )
SELECT P.player_name FROM Player AS P JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id WHERE PA.finishing = 1 ORDER BY P.birthday ASC LIMIT 1
SELECT DISTINCT P.player_name FROM Player AS P INNER JOIN Match AS M ON P.player_api_id IN (M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5, M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10, M.home_player_11, M.away_player_1, M.away_player_2, M.away_player_3, M.away_player_4, M.away_player_5, M.away_player_6, M.away_player_7, M.away_player_8, M.away_player_9, M.away_player_10, M.away_player_11) INNER JOIN Team AS T ON M.home_team_api_id = T.team_api_id OR M.away_team_api_id = T.team_api_id INNER JOIN League AS L ON T.team_fifa_api_id = L.id INNER JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Belgium';
SELECT DISTINCT C.name AS country FROM Player_Attributes AS PA INNER JOIN Player AS P ON PA.player_api_id = P.player_api_id INNER JOIN Team AS T ON P.player_fifa_api_id = T.team_fifa_api_id INNER JOIN Match AS M ON T.team_api_id = M.home_team_api_id OR T.team_api_id = M.away_team_api_id INNER JOIN League AS L ON M.league_id = L.id INNER JOIN Country AS C ON L.country_id = C.id WHERE PA.vision > 89
SELECT C.name AS country_name FROM ( SELECT L.country_id, AVG(P.weight) AS avg_weight FROM Player AS P INNER JOIN Team AS T ON P.player_api_id = T.team_api_id INNER JOIN League AS L ON T.team_fifa_api_id = L.id GROUP BY L.country_id ) AS avg_weights INNER JOIN Country AS C ON avg_weights.country_id = C.id WHERE avg_weights.avg_weight = ( SELECT MAX(avg_weight) FROM ( SELECT AVG(P.weight) AS avg_weight FROM Player AS P INNER JOIN Team AS T ON P.player_api_id = T.team_api_id INNER JOIN League AS L ON T.team_fifa_api_id = L.id GROUP BY L.country_id ) AS subquery )
SELECT T1.`team_long_name` FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.`team_api_id` = T2.`team_api_id` WHERE T2.`buildUpPlaySpeedClass` = 'Slow'
SELECT T2.team_short_name FROM Team AS T2 INNER JOIN ( SELECT DISTINCT T1.team_api_id FROM Team_Attributes AS T1 WHERE T1.chanceCreationPassingClass = 'Safe' ) AS T3 ON T2.team_api_id = T3.team_api_id
SELECT AVG(P.height) AS average_height FROM Player AS P INNER JOIN Match AS M ON P.player_api_id IN ( M.home_player_1, M.home_player_2, M.home_player_3, M.home_player_4, M.home_player_5, M.home_player_6, M.home_player_7, M.home_player_8, M.home_player_9, M.home_player_10, M.home_player_11, M.away_player_1, M.away_player_2, M.away_player_3, M.away_player_4, M.away_player_5, M.away_player_6, M.away_player_7, M.away_player_8, M.away_player_9, M.away_player_10, M.away_player_11 ) INNER JOIN Team AS T ON M.home_team_api_id = T.team_api_id OR M.away_team_api_id = T.team_api_id INNER JOIN League AS L ON T.team_fifa_api_id = L.id INNER JOIN Country AS C ON L.country_id = C.id WHERE C.name = 'Italy' AND P.height IS NOT NULL;
SELECT T1.`player_name` FROM Player AS T1 WHERE T1.`height` > 180 ORDER BY T1.`player_name` ASC LIMIT 3
SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31'
SELECT (p6.jumping - p23.jumping) AS jumping_difference FROM Player_Attributes p6 JOIN Player_Attributes p23 ON p6.date = p23.date WHERE p6.player_api_id = 6 AND p23.player_api_id = 23 AND p6.jumping IS NOT NULL AND p23.jumping IS NOT NULL;
SELECT `player_api_id` FROM Player_Attributes WHERE `potential` = (SELECT MIN(`potential`) FROM Player_Attributes) AND `preferred_foot` = 'right' LIMIT 3
SELECT COUNT(*) AS player_count FROM Player_Attributes WHERE crossing = ( SELECT MAX(crossing) FROM Player_Attributes ) AND preferred_foot = 'left'
SELECT (SELECT COUNT(*) FROM Player_Attributes WHERE strength > 80 AND stamina > 80) * 100.0 / (SELECT COUNT(*) FROM Player_Attributes) AS percentage_high_scores
SELECT C.`name` FROM League AS L INNER JOIN Country AS C ON L.`country_id` = C.`id` WHERE L.`name` = 'Poland Ekstraklasa'
SELECT m.home_team_goal, m.away_team_goal FROM Match m JOIN League l ON m.league_id = l.id WHERE m.date LIKE '2008-09-24%' AND l.name = 'Belgium Jupiler League'
SELECT `sprint_speed`, `agility`, `acceleration` FROM Player_Attributes WHERE `player_api_id` = ( SELECT `player_api_id` FROM Player WHERE `player_name` = 'Alexis Blin' )
SELECT `buildUpPlaySpeedClass` FROM Team_Attributes WHERE `team_api_id` = ( SELECT `team_api_id` FROM Team WHERE `team_long_name` = 'KSV Cercle Brugge' ) AND `buildUpPlaySpeedClass` IN ('Slow', 'Balanced', 'Fast')
SELECT COUNT(*) FROM Match WHERE `league_id` = ( SELECT `id` FROM League WHERE `name` = 'Italy Serie A' ) AND `season` = '2015/2016'
SELECT MAX(home_team_goal) FROM Match WHERE league_id = ( SELECT id FROM League WHERE name = 'Netherlands Eredivisie' )
SELECT T1.finishing AS finishing_rate, T1.curve AS curve_score FROM Player_Attributes AS T1 WHERE T1.player_api_id = ( SELECT T2.player_api_id FROM Player AS T2 WHERE T2.weight = (SELECT MAX(weight) FROM Player) )
SELECT T2.`name` FROM Match AS T1 INNER JOIN League AS T2 ON T1.`league_id` = T2.`id` WHERE T1.`season` = '2015/2016' GROUP BY T2.`id` ORDER BY COUNT(T1.`id`) DESC LIMIT 1
SELECT T.team_long_name FROM Team AS T WHERE T.team_api_id = ( SELECT away_team_api_id FROM Match WHERE away_team_goal = ( SELECT MAX(away_team_goal) FROM Match ) )
SELECT T2.`player_name` FROM Player_Attributes AS T1 INNER JOIN Player AS T2 ON T1.`player_api_id` = T2.`player_api_id` WHERE T1.`overall_rating` = ( SELECT MAX(`overall_rating`) FROM Player_Attributes ) LIMIT 1
SELECT (CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM Player)) * 100 AS percentage FROM Player JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height < 180 AND Player_Attributes.overall_rating > 70
SELECT (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '+') AS male_inpatients, (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '-') AS male_outpatients, (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '+') - (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '-') AS difference, CASE WHEN (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '-') = 0 THEN NULL ELSE ((SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '+') - (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '-')) * 100.0 / (SELECT COUNT(ID) FROM Patient WHERE SEX = 'M' AND Admission = '-') END AS deviation_percentage
SELECT (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Birthday > '1930-01-01') * 100.0 / (SELECT COUNT(ID) FROM Patient WHERE SEX = 'F') AS percentage_female_born_after_1930
SELECT (SELECT COUNT(*) FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31' AND Admission = '+') * 100.0 / (SELECT COUNT(*) FROM Patient WHERE Birthday BETWEEN '1930-01-01' AND '1940-12-31') AS inpatient_percentage
SELECT (SELECT COUNT(Patient.ID) FROM Patient WHERE Patient.Diagnosis = 'SLE' AND Patient.Admission = '+') * 1.0 / (SELECT COUNT(Patient.ID) FROM Patient WHERE Patient.Diagnosis = 'SLE' AND Patient.Admission = '-') AS ratio
SELECT `Date` FROM Laboratory WHERE `ID` = 30609
SELECT T1.`SEX`, T1.`Birthday`, T2.`Examination Date`, T2.`Symptoms` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`ID` = '163109'
SELECT T1.`ID`, T1.`SEX`, T1.`Birthday` FROM Patient AS T1 INNER JOIN ( SELECT `ID` FROM Laboratory WHERE `LDH` > 500 ) AS T2 ON T1.`ID` = T2.`ID`
SELECT P.`ID`, (STRFTIME('%Y', 'now') - STRFTIME('%Y', P.`Birthday`)) AS age FROM Patient AS P INNER JOIN Examination AS E ON P.`ID` = E.`ID` WHERE E.`RVVT` = '+'
SELECT T1.`ID`, T2.`SEX`, T2.`Diagnosis` FROM Patient AS T2 INNER JOIN Examination AS T1 ON T1.`ID` = T2.`ID` WHERE T1.`Thrombosis` = 2
SELECT T1.ID, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday IS NOT NULL AND T2."T-CHO" IS NOT NULL AND strftime('%Y', T1.Birthday) = '1937' AND T2."T-CHO" >= 250
SELECT T2.`ID`, T2.`SEX`, T2.`Diagnosis` FROM Patient AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`ALB` < 3.5 )
SELECT (SELECT COUNT(P.`ID`) FROM Patient AS P INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` WHERE P.`SEX` = 'F' AND (L.`TP` < 6.0 OR L.`TP` > 8.5)) * 100.0 / (SELECT COUNT(P.`ID`) FROM Patient AS P WHERE P.`SEX` = 'F') AS percentage_female_out_of_range
SELECT AVG(`aCL IgG`) AS average_aCL_IgG FROM Examination JOIN Patient ON Examination.ID = Patient.ID WHERE Patient.Admission = '+' AND (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) >= 50 AND Patient.Birthday IS NOT NULL;
SELECT COUNT(*) FROM Patient AS T1 WHERE T1.`SEX` = 'F' AND T1.`Description` LIKE '1997%' AND T1.`Admission` = '-'
SELECT strftime('%Y', `First Date`) - strftime('%Y', `Birthday`) AS age FROM Patient WHERE `Birthday` IS NOT NULL ORDER BY `Birthday` DESC LIMIT 1
SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Thrombosis` = 1 AND strftime('%Y', T1.`Examination Date`) = '1997' AND T2.`SEX` = 'F'
SELECT MAX(strftime('%Y', `Birthday`)) - MIN(strftime('%Y', `Birthday`)) AS age_gap FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.TG >= 200 AND Patient.Birthday IS NOT NULL;
SELECT E.Symptoms, P.Diagnosis FROM Patient AS P INNER JOIN Examination AS E ON P.ID = E.ID WHERE P.Birthday = ( SELECT MIN(P2.Birthday) FROM Patient AS P2 WHERE P2.Birthday IS NOT NULL )
SELECT (COUNT(DISTINCT T1.`ID`) / 12.0) AS average_male_patients_per_month FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'M' AND T2.`Date` BETWEEN '1998-01-01' AND '1998-12-31'
SELECT lab.Date AS lab_work_date, (strftime('%Y', p.`First Date`) - strftime('%Y', p.Birthday)) AS age_at_admission FROM Patient p JOIN Laboratory lab ON p.ID = lab.ID WHERE p.Birthday IS NOT NULL AND p.`First Date` IS NOT NULL AND p.Birthday = ( SELECT MAX(Birthday) FROM Patient WHERE Diagnosis LIKE 'SJS' AND Birthday IS NOT NULL )
SELECT (SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'M' AND L.UA <= 8.0) * 1.0 / (SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.UA <= 6.5) AS male_to_female_ratio
SELECT COUNT(DISTINCT T1.`ID`) AS `PatientCount` FROM Patient AS T1 LEFT JOIN Examination AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`First Date` IS NOT NULL AND (T2.`Examination Date` IS NULL OR (strftime('%Y', T2.`Examination Date`) - strftime('%Y', T1.`First Date`)) < 1)
SELECT COUNT(DISTINCT T1.ID) AS UnderageCount FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday IS NOT NULL AND DATE('now') - DATE(T1.Birthday) < 18 * 365.25 AND T2.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31'
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'M' AND T2.`T-BIL` > 2.0
SELECT T1.`Diagnosis` FROM ( SELECT T1.`Diagnosis`, COUNT(*) AS `DiagnosisCount` FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T1.`Diagnosis` ) AS T1 ORDER BY T1.`DiagnosisCount` DESC LIMIT 1
SELECT AVG(2023 - CAST(strftime('%Y', P.Birthday) AS INTEGER)) AS Average_Age FROM Patient AS P JOIN Examination AS E ON P.ID = E.ID WHERE P.Birthday IS NOT NULL AND E.`Examination Date` BETWEEN '1991-10-01' AND '1991-10-30'
SELECT (strftime('%Y', E.`Examination Date`) - strftime('%Y', P.`Birthday`)) AS age, P.`Diagnosis` FROM Examination AS E INNER JOIN Patient AS P ON E.`ID` = P.`ID` INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` WHERE L.`HGB` = ( SELECT MAX(L2.`HGB`) FROM Laboratory AS L2 INNER JOIN Patient AS P2 ON L2.`ID` = P2.`ID` WHERE P2.`Birthday` IS NOT NULL ) AND E.`Examination Date` IS NOT NULL AND P.`Birthday` IS NOT NULL
SELECT `ANA` FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'
SELECT CASE WHEN T3.`T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END AS Cholesterol_Status FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.`ID` = T2.`ID` INNER JOIN Laboratory AS T3 ON T1.`ID` = T3.`ID` WHERE T1.`ID` = 2927464 AND T2.`Examination Date` = '1995-09-04' AND T3.`T-CHO` IS NOT NULL
SELECT T1.`SEX` FROM Patient AS T1 WHERE T1.`ID` = ( SELECT T2.`ID` FROM Patient AS T2 WHERE T2.`Diagnosis` = 'AORTITIS' ORDER BY T2.`First Date` ASC LIMIT 1 )
SELECT `aCL IgM` FROM Examination WHERE `ID` = ( SELECT `ID` FROM Patient WHERE `Diagnosis` = 'SLE' AND `Description` = '1994-02-19' ) AND `Examination Date` = '1993-11-12'
SELECT T1.`SEX` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`GPT` = '9' AND T2.`Date` = '1992-06-12'
SELECT SUBSTR('1991-10-21', 1, 4) - CAST(strftime('%Y', T2.`Birthday`) AS INTEGER) AS age FROM Patient AS T2 WHERE T2.`ID` = ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`UA` = '8.4' AND T1.`Date` = '1991-10-21' )
SELECT COUNT(L.`ID`) FROM Laboratory AS L INNER JOIN Patient AS P ON L.`ID` = P.`ID` WHERE P.`ID` = ( SELECT `ID` FROM Patient WHERE `First Date` = '1991-06-13' AND `Description` = 'SJS' ) AND strftime('%Y', L.`Date`) = '1995'
SELECT T2.`Diagnosis` FROM Patient AS T2 WHERE T2.`ID` = ( SELECT T1.`ID` FROM Examination AS T1 WHERE T1.`Examination Date` = '1997-01-27' AND T1.`Diagnosis` = 'SLE' )
SELECT `Symptoms` FROM Examination WHERE `ID` = ( SELECT `ID` FROM Patient WHERE `Birthday` = '1959-03-01' ) AND `Examination Date` = '1993-09-27'
SELECT (SUM(CASE WHEN T2.`Date` LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.`Date` LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) * 1.0 / NULLIF(SUM(CASE WHEN T2.`Date` LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END), 0) * 100 AS decrease_rate FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Birthday` = '1959-02-18'
SELECT DISTINCT T1.`ID` FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Diagnosis` = 'BEHCET' AND T2.`Examination Date` >= '1997-01-01' AND T2.`Examination Date` <= '1997-12-31'
SELECT COUNT(T1.`ID`) AS patient_count, GROUP_CONCAT(T1.`ID`) AS patient_ids FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND T2.`GPT` > 30 AND T2.`ALB` < 4
SELECT ID FROM Patient WHERE SEX = 'F' AND strftime('%Y', Birthday) = '1964' AND Admission = '+'
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`Thrombosis` = 2 AND T2.`ANA` = 'S' AND T2.`aCL IgM` > ( SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE `aCL IgM` IS NOT NULL )
SELECT (CAST(SUM(CASE WHEN L.`UA` <= 6.5 THEN 1 ELSE 0 END) AS REAL) / NULLIF(COUNT(*), 0)) * 100 AS percentage FROM Laboratory AS L INNER JOIN Patient AS P ON L.`ID` = P.`ID` WHERE L.`U-PRO` IS NOT NULL AND L.`U-PRO` > 0 AND L.`U-PRO` < 30
SELECT (SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND strftime('%Y', `First Date`) = '1981' AND Diagnosis = 'BEHCET') * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'M' AND strftime('%Y', `First Date`) = '1981') AS percentage
SELECT DISTINCT P.`ID` FROM Patient AS P INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` WHERE P.`Admission` = '-' AND L.`Date` LIKE '1991-10%' AND L.`T-BIL` < 2.0
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`ANA Pattern` != 'p' AND T1.`SEX` = 'F' AND T1.`Birthday` IS NOT NULL AND T1.`Birthday` BETWEEN '1980-01-01' AND '1989-12-31'
SELECT T1.`SEX` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Diagnosis` = 'PSS' AND T2.`CRP` = '2+' AND T2.`CRE` = 1 AND T2.`LDH` = 123
SELECT AVG(T3.`ALB`) FROM Laboratory AS T3 WHERE T3.`ID` IN ( SELECT T2.`ID` FROM Laboratory AS T2 WHERE T2.`PLT` > 400 AND T2.`ID` IN ( SELECT T1.`ID` FROM Patient AS T1 WHERE T1.`SEX` = 'F' AND T1.`Diagnosis` = 'SLE' ) )
SELECT T1.`Symptoms` FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`Diagnosis` = 'SLE' AND T1.`Symptoms` IS NOT NULL GROUP BY T1.`Symptoms` ORDER BY COUNT(*) DESC LIMIT 1
SELECT Description, Diagnosis FROM Patient WHERE ID = 48473 AND Description IS NOT NULL AND Diagnosis IS NOT NULL
SELECT COUNT(*) FROM Patient WHERE Diagnosis = 'APS' AND SEX = 'F'
SELECT COUNT(DISTINCT P.ID) FROM Laboratory AS L JOIN Patient AS P ON L.ID = P.ID WHERE strftime('%Y', L.Date) = '1997' AND (L.TP <= 6 OR L.TP >= 8.5)
SELECT (SELECT COUNT(*) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Symptoms LIKE '%thrombocytopenia%' AND P.Diagnosis LIKE '%SLE%') * 1.0 / (SELECT COUNT(*) FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID WHERE E.Symptoms LIKE '%thrombocytopenia%') * 100 AS sle_proportion
SELECT (CAST(COUNT(CASE WHEN SEX = 'F' THEN 1 END) AS REAL) / COUNT(*)) * 100 AS female_percentage FROM Patient WHERE strftime('%Y', Birthday) = '1980' AND Diagnosis = 'RA'
SELECT COUNT(T1.`ID`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'M' AND T2.`Examination Date` BETWEEN '1995-01-01' AND '1997-12-31' AND T1.`Diagnosis` = 'BEHCET' AND T1.`Admission` = '-'
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'F' AND T2.`WBC` < 3.5
SELECT (julianday(Examination.`Examination Date`) - julianday(Patient.`First Date`)) AS days_difference FROM Examination JOIN Patient ON Examination.`ID` = Patient.`ID` WHERE Patient.`ID` = 821298 AND Examination.`Examination Date` IS NOT NULL AND Patient.`First Date` IS NOT NULL
SELECT CASE WHEN T1.`SEX` = 'M' AND T2.`UA` <= 8.0 THEN 'Not within normal range' WHEN T1.`SEX` = 'F' AND T2.`UA` <= 6.5 THEN 'Not within normal range' ELSE 'Within normal range' END AS `Uric Acid Status` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`ID` = 57266
SELECT `Date` FROM Laboratory WHERE `ID` = '48473' AND `GOT` >= 60
SELECT T2.SEX, T2.Birthday FROM Patient AS T2 INNER JOIN Laboratory AS T1 ON T2.ID = T1.ID WHERE T1.Date IS NOT NULL AND strftime('%Y', T1.Date) = '1994' AND T1.GOT < 60 AND T2.Birthday IS NOT NULL
SELECT T1.`ID` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'M' AND T2.`GPT` >= 60
SELECT T2.`Diagnosis` FROM Patient AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`GPT` > 60 ) ORDER BY T2.`Birthday` ASC
SELECT AVG(LD.LDH) FROM Laboratory AS LD INNER JOIN Patient AS P ON LD.`ID` = P.`ID` WHERE LD.`LDH` < 500
SELECT T1.ID, (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) AS age FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH BETWEEN 600 AND 800 AND T1.Birthday IS NOT NULL
SELECT T2.`Admission` FROM Patient AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`ALP` < 300 )
SELECT P.`ID`, CASE WHEN L.`ALP` < 300 THEN 'Within normal range' ELSE 'Not within normal range' END AS `ALP_Status` FROM Patient AS P LEFT JOIN Laboratory AS L ON P.`ID` = L.`ID` WHERE P.`Birthday` = '1982-04-01'
SELECT T2.`ID`, T2.`SEX`, T2.`Birthday` FROM Patient AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`TP` < 6.0 )
SELECT T1.`ID`, (T2.`TP` - 8.5) AS `Deviation` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'F' AND T2.`TP` > 8.5
SELECT T1.`ID`, T1.`Birthday` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'M' AND (T2.`ALB` <= 3.5 OR T2.`ALB` >= 5.5) ORDER BY T1.`Birthday` DESC
SELECT T1.`ID`, CASE WHEN T2.`ALB` BETWEEN 3.5 AND 5.5 THEN 'Within Normal Range' ELSE 'Outside Normal Range' END AS `Albumin Status` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE strftime('%Y', T1.`Birthday`) = '1982'
SELECT (SELECT COUNT(*) FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.UA > 6.5) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE SEX = 'F') AS percentage_female_patients_with_high_UA
SELECT AVG(L.UA) AS AverageUA FROM Laboratory AS L INNER JOIN ( SELECT L.ID, L.UA FROM Laboratory AS L INNER JOIN ( SELECT ID, MAX(Date) AS LatestDate FROM Laboratory GROUP BY ID ) AS LatestLab ON L.ID = LatestLab.ID AND L.Date = LatestLab.LatestDate INNER JOIN Patient AS P ON L.ID = P.ID WHERE (P.SEX = 'M' AND L.UA < 8.0) OR (P.SEX = 'F' AND L.UA < 6.5) ) AS NormalUA ON L.ID = NormalUA.ID
SELECT T1.`ID`, T1.`SEX`, T1.`Birthday` FROM Patient AS T1 WHERE T1.`ID` IN ( SELECT `ID` FROM Laboratory WHERE `UN` = 29 )
SELECT P.ID, P.SEX, P.Birthday FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.Diagnosis = 'RA' AND L.UN < 30
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'M' AND T2.`CRE` >= 1.5
SELECT (SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'M' AND T2.`CRE` >= 1.5) > (SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'F' AND T2.`CRE` >= 1.5) AS result
SELECT P.`ID`, P.`SEX`, P.`Birthday` FROM Patient AS P INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` WHERE L.`T-BIL` = ( SELECT MAX(`T-BIL`) FROM Laboratory WHERE `T-BIL` IS NOT NULL )
SELECT T1.`SEX`, COUNT(*) AS `Total Patients` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.`SEX`
SELECT T1.ID, MAX(T2."T-CHO") AS "T-CHO" FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday IS NOT NULL GROUP BY T1.ID HAVING MAX(T2."T-CHO") = ( SELECT MAX("T-CHO") FROM Laboratory ) ORDER BY T1.Birthday ASC LIMIT 1
SELECT AVG(STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.`Birthday`)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'M' AND T2.`T-CHO` >= 250 AND T1.`Birthday` IS NOT NULL
SELECT T2.`ID`, T2.`Diagnosis` FROM Patient AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`TG` > 300 )
SELECT COUNT(*) FROM Patient AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`TG` >= 200 ) AND (strftime('%Y', 'now') - strftime('%Y', T2.`Birthday`)) > 50
SELECT DISTINCT T1.`ID` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Admission` = '-' AND T2.`CPK` < 250
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250
SELECT T3.`ID`, T3.`SEX`, (strftime('%Y', 'now') - strftime('%Y', T3.`Birthday`)) AS age FROM Patient AS T3 WHERE T3.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`GLU` >= 180 AND T2.`T-CHO` < 250 )
SELECT T1.`ID`, T2.`GLU` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`ID` IN ( SELECT `ID` FROM Patient WHERE strftime('%Y', `Description`) = '1991' ) AND T2.`GLU` < 180
SELECT T2.`ID`, T2.`SEX`, T2.`Birthday` FROM Patient AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`WBC` <= 3.5 OR T1.`WBC` >= 9.0 ) ORDER BY T2.`Birthday` ASC
SELECT T1.`ID`, T2.`Diagnosis`, (strftime('%Y', 'now') - strftime('%Y', T2.`Birthday`)) AS age FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`RBC` < 3.5
SELECT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) >= 50 AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0)
SELECT T1.`ID`, T1.`SEX` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Admission` = '-' AND T2.`HGB` < 10
SELECT T1.`ID`, T1.`SEX` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Diagnosis` = 'SLE' AND T2.`HGB` > 10 AND T2.`HGB` < 17 AND T1.`Birthday` = ( SELECT MIN(T3.`Birthday`) FROM Patient AS T3 INNER JOIN Laboratory AS T4 ON T3.`ID` = T4.`ID` WHERE T3.`Diagnosis` = 'SLE' AND T4.`HGB` > 10 AND T4.`HGB` < 17 )
SELECT T2.`ID`, (STRFTIME('%Y', 'now') - STRFTIME('%Y', T2.`Birthday`)) AS age FROM Patient AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`HCT` >= 52 AND T1.`ID` IN ( SELECT `ID` FROM Laboratory GROUP BY `ID` HAVING COUNT(`ID`) > 2 ) )
SELECT AVG(`HCT`) FROM Laboratory WHERE `Date` LIKE '1991%' AND `HCT` < 29
SELECT SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) AS lower_than_normal, SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) AS higher_than_normal FROM Laboratory WHERE PLT < 100 OR PLT > 400
SELECT T2.`ID` FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Date` LIKE '1984%' AND SUBSTR(strftime('%Y-%m-%d', 'now'), 1, 4) - CAST(strftime('%Y', T2.`Birthday`) AS INTEGER) < 50 AND T1.`PLT` BETWEEN 100 AND 400
SELECT (CAST(SUM(CASE WHEN L.PT >= 14 THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS percentage_female_abnormal_PT FROM Patient AS P INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE strftime('%Y', 'now') - strftime('%Y', P.Birthday) > 55 AND P.SEX = 'F'
SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.`First Date`) > '1992' AND T2.PT < 14
SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Examination Date` > '1997-01-01' AND T2.`APTT` < 45
SELECT COUNT(DISTINCT T1.`ID`) FROM Examination AS T1 WHERE T1.`Thrombosis` = 3 AND T1.`ID` IN ( SELECT DISTINCT T2.`ID` FROM Laboratory AS T2 WHERE T2.`APTT` > 45 )
SELECT COUNT(DISTINCT T1.`ID`) AS abnormal_fibrinogen_count FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'M' AND T2.`WBC` BETWEEN 3.5 AND 9.0 AND (T2.`FG` <= 150 OR T2.`FG` >= 450)
SELECT COUNT(DISTINCT T1.`ID`) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Birthday` > '1980-01-01' AND (T2.`FG` < 150 OR T2.`FG` > 450)
SELECT T2.`Diagnosis` FROM Patient AS T2 INNER JOIN Laboratory AS T1 ON T2.`ID` = T1.`ID` WHERE T1.`U-PRO` >= 30
SELECT DISTINCT T1.`ID` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Diagnosis` = 'SLE' AND T2.`U-PRO` IS NOT NULL AND CAST(T2.`U-PRO` AS REAL) > 0 AND CAST(T2.`U-PRO` AS REAL) < 30
SELECT COUNT(DISTINCT T1.`ID`) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`IGG` < 900 AND T2.`Symptoms` = 'abortion'
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL
SELECT T2.Diagnosis FROM Patient AS T2 WHERE T2.ID = ( SELECT T1.ID FROM Laboratory AS T1 WHERE T1.IGA = ( SELECT MAX(IGA) FROM Laboratory WHERE IGA BETWEEN 80 AND 500 ) )
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.`First Date`) >= '1990' AND T2.IGA BETWEEN 80 AND 500
SELECT T1.`Diagnosis` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`IGM` NOT BETWEEN 40 AND 400 GROUP BY T1.`Diagnosis` ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(*) FROM Patient AS T1 WHERE T1.`ID` IN ( SELECT T2.`ID` FROM Laboratory AS T2 WHERE T2.`CRP` LIKE '+' OR T2.`CRP` LIKE '-' OR T2.`CRP` < '1.0' ) AND T1.`Description` IS NULL
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRP NOT IN ('+-', '-') AND CAST(CASE WHEN T2.CRP LIKE '%+' THEN REPLACE(T2.CRP, '+', '') ELSE T2.CRP END AS REAL) >= 1.0 AND (CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', T1.Birthday) AS INTEGER)) < 18
SELECT COUNT(DISTINCT T1.`ID`) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`RA` IN ('-', '+') AND T2.`KCT` = '+'
SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday IS NOT NULL AND T1.Birthday > '1995-01-01' AND T2.RA IN ('-', '+-')
SELECT T1.ID FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.RF < '20' AND (strftime('%Y', 'now') - strftime('%Y', T2.Birthday)) > 60 AND T2.Birthday IS NOT NULL
SELECT COUNT(DISTINCT T1.`ID`) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`RF` IS NOT NULL AND CAST(SUBSTR(T1.`RF`, 2) AS REAL) < 20 AND T2.`Thrombosis` = 0
SELECT COUNT(DISTINCT P.`ID`) FROM Patient AS P INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` INNER JOIN Examination AS E ON P.`ID` = E.`ID` WHERE L.`C3` > 35 AND E.`ANA Pattern` = 'P'
SELECT E.`ID` FROM Examination AS E WHERE E.`aCL IgA` = ( SELECT MAX(E2.`aCL IgA`) FROM Examination AS E2 WHERE E2.`ID` IN ( SELECT DISTINCT P.`ID` FROM Patient AS P INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` WHERE L.`GOT` IS NOT NULL OR L.`GPT` IS NOT NULL OR L.`LDH` IS NOT NULL OR L.`ALP` IS NOT NULL ) )
SELECT COUNT(DISTINCT T1.`ID`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.`ID` = T2.`ID` INNER JOIN Laboratory AS T3 ON T1.`ID` = T3.`ID` WHERE T2.`Thrombosis` > 0 AND T3.`C4` > 10
SELECT COUNT(DISTINCT T1.`ID`) AS patient_count FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`RNP` IN ('-', '0') AND T1.`Admission` = '+'
SELECT T1.`Birthday` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`RNP` NOT IN ('-', '+-') AND T1.`Birthday` = ( SELECT MAX(T3.`Birthday`) FROM Patient AS T3 INNER JOIN Laboratory AS T4 ON T3.`ID` = T4.`ID` WHERE T4.`RNP` NOT IN ('-', '+-') )
SELECT COUNT(*) FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`Admission` IN ('-', '+-') AND T1.`Thrombosis` = 1
SELECT T1.`ID` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`SM` NOT IN ('-', '+-') ORDER BY T1.`Birthday` DESC LIMIT 3
SELECT DISTINCT T1.`ID` FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Examination Date` >= '1997-01-01' AND T2.`SC170` IN ('-', '+-')
SELECT COUNT(DISTINCT P.`ID`) AS MalePatientsWithVertigo FROM Patient AS P INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` WHERE L.`SC170` IN ('-', '+') AND P.`SEX` = 'M' AND (P.`Diagnosis` LIKE '%vertigo%' OR P.`Description` LIKE '%vertigo%')
SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE strftime('%Y', T1.`First Date`) < '1990' AND T2.SSA IN ('-', '+-')
SELECT T1.`ID` FROM Patient AS T1 WHERE T1.`ID` IN ( SELECT `ID` FROM Laboratory WHERE `SSA` NOT IN ('-', '+') ) ORDER BY T1.`First Date` ASC LIMIT 1
SELECT COUNT(DISTINCT T1.`ID`) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Diagnosis` = 'SLE' AND T2.`SSB` IN ('-', '+-')
SELECT COUNT(DISTINCT T1.`ID`) FROM Examination AS T1 WHERE T1.`Symptoms` IS NOT NULL AND T1.`ID` IN ( SELECT DISTINCT T2.`ID` FROM Examination AS T2 WHERE T2.`Symptoms` IN ('-', '+-') )
SELECT COUNT(*) FROM Patient AS T1 WHERE T1.`SEX` = 'M' AND T1.`ID` IN ( SELECT T2.`ID` FROM Laboratory AS T2 WHERE T2.`CENTROMEA` IN ('-', '+-') AND T2.`SSB` IN ('-', '+-') )
SELECT T2.`Diagnosis` FROM Patient AS T2 INNER JOIN Laboratory AS T1 ON T2.`ID` = T1.`ID` WHERE CAST(T1.`DNA` AS REAL) >= 8
SELECT COUNT(DISTINCT T1.`ID`) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE CAST(T1.`DNA` AS REAL) < 8 AND T2.`Description` IS NULL
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`DNA-II` >= 8 AND T1.`Admission` = '+'
SELECT (SELECT COUNT(Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GOT >= 60 AND Patient.Diagnosis = 'SLE') * 1.0 / (SELECT COUNT(Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GOT >= 60) AS percentage_sle_abnormal_got
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GOT < 60
SELECT MAX(T2.`Birthday`) AS Youngest_Birthday FROM Patient AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`GOT` >= 60 )
SELECT T2.`Birthday` FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`GPT` < 60 ORDER BY T1.`GPT` DESC LIMIT 3
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`GOT` < 60 AND T1.`SEX` = 'M'
SELECT MIN("First Date") FROM Patient WHERE ID = ( SELECT T1.ID FROM Laboratory AS T1 WHERE T1.LDH = ( SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500 ) )
SELECT MAX(T2.`First Date`) AS LatestMedicalDataDate FROM Patient AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`LDH` >= 500 )
SELECT COUNT(*) FROM Patient AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`ALP` >= 300 ) AND T2.`Admission` = '+'
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Admission` = '-' AND T2.`ALP` < 300
SELECT T1.`Diagnosis` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`TP` < 6.0
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Diagnosis` = 'SJS' AND T2.`TP` > 6.0 AND T2.`TP` < 8.5
SELECT E.`Examination Date` FROM Examination AS E INNER JOIN Laboratory AS L ON E.`ID` = L.`ID` WHERE L.`ALB` = ( SELECT MAX(L2.`ALB`) FROM Laboratory AS L2 WHERE L2.`ALB` > 3.5 AND L2.`ALB` < 5.5 ) AND E.`Examination Date` IS NOT NULL
SELECT COUNT(T1.`ID`) AS `NumberOfMalePatients` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'M' AND T2.`ALB` > 3.5 AND T2.`ALB` < 5.5 AND T2.`TP` BETWEEN 6.0 AND 8.5
SELECT E."aCL IgG", E."aCL IgM", E."aCL IgA" FROM Examination AS E INNER JOIN Patient AS P ON E.ID = P.ID INNER JOIN Laboratory AS L ON P.ID = L.ID WHERE P.SEX = 'F' AND L.UA = ( SELECT MAX(L2.UA) FROM Laboratory AS L2 INNER JOIN Patient AS P2 ON L2.ID = P2.ID WHERE P2.SEX = 'F' AND L2.UA > 6.50 ) AND E."aCL IgG" IS NOT NULL AND E."aCL IgM" IS NOT NULL AND E."aCL IgA" IS NOT NULL
SELECT MAX(T3.`ANA`) FROM Examination AS T3 WHERE T3.`ID` IN ( SELECT T1.`ID` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`CRE` < 1.5 )
SELECT T1.`ID` FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T2.`CRE` < 1.5 AND T1.`aCL IgA` = ( SELECT MAX(`aCL IgA`) FROM Examination AS T3 INNER JOIN Laboratory AS T4 ON T3.`ID` = T4.`ID` WHERE T4.`CRE` < 1.5 )
SELECT COUNT(DISTINCT T1.`ID`) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`T-BIL` >= 2.0 AND T2.`ANA Pattern` LIKE '%P%'
SELECT E.`ANA` FROM Examination AS E INNER JOIN Patient AS P ON E.`ID` = P.`ID` INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` WHERE L.`T-BIL` = ( SELECT MAX(L2.`T-BIL`) FROM Laboratory AS L2 WHERE L2.`T-BIL` < 2.0 ) AND E.`ANA` IS NOT NULL
SELECT COUNT(DISTINCT P.`ID`) FROM Patient AS P INNER JOIN Laboratory AS L ON P.`ID` = L.`ID` INNER JOIN Examination AS E ON P.`ID` = E.`ID` WHERE L.`T-CHO` >= 250 AND E.`KCT` = '-'
SELECT COUNT(*) FROM Examination AS T2 INNER JOIN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`T-CHO` < 250 ) AS T3 ON T2.`ID` = T3.`ID` WHERE T2.`ANA Pattern` = 'P'
SELECT COUNT(DISTINCT T1.`ID`) FROM Examination AS T1 INNER JOIN ( SELECT DISTINCT `ID` FROM Laboratory WHERE `TG` < 200 ) AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Symptoms` IS NOT NULL
SELECT T2.Diagnosis FROM Patient AS T2 WHERE T2.ID = ( SELECT T1.ID FROM Laboratory AS T1 WHERE T1.TG = ( SELECT MAX(TG) FROM Laboratory WHERE TG < 200 ) )
SELECT T1.`ID` FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Thrombosis` = 0 AND T2.`CPK` < 250
SELECT COUNT(DISTINCT T2.`ID`) FROM Examination AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`CPK` < 250 ) AND (T2.`KCT` = '+' OR T2.`RVVT` = '+' OR T2.`LAC` = '+')
SELECT T2.`Birthday` FROM Patient AS T2 WHERE T2.`Birthday` = ( SELECT MIN(T2.`Birthday`) FROM Patient AS T2 WHERE T2.`ID` IN ( SELECT T1.`ID` FROM Laboratory AS T1 WHERE T1.`GLU` > 180 ) )
SELECT COUNT(DISTINCT T1.`ID`) FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`GLU` < 180 AND T2.`Thrombosis` = 0
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Admission` = '+' AND T2.`WBC` BETWEEN 3.5 AND 9.0
SELECT COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9.0
SELECT DISTINCT T1.`ID` FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE (T1.`RBC` <= 3.5 OR T1.`RBC` >= 6.0) AND T2.`Admission` = '-'
SELECT COUNT(DISTINCT T1.`ID`) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`PLT` > 100 AND T1.`PLT` < 400 AND T2.`Diagnosis` IS NOT NULL
SELECT T2.`PLT` FROM Laboratory AS T2 INNER JOIN Patient AS T1 ON T1.`ID` = T2.`ID` WHERE T1.`Diagnosis` = 'MCTD' AND T2.`PLT` > 100 AND T2.`PLT` < 400
SELECT AVG(T2.`PT`) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`SEX` = 'M' AND T2.`PT` < 14
SELECT COUNT(DISTINCT T1.`ID`) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID` WHERE T1.`Thrombosis` IN (1, 2) AND T2.`PT` < 14
SELECT `major_name` FROM major WHERE `major_id` = ( SELECT `link_to_major` FROM member WHERE `first_name` = 'Angela' AND `last_name` = 'Sanders' )
SELECT COUNT(*) AS student_count FROM member AS M INNER JOIN major AS J ON M.link_to_major = J.major_id WHERE J.college = 'College of Engineering'
SELECT m.first_name, m.last_name FROM member m JOIN major j ON m.link_to_major = j.major_id WHERE j.department = 'Art and Design';
SELECT COUNT(DISTINCT T1.link_to_member) AS student_count FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer'
SELECT T3.phone FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer'
SELECT COUNT(*) FROM member AS T1 WHERE T1.member_id IN ( SELECT T2.link_to_member FROM attendance AS T2 INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = "Women's Soccer" ) AND T1.t_shirt_size = 'Medium'
SELECT T2.event_id, T2.event_name FROM event AS T2 INNER JOIN ( SELECT T1.link_to_event, COUNT(T1.link_to_member) AS attendance_count FROM attendance AS T1 GROUP BY T1.link_to_event ) AS attendance_summary ON T2.event_id = attendance_summary.link_to_event WHERE attendance_summary.attendance_count = ( SELECT MAX(attendance_count) FROM ( SELECT COUNT(link_to_member) AS attendance_count FROM attendance GROUP BY link_to_event ) AS inner_summary )
SELECT `college` FROM major WHERE `major_id` = ( SELECT `link_to_major` FROM member WHERE `member_id` = ( SELECT `member_id` FROM member WHERE `position` = 'Vice President' ) )
SELECT `event_name` FROM event WHERE `event_id` IN ( SELECT `link_to_event` FROM attendance WHERE `link_to_member` = ( SELECT `member_id` FROM member WHERE `first_name` = 'Maya' AND `last_name` = 'Mclean' ) )
SELECT COUNT(T1.`link_to_event`) AS event_count FROM attendance AS T1 INNER JOIN event AS T2 ON T1.`link_to_event` = T2.`event_id` WHERE T1.`link_to_member` = ( SELECT `member_id` FROM member WHERE `first_name` = 'Sacha' AND `last_name` = 'Harrison' ) AND strftime('%Y', T2.`event_date`) = '2019'
SELECT COUNT(T2.`event_id`) FROM event AS T2 WHERE T2.`event_id` IN ( SELECT T1.`link_to_event` FROM attendance AS T1 GROUP BY T1.`link_to_event` HAVING COUNT(T1.`link_to_member`) > 10 ) AND T2.`type` = 'Meeting'
SELECT T1.`event_name` FROM event AS T1 WHERE T1.`event_id` IN ( SELECT T1.`event_id` FROM event AS T1 INNER JOIN attendance AS T2 ON T1.`event_id` = T2.`link_to_event` GROUP BY T1.`event_id` HAVING COUNT(T2.`link_to_member`) > 20 )
SELECT (SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020') * 1.0 / (SELECT COUNT(DISTINCT event_name) FROM event WHERE type = 'Meeting' AND strftime('%Y', event_date) = '2020') AS average_attendance
SELECT expense_description FROM expense WHERE cost = ( SELECT MAX(cost) FROM expense )
SELECT COUNT(*) AS member_count FROM member WHERE `link_to_major` = ( SELECT `major_id` FROM major WHERE `major_name` = 'Environmental Engineering' )
SELECT CONCAT(T1.`first_name`, ' ', T1.`last_name`) AS full_name FROM member AS T1 WHERE T1.`member_id` IN ( SELECT `link_to_member` FROM attendance WHERE `link_to_event` = ( SELECT `event_id` FROM event WHERE `event_name` = 'Laugh Out Loud' ) )
SELECT T1.`last_name` FROM member AS T1 WHERE T1.`link_to_major` = ( SELECT `major_id` FROM major WHERE `major_name` = 'Law and Constitutional Studies' )
SELECT `county` FROM zip_code WHERE `zip_code` = ( SELECT `zip` FROM member WHERE `member_id` = ( SELECT `member_id` FROM member WHERE `first_name` = 'Sherri' AND `last_name` = 'Ramsey' ) )
SELECT T2.`college` FROM major AS T2 WHERE T2.`major_id` = ( SELECT T1.`link_to_major` FROM member AS T1 WHERE T1.`first_name` = 'Tyler' AND T1.`last_name` = 'Hewitt' )
SELECT SUM(`amount`) AS total_amount FROM income WHERE `link_to_member` = ( SELECT `member_id` FROM member WHERE `position` = 'Vice President' )
SELECT SUM(b.`spent`) AS total_spent FROM budget AS b INNER JOIN event AS e ON b.`link_to_event` = e.`event_id` WHERE b.`category` = 'Food' AND e.`event_name` = 'September Meeting'
SELECT Z.`city`, Z.`state` FROM member AS M INNER JOIN zip_code AS Z ON M.`zip` = Z.`zip_code` WHERE M.`position` = 'President'
SELECT CONCAT(T1.`first_name`, ' ', T1.`last_name`) AS full_name FROM member AS T1 WHERE T1.`zip` IN ( SELECT `zip_code` FROM zip_code WHERE `state` = 'Illinois' )
SELECT SUM(`spent`) FROM budget WHERE `link_to_event` = ( SELECT `event_id` FROM event WHERE `event_name` = 'September Meeting' ) AND `category` = 'Advertisement'
SELECT major_id, major_name, department FROM major;
SELECT SUM(`amount`) AS total_budgeted_amount FROM budget WHERE `link_to_event` = ( SELECT `event_id` FROM event WHERE `event_name` = 'October Speaker' )
SELECT COUNT(*) = 0 AS all_approved FROM expense WHERE `link_to_budget` IN ( SELECT `budget_id` FROM budget WHERE `link_to_event` = ( SELECT `event_id` FROM event WHERE `event_name` = 'October Meeting' AND `event_date` = '2019-10-08' ) ) AND `approved` IS NOT NULL AND `approved` != 'true'
SELECT SUM(cost) / COUNT(expense_id) AS average_cost FROM expense WHERE link_to_member = ( SELECT member_id FROM member WHERE first_name = 'Elijah' AND last_name = 'Allen' ) AND strftime('%m', expense_date) IN ('09', '10')
SELECT (SELECT SUM(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE strftime('%Y', T2.event_date) = '2019') - (SELECT SUM(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE strftime('%Y', T2.event_date) = '2020') AS difference_spent
SELECT `location` FROM event WHERE `event_name` = 'Spring Budget Review'
SELECT `cost` FROM expense WHERE `expense_description` = 'Posters' AND `expense_date` = '2019-09-04'
SELECT remaining FROM budget WHERE amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )
SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'
SELECT COUNT(*) FROM major WHERE college = 'College of Humanities and Social Sciences'
SELECT `phone` FROM member WHERE `member_id` = ( SELECT `member_id` FROM member WHERE `first_name` = 'Carlo' AND `last_name` = 'Jacobs' )
SELECT `county` FROM zip_code WHERE `zip_code` = ( SELECT `zip` FROM member WHERE `first_name` = 'Adela' AND `last_name` = 'O''Gallagher' )
SELECT COUNT(*) FROM budget WHERE `link_to_event` IN ( SELECT `event_id` FROM event WHERE `event_name` = 'November Meeting' ) AND `remaining` < 0
SELECT SUM(`amount`) AS total_budget_amount FROM budget WHERE `link_to_event` = ( SELECT `event_id` FROM event WHERE `event_name` = 'September Speaker' )
SELECT T3.status FROM event AS T3 WHERE T3.event_id = ( SELECT T2.link_to_event FROM budget AS T2 WHERE T2.budget_id = ( SELECT T1.link_to_budget FROM expense AS T1 WHERE T1.expense_description = 'Post Cards, Posters' AND T1.expense_date = '2019-08-20' ) )
SELECT `major_name` FROM major WHERE `major_id` = ( SELECT `link_to_major` FROM member WHERE `first_name` = 'Brent' AND `last_name` = 'Thomason' )
SELECT COUNT(*) FROM member AS T1 WHERE T1.`t_shirt_size` = 'Large' AND T1.`link_to_major` = ( SELECT `major_id` FROM major WHERE `major_name` = 'Human Development and Family Studies' )
SELECT `type` FROM zip_code WHERE `zip_code` = ( SELECT `zip` FROM member WHERE `first_name` = 'Christof' AND `last_name` = 'Nielson' )
SELECT `major_name` FROM major WHERE `major_id` = ( SELECT `link_to_major` FROM member WHERE `member_id` = ( SELECT `member_id` FROM member WHERE `position` = 'Vice President' ) )
SELECT `state` FROM zip_code WHERE `zip_code` = ( SELECT `zip` FROM member WHERE `member_id` = ( SELECT `member_id` FROM member WHERE `first_name` = 'Sacha' AND `last_name` = 'Harrison' ) )
SELECT `department` FROM major WHERE `major_id` = ( SELECT `link_to_major` FROM member WHERE `member_id` = ( SELECT `member_id` FROM member WHERE `position` = 'President' ) )
SELECT date_received FROM income WHERE link_to_member = ( SELECT member_id FROM member WHERE first_name = 'Connor' AND last_name = 'Hilton' ) AND source = 'Dues'
SELECT T2.first_name, T2.last_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.date_received = ( SELECT MIN(date_received) FROM income WHERE source = 'Dues' )
SELECT (SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Yearly Kickoff' AND T1.category = 'Advertisement') / (SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'October Meeting' AND T1.category = 'Advertisement') AS ratio
SELECT (SELECT SUM(amount) FROM budget WHERE category = 'Parking' AND link_to_event IN ( SELECT event_id FROM event WHERE event_name = 'November Speaker' )) * 100.0 / (SELECT SUM(amount) FROM budget WHERE link_to_event IN ( SELECT event_id FROM event WHERE event_name = 'November Speaker' )) AS parking_percentage
SELECT SUM(cost) AS total_cost FROM expense WHERE expense_description = 'Pizza'
SELECT COUNT(DISTINCT `city`) FROM zip_code WHERE `county` = 'Orange County' AND `state` = 'Virginia'
SELECT DISTINCT T1.`department` FROM major AS T1 WHERE T1.`college` = 'College of Humanities and Social Sciences'
SELECT `city`, `county`, `state` FROM zip_code WHERE `zip_code` = ( SELECT `zip` FROM member WHERE `first_name` = 'Amy' AND `last_name` = 'Firth' )
SELECT T1.`expense_description` FROM expense AS T1 INNER JOIN budget AS T2 ON T1.`link_to_budget` = T2.`budget_id` WHERE T2.`budget_id` = ( SELECT `budget_id` FROM budget ORDER BY `remaining` ASC LIMIT 1 )
SELECT T1.* FROM member AS T1 INNER JOIN attendance AS T2 ON T1.`member_id` = T2.`link_to_member` WHERE T2.`link_to_event` = ( SELECT `event_id` FROM event WHERE `event_name` = 'October Meeting' )
SELECT T2.`college` FROM member AS T1 INNER JOIN major AS T2 ON T1.`link_to_major` = T2.`major_id` GROUP BY T2.`college` ORDER BY COUNT(T1.`member_id`) DESC LIMIT 1
SELECT `major_name` FROM major WHERE `major_id` = ( SELECT `link_to_major` FROM member WHERE `phone` = '809-555-3360' )
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.amount = ( SELECT MAX(amount) FROM budget )
SELECT T1.`expense_description` FROM expense AS T1 WHERE T1.`link_to_member` = ( SELECT `member_id` FROM member WHERE `position` = 'Vice President' )
SELECT COUNT(DISTINCT T1.link_to_member) AS member_count FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'Women''s Soccer'
SELECT `date_received` FROM income WHERE `link_to_member` = ( SELECT `member_id` FROM member WHERE `first_name` = 'Casey' AND `last_name` = 'Mason' )
SELECT COUNT(*) FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.`zip` = T2.`zip_code` WHERE T2.`state` = 'Maryland'
SELECT COUNT(T1.`link_to_event`) AS event_count FROM attendance AS T1 WHERE T1.`link_to_member` = ( SELECT `member_id` FROM member WHERE `phone` = '954-555-6240' )
SELECT T1.first_name, T1.last_name FROM member AS T1 WHERE T1.link_to_major IN ( SELECT major_id FROM major WHERE department = 'School of Applied Sciences, Technology and Education' )
SELECT T1.`event_id`, T1.`event_name`, CAST(T1.`spent` AS REAL) / T1.`amount` AS spend_to_budget_ratio FROM ( SELECT T1.`event_id`, T1.`event_name`, T2.`spent`, T2.`amount` FROM event AS T1 INNER JOIN budget AS T2 ON T1.`event_id` = T2.`link_to_event` WHERE T1.`status` = 'Closed' ) AS T1 WHERE T1.`amount` > 0 ORDER BY spend_to_budget_ratio DESC LIMIT 1
SELECT COUNT(*) FROM member WHERE position = 'President'
SELECT MAX(spent) AS highest_spent FROM budget WHERE spent IS NOT NULL
SELECT COUNT(*) FROM event WHERE `type` = 'Meeting' AND strftime('%Y', `event_date`) = '2020'
SELECT SUM(spent) AS total_spent FROM budget WHERE category = 'Food'
SELECT T1.`first_name`, T1.`last_name` FROM attendance AS T2 INNER JOIN member AS T1 ON T2.`link_to_member` = T1.`member_id` GROUP BY T1.`first_name`, T1.`last_name` HAVING COUNT(T2.`link_to_event`) > 7
SELECT T3.`first_name`, T3.`last_name` FROM member AS T3 WHERE T3.`member_id` IN ( SELECT T1.`link_to_member` FROM attendance AS T1 INNER JOIN event AS T2 ON T1.`link_to_event` = T2.`event_id` WHERE T2.`event_name` = 'Community Theater' ) AND T3.`member_id` IN ( SELECT T1.`member_id` FROM member AS T1 INNER JOIN major AS T2 ON T1.`link_to_major` = T2.`major_id` WHERE T2.`major_name` = 'Interior Design' )
SELECT `first_name`, `last_name` FROM member WHERE `zip` IN ( SELECT `zip_code` FROM zip_code WHERE `city` = 'Georgetown' AND `state` = 'South Carolina' )
SELECT SUM(`amount`) FROM income WHERE `link_to_member` = ( SELECT `member_id` FROM member WHERE `first_name` = 'Grant' AND `last_name` = 'Gilmour' )
SELECT T2.`first_name`, T2.`last_name` FROM income AS T1 INNER JOIN member AS T2 ON T1.`link_to_member` = T2.`member_id` WHERE T1.`amount` > 40
SELECT SUM(T3.`cost`) AS total_expense FROM expense AS T3 INNER JOIN budget AS T2 ON T3.`link_to_budget` = T2.`budget_id` INNER JOIN event AS T1 ON T2.`link_to_event` = T1.`event_id` WHERE T1.`event_name` = 'Yearly Kickoff'
SELECT `first_name`, `last_name` FROM member WHERE `member_id` = ( SELECT `link_to_member` FROM expense WHERE `link_to_budget` = ( SELECT `budget_id` FROM budget WHERE `link_to_event` = ( SELECT `event_id` FROM event WHERE `event_name` = 'Yearly Kickoff' ) ) )
SELECT T1.first_name || ' ' || T1.last_name AS full_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount = ( SELECT MAX(amount) FROM income )
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.cost = ( SELECT MIN(cost) FROM expense )
SELECT (SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) / SUM(T3.cost)) * 100 AS percentage_cost_yearly_kickoff FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.cost IS NOT NULL
SELECT SUM(CASE WHEN T2.major_name = 'Finance' THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN T2.major_name = 'Physics' THEN 1 ELSE 0 END), 0) AS finance_physics_ratio FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name IS NOT NULL;
SELECT source FROM ( SELECT source, SUM(amount) AS total_amount FROM income WHERE date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY source ) AS subquery ORDER BY total_amount DESC LIMIT 1
SELECT `first_name`, `last_name`, `email` FROM member WHERE `position` = 'Secretary'
SELECT COUNT(*) FROM member AS T1 WHERE T1.`link_to_major` = ( SELECT `major_id` FROM major WHERE `major_name` = 'Physics Teaching' )
SELECT COUNT(DISTINCT T1.`link_to_member`) AS member_count FROM attendance AS T1 INNER JOIN event AS T2 ON T1.`link_to_event` = T2.`event_id` WHERE T2.`event_name` = 'Community Theater' AND strftime('%Y', T2.`event_date`) = '2019'
SELECT (SELECT COUNT(T2.`link_to_event`) FROM attendance AS T2 WHERE T2.`link_to_member` = T1.`member_id`) AS event_count, T1.`link_to_major` FROM member AS T1 WHERE T1.`first_name` = 'Luisa' AND T1.`last_name` = 'Guidi'
SELECT (SELECT SUM(T1.`spent`) FROM budget AS T1 INNER JOIN event AS T2 ON T1.`link_to_event` = T2.`event_id` WHERE T1.`category` = 'Food' AND T2.`status` = 'Closed') / (SELECT COUNT(T2.`event_id`) FROM event AS T2 WHERE T2.`status` = 'Closed') AS average_spent
SELECT T2.event_name FROM event AS T2 WHERE T2.event_id = ( SELECT T1.link_to_event FROM budget AS T1 WHERE T1.category = 'Advertisement' AND T1.spent = ( SELECT MAX(T2.spent) FROM budget AS T2 WHERE T2.category = 'Advertisement' ) )
SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END AS attended FROM attendance WHERE link_to_member = ( SELECT member_id FROM member WHERE first_name = 'Maya' AND last_name = 'Mclean' ) AND link_to_event = ( SELECT event_id FROM event WHERE event_name = 'Women''s Soccer' )
SELECT (CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) / COUNT(event_id)) * 100 AS percentage_share FROM event WHERE event_date BETWEEN '2019-01-01' AND '2019-12-31'
SELECT `cost` FROM expense WHERE `expense_description` = 'Posters' AND `link_to_budget` IN ( SELECT `budget_id` FROM budget WHERE `link_to_event` = ( SELECT `event_id` FROM event WHERE `event_name` = 'September Speaker' ) )
SELECT t_shirt_size FROM ( SELECT t_shirt_size, COUNT(*) AS size_count FROM member GROUP BY t_shirt_size ) AS size_counts WHERE size_count = ( SELECT MAX(size_count) FROM ( SELECT COUNT(*) AS size_count FROM member GROUP BY t_shirt_size ) AS inner_counts );
SELECT T1.`event_name` FROM event AS T1 INNER JOIN budget AS T2 ON T1.`event_id` = T2.`link_to_event` WHERE T1.`status` = 'Closed' AND T2.`remaining` < 0 ORDER BY T2.`remaining` ASC LIMIT 1
SELECT T4.expense_description, SUM(T4.cost) AS total_value FROM expense AS T4 INNER JOIN budget AS T3 ON T4.link_to_budget = T3.budget_id WHERE T3.link_to_event = ( SELECT event_id FROM event WHERE event_name = 'October Meeting' ) AND T4.approved = 'true' GROUP BY T4.expense_description
SELECT `category`, `amount` FROM budget WHERE `link_to_event` = ( SELECT `event_id` FROM event WHERE `event_name` = 'April Speaker' ) ORDER BY `amount` ASC
SELECT * FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )
SELECT * FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3
SELECT SUM(cost) AS total_cost FROM expense WHERE expense_description = 'Parking'
SELECT SUM(`cost`) AS total_expense FROM expense WHERE `expense_date` = '2019-08-20'
SELECT T1.`first_name`, T1.`last_name`, COALESCE(SUM(T2.`cost`), 0) AS total_cost FROM member AS T1 LEFT JOIN expense AS T2 ON T1.`member_id` = T2.`link_to_member` WHERE T1.`member_id` = 'rec4BLdZHS2Blfp4v' GROUP BY T1.`first_name`, T1.`last_name`
SELECT `expense_description` FROM expense WHERE `link_to_member` = ( SELECT `member_id` FROM member WHERE `first_name` = 'Sacha' AND `last_name` = 'Harrison' )
SELECT T2.`expense_description` FROM expense AS T2 WHERE T2.`link_to_member` IN ( SELECT `member_id` FROM member WHERE `t_shirt_size` = 'X-Large' )
SELECT T2.`zip` FROM member AS T2 WHERE T2.`member_id` IN ( SELECT DISTINCT T1.`link_to_member` FROM expense AS T1 WHERE T1.`cost` < 50 )
SELECT `major_name` FROM major WHERE `major_id` = ( SELECT `link_to_major` FROM member WHERE `first_name` = 'Phillip' AND `last_name` = 'Cullen' )
SELECT T1.`position` FROM member AS T1 WHERE T1.`link_to_major` = ( SELECT `major_id` FROM major WHERE `major_name` = 'Business' )
SELECT COUNT(*) FROM member WHERE `t_shirt_size` = 'Medium' AND `link_to_major` = ( SELECT `major_id` FROM major WHERE `major_name` = 'Business' )
SELECT DISTINCT T2.`type` FROM budget AS T1 INNER JOIN event AS T2 ON T1.`link_to_event` = T2.`event_id` WHERE T1.`remaining` > 30
SELECT DISTINCT `type` FROM event WHERE `location` = 'MU 215'
SELECT T1.`category` FROM budget AS T1 INNER JOIN event AS T2 ON T1.`link_to_event` = T2.`event_id` WHERE T2.`event_date` = '2020-03-24T12:00:00'
SELECT `major_name` FROM major WHERE `major_id` = ( SELECT `link_to_major` FROM member WHERE `position` = 'Vice President' )
SELECT (CAST(COUNT(T1.member_id) AS REAL) / (SELECT COUNT(member_id) FROM member)) * 100 AS percentage_math_major FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Mathematics'
SELECT DISTINCT `type` FROM event WHERE `location` = 'MU 215'
SELECT COUNT(*) FROM income WHERE amount = 50
SELECT COUNT(*) FROM member WHERE `position` = 'Member' AND `t_shirt_size` = 'X-Large'
SELECT COUNT(*) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'
SELECT T1.`last_name`, T2.`department`, T2.`college` FROM member AS T1 INNER JOIN major AS T2 ON T1.`link_to_major` = T2.`major_id` WHERE T2.`major_id` = ( SELECT `major_id` FROM major WHERE `major_name` = 'Environmental Engineering' )
SELECT T2.`category` FROM budget AS T2 INNER JOIN event AS T1 ON T1.`event_id` = T2.`link_to_event` WHERE T2.`spent` = 0 AND T1.`location` = 'MU 215' AND T1.`type` = 'Guest Speaker'
SELECT DISTINCT T3.city, T3.state FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN zip_code AS T3 ON T1.zip = T3.zip_code WHERE T2.department = 'Electrical and Computer Engineering Department' AND T1.position = 'Member'
SELECT T1.`event_name` FROM event AS T1 INNER JOIN attendance AS T2 ON T1.`event_id` = T2.`link_to_event` INNER JOIN member AS T3 ON T2.`link_to_member` = T3.`member_id` INNER JOIN zip_code AS T4 ON T3.`zip` = T4.`zip_code` WHERE T3.`position` = 'Vice President' AND T1.`type` = 'Social' AND T1.`location` = '900 E. Washington St.'
SELECT T1.`last_name`, T1.`position` FROM member AS T1 WHERE T1.`member_id` = ( SELECT `link_to_member` FROM expense WHERE `expense_description` = 'Pizza' AND `expense_date` = '2019-09-10' )
SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.position = 'Member'
SELECT (COUNT(CASE WHEN T2.amount = 50 THEN 1 END) * 100.0 / COUNT(T1.member_id)) AS percentage FROM member AS T1 LEFT JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'Medium' AND T1.position = 'Member'
SELECT DISTINCT `state` FROM zip_code WHERE `type` = 'PO Box'
SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'
SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'
SELECT DISTINCT T1.link_to_event FROM attendance AS T1 JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.member_id IN ( SELECT DISTINCT T3.link_to_member FROM expense AS T3 WHERE T3.cost > 50 )
SELECT T1.`member_id`, T1.`first_name`, T1.`last_name`, T2.`link_to_event` FROM member AS T1 INNER JOIN expense AS T3 ON T1.`member_id` = T3.`link_to_member` INNER JOIN attendance AS T2 ON T1.`member_id` = T2.`link_to_member` WHERE T3.`approved` = 'true' AND T3.`expense_date` BETWEEN '2019-01-10' AND '2019-11-19'
SELECT T2.`college` FROM member AS T1 INNER JOIN major AS T2 ON T1.`link_to_major` = T2.`major_id` WHERE T1.`first_name` = 'Katy' AND T1.`link_to_major` = 'rec1N0upiVLy5esTO'
SELECT T1.phone FROM member AS T1 WHERE T1.link_to_major = ( SELECT major_id FROM major WHERE major_name = 'Business' AND college = 'College of Agriculture and Applied Sciences' )
SELECT T2.`email` FROM expense AS T1 INNER JOIN member AS T2 ON T1.`link_to_member` = T2.`member_id` WHERE T1.`expense_date` BETWEEN '2019-09-10' AND '2019-11-19' AND T1.`cost` > 20
SELECT COUNT(*) FROM member AS T1 WHERE T1.`link_to_major` = ( SELECT `major_id` FROM major WHERE `major_name` = 'education' AND `college` = 'College of Education & Human Services' )
SELECT (CAST(SUM(CASE WHEN b.remaining < 0 THEN 1 ELSE 0 END) AS REAL) / COUNT(e.event_id)) * 100 AS percentage_over_budget FROM budget AS b JOIN event AS e ON b.link_to_event = e.event_id
SELECT `event_id`, `location`, `status` FROM event WHERE `event_date` BETWEEN '2019-11-01' AND '2020-03-31' AND `location` IS NOT NULL
SELECT expense_description, SUM(cost) AS total_cost, COUNT(expense_id) AS expense_count FROM expense GROUP BY expense_description HAVING (SUM(cost) / COUNT(expense_id)) > 50
SELECT `first_name`, `last_name` FROM member WHERE `t_shirt_size` = 'X-Large'
SELECT (CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) / COUNT(zip_code)) * 100 AS percentage_po_boxes FROM zip_code
SELECT T1.`event_name`, T1.`location` FROM event AS T1 INNER JOIN budget AS T2 ON T1.`event_id` = T2.`link_to_event` WHERE T2.`remaining` > 0
SELECT E.event_name, E.event_date FROM event AS E JOIN budget AS B ON E.event_id = B.link_to_event JOIN expense AS Ex ON B.budget_id = Ex.link_to_budget WHERE Ex.expense_description = 'Pizza' AND Ex.cost > 50 AND Ex.cost < 100
SELECT T2.`first_name`, T2.`last_name`, T3.`major_name` FROM member AS T2 INNER JOIN major AS T3 ON T2.`link_to_major` = T3.`major_id` WHERE T2.`member_id` IN ( SELECT T1.`link_to_member` FROM expense AS T1 WHERE T1.`cost` > 100 )
SELECT DISTINCT Z.city, Z.county FROM event AS E INNER JOIN attendance AS A ON E.event_id = A.link_to_event INNER JOIN member AS M ON A.link_to_member = M.member_id INNER JOIN zip_code AS Z ON M.zip = Z.zip_code INNER JOIN income AS I ON A.link_to_member = I.link_to_member GROUP BY E.event_id, Z.city, Z.county HAVING COUNT(I.income_id) > 40;
SELECT T2.`first_name`, T2.`last_name`, T1.`cost` FROM expense AS T1 INNER JOIN member AS T2 ON T1.`link_to_member` = T2.`member_id` WHERE T1.`cost` = ( SELECT MAX(T1.`cost`) FROM expense AS T1 WHERE T1.`link_to_member` IN ( SELECT T1.`link_to_member` FROM expense AS T1 GROUP BY T1.`link_to_member` HAVING COUNT(DISTINCT T1.`link_to_budget`) > 1 ) )
SELECT SUM(T4.cost) / COUNT(T4.expense_id) AS average_amount FROM member AS T1 INNER JOIN expense AS T4 ON T1.member_id = T4.link_to_member WHERE T1.position != 'Member'
SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.cost < ( SELECT AVG(T4.cost) FROM expense AS T4 INNER JOIN budget AS T5 ON T4.link_to_budget = T5.budget_id WHERE T5.category = 'Parking' AND T4.cost IS NOT NULL ) AND T3.cost IS NOT NULL
SELECT (SUM(T3.`cost`) * 100.0 / COUNT(T1.`event_id`)) AS percentage_cost FROM event AS T1 INNER JOIN attendance AS T2 ON T1.`event_id` = T2.`link_to_event` INNER JOIN expense AS T3 ON T2.`link_to_member` = T3.`link_to_member` WHERE T1.`type` = 'Game'
SELECT T2.`budget_id` FROM expense AS T1 INNER JOIN budget AS T2 ON T1.`link_to_budget` = T2.`budget_id` WHERE T1.`expense_description` = 'Water, chips, cookies' AND T1.`cost` = ( SELECT MAX(`cost`) FROM expense WHERE `expense_description` = 'Water, chips, cookies' )
SELECT T3.`first_name`, T3.`last_name` FROM ( SELECT T2.`link_to_member`, SUM(T2.`cost`) AS total_spent FROM expense AS T2 GROUP BY T2.`link_to_member` ) AS T1 INNER JOIN member AS T3 ON T1.`link_to_member` = T3.`member_id` ORDER BY T1.total_spent DESC LIMIT 5
SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > (SELECT AVG(cost) FROM expense)
SELECT (SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM member WHERE position = 'Member')) FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maine') - (SELECT (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM member WHERE position = 'Member')) FROM member AS T1 JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Vermont') AS difference_percentage
SELECT T2.`major_name`, T2.`department` FROM member AS T1 INNER JOIN major AS T2 ON T1.`link_to_major` = T2.`major_id` WHERE T1.`first_name` = 'Garrett' AND T1.`last_name` = 'Gerke'
SELECT T1.first_name, T1.last_name, T2.cost FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Water, Veggie tray, supplies'
SELECT T1.`last_name`, T1.`phone` FROM member AS T1 WHERE T1.`link_to_major` = ( SELECT `major_id` FROM major WHERE `major_name` = 'Elementary Education' )
SELECT `category`, `amount` FROM budget WHERE `link_to_event` = ( SELECT `event_id` FROM event WHERE `event_name` = 'January Speaker' )
SELECT T1.`event_name` FROM event AS T1 WHERE T1.`event_id` IN ( SELECT `link_to_event` FROM budget WHERE `category` = 'Food' )
SELECT T2.`first_name`, T2.`last_name`, T1.`amount` FROM income AS T1 INNER JOIN member AS T2 ON T1.`link_to_member` = T2.`member_id` WHERE T1.`date_received` = '2019-09-09'
SELECT `category` FROM budget WHERE `budget_id` = ( SELECT `link_to_budget` FROM expense WHERE `expense_description` = 'Posters' )
SELECT T1.`first_name`, T1.`last_name`, T2.`college` FROM member AS T1 INNER JOIN major AS T2 ON T1.`link_to_major` = T2.`major_id` WHERE T1.`position` = 'Secretary'
SELECT T2.`event_name` FROM budget AS T1 INNER JOIN event AS T2 ON T1.`link_to_event` = T2.`event_id` WHERE T1.`category` = 'Speaker Gifts'
SELECT DISTINCT z.city FROM member m JOIN zip_code z ON m.zip = z.zip_code WHERE m.first_name = 'Garrett' AND m.last_name = 'Girk' AND m.zip IS NOT NULL
SELECT T1.`first_name`, T1.`last_name`, T1.`position` FROM member AS T1 WHERE T1.`member_id` IN ( SELECT T1.`member_id` FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.`zip` = T2.`zip_code` WHERE T2.`city` = 'Lincolnton' AND T2.`state` = 'North Carolina' AND T2.`zip_code` = '28092' )
SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'
SELECT SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END), 0) AS EUR_to_CZK_Ratio FROM customers
SELECT `CustomerID` FROM ( SELECT `CustomerID`, SUM(`Consumption`) AS total_consumption FROM yearmonth WHERE `CustomerID` IN ( SELECT `CustomerID` FROM customers WHERE `Segment` = 'LAM' ) AND `Date` BETWEEN '201201' AND '201212' GROUP BY `CustomerID` ) AS consumption_data ORDER BY total_consumption ASC LIMIT 1
SELECT AVG(y.`Consumption`) / 12 AS AverageMonthlyConsumption FROM yearmonth y JOIN customers c ON y.CustomerID = c.CustomerID WHERE c.Segment = 'SME' AND y.Date BETWEEN '2013-01-01' AND '2013-12-31' AND y.Consumption IS NOT NULL
SELECT T1.CustomerID FROM ( SELECT T1.CustomerID, SUM(T1.Consumption) AS TotalConsumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' AND T1.Date BETWEEN '2011-01-01' AND '2011-12-31' GROUP BY T1.CustomerID ) AS T1 WHERE T1.TotalConsumption = ( SELECT MAX(TotalConsumption) FROM ( SELECT SUM(T1.Consumption) AS TotalConsumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' AND T1.Date BETWEEN '2011-01-01' AND '2011-12-31' GROUP BY T1.CustomerID ) AS T2 );
SELECT COUNT(DISTINCT T1.`CustomerID`) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Segment` = 'KAM' AND T2.`Consumption` < 30000 AND T2.`Date` BETWEEN '2012-01-01' AND '2012-12-31'
SELECT (SELECT SUM(Y.`Consumption`) FROM yearmonth AS Y INNER JOIN customers AS C ON Y.`CustomerID` = C.`CustomerID` WHERE C.`Currency` = 'CZK' AND Y.`Date` BETWEEN '201201' AND '201212') - (SELECT SUM(Y.`Consumption`) FROM yearmonth AS Y INNER JOIN customers AS C ON Y.`CustomerID` = C.`CustomerID` WHERE C.`Currency` = 'EUR' AND Y.`Date` BETWEEN '201201' AND '201212') AS Consumption_Difference
SELECT Year FROM ( SELECT strftime('%Y', T1.`Date`) AS Year, SUM(T1.`Amount`) AS TotalGasUse FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T2.`Currency` = 'EUR' GROUP BY Year ) ORDER BY TotalGasUse DESC LIMIT 1
SELECT C.`Segment` FROM customers AS C INNER JOIN yearmonth AS Y ON C.`CustomerID` = Y.`CustomerID` GROUP BY C.`Segment` ORDER BY SUM(Y.`Consumption`) ASC LIMIT 1
SELECT Year FROM ( SELECT SUBSTR(T1.Date, 1, 4) AS Year, SUM(T1.Consumption) AS TotalConsumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' GROUP BY Year ) AS YearlyConsumption ORDER BY TotalConsumption DESC LIMIT 1
SELECT `Month` FROM ( SELECT strftime('%Y-%m', T2.`Date`) AS `Month`, SUM(T2.`Consumption`) AS `TotalConsumption` FROM yearmonth AS T2 INNER JOIN customers AS T1 ON T2.`CustomerID` = T1.`CustomerID` WHERE T1.`Segment` = 'SME' AND T2.`Date` LIKE '2013%' GROUP BY `Month` ) AS MonthlyConsumption ORDER BY `TotalConsumption` DESC LIMIT 1
WITH SME AS ( SELECT AVG(COALESCE(T1.Consumption, 0)) AS Avg_Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND T1.Date BETWEEN '201301' AND '201312' GROUP BY T2.CustomerID ORDER BY AVG(COALESCE(T1.Consumption, 0)) ASC LIMIT 1 ), LAM AS ( SELECT AVG(COALESCE(T1.Consumption, 0)) AS Avg_Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM' AND T1.Date BETWEEN '201301' AND '201312' GROUP BY T2.CustomerID ORDER BY AVG(COALESCE(T1.Consumption, 0)) ASC LIMIT 1 ), KAM AS ( SELECT AVG(COALESCE(T1.Consumption, 0)) AS Avg_Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'KAM' AND T1.Date BETWEEN '201301' AND '201312' GROUP BY T2.CustomerID ORDER BY AVG(COALESCE(T1.Consumption, 0)) ASC LIMIT 1 ) SELECT (SELECT Avg_Consumption FROM SME) - (SELECT Avg_Consumption FROM LAM) AS SME_LAM_Difference, (SELECT Avg_Consumption FROM LAM) - (SELECT Avg_Consumption FROM KAM) AS LAM_KAM_Difference, (SELECT Avg_Consumption FROM KAM) - (SELECT Avg_Consumption FROM SME) AS KAM_SME_Difference
WITH ConsumptionData AS ( SELECT C.Segment, SUM(Y.Consumption) AS TotalConsumption, STRFTIME('%Y', Y.Date) AS Year FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE Y.Date BETWEEN '2012-01-01' AND '2013-12-31' AND C.Currency = 'EUR' AND Y.Consumption IS NOT NULL GROUP BY C.Segment, Year ), PercentageData AS ( SELECT Segment, ((SUM(CASE WHEN Year = '2013' THEN TotalConsumption ELSE 0 END) - SUM(CASE WHEN Year = '2012' THEN TotalConsumption ELSE 0 END)) / NULLIF(SUM(CASE WHEN Year = '2013' THEN TotalConsumption ELSE 0 END), 0)) * 100 AS PercentageIncrease FROM ConsumptionData GROUP BY Segment ) SELECT Segment, PercentageIncrease FROM PercentageData WHERE PercentageIncrease IS NOT NULL ORDER BY PercentageIncrease DESC LIMIT 1
SELECT SUM(`Consumption`) AS TotalConsumption FROM yearmonth WHERE `CustomerID` = 6 AND `Date` BETWEEN '2013-08-01' AND '2013-11-30' AND `Consumption` IS NOT NULL
SELECT (SELECT COUNT(*) FROM gasstations WHERE Segment = 'Discount' AND Country = 'CZE') - (SELECT COUNT(*) FROM gasstations WHERE Segment = 'Discount' AND Country = 'SVK') AS difference_discount_stations
SELECT (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') - (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304') AS ConsumptionDifference
SELECT CASE WHEN (SELECT COUNT(DISTINCT T1.`CustomerID`) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Segment` = 'SME' AND T1.`Currency` = 'CZK') > (SELECT COUNT(DISTINCT T1.`CustomerID`) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Segment` = 'SME' AND T1.`Currency` = 'EUR') THEN 'True' ELSE 'False' END AS IsMoreCZK, (SELECT COUNT(DISTINCT T1.`CustomerID`) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Segment` = 'SME' AND T1.`Currency` = 'CZK') - (SELECT COUNT(DISTINCT T1.`CustomerID`) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Segment` = 'SME' AND T1.`Currency` = 'EUR') AS Difference
SELECT T1.CustomerID FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'EUR' AND strftime('%Y%m', T2.Date) = '201310' AND T2.Consumption = ( SELECT MAX(T3.Consumption) FROM yearmonth AS T3 JOIN customers AS T4 ON T3.CustomerID = T4.CustomerID WHERE T4.Segment = 'LAM' AND T4.Currency = 'EUR' AND strftime('%Y%m', T3.Date) = '201310' )
SELECT T1.`CustomerID`, SUM(T2.`Consumption`) AS TotalConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Segment` = 'KAM' GROUP BY T1.`CustomerID` ORDER BY TotalConsumption DESC LIMIT 1
SELECT SUM(`Consumption`) FROM yearmonth WHERE `CustomerID` IN ( SELECT `CustomerID` FROM customers WHERE `Segment` = 'KAM' ) AND `Date` = 201305
SELECT (CAST(SUM(CASE WHEN T2.`Consumption` > 46.73 THEN 1 ELSE 0 END) AS REAL) / NULLIF(COUNT(DISTINCT T1.`CustomerID`), 0)) * 100 AS percentage FROM customers AS T1 LEFT JOIN yearmonth AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Segment` = 'LAM'
SELECT `Country`, COUNT(*) AS `TotalValueForMoney` FROM gasstations WHERE `Segment` = 'Value for money' GROUP BY `Country` ORDER BY `TotalValueForMoney` DESC LIMIT 1
SELECT (CAST(COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) AS REAL) / COUNT(*)) * 100 AS percentage_kam_euro FROM customers WHERE Segment = 'KAM'
SELECT (CAST(COUNT(DISTINCT CASE WHEN `Consumption` > 528.3 THEN `CustomerID` END) AS REAL) / COUNT(DISTINCT `CustomerID`)) * 100 AS percentage FROM yearmonth WHERE `Date` LIKE '201202%'
SELECT (CAST(COUNT(CASE WHEN Segment = 'Premium' THEN 1 END) AS REAL) / COUNT(*)) * 100 AS premium_percentage FROM gasstations WHERE Country = 'SVK'
SELECT CustomerID FROM ( SELECT CustomerID, SUM(Consumption) AS TotalConsumption FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ) ORDER BY TotalConsumption DESC LIMIT 1
SELECT C.Segment FROM yearmonth AS Y INNER JOIN customers AS C ON Y.CustomerID = C.CustomerID WHERE Y.Date = '201309' GROUP BY C.Segment ORDER BY SUM(Y.Consumption) ASC LIMIT 1
SELECT T1.`CustomerID` FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Segment` = 'SME' AND T2.`Date` = '201206' ORDER BY T2.`Consumption` ASC LIMIT 1
SELECT MAX(Consumption) FROM yearmonth WHERE strftime('%Y', Date) = '2012' AND Consumption IS NOT NULL
SELECT MAX(MonthlyConsumption) AS BiggestMonthlyConsumption FROM ( SELECT SUM(T2.`Consumption`) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Currency` = 'EUR' GROUP BY T1.`CustomerID` ) AS MonthlyConsumptions
SELECT DISTINCT T3.Description FROM products AS T3 JOIN transactions_1k AS T1 ON T3.ProductID = T1.ProductID WHERE T1.Date BETWEEN '2013-09-01' AND '2013-09-30'
SELECT COUNT(*) FROM transactions_1k WHERE Date BETWEEN '2013-06-01' AND '2013-06-30'
SELECT DISTINCT T2.`ChainID` FROM gasstations AS T2 WHERE T2.`GasStationID` IN ( SELECT DISTINCT T1.`GasStationID` FROM transactions_1k AS T1 WHERE T1.`CustomerID` IN ( SELECT DISTINCT T3.`CustomerID` FROM transactions_1k AS T3 INNER JOIN customers AS T4 ON T3.`CustomerID` = T4.`CustomerID` WHERE T4.`Currency` = 'EUR' ) )
SELECT T3.`Description` FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` INNER JOIN products AS T3 ON T1.`ProductID` = T3.`ProductID` WHERE T2.`Currency` = 'EUR'
SELECT AVG(Price) AS average_price FROM transactions_1k WHERE Date LIKE '2012-01%' AND Price IS NOT NULL
SELECT COUNT(DISTINCT T1.`CustomerID`) AS CustomerCount FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Currency` = 'EUR' AND T2.`Consumption` > 1000
SELECT DISTINCT T3.`Description` FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.`GasStationID` = T2.`GasStationID` INNER JOIN products AS T3 ON T1.`ProductID` = T3.`ProductID` WHERE T2.`Country` = 'CZE'
SELECT DISTINCT `Time` FROM transactions_1k WHERE `GasStationID` IN ( SELECT `GasStationID` FROM gasstations WHERE `ChainID` = 11 )
SELECT COUNT(*) FROM transactions_1k WHERE `GasStationID` IN ( SELECT `GasStationID` FROM gasstations WHERE `Country` = 'CZE' ) AND `Price` > 1000
SELECT COUNT(*) FROM transactions_1k WHERE `GasStationID` IN ( SELECT `GasStationID` FROM gasstations WHERE `Country` = 'CZE' ) AND `Date` > '2012-01-01'
SELECT AVG(T1.`Price`) AS average_price FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.`GasStationID` = T2.`GasStationID` WHERE T2.`Country` = 'CZE'
SELECT SUM(`Price`) / COUNT(*) AS average_total_price FROM transactions_1k WHERE `CustomerID` IN ( SELECT `CustomerID` FROM customers WHERE `Currency` = 'EUR' )
SELECT `CustomerID` FROM ( SELECT `CustomerID`, SUM(`Price`) AS total_payment FROM transactions_1k WHERE `Date` = '2012-08-25' GROUP BY `CustomerID` ORDER BY total_payment DESC LIMIT 1 ) AS max_payment
SELECT `Country` FROM gasstations WHERE `GasStationID` = ( SELECT `GasStationID` FROM transactions_1k WHERE `Date` = '2012-08-25' AND `TransactionID` = ( SELECT MIN(`TransactionID`) FROM transactions_1k WHERE `Date` = '2012-08-25' ) )
SELECT T1.`Currency` FROM customers AS T1 WHERE T1.`CustomerID` = ( SELECT `CustomerID` FROM transactions_1k WHERE `Date` = '2012-08-24' AND `Time` = '16:25:00' )
SELECT T2.`Segment` FROM customers AS T2 WHERE T2.`CustomerID` = ( SELECT T1.`CustomerID` FROM transactions_1k AS T1 WHERE T1.`Date` = '2012-08-23' AND T1.`Time` = '21:20:00' )
SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Date` = '2012-08-26' AND T1.`Time` < '13:00:00' AND T2.`Currency` = 'EUR'
SELECT T2.`Segment` FROM customers AS T2 WHERE T2.`CustomerID` = ( SELECT T1.`CustomerID` FROM transactions_1k AS T1 ORDER BY T1.`Date` ASC LIMIT 1 )
SELECT T2.`Country` FROM gasstations AS T2 WHERE T2.`GasStationID` = ( SELECT T1.`GasStationID` FROM transactions_1k AS T1 WHERE T1.`Date` = '2012-08-24' AND T1.`Time` = '12:42:00' )
SELECT T1.`ProductID` FROM transactions_1k AS T1 WHERE T1.`Date` = '2012-08-23' AND T1.`Time` = '21:20:00'
SELECT T1.`Date`, SUM(T1.`Price`) AS TotalSpent FROM transactions_1k AS T1 WHERE T1.`CustomerID` = ( SELECT T2.`CustomerID` FROM transactions_1k AS T2 WHERE T2.`Price` = 124.05 AND T2.`Date` = '2012-08-24' ) AND T1.`Date` >= '2012-01-01' AND T1.`Date` < '2012-02-01' GROUP BY T1.`Date`
SELECT COUNT(T1.`TransactionID`) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.`GasStationID` = T2.`GasStationID` WHERE T1.`Date` = '2012-08-26' AND T1.`Time` BETWEEN '08:00:00' AND '09:00:00' AND T2.`Country` = 'CZE'
SELECT * FROM customers;
SELECT T2.`Country` FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.`GasStationID` = T2.`GasStationID` WHERE T1.`CustomerID` = ( SELECT `CustomerID` FROM transactions_1k WHERE `CardID` = 667467 LIMIT 1 ) LIMIT 1
SELECT DISTINCT CustomerID FROM transactions_1k WHERE Date = '2012-08-24';
SELECT (COUNT(DISTINCT T1.`CustomerID`) * 100.0 / NULLIF((SELECT COUNT(DISTINCT T1.`CustomerID`) FROM transactions_1k AS T1 WHERE T1.`Date` = '2012-08-25'), 0)) AS percentage FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.`CustomerID` = T2.`CustomerID` WHERE T1.`Date` = '2012-08-25' AND T2.`Currency` = 'EUR'
SELECT (SUM(CASE WHEN strftime('%Y', T2.`Date`) = '2012' THEN T2.`Consumption` ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T2.`Date`) = '2013' THEN T2.`Consumption` ELSE 0 END)) * 1.0 / NULLIF(SUM(CASE WHEN strftime('%Y', T2.`Date`) = '2012' THEN T2.`Consumption` ELSE 0 END), 0) AS consumption_decrease_rate FROM yearmonth AS T2 WHERE T2.`CustomerID` = ( SELECT T1.`CustomerID` FROM transactions_1k AS T1 WHERE T1.`Price` = 634.8 AND T1.`Date` = '2012-08-25' ) AND T2.`Consumption` IS NOT NULL GROUP BY T2.`CustomerID`
SELECT GasStationID FROM ( SELECT GasStationID, SUM(Price) AS TotalRevenue FROM transactions_1k GROUP BY GasStationID ) AS RevenueTable ORDER BY TotalRevenue DESC LIMIT 1
SELECT (CAST(COUNT(DISTINCT g.GasStationID) AS REAL) / NULLIF(COUNT(DISTINCT g_all.GasStationID), 0)) * 100 AS premium_percentage FROM gasstations g JOIN gasstations g_all ON g_all.Country = 'SVK' WHERE g.Country = 'SVK' AND g.Segment = 'Premium' AND g.GasStationID IS NOT NULL AND g_all.GasStationID IS NOT NULL
SELECT 'TotalAmountSpent' AS Description, SUM(T1.Amount) AS Amount FROM transactions_1k AS T1 WHERE T1.CustomerID = '38508' AND T1.Amount IS NOT NULL UNION ALL SELECT 'AmountSpentInJanuary2012' AS Description, SUM(T1.Amount) AS Amount FROM transactions_1k AS T1 WHERE T1.CustomerID = '38508' AND T1.Amount IS NOT NULL AND T1.Date >= '2012-01-01' AND T1.Date < '2012-02-01';
SELECT T3.`Description` FROM ( SELECT T3.`ProductID`, SUM(T1.`Amount`) AS total_sales FROM transactions_1k AS T1 INNER JOIN products AS T3 ON T1.`ProductID` = T3.`ProductID` GROUP BY T3.`ProductID` ) AS sales_summary INNER JOIN products AS T3 ON sales_summary.`ProductID` = T3.`ProductID` ORDER BY total_sales DESC LIMIT 5
SELECT T3.`Currency` FROM customers AS T3 WHERE T3.`CustomerID` = ( SELECT T2.`CustomerID` FROM transactions_1k AS T2 GROUP BY T2.`CustomerID` ORDER BY SUM(T2.`Price`) DESC LIMIT 1 )
SELECT T2.`Country` FROM gasstations AS T2 WHERE T2.`GasStationID` = ( SELECT T1.`GasStationID` FROM transactions_1k AS T1 WHERE T1.`ProductID` = 2 AND T1.`Price` = ( SELECT MAX(`Price`) FROM transactions_1k WHERE `ProductID` = 2 ) )
SELECT T2.`CustomerID`, T2.`Consumption` FROM yearmonth AS T2 WHERE T2.`CustomerID` IN ( SELECT DISTINCT T1.`CustomerID` FROM transactions_1k AS T1 WHERE T1.`ProductID` = 5 AND (T1.`Price` / T1.`Amount`) > 29.00 ) AND T2.`Date` LIKE '201208%'
